# 1 "11_MySimpleSGEMM_v25.cu"
#pragma GCC diagnostic ignored "-Wunused-local-typedefs"
# 1
#pragma GCC diagnostic push
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"
# 1
#pragma GCC diagnostic ignored "-Wunused-function"
# 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
# 1
#pragma GCC diagnostic pop
# 1
#pragma GCC diagnostic ignored "-Wunused-variable"

# 1
#define __nv_is_extended_device_lambda_closure_type(X) false
#define __nv_is_extended_host_device_lambda_closure_type(X) false
#if defined(__nv_is_extended_device_lambda_closure_type) && defined(__nv_is_extended_host_device_lambda_closure_type)
#endif

# 1
# 61 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic push
# 64
#pragma GCC diagnostic ignored "-Wunused-function"
# 68 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_types.h"
#if 0
# 68
enum cudaRoundMode { 
# 70
cudaRoundNearest, 
# 71
cudaRoundZero, 
# 72
cudaRoundPosInf, 
# 73
cudaRoundMinInf
# 74
}; 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 100
struct char1 { 
# 102
signed char x; 
# 103
}; 
#endif
# 105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 105
struct uchar1 { 
# 107
unsigned char x; 
# 108
}; 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 111
struct __attribute((aligned(2))) char2 { 
# 113
signed char x, y; 
# 114
}; 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 116
struct __attribute((aligned(2))) uchar2 { 
# 118
unsigned char x, y; 
# 119
}; 
#endif
# 121 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 121
struct char3 { 
# 123
signed char x, y, z; 
# 124
}; 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 126
struct uchar3 { 
# 128
unsigned char x, y, z; 
# 129
}; 
#endif
# 131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 131
struct __attribute((aligned(4))) char4 { 
# 133
signed char x, y, z, w; 
# 134
}; 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 136
struct __attribute((aligned(4))) uchar4 { 
# 138
unsigned char x, y, z, w; 
# 139
}; 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 141
struct short1 { 
# 143
short x; 
# 144
}; 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 146
struct ushort1 { 
# 148
unsigned short x; 
# 149
}; 
#endif
# 151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 151
struct __attribute((aligned(4))) short2 { 
# 153
short x, y; 
# 154
}; 
#endif
# 156 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 156
struct __attribute((aligned(4))) ushort2 { 
# 158
unsigned short x, y; 
# 159
}; 
#endif
# 161 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 161
struct short3 { 
# 163
short x, y, z; 
# 164
}; 
#endif
# 166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 166
struct ushort3 { 
# 168
unsigned short x, y, z; 
# 169
}; 
#endif
# 171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 171
struct __attribute((aligned(8))) short4 { short x; short y; short z; short w; }; 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 172
struct __attribute((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
# 174 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 174
struct int1 { 
# 176
int x; 
# 177
}; 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 179
struct uint1 { 
# 181
unsigned x; 
# 182
}; 
#endif
# 184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 184
struct __attribute((aligned(8))) int2 { int x; int y; }; 
#endif
# 185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 185
struct __attribute((aligned(8))) uint2 { unsigned x; unsigned y; }; 
#endif
# 187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 187
struct int3 { 
# 189
int x, y, z; 
# 190
}; 
#endif
# 192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 192
struct uint3 { 
# 194
unsigned x, y, z; 
# 195
}; 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 197
struct __attribute((aligned(16))) int4 { 
# 199
int x, y, z, w; 
# 200
}; 
#endif
# 202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 202
struct __attribute((aligned(16))) uint4 { 
# 204
unsigned x, y, z, w; 
# 205
}; 
#endif
# 207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 207
struct long1 { 
# 209
long x; 
# 210
}; 
#endif
# 212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 212
struct ulong1 { 
# 214
unsigned long x; 
# 215
}; 
#endif
# 222 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 222
struct __attribute((aligned((2) * sizeof(long)))) long2 { 
# 224
long x, y; 
# 225
}; 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 227
struct __attribute((aligned((2) * sizeof(unsigned long)))) ulong2 { 
# 229
unsigned long x, y; 
# 230
}; 
#endif
# 234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 234
struct long3 { 
# 236
long x, y, z; 
# 237
}; 
#endif
# 239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 239
struct ulong3 { 
# 241
unsigned long x, y, z; 
# 242
}; 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 244
struct __attribute((aligned(16))) long4 { 
# 246
long x, y, z, w; 
# 247
}; 
#endif
# 249 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 249
struct __attribute((aligned(16))) ulong4 { 
# 251
unsigned long x, y, z, w; 
# 252
}; 
#endif
# 254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 254
struct float1 { 
# 256
float x; 
# 257
}; 
#endif
# 276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 276
struct __attribute((aligned(8))) float2 { float x; float y; }; 
#endif
# 281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 281
struct float3 { 
# 283
float x, y, z; 
# 284
}; 
#endif
# 286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 286
struct __attribute((aligned(16))) float4 { 
# 288
float x, y, z, w; 
# 289
}; 
#endif
# 291 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 291
struct longlong1 { 
# 293
long long x; 
# 294
}; 
#endif
# 296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 296
struct ulonglong1 { 
# 298
unsigned long long x; 
# 299
}; 
#endif
# 301 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 301
struct __attribute((aligned(16))) longlong2 { 
# 303
long long x, y; 
# 304
}; 
#endif
# 306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 306
struct __attribute((aligned(16))) ulonglong2 { 
# 308
unsigned long long x, y; 
# 309
}; 
#endif
# 311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 311
struct longlong3 { 
# 313
long long x, y, z; 
# 314
}; 
#endif
# 316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 316
struct ulonglong3 { 
# 318
unsigned long long x, y, z; 
# 319
}; 
#endif
# 321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 321
struct __attribute((aligned(16))) longlong4 { 
# 323
long long x, y, z, w; 
# 324
}; 
#endif
# 326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 326
struct __attribute((aligned(16))) ulonglong4 { 
# 328
unsigned long long x, y, z, w; 
# 329
}; 
#endif
# 331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 331
struct double1 { 
# 333
double x; 
# 334
}; 
#endif
# 336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 336
struct __attribute((aligned(16))) double2 { 
# 338
double x, y; 
# 339
}; 
#endif
# 341 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 341
struct double3 { 
# 343
double x, y, z; 
# 344
}; 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 346
struct __attribute((aligned(16))) double4 { 
# 348
double x, y, z, w; 
# 349
}; 
#endif
# 363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char1 
# 363
char1; 
#endif
# 364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar1 
# 364
uchar1; 
#endif
# 365 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char2 
# 365
char2; 
#endif
# 366 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar2 
# 366
uchar2; 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char3 
# 367
char3; 
#endif
# 368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar3 
# 368
uchar3; 
#endif
# 369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef char4 
# 369
char4; 
#endif
# 370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uchar4 
# 370
uchar4; 
#endif
# 371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short1 
# 371
short1; 
#endif
# 372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort1 
# 372
ushort1; 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short2 
# 373
short2; 
#endif
# 374 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort2 
# 374
ushort2; 
#endif
# 375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short3 
# 375
short3; 
#endif
# 376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort3 
# 376
ushort3; 
#endif
# 377 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef short4 
# 377
short4; 
#endif
# 378 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ushort4 
# 378
ushort4; 
#endif
# 379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int1 
# 379
int1; 
#endif
# 380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint1 
# 380
uint1; 
#endif
# 381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int2 
# 381
int2; 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint2 
# 382
uint2; 
#endif
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int3 
# 383
int3; 
#endif
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint3 
# 384
uint3; 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef int4 
# 385
int4; 
#endif
# 386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef uint4 
# 386
uint4; 
#endif
# 387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long1 
# 387
long1; 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong1 
# 388
ulong1; 
#endif
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long2 
# 389
long2; 
#endif
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong2 
# 390
ulong2; 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long3 
# 391
long3; 
#endif
# 392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong3 
# 392
ulong3; 
#endif
# 393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef long4 
# 393
long4; 
#endif
# 394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulong4 
# 394
ulong4; 
#endif
# 395 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float1 
# 395
float1; 
#endif
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float2 
# 396
float2; 
#endif
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float3 
# 397
float3; 
#endif
# 398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef float4 
# 398
float4; 
#endif
# 399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong1 
# 399
longlong1; 
#endif
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong1 
# 400
ulonglong1; 
#endif
# 401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong2 
# 401
longlong2; 
#endif
# 402 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong2 
# 402
ulonglong2; 
#endif
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong3 
# 403
longlong3; 
#endif
# 404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong3 
# 404
ulonglong3; 
#endif
# 405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef longlong4 
# 405
longlong4; 
#endif
# 406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef ulonglong4 
# 406
ulonglong4; 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double1 
# 407
double1; 
#endif
# 408 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double2 
# 408
double2; 
#endif
# 409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double3 
# 409
double3; 
#endif
# 410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef double4 
# 410
double4; 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
# 418
struct dim3 { 
# 420
unsigned x, y, z; 
# 432
}; 
#endif
# 434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_types.h"
#if 0
typedef dim3 
# 434
dim3; 
#endif
# 23 "/usr/include/x86_64-linux-gnu/bits/pthread_stack_min-dynamic.h" 3
extern "C" {
# 24
extern long __sysconf(int __name) noexcept(true); 
# 25
}
# 143 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
typedef long ptrdiff_t; 
# 209 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
typedef unsigned long size_t; 
#if !defined(__CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__)
#define __CUDA_INCLUDE_COMPILER_INTERNAL_HEADERS__
#endif
#include "crt/host_runtime.h"
# 426 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
typedef 
# 415 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
struct { 
# 416
long long __max_align_ll __attribute((__aligned__(__alignof__(long long)))); 
# 417
long double __max_align_ld __attribute((__aligned__(__alignof__(long double)))); 
# 426 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stddef.h" 3
} max_align_t; 
# 433
typedef __decltype((nullptr)) nullptr_t; 
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 203
enum cudaError { 
# 210
cudaSuccess, 
# 216
cudaErrorInvalidValue, 
# 222
cudaErrorMemoryAllocation, 
# 228
cudaErrorInitializationError, 
# 235
cudaErrorCudartUnloading, 
# 242
cudaErrorProfilerDisabled, 
# 250
cudaErrorProfilerNotInitialized, 
# 257
cudaErrorProfilerAlreadyStarted, 
# 264
cudaErrorProfilerAlreadyStopped, 
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorInvalidConfiguration, 
# 279
cudaErrorInvalidPitchValue = 12, 
# 285
cudaErrorInvalidSymbol, 
# 293
cudaErrorInvalidHostPointer = 16, 
# 301
cudaErrorInvalidDevicePointer, 
# 307
cudaErrorInvalidTexture, 
# 313
cudaErrorInvalidTextureBinding, 
# 320
cudaErrorInvalidChannelDescriptor, 
# 326
cudaErrorInvalidMemcpyDirection, 
# 336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorAddressOfConstant, 
# 345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorTextureFetchFailed, 
# 354 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorTextureNotBound, 
# 363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSynchronizationError, 
# 369
cudaErrorInvalidFilterSetting, 
# 375
cudaErrorInvalidNormSetting, 
# 383
cudaErrorMixedDeviceExecution, 
# 391
cudaErrorNotYetImplemented = 31, 
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorMemoryValueTooLarge, 
# 407
cudaErrorStubLibrary = 34, 
# 414
cudaErrorInsufficientDriver, 
# 421
cudaErrorCallRequiresNewerDriver, 
# 427
cudaErrorInvalidSurface, 
# 433
cudaErrorDuplicateVariableName = 43, 
# 439
cudaErrorDuplicateTextureName, 
# 445
cudaErrorDuplicateSurfaceName, 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorDevicesUnavailable, 
# 468 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorIncompatibleDriverContext = 49, 
# 474
cudaErrorMissingConfiguration = 52, 
# 483 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorPriorLaunchFailure, 
# 490
cudaErrorLaunchMaxDepthExceeded = 65, 
# 498
cudaErrorLaunchFileScopedTex, 
# 506
cudaErrorLaunchFileScopedSurf, 
# 522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSyncDepthExceeded, 
# 534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchPendingCountExceeded, 
# 540
cudaErrorInvalidDeviceFunction = 98, 
# 546
cudaErrorNoDevice = 100, 
# 553
cudaErrorInvalidDevice, 
# 558
cudaErrorDeviceNotLicensed, 
# 567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSoftwareValidityNotEstablished, 
# 572
cudaErrorStartupFailure = 127, 
# 577
cudaErrorInvalidKernelImage = 200, 
# 587 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorDeviceUninitialized, 
# 592
cudaErrorMapBufferObjectFailed = 205, 
# 597
cudaErrorUnmapBufferObjectFailed, 
# 603
cudaErrorArrayIsMapped, 
# 608
cudaErrorAlreadyMapped, 
# 616
cudaErrorNoKernelImageForDevice, 
# 621
cudaErrorAlreadyAcquired, 
# 626
cudaErrorNotMapped, 
# 632
cudaErrorNotMappedAsArray, 
# 638
cudaErrorNotMappedAsPointer, 
# 644
cudaErrorECCUncorrectable, 
# 650
cudaErrorUnsupportedLimit, 
# 656
cudaErrorDeviceAlreadyInUse, 
# 662
cudaErrorPeerAccessUnsupported, 
# 668
cudaErrorInvalidPtx, 
# 673
cudaErrorInvalidGraphicsContext, 
# 679
cudaErrorNvlinkUncorrectable, 
# 686
cudaErrorJitCompilerNotFound, 
# 693
cudaErrorUnsupportedPtxVersion, 
# 700
cudaErrorJitCompilationDisabled, 
# 705
cudaErrorUnsupportedExecAffinity, 
# 711
cudaErrorUnsupportedDevSideSync, 
# 716
cudaErrorInvalidSource = 300, 
# 721
cudaErrorFileNotFound, 
# 726
cudaErrorSharedObjectSymbolNotFound, 
# 731
cudaErrorSharedObjectInitFailed, 
# 736
cudaErrorOperatingSystem, 
# 743
cudaErrorInvalidResourceHandle = 400, 
# 749
cudaErrorIllegalState, 
# 756
cudaErrorSymbolNotFound = 500, 
# 764
cudaErrorNotReady = 600, 
# 772
cudaErrorIllegalAddress = 700, 
# 781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchOutOfResources, 
# 792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchTimeout, 
# 798
cudaErrorLaunchIncompatibleTexturing, 
# 805
cudaErrorPeerAccessAlreadyEnabled, 
# 812
cudaErrorPeerAccessNotEnabled, 
# 825 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSetOnActiveProcess = 708, 
# 832
cudaErrorContextIsDestroyed, 
# 839
cudaErrorAssert, 
# 846
cudaErrorTooManyPeers, 
# 852
cudaErrorHostMemoryAlreadyRegistered, 
# 858
cudaErrorHostMemoryNotRegistered, 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorHardwareStackError, 
# 875
cudaErrorIllegalInstruction, 
# 884 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorMisalignedAddress, 
# 895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorInvalidAddressSpace, 
# 903
cudaErrorInvalidPc, 
# 914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorLaunchFailure, 
# 923 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorCooperativeLaunchTooLarge, 
# 928
cudaErrorNotPermitted = 800, 
# 934
cudaErrorNotSupported, 
# 943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorSystemNotReady, 
# 950
cudaErrorSystemDriverMismatch, 
# 959 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorCompatNotSupportedOnDevice, 
# 964
cudaErrorMpsConnectionFailed, 
# 969
cudaErrorMpsRpcFailure, 
# 975
cudaErrorMpsServerNotReady, 
# 980
cudaErrorMpsMaxClientsReached, 
# 985
cudaErrorMpsMaxConnectionsReached, 
# 990
cudaErrorMpsClientTerminated, 
# 995
cudaErrorCdpNotSupported, 
# 1000
cudaErrorCdpVersionMismatch, 
# 1005
cudaErrorStreamCaptureUnsupported = 900, 
# 1011
cudaErrorStreamCaptureInvalidated, 
# 1017
cudaErrorStreamCaptureMerge, 
# 1022
cudaErrorStreamCaptureUnmatched, 
# 1028
cudaErrorStreamCaptureUnjoined, 
# 1035
cudaErrorStreamCaptureIsolation, 
# 1041
cudaErrorStreamCaptureImplicit, 
# 1047
cudaErrorCapturedEvent, 
# 1054
cudaErrorStreamCaptureWrongThread, 
# 1059
cudaErrorTimeout, 
# 1065
cudaErrorGraphExecUpdateFailure, 
# 1075 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaErrorExternalDevice, 
# 1081
cudaErrorInvalidClusterSize, 
# 1086
cudaErrorUnknown = 999, 
# 1094
cudaErrorApiFailureBase = 10000
# 1095
}; 
#endif
# 1100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1100
enum cudaChannelFormatKind { 
# 1102
cudaChannelFormatKindSigned, 
# 1103
cudaChannelFormatKindUnsigned, 
# 1104
cudaChannelFormatKindFloat, 
# 1105
cudaChannelFormatKindNone, 
# 1106
cudaChannelFormatKindNV12, 
# 1107
cudaChannelFormatKindUnsignedNormalized8X1, 
# 1108
cudaChannelFormatKindUnsignedNormalized8X2, 
# 1109
cudaChannelFormatKindUnsignedNormalized8X4, 
# 1110
cudaChannelFormatKindUnsignedNormalized16X1, 
# 1111
cudaChannelFormatKindUnsignedNormalized16X2, 
# 1112
cudaChannelFormatKindUnsignedNormalized16X4, 
# 1113
cudaChannelFormatKindSignedNormalized8X1, 
# 1114
cudaChannelFormatKindSignedNormalized8X2, 
# 1115
cudaChannelFormatKindSignedNormalized8X4, 
# 1116
cudaChannelFormatKindSignedNormalized16X1, 
# 1117
cudaChannelFormatKindSignedNormalized16X2, 
# 1118
cudaChannelFormatKindSignedNormalized16X4, 
# 1119
cudaChannelFormatKindUnsignedBlockCompressed1, 
# 1120
cudaChannelFormatKindUnsignedBlockCompressed1SRGB, 
# 1121
cudaChannelFormatKindUnsignedBlockCompressed2, 
# 1122
cudaChannelFormatKindUnsignedBlockCompressed2SRGB, 
# 1123
cudaChannelFormatKindUnsignedBlockCompressed3, 
# 1124
cudaChannelFormatKindUnsignedBlockCompressed3SRGB, 
# 1125
cudaChannelFormatKindUnsignedBlockCompressed4, 
# 1126
cudaChannelFormatKindSignedBlockCompressed4, 
# 1127
cudaChannelFormatKindUnsignedBlockCompressed5, 
# 1128
cudaChannelFormatKindSignedBlockCompressed5, 
# 1129
cudaChannelFormatKindUnsignedBlockCompressed6H, 
# 1130
cudaChannelFormatKindSignedBlockCompressed6H, 
# 1131
cudaChannelFormatKindUnsignedBlockCompressed7, 
# 1132
cudaChannelFormatKindUnsignedBlockCompressed7SRGB
# 1133
}; 
#endif
# 1138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1138
struct cudaChannelFormatDesc { 
# 1140
int x; 
# 1141
int y; 
# 1142
int z; 
# 1143
int w; 
# 1144
cudaChannelFormatKind f; 
# 1145
}; 
#endif
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
typedef struct cudaArray *cudaArray_t; 
# 1155
typedef const cudaArray *cudaArray_const_t; 
# 1157
struct cudaArray; 
# 1162
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
# 1167
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
# 1169
struct cudaMipmappedArray; 
# 1179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1179
struct cudaArraySparseProperties { 
# 1180
struct { 
# 1181
unsigned width; 
# 1182
unsigned height; 
# 1183
unsigned depth; 
# 1184
} tileExtent; 
# 1185
unsigned miptailFirstLevel; 
# 1186
unsigned long long miptailSize; 
# 1187
unsigned flags; 
# 1188
unsigned reserved[4]; 
# 1189
}; 
#endif
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1194
struct cudaArrayMemoryRequirements { 
# 1195
size_t size; 
# 1196
size_t alignment; 
# 1197
unsigned reserved[4]; 
# 1198
}; 
#endif
# 1203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1203
enum cudaMemoryType { 
# 1205
cudaMemoryTypeUnregistered, 
# 1206
cudaMemoryTypeHost, 
# 1207
cudaMemoryTypeDevice, 
# 1208
cudaMemoryTypeManaged
# 1209
}; 
#endif
# 1214 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1214
enum cudaMemcpyKind { 
# 1216
cudaMemcpyHostToHost, 
# 1217
cudaMemcpyHostToDevice, 
# 1218
cudaMemcpyDeviceToHost, 
# 1219
cudaMemcpyDeviceToDevice, 
# 1220
cudaMemcpyDefault
# 1221
}; 
#endif
# 1228 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1228
struct cudaPitchedPtr { 
# 1230
void *ptr; 
# 1231
size_t pitch; 
# 1232
size_t xsize; 
# 1233
size_t ysize; 
# 1234
}; 
#endif
# 1241 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1241
struct cudaExtent { 
# 1243
size_t width; 
# 1244
size_t height; 
# 1245
size_t depth; 
# 1246
}; 
#endif
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1253
struct cudaPos { 
# 1255
size_t x; 
# 1256
size_t y; 
# 1257
size_t z; 
# 1258
}; 
#endif
# 1263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1263
struct cudaMemcpy3DParms { 
# 1265
cudaArray_t srcArray; 
# 1266
cudaPos srcPos; 
# 1267
cudaPitchedPtr srcPtr; 
# 1269
cudaArray_t dstArray; 
# 1270
cudaPos dstPos; 
# 1271
cudaPitchedPtr dstPtr; 
# 1273
cudaExtent extent; 
# 1274
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1275
}; 
#endif
# 1280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1280
struct cudaMemcpy3DPeerParms { 
# 1282
cudaArray_t srcArray; 
# 1283
cudaPos srcPos; 
# 1284
cudaPitchedPtr srcPtr; 
# 1285
int srcDevice; 
# 1287
cudaArray_t dstArray; 
# 1288
cudaPos dstPos; 
# 1289
cudaPitchedPtr dstPtr; 
# 1290
int dstDevice; 
# 1292
cudaExtent extent; 
# 1293
}; 
#endif
# 1298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1298
struct cudaMemsetParams { 
# 1299
void *dst; 
# 1300
size_t pitch; 
# 1301
unsigned value; 
# 1302
unsigned elementSize; 
# 1303
size_t width; 
# 1304
size_t height; 
# 1305
}; 
#endif
# 1310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1310
enum cudaAccessProperty { 
# 1311
cudaAccessPropertyNormal, 
# 1312
cudaAccessPropertyStreaming, 
# 1313
cudaAccessPropertyPersisting
# 1314
}; 
#endif
# 1327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1327
struct cudaAccessPolicyWindow { 
# 1328
void *base_ptr; 
# 1329
size_t num_bytes; 
# 1330
float hitRatio; 
# 1331
cudaAccessProperty hitProp; 
# 1332
cudaAccessProperty missProp; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 1333
}; 
#endif
# 1345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
typedef void (*cudaHostFn_t)(void * userData); 
# 1350
#if 0
# 1350
struct cudaHostNodeParams { 
# 1351
cudaHostFn_t fn; 
# 1352
void *userData; 
# 1353
}; 
#endif
# 1358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1358
enum cudaStreamCaptureStatus { 
# 1359
cudaStreamCaptureStatusNone, 
# 1360
cudaStreamCaptureStatusActive, 
# 1361
cudaStreamCaptureStatusInvalidated
# 1363
}; 
#endif
# 1369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1369
enum cudaStreamCaptureMode { 
# 1370
cudaStreamCaptureModeGlobal, 
# 1371
cudaStreamCaptureModeThreadLocal, 
# 1372
cudaStreamCaptureModeRelaxed
# 1373
}; 
#endif
# 1375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1375
enum cudaSynchronizationPolicy { 
# 1376
cudaSyncPolicyAuto = 1, 
# 1377
cudaSyncPolicySpin, 
# 1378
cudaSyncPolicyYield, 
# 1379
cudaSyncPolicyBlockingSync
# 1380
}; 
#endif
# 1385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1385
enum cudaClusterSchedulingPolicy { 
# 1386
cudaClusterSchedulingPolicyDefault, 
# 1387
cudaClusterSchedulingPolicySpread, 
# 1388
cudaClusterSchedulingPolicyLoadBalancing
# 1389
}; 
#endif
# 1394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1394
enum cudaStreamUpdateCaptureDependenciesFlags { 
# 1395
cudaStreamAddCaptureDependencies, 
# 1396
cudaStreamSetCaptureDependencies
# 1397
}; 
#endif
# 1402 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1402
enum cudaUserObjectFlags { 
# 1403
cudaUserObjectNoDestructorSync = 1
# 1404
}; 
#endif
# 1409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1409
enum cudaUserObjectRetainFlags { 
# 1410
cudaGraphUserObjectMove = 1
# 1411
}; 
#endif
# 1416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct cudaGraphicsResource; 
# 1421
#if 0
# 1421
enum cudaGraphicsRegisterFlags { 
# 1423
cudaGraphicsRegisterFlagsNone, 
# 1424
cudaGraphicsRegisterFlagsReadOnly, 
# 1425
cudaGraphicsRegisterFlagsWriteDiscard, 
# 1426
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
# 1427
cudaGraphicsRegisterFlagsTextureGather = 8
# 1428
}; 
#endif
# 1433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1433
enum cudaGraphicsMapFlags { 
# 1435
cudaGraphicsMapFlagsNone, 
# 1436
cudaGraphicsMapFlagsReadOnly, 
# 1437
cudaGraphicsMapFlagsWriteDiscard
# 1438
}; 
#endif
# 1443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1443
enum cudaGraphicsCubeFace { 
# 1445
cudaGraphicsCubeFacePositiveX, 
# 1446
cudaGraphicsCubeFaceNegativeX, 
# 1447
cudaGraphicsCubeFacePositiveY, 
# 1448
cudaGraphicsCubeFaceNegativeY, 
# 1449
cudaGraphicsCubeFacePositiveZ, 
# 1450
cudaGraphicsCubeFaceNegativeZ
# 1451
}; 
#endif
# 1456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1456
enum cudaResourceType { 
# 1458
cudaResourceTypeArray, 
# 1459
cudaResourceTypeMipmappedArray, 
# 1460
cudaResourceTypeLinear, 
# 1461
cudaResourceTypePitch2D
# 1462
}; 
#endif
# 1467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1467
enum cudaResourceViewFormat { 
# 1469
cudaResViewFormatNone, 
# 1470
cudaResViewFormatUnsignedChar1, 
# 1471
cudaResViewFormatUnsignedChar2, 
# 1472
cudaResViewFormatUnsignedChar4, 
# 1473
cudaResViewFormatSignedChar1, 
# 1474
cudaResViewFormatSignedChar2, 
# 1475
cudaResViewFormatSignedChar4, 
# 1476
cudaResViewFormatUnsignedShort1, 
# 1477
cudaResViewFormatUnsignedShort2, 
# 1478
cudaResViewFormatUnsignedShort4, 
# 1479
cudaResViewFormatSignedShort1, 
# 1480
cudaResViewFormatSignedShort2, 
# 1481
cudaResViewFormatSignedShort4, 
# 1482
cudaResViewFormatUnsignedInt1, 
# 1483
cudaResViewFormatUnsignedInt2, 
# 1484
cudaResViewFormatUnsignedInt4, 
# 1485
cudaResViewFormatSignedInt1, 
# 1486
cudaResViewFormatSignedInt2, 
# 1487
cudaResViewFormatSignedInt4, 
# 1488
cudaResViewFormatHalf1, 
# 1489
cudaResViewFormatHalf2, 
# 1490
cudaResViewFormatHalf4, 
# 1491
cudaResViewFormatFloat1, 
# 1492
cudaResViewFormatFloat2, 
# 1493
cudaResViewFormatFloat4, 
# 1494
cudaResViewFormatUnsignedBlockCompressed1, 
# 1495
cudaResViewFormatUnsignedBlockCompressed2, 
# 1496
cudaResViewFormatUnsignedBlockCompressed3, 
# 1497
cudaResViewFormatUnsignedBlockCompressed4, 
# 1498
cudaResViewFormatSignedBlockCompressed4, 
# 1499
cudaResViewFormatUnsignedBlockCompressed5, 
# 1500
cudaResViewFormatSignedBlockCompressed5, 
# 1501
cudaResViewFormatUnsignedBlockCompressed6H, 
# 1502
cudaResViewFormatSignedBlockCompressed6H, 
# 1503
cudaResViewFormatUnsignedBlockCompressed7
# 1504
}; 
#endif
# 1509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1509
struct cudaResourceDesc { 
# 1510
cudaResourceType resType; 
# 1512
union { 
# 1513
struct { 
# 1514
cudaArray_t array; 
# 1515
} array; 
# 1516
struct { 
# 1517
cudaMipmappedArray_t mipmap; 
# 1518
} mipmap; 
# 1519
struct { 
# 1520
void *devPtr; 
# 1521
cudaChannelFormatDesc desc; 
# 1522
size_t sizeInBytes; 
# 1523
} linear; 
# 1524
struct { 
# 1525
void *devPtr; 
# 1526
cudaChannelFormatDesc desc; 
# 1527
size_t width; 
# 1528
size_t height; 
# 1529
size_t pitchInBytes; 
# 1530
} pitch2D; 
# 1531
} res; 
# 1532
}; 
#endif
# 1537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1537
struct cudaResourceViewDesc { 
# 1539
cudaResourceViewFormat format; 
# 1540
size_t width; 
# 1541
size_t height; 
# 1542
size_t depth; 
# 1543
unsigned firstMipmapLevel; 
# 1544
unsigned lastMipmapLevel; 
# 1545
unsigned firstLayer; 
# 1546
unsigned lastLayer; 
# 1547
}; 
#endif
# 1552 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1552
struct cudaPointerAttributes { 
# 1558
cudaMemoryType type; 
# 1569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int device; 
# 1575
void *devicePointer; 
# 1584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
void *hostPointer; 
# 1585
}; 
#endif
# 1590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1590
struct cudaFuncAttributes { 
# 1597
size_t sharedSizeBytes; 
# 1603
size_t constSizeBytes; 
# 1608
size_t localSizeBytes; 
# 1615
int maxThreadsPerBlock; 
# 1620
int numRegs; 
# 1627
int ptxVersion; 
# 1634
int binaryVersion; 
# 1640
int cacheModeCA; 
# 1647
int maxDynamicSharedSizeBytes; 
# 1656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int preferredShmemCarveout; 
# 1662
int clusterDimMustBeSet; 
# 1673 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int requiredClusterWidth; 
# 1674
int requiredClusterHeight; 
# 1675
int requiredClusterDepth; 
# 1681
int clusterSchedulingPolicyPreference; 
# 1703 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
int nonPortableClusterSizeAllowed; 
# 1708
int reserved[16]; 
# 1709
}; 
#endif
# 1714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1714
enum cudaFuncAttribute { 
# 1716
cudaFuncAttributeMaxDynamicSharedMemorySize = 8, 
# 1717
cudaFuncAttributePreferredSharedMemoryCarveout, 
# 1718
cudaFuncAttributeClusterDimMustBeSet, 
# 1719
cudaFuncAttributeRequiredClusterWidth, 
# 1720
cudaFuncAttributeRequiredClusterHeight, 
# 1721
cudaFuncAttributeRequiredClusterDepth, 
# 1722
cudaFuncAttributeNonPortableClusterSizeAllowed, 
# 1723
cudaFuncAttributeClusterSchedulingPolicyPreference, 
# 1724
cudaFuncAttributeMax
# 1725
}; 
#endif
# 1730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1730
enum cudaFuncCache { 
# 1732
cudaFuncCachePreferNone, 
# 1733
cudaFuncCachePreferShared, 
# 1734
cudaFuncCachePreferL1, 
# 1735
cudaFuncCachePreferEqual
# 1736
}; 
#endif
# 1742 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1742
enum cudaSharedMemConfig { 
# 1744
cudaSharedMemBankSizeDefault, 
# 1745
cudaSharedMemBankSizeFourByte, 
# 1746
cudaSharedMemBankSizeEightByte
# 1747
}; 
#endif
# 1752 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1752
enum cudaSharedCarveout { 
# 1753
cudaSharedmemCarveoutDefault = (-1), 
# 1754
cudaSharedmemCarveoutMaxShared = 100, 
# 1755
cudaSharedmemCarveoutMaxL1 = 0
# 1756
}; 
#endif
# 1761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1761
enum cudaComputeMode { 
# 1763
cudaComputeModeDefault, 
# 1764
cudaComputeModeExclusive, 
# 1765
cudaComputeModeProhibited, 
# 1766
cudaComputeModeExclusiveProcess
# 1767
}; 
#endif
# 1772 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1772
enum cudaLimit { 
# 1774
cudaLimitStackSize, 
# 1775
cudaLimitPrintfFifoSize, 
# 1776
cudaLimitMallocHeapSize, 
# 1777
cudaLimitDevRuntimeSyncDepth, 
# 1778
cudaLimitDevRuntimePendingLaunchCount, 
# 1779
cudaLimitMaxL2FetchGranularity, 
# 1780
cudaLimitPersistingL2CacheSize
# 1781
}; 
#endif
# 1786 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1786
enum cudaMemoryAdvise { 
# 1788
cudaMemAdviseSetReadMostly = 1, 
# 1789
cudaMemAdviseUnsetReadMostly, 
# 1790
cudaMemAdviseSetPreferredLocation, 
# 1791
cudaMemAdviseUnsetPreferredLocation, 
# 1792
cudaMemAdviseSetAccessedBy, 
# 1793
cudaMemAdviseUnsetAccessedBy
# 1794
}; 
#endif
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1799
enum cudaMemRangeAttribute { 
# 1801
cudaMemRangeAttributeReadMostly = 1, 
# 1802
cudaMemRangeAttributePreferredLocation, 
# 1803
cudaMemRangeAttributeAccessedBy, 
# 1804
cudaMemRangeAttributeLastPrefetchLocation
# 1805
}; 
#endif
# 1810 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1810
enum cudaFlushGPUDirectRDMAWritesOptions { 
# 1811
cudaFlushGPUDirectRDMAWritesOptionHost = (1 << 0), 
# 1812
cudaFlushGPUDirectRDMAWritesOptionMemOps
# 1813
}; 
#endif
# 1818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1818
enum cudaGPUDirectRDMAWritesOrdering { 
# 1819
cudaGPUDirectRDMAWritesOrderingNone, 
# 1820
cudaGPUDirectRDMAWritesOrderingOwner = 100, 
# 1821
cudaGPUDirectRDMAWritesOrderingAllDevices = 200
# 1822
}; 
#endif
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1827
enum cudaFlushGPUDirectRDMAWritesScope { 
# 1828
cudaFlushGPUDirectRDMAWritesToOwner = 100, 
# 1829
cudaFlushGPUDirectRDMAWritesToAllDevices = 200
# 1830
}; 
#endif
# 1835 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1835
enum cudaFlushGPUDirectRDMAWritesTarget { 
# 1836
cudaFlushGPUDirectRDMAWritesTargetCurrentDevice
# 1837
}; 
#endif
# 1843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1843
enum cudaDeviceAttr { 
# 1845
cudaDevAttrMaxThreadsPerBlock = 1, 
# 1846
cudaDevAttrMaxBlockDimX, 
# 1847
cudaDevAttrMaxBlockDimY, 
# 1848
cudaDevAttrMaxBlockDimZ, 
# 1849
cudaDevAttrMaxGridDimX, 
# 1850
cudaDevAttrMaxGridDimY, 
# 1851
cudaDevAttrMaxGridDimZ, 
# 1852
cudaDevAttrMaxSharedMemoryPerBlock, 
# 1853
cudaDevAttrTotalConstantMemory, 
# 1854
cudaDevAttrWarpSize, 
# 1855
cudaDevAttrMaxPitch, 
# 1856
cudaDevAttrMaxRegistersPerBlock, 
# 1857
cudaDevAttrClockRate, 
# 1858
cudaDevAttrTextureAlignment, 
# 1859
cudaDevAttrGpuOverlap, 
# 1860
cudaDevAttrMultiProcessorCount, 
# 1861
cudaDevAttrKernelExecTimeout, 
# 1862
cudaDevAttrIntegrated, 
# 1863
cudaDevAttrCanMapHostMemory, 
# 1864
cudaDevAttrComputeMode, 
# 1865
cudaDevAttrMaxTexture1DWidth, 
# 1866
cudaDevAttrMaxTexture2DWidth, 
# 1867
cudaDevAttrMaxTexture2DHeight, 
# 1868
cudaDevAttrMaxTexture3DWidth, 
# 1869
cudaDevAttrMaxTexture3DHeight, 
# 1870
cudaDevAttrMaxTexture3DDepth, 
# 1871
cudaDevAttrMaxTexture2DLayeredWidth, 
# 1872
cudaDevAttrMaxTexture2DLayeredHeight, 
# 1873
cudaDevAttrMaxTexture2DLayeredLayers, 
# 1874
cudaDevAttrSurfaceAlignment, 
# 1875
cudaDevAttrConcurrentKernels, 
# 1876
cudaDevAttrEccEnabled, 
# 1877
cudaDevAttrPciBusId, 
# 1878
cudaDevAttrPciDeviceId, 
# 1879
cudaDevAttrTccDriver, 
# 1880
cudaDevAttrMemoryClockRate, 
# 1881
cudaDevAttrGlobalMemoryBusWidth, 
# 1882
cudaDevAttrL2CacheSize, 
# 1883
cudaDevAttrMaxThreadsPerMultiProcessor, 
# 1884
cudaDevAttrAsyncEngineCount, 
# 1885
cudaDevAttrUnifiedAddressing, 
# 1886
cudaDevAttrMaxTexture1DLayeredWidth, 
# 1887
cudaDevAttrMaxTexture1DLayeredLayers, 
# 1888
cudaDevAttrMaxTexture2DGatherWidth = 45, 
# 1889
cudaDevAttrMaxTexture2DGatherHeight, 
# 1890
cudaDevAttrMaxTexture3DWidthAlt, 
# 1891
cudaDevAttrMaxTexture3DHeightAlt, 
# 1892
cudaDevAttrMaxTexture3DDepthAlt, 
# 1893
cudaDevAttrPciDomainId, 
# 1894
cudaDevAttrTexturePitchAlignment, 
# 1895
cudaDevAttrMaxTextureCubemapWidth, 
# 1896
cudaDevAttrMaxTextureCubemapLayeredWidth, 
# 1897
cudaDevAttrMaxTextureCubemapLayeredLayers, 
# 1898
cudaDevAttrMaxSurface1DWidth, 
# 1899
cudaDevAttrMaxSurface2DWidth, 
# 1900
cudaDevAttrMaxSurface2DHeight, 
# 1901
cudaDevAttrMaxSurface3DWidth, 
# 1902
cudaDevAttrMaxSurface3DHeight, 
# 1903
cudaDevAttrMaxSurface3DDepth, 
# 1904
cudaDevAttrMaxSurface1DLayeredWidth, 
# 1905
cudaDevAttrMaxSurface1DLayeredLayers, 
# 1906
cudaDevAttrMaxSurface2DLayeredWidth, 
# 1907
cudaDevAttrMaxSurface2DLayeredHeight, 
# 1908
cudaDevAttrMaxSurface2DLayeredLayers, 
# 1909
cudaDevAttrMaxSurfaceCubemapWidth, 
# 1910
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
# 1911
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
# 1912
cudaDevAttrMaxTexture1DLinearWidth, 
# 1913
cudaDevAttrMaxTexture2DLinearWidth, 
# 1914
cudaDevAttrMaxTexture2DLinearHeight, 
# 1915
cudaDevAttrMaxTexture2DLinearPitch, 
# 1916
cudaDevAttrMaxTexture2DMipmappedWidth, 
# 1917
cudaDevAttrMaxTexture2DMipmappedHeight, 
# 1918
cudaDevAttrComputeCapabilityMajor, 
# 1919
cudaDevAttrComputeCapabilityMinor, 
# 1920
cudaDevAttrMaxTexture1DMipmappedWidth, 
# 1921
cudaDevAttrStreamPrioritiesSupported, 
# 1922
cudaDevAttrGlobalL1CacheSupported, 
# 1923
cudaDevAttrLocalL1CacheSupported, 
# 1924
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
# 1925
cudaDevAttrMaxRegistersPerMultiprocessor, 
# 1926
cudaDevAttrManagedMemory, 
# 1927
cudaDevAttrIsMultiGpuBoard, 
# 1928
cudaDevAttrMultiGpuBoardGroupID, 
# 1929
cudaDevAttrHostNativeAtomicSupported, 
# 1930
cudaDevAttrSingleToDoublePrecisionPerfRatio, 
# 1931
cudaDevAttrPageableMemoryAccess, 
# 1932
cudaDevAttrConcurrentManagedAccess, 
# 1933
cudaDevAttrComputePreemptionSupported, 
# 1934
cudaDevAttrCanUseHostPointerForRegisteredMem, 
# 1935
cudaDevAttrReserved92, 
# 1936
cudaDevAttrReserved93, 
# 1937
cudaDevAttrReserved94, 
# 1938
cudaDevAttrCooperativeLaunch, 
# 1939
cudaDevAttrCooperativeMultiDeviceLaunch, 
# 1940
cudaDevAttrMaxSharedMemoryPerBlockOptin, 
# 1941
cudaDevAttrCanFlushRemoteWrites, 
# 1942
cudaDevAttrHostRegisterSupported, 
# 1943
cudaDevAttrPageableMemoryAccessUsesHostPageTables, 
# 1944
cudaDevAttrDirectManagedMemAccessFromHost, 
# 1945
cudaDevAttrMaxBlocksPerMultiprocessor = 106, 
# 1946
cudaDevAttrMaxPersistingL2CacheSize = 108, 
# 1947
cudaDevAttrMaxAccessPolicyWindowSize, 
# 1948
cudaDevAttrReservedSharedMemoryPerBlock = 111, 
# 1949
cudaDevAttrSparseCudaArraySupported, 
# 1950
cudaDevAttrHostRegisterReadOnlySupported, 
# 1951
cudaDevAttrTimelineSemaphoreInteropSupported, 
# 1952
cudaDevAttrMaxTimelineSemaphoreInteropSupported = 114, 
# 1953
cudaDevAttrMemoryPoolsSupported, 
# 1954
cudaDevAttrGPUDirectRDMASupported, 
# 1955
cudaDevAttrGPUDirectRDMAFlushWritesOptions, 
# 1956
cudaDevAttrGPUDirectRDMAWritesOrdering, 
# 1957
cudaDevAttrMemoryPoolSupportedHandleTypes, 
# 1958
cudaDevAttrClusterLaunch, 
# 1959
cudaDevAttrDeferredMappingCudaArraySupported, 
# 1960
cudaDevAttrReserved122, 
# 1961
cudaDevAttrReserved123, 
# 1962
cudaDevAttrReserved124, 
# 1963
cudaDevAttrIpcEventSupport, 
# 1964
cudaDevAttrMemSyncDomainCount, 
# 1965
cudaDevAttrReserved127, 
# 1966
cudaDevAttrReserved128, 
# 1967
cudaDevAttrReserved129, 
# 1968
cudaDevAttrReserved132 = 132, 
# 1969
cudaDevAttrMax
# 1970
}; 
#endif
# 1975 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 1975
enum cudaMemPoolAttr { 
# 1985 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaMemPoolReuseFollowEventDependencies = 1, 
# 1992
cudaMemPoolReuseAllowOpportunistic, 
# 2000
cudaMemPoolReuseAllowInternalDependencies, 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaMemPoolAttrReleaseThreshold, 
# 2017
cudaMemPoolAttrReservedMemCurrent, 
# 2024
cudaMemPoolAttrReservedMemHigh, 
# 2030
cudaMemPoolAttrUsedMemCurrent, 
# 2037
cudaMemPoolAttrUsedMemHigh
# 2038
}; 
#endif
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2043
enum cudaMemLocationType { 
# 2044
cudaMemLocationTypeInvalid, 
# 2045
cudaMemLocationTypeDevice
# 2046
}; 
#endif
# 2053 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2053
struct cudaMemLocation { 
# 2054
cudaMemLocationType type; 
# 2055
int id; 
# 2056
}; 
#endif
# 2061 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2061
enum cudaMemAccessFlags { 
# 2062
cudaMemAccessFlagsProtNone, 
# 2063
cudaMemAccessFlagsProtRead, 
# 2064
cudaMemAccessFlagsProtReadWrite = 3
# 2065
}; 
#endif
# 2070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2070
struct cudaMemAccessDesc { 
# 2071
cudaMemLocation location; 
# 2072
cudaMemAccessFlags flags; 
# 2073
}; 
#endif
# 2078 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2078
enum cudaMemAllocationType { 
# 2079
cudaMemAllocationTypeInvalid, 
# 2083
cudaMemAllocationTypePinned, 
# 2084
cudaMemAllocationTypeMax = 2147483647
# 2085
}; 
#endif
# 2090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2090
enum cudaMemAllocationHandleType { 
# 2091
cudaMemHandleTypeNone, 
# 2092
cudaMemHandleTypePosixFileDescriptor, 
# 2093
cudaMemHandleTypeWin32, 
# 2094
cudaMemHandleTypeWin32Kmt = 4
# 2095
}; 
#endif
# 2100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2100
struct cudaMemPoolProps { 
# 2101
cudaMemAllocationType allocType; 
# 2102
cudaMemAllocationHandleType handleTypes; 
# 2103
cudaMemLocation location; 
# 2110
void *win32SecurityAttributes; 
# 2111
unsigned char reserved[64]; 
# 2112
}; 
#endif
# 2117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2117
struct cudaMemPoolPtrExportData { 
# 2118
unsigned char reserved[64]; 
# 2119
}; 
#endif
# 2124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2124
struct cudaMemAllocNodeParams { 
# 2129
cudaMemPoolProps poolProps; 
# 2130
const cudaMemAccessDesc *accessDescs; 
# 2131
size_t accessDescCount; 
# 2132
size_t bytesize; 
# 2133
void *dptr; 
# 2134
}; 
#endif
# 2139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2139
enum cudaGraphMemAttributeType { 
# 2144
cudaGraphMemAttrUsedMemCurrent, 
# 2151
cudaGraphMemAttrUsedMemHigh, 
# 2158
cudaGraphMemAttrReservedMemCurrent, 
# 2165
cudaGraphMemAttrReservedMemHigh
# 2166
}; 
#endif
# 2172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2172
enum cudaDeviceP2PAttr { 
# 2173
cudaDevP2PAttrPerformanceRank = 1, 
# 2174
cudaDevP2PAttrAccessSupported, 
# 2175
cudaDevP2PAttrNativeAtomicSupported, 
# 2176
cudaDevP2PAttrCudaArrayAccessSupported
# 2177
}; 
#endif
# 2184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2184
struct CUuuid_st { 
# 2185
char bytes[16]; 
# 2186
}; 
#endif
# 2187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2187
CUuuid; 
#endif
# 2189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef CUuuid_st 
# 2189
cudaUUID_t; 
#endif
# 2194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2194
struct cudaDeviceProp { 
# 2196
char name[256]; 
# 2197
cudaUUID_t uuid; 
# 2198
char luid[8]; 
# 2199
unsigned luidDeviceNodeMask; 
# 2200
size_t totalGlobalMem; 
# 2201
size_t sharedMemPerBlock; 
# 2202
int regsPerBlock; 
# 2203
int warpSize; 
# 2204
size_t memPitch; 
# 2205
int maxThreadsPerBlock; 
# 2206
int maxThreadsDim[3]; 
# 2207
int maxGridSize[3]; 
# 2208
int clockRate; 
# 2209
size_t totalConstMem; 
# 2210
int major; 
# 2211
int minor; 
# 2212
size_t textureAlignment; 
# 2213
size_t texturePitchAlignment; 
# 2214
int deviceOverlap; 
# 2215
int multiProcessorCount; 
# 2216
int kernelExecTimeoutEnabled; 
# 2217
int integrated; 
# 2218
int canMapHostMemory; 
# 2219
int computeMode; 
# 2220
int maxTexture1D; 
# 2221
int maxTexture1DMipmap; 
# 2222
int maxTexture1DLinear; 
# 2223
int maxTexture2D[2]; 
# 2224
int maxTexture2DMipmap[2]; 
# 2225
int maxTexture2DLinear[3]; 
# 2226
int maxTexture2DGather[2]; 
# 2227
int maxTexture3D[3]; 
# 2228
int maxTexture3DAlt[3]; 
# 2229
int maxTextureCubemap; 
# 2230
int maxTexture1DLayered[2]; 
# 2231
int maxTexture2DLayered[3]; 
# 2232
int maxTextureCubemapLayered[2]; 
# 2233
int maxSurface1D; 
# 2234
int maxSurface2D[2]; 
# 2235
int maxSurface3D[3]; 
# 2236
int maxSurface1DLayered[2]; 
# 2237
int maxSurface2DLayered[3]; 
# 2238
int maxSurfaceCubemap; 
# 2239
int maxSurfaceCubemapLayered[2]; 
# 2240
size_t surfaceAlignment; 
# 2241
int concurrentKernels; 
# 2242
int ECCEnabled; 
# 2243
int pciBusID; 
# 2244
int pciDeviceID; 
# 2245
int pciDomainID; 
# 2246
int tccDriver; 
# 2247
int asyncEngineCount; 
# 2248
int unifiedAddressing; 
# 2249
int memoryClockRate; 
# 2250
int memoryBusWidth; 
# 2251
int l2CacheSize; 
# 2252
int persistingL2CacheMaxSize; 
# 2253
int maxThreadsPerMultiProcessor; 
# 2254
int streamPrioritiesSupported; 
# 2255
int globalL1CacheSupported; 
# 2256
int localL1CacheSupported; 
# 2257
size_t sharedMemPerMultiprocessor; 
# 2258
int regsPerMultiprocessor; 
# 2259
int managedMemory; 
# 2260
int isMultiGpuBoard; 
# 2261
int multiGpuBoardGroupID; 
# 2262
int hostNativeAtomicSupported; 
# 2263
int singleToDoublePrecisionPerfRatio; 
# 2264
int pageableMemoryAccess; 
# 2265
int concurrentManagedAccess; 
# 2266
int computePreemptionSupported; 
# 2267
int canUseHostPointerForRegisteredMem; 
# 2268
int cooperativeLaunch; 
# 2269
int cooperativeMultiDeviceLaunch; 
# 2270
size_t sharedMemPerBlockOptin; 
# 2271
int pageableMemoryAccessUsesHostPageTables; 
# 2272
int directManagedMemAccessFromHost; 
# 2273
int maxBlocksPerMultiProcessor; 
# 2274
int accessPolicyMaxWindowSize; 
# 2275
size_t reservedSharedMemPerBlock; 
# 2276
int hostRegisterSupported; 
# 2277
int sparseCudaArraySupported; 
# 2278
int hostRegisterReadOnlySupported; 
# 2279
int timelineSemaphoreInteropSupported; 
# 2280
int memoryPoolsSupported; 
# 2281
int gpuDirectRDMASupported; 
# 2282
unsigned gpuDirectRDMAFlushWritesOptions; 
# 2283
int gpuDirectRDMAWritesOrdering; 
# 2284
unsigned memoryPoolSupportedHandleTypes; 
# 2285
int deferredMappingCudaArraySupported; 
# 2286
int ipcEventSupported; 
# 2287
int clusterLaunch; 
# 2288
int unifiedFunctionPointers; 
# 2289
int reserved2[2]; 
# 2290
int reserved[61]; 
# 2291
}; 
#endif
# 2304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2301
struct cudaIpcEventHandle_st { 
# 2303
char reserved[64]; 
# 2304
} cudaIpcEventHandle_t; 
#endif
# 2312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2309
struct cudaIpcMemHandle_st { 
# 2311
char reserved[64]; 
# 2312
} cudaIpcMemHandle_t; 
#endif
# 2317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2317
enum cudaExternalMemoryHandleType { 
# 2321
cudaExternalMemoryHandleTypeOpaqueFd = 1, 
# 2325
cudaExternalMemoryHandleTypeOpaqueWin32, 
# 2329
cudaExternalMemoryHandleTypeOpaqueWin32Kmt, 
# 2333
cudaExternalMemoryHandleTypeD3D12Heap, 
# 2337
cudaExternalMemoryHandleTypeD3D12Resource, 
# 2341
cudaExternalMemoryHandleTypeD3D11Resource, 
# 2345
cudaExternalMemoryHandleTypeD3D11ResourceKmt, 
# 2349
cudaExternalMemoryHandleTypeNvSciBuf
# 2350
}; 
#endif
# 2392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2392
struct cudaExternalMemoryHandleDesc { 
# 2396
cudaExternalMemoryHandleType type; 
# 2397
union { 
# 2403
int fd; 
# 2419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct { 
# 2423
void *handle; 
# 2428
const void *name; 
# 2429
} win32; 
# 2434
const void *nvSciBufObject; 
# 2435
} handle; 
# 2439
unsigned long long size; 
# 2443
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2444
}; 
#endif
# 2449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2449
struct cudaExternalMemoryBufferDesc { 
# 2453
unsigned long long offset; 
# 2457
unsigned long long size; 
# 2461
unsigned flags; 
# 2462
}; 
#endif
# 2467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2467
struct cudaExternalMemoryMipmappedArrayDesc { 
# 2472
unsigned long long offset; 
# 2476
cudaChannelFormatDesc formatDesc; 
# 2480
cudaExtent extent; 
# 2485
unsigned flags; 
# 2489
unsigned numLevels; 
# 2490
}; 
#endif
# 2495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2495
enum cudaExternalSemaphoreHandleType { 
# 2499
cudaExternalSemaphoreHandleTypeOpaqueFd = 1, 
# 2503
cudaExternalSemaphoreHandleTypeOpaqueWin32, 
# 2507
cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt, 
# 2511
cudaExternalSemaphoreHandleTypeD3D12Fence, 
# 2515
cudaExternalSemaphoreHandleTypeD3D11Fence, 
# 2519
cudaExternalSemaphoreHandleTypeNvSciSync, 
# 2523
cudaExternalSemaphoreHandleTypeKeyedMutex, 
# 2527
cudaExternalSemaphoreHandleTypeKeyedMutexKmt, 
# 2531
cudaExternalSemaphoreHandleTypeTimelineSemaphoreFd, 
# 2535
cudaExternalSemaphoreHandleTypeTimelineSemaphoreWin32
# 2536
}; 
#endif
# 2541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2541
struct cudaExternalSemaphoreHandleDesc { 
# 2545
cudaExternalSemaphoreHandleType type; 
# 2546
union { 
# 2553
int fd; 
# 2569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
struct { 
# 2573
void *handle; 
# 2578
const void *name; 
# 2579
} win32; 
# 2583
const void *nvSciSyncObj; 
# 2584
} handle; 
# 2588
unsigned flags; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 2589
}; 
#endif
# 2594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2594
struct cudaExternalSemaphoreSignalParams_v1 { 
# 2595
struct { 
# 2599
struct { 
# 2603
unsigned long long value; 
# 2604
} fence; 
# 2605
union { 
# 2610
void *fence; 
# 2611
unsigned long long reserved; 
# 2612
} nvSciSync; 
# 2616
struct { 
# 2620
unsigned long long key; 
# 2621
} keyedMutex; 
# 2622
} params; 
# 2633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2634
}; 
#endif
# 2639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2639
struct cudaExternalSemaphoreWaitParams_v1 { 
# 2640
struct { 
# 2644
struct { 
# 2648
unsigned long long value; 
# 2649
} fence; 
# 2650
union { 
# 2655
void *fence; 
# 2656
unsigned long long reserved; 
# 2657
} nvSciSync; 
# 2661
struct { 
# 2665
unsigned long long key; 
# 2669
unsigned timeoutMs; 
# 2670
} keyedMutex; 
# 2671
} params; 
# 2682 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2683
}; 
#endif
# 2688 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2688
struct cudaExternalSemaphoreSignalParams { 
# 2689
struct { 
# 2693
struct { 
# 2697
unsigned long long value; 
# 2698
} fence; 
# 2699
union { 
# 2704
void *fence; 
# 2705
unsigned long long reserved; 
# 2706
} nvSciSync; 
# 2710
struct { 
# 2714
unsigned long long key; 
# 2715
} keyedMutex; 
# 2716
unsigned reserved[12]; 
# 2717
} params; 
# 2728 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2729
unsigned reserved[16]; 
# 2730
}; 
#endif
# 2735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2735
struct cudaExternalSemaphoreWaitParams { 
# 2736
struct { 
# 2740
struct { 
# 2744
unsigned long long value; 
# 2745
} fence; 
# 2746
union { 
# 2751
void *fence; 
# 2752
unsigned long long reserved; 
# 2753
} nvSciSync; 
# 2757
struct { 
# 2761
unsigned long long key; 
# 2765
unsigned timeoutMs; 
# 2766
} keyedMutex; 
# 2767
unsigned reserved[10]; 
# 2768
} params; 
# 2779 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
unsigned flags; 
# 2780
unsigned reserved[16]; 
# 2781
}; 
#endif
# 2792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaError 
# 2792
cudaError_t; 
#endif
# 2797 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUstream_st *
# 2797
cudaStream_t; 
#endif
# 2802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUevent_st *
# 2802
cudaEvent_t; 
#endif
# 2807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef cudaGraphicsResource *
# 2807
cudaGraphicsResource_t; 
#endif
# 2812 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUexternalMemory_st *
# 2812
cudaExternalMemory_t; 
#endif
# 2817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUexternalSemaphore_st *
# 2817
cudaExternalSemaphore_t; 
#endif
# 2822 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUgraph_st *
# 2822
cudaGraph_t; 
#endif
# 2827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUgraphNode_st *
# 2827
cudaGraphNode_t; 
#endif
# 2832 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUuserObject_st *
# 2832
cudaUserObject_t; 
#endif
# 2837 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUfunc_st *
# 2837
cudaFunction_t; 
#endif
# 2842 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUkern_st *
# 2842
cudaKernel_t; 
#endif
# 2847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef struct CUmemPoolHandle_st *
# 2847
cudaMemPool_t; 
#endif
# 2852 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2852
enum cudaCGScope { 
# 2853
cudaCGScopeInvalid, 
# 2854
cudaCGScopeGrid, 
# 2855
cudaCGScopeMultiGrid
# 2856
}; 
#endif
# 2861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2861
struct cudaLaunchParams { 
# 2863
void *func; 
# 2864
dim3 gridDim; 
# 2865
dim3 blockDim; 
# 2866
void **args; 
# 2867
size_t sharedMem; 
# 2868
cudaStream_t stream; 
# 2869
}; 
#endif
# 2874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2874
struct cudaKernelNodeParams { 
# 2875
void *func; 
# 2876
dim3 gridDim; 
# 2877
dim3 blockDim; 
# 2878
unsigned sharedMemBytes; 
# 2879
void **kernelParams; 
# 2880
void **extra; 
# 2881
}; 
#endif
# 2886 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2886
struct cudaExternalSemaphoreSignalNodeParams { 
# 2887
cudaExternalSemaphore_t *extSemArray; 
# 2888
const cudaExternalSemaphoreSignalParams *paramsArray; 
# 2889
unsigned numExtSems; 
# 2890
}; 
#endif
# 2895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2895
struct cudaExternalSemaphoreWaitNodeParams { 
# 2896
cudaExternalSemaphore_t *extSemArray; 
# 2897
const cudaExternalSemaphoreWaitParams *paramsArray; 
# 2898
unsigned numExtSems; 
# 2899
}; 
#endif
# 2904 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2904
enum cudaGraphNodeType { 
# 2905
cudaGraphNodeTypeKernel, 
# 2906
cudaGraphNodeTypeMemcpy, 
# 2907
cudaGraphNodeTypeMemset, 
# 2908
cudaGraphNodeTypeHost, 
# 2909
cudaGraphNodeTypeGraph, 
# 2910
cudaGraphNodeTypeEmpty, 
# 2911
cudaGraphNodeTypeWaitEvent, 
# 2912
cudaGraphNodeTypeEventRecord, 
# 2913
cudaGraphNodeTypeExtSemaphoreSignal, 
# 2914
cudaGraphNodeTypeExtSemaphoreWait, 
# 2915
cudaGraphNodeTypeMemAlloc, 
# 2916
cudaGraphNodeTypeMemFree, 
# 2917
cudaGraphNodeTypeCount
# 2918
}; 
#endif
# 2923 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
typedef struct CUgraphExec_st *cudaGraphExec_t; 
# 2928
#if 0
# 2928
enum cudaGraphExecUpdateResult { 
# 2929
cudaGraphExecUpdateSuccess, 
# 2930
cudaGraphExecUpdateError, 
# 2931
cudaGraphExecUpdateErrorTopologyChanged, 
# 2932
cudaGraphExecUpdateErrorNodeTypeChanged, 
# 2933
cudaGraphExecUpdateErrorFunctionChanged, 
# 2934
cudaGraphExecUpdateErrorParametersChanged, 
# 2935
cudaGraphExecUpdateErrorNotSupported, 
# 2936
cudaGraphExecUpdateErrorUnsupportedFunctionChange, 
# 2937
cudaGraphExecUpdateErrorAttributesChanged
# 2938
}; 
#endif
# 2949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2943
enum cudaGraphInstantiateResult { 
# 2944
cudaGraphInstantiateSuccess, 
# 2945
cudaGraphInstantiateError, 
# 2946
cudaGraphInstantiateInvalidStructure, 
# 2947
cudaGraphInstantiateNodeOperationNotSupported, 
# 2948
cudaGraphInstantiateMultipleDevicesNotSupported
# 2949
} cudaGraphInstantiateResult; 
#endif
# 2960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2954
struct cudaGraphInstantiateParams_st { 
# 2956
unsigned long long flags; 
# 2957
cudaStream_t uploadStream; 
# 2958
cudaGraphNode_t errNode_out; 
# 2959
cudaGraphInstantiateResult result_out; 
# 2960
} cudaGraphInstantiateParams; 
#endif
# 2982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 2965
struct cudaGraphExecUpdateResultInfo_st { 
# 2969
cudaGraphExecUpdateResult result; 
# 2976
cudaGraphNode_t errorNode; 
# 2981
cudaGraphNode_t errorFromNode; 
# 2982
} cudaGraphExecUpdateResultInfo; 
#endif
# 2988 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2988
enum cudaGetDriverEntryPointFlags { 
# 2989
cudaEnableDefault, 
# 2990
cudaEnableLegacyStream, 
# 2991
cudaEnablePerThreadDefaultStream
# 2992
}; 
#endif
# 2997 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 2997
enum cudaDriverEntryPointQueryResult { 
# 2998
cudaDriverEntryPointSuccess, 
# 2999
cudaDriverEntryPointSymbolNotFound, 
# 3000
cudaDriverEntryPointVersionNotSufficent
# 3001
}; 
#endif
# 3006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3006
enum cudaGraphDebugDotFlags { 
# 3007
cudaGraphDebugDotFlagsVerbose = (1 << 0), 
# 3008
cudaGraphDebugDotFlagsKernelNodeParams = (1 << 2), 
# 3009
cudaGraphDebugDotFlagsMemcpyNodeParams = (1 << 3), 
# 3010
cudaGraphDebugDotFlagsMemsetNodeParams = (1 << 4), 
# 3011
cudaGraphDebugDotFlagsHostNodeParams = (1 << 5), 
# 3012
cudaGraphDebugDotFlagsEventNodeParams = (1 << 6), 
# 3013
cudaGraphDebugDotFlagsExtSemasSignalNodeParams = (1 << 7), 
# 3014
cudaGraphDebugDotFlagsExtSemasWaitNodeParams = (1 << 8), 
# 3015
cudaGraphDebugDotFlagsKernelNodeAttributes = (1 << 9), 
# 3016
cudaGraphDebugDotFlagsHandles = (1 << 10)
# 3017
}; 
#endif
# 3022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
# 3022
enum cudaGraphInstantiateFlags { 
# 3023
cudaGraphInstantiateFlagAutoFreeOnLaunch = 1, 
# 3024
cudaGraphInstantiateFlagUpload, 
# 3025
cudaGraphInstantiateFlagDeviceLaunch = 4, 
# 3026
cudaGraphInstantiateFlagUseNodePriority = 8
# 3028
}; 
#endif
# 3033 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3030
enum cudaLaunchMemSyncDomain { 
# 3031
cudaLaunchMemSyncDomainDefault, 
# 3032
cudaLaunchMemSyncDomainRemote
# 3033
} cudaLaunchMemSyncDomain; 
#endif
# 3038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3035
struct cudaLaunchMemSyncDomainMap_st { 
# 3036
unsigned char default_; 
# 3037
unsigned char remote; 
# 3038
} cudaLaunchMemSyncDomainMap; 
#endif
# 3084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
enum cudaLaunchAttributeID { 
# 3044
cudaLaunchAttributeIgnore, 
# 3045
cudaLaunchAttributeAccessPolicyWindow, 
# 3046
cudaLaunchAttributeCooperative, 
# 3047
cudaLaunchAttributeSynchronizationPolicy, 
# 3048
cudaLaunchAttributeClusterDimension, 
# 3049
cudaLaunchAttributeClusterSchedulingPolicyPreference, 
# 3050
cudaLaunchAttributeProgrammaticStreamSerialization, 
# 3061 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaLaunchAttributeProgrammaticEvent, 
# 3081 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
cudaLaunchAttributePriority, 
# 3082
cudaLaunchAttributeMemSyncDomainMap, 
# 3083
cudaLaunchAttributeMemSyncDomain
# 3084
} cudaLaunchAttributeID; 
#endif
# 3109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3089
union cudaLaunchAttributeValue { 
# 3090
char pad[64]; 
# 3091
cudaAccessPolicyWindow accessPolicyWindow; 
# 3092
int cooperative; 
# 3093
cudaSynchronizationPolicy syncPolicy; 
# 3094
struct { 
# 3095
unsigned x; 
# 3096
unsigned y; 
# 3097
unsigned z; 
# 3098
} clusterDim; 
# 3099
cudaClusterSchedulingPolicy clusterSchedulingPolicyPreference; 
# 3100
int programmaticStreamSerializationAllowed; 
# 3101
struct { 
# 3102
cudaEvent_t event; 
# 3103
int flags; 
# 3104
int triggerAtBlockStart; 
# 3105
} programmaticEvent; 
# 3106
int priority; 
# 3107
cudaLaunchMemSyncDomainMap memSyncDomainMap; 
# 3108
cudaLaunchMemSyncDomain memSyncDomain; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3109
} cudaLaunchAttributeValue; 
#endif
# 3118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3114
struct cudaLaunchAttribute_st { 
# 3115
cudaLaunchAttributeID id; 
# 3116
char pad[(8) - sizeof(cudaLaunchAttributeID)]; 
# 3117
cudaLaunchAttributeValue val; 
# 3118
} cudaLaunchAttribute; 
#endif
# 3130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_types.h"
#if 0
typedef 
# 3123
struct cudaLaunchConfig_st { 
# 3124
dim3 gridDim; 
# 3125
dim3 blockDim; 
# 3126
size_t dynamicSmemBytes; 
# 3127
cudaStream_t stream; 
# 3128
cudaLaunchAttribute *attrs; 
# 3129
unsigned numAttrs; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
# 3130
} cudaLaunchConfig_t; 
#endif
# 84 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 84
enum cudaSurfaceBoundaryMode { 
# 86
cudaBoundaryModeZero, 
# 87
cudaBoundaryModeClamp, 
# 88
cudaBoundaryModeTrap
# 89
}; 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
# 94
enum cudaSurfaceFormatMode { 
# 96
cudaFormatModeForced, 
# 97
cudaFormatModeAuto
# 98
}; 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_types.h"
#if 0
typedef unsigned long long 
# 103
cudaSurfaceObject_t; 
#endif
# 84 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 84
enum cudaTextureAddressMode { 
# 86
cudaAddressModeWrap, 
# 87
cudaAddressModeClamp, 
# 88
cudaAddressModeMirror, 
# 89
cudaAddressModeBorder
# 90
}; 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 95
enum cudaTextureFilterMode { 
# 97
cudaFilterModePoint, 
# 98
cudaFilterModeLinear
# 99
}; 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 104
enum cudaTextureReadMode { 
# 106
cudaReadModeElementType, 
# 107
cudaReadModeNormalizedFloat
# 108
}; 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
# 113
struct cudaTextureDesc { 
# 118
cudaTextureAddressMode addressMode[3]; 
# 122
cudaTextureFilterMode filterMode; 
# 126
cudaTextureReadMode readMode; 
# 130
int sRGB; 
# 134
float borderColor[4]; 
# 138
int normalizedCoords; 
# 142
unsigned maxAnisotropy; 
# 146
cudaTextureFilterMode mipmapFilterMode; 
# 150
float mipmapLevelBias; 
# 154
float minMipmapLevelClamp; 
# 158
float maxMipmapLevelClamp; 
# 162
int disableTrilinearOptimization; 
# 166
int seamlessCubemap; 
# 167
}; 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_types.h"
#if 0
typedef unsigned long long 
# 172
cudaTextureObject_t; 
#endif
# 87 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/library_types.h"
typedef 
# 55
enum cudaDataType_t { 
# 57
CUDA_R_16F = 2, 
# 58
CUDA_C_16F = 6, 
# 59
CUDA_R_16BF = 14, 
# 60
CUDA_C_16BF, 
# 61
CUDA_R_32F = 0, 
# 62
CUDA_C_32F = 4, 
# 63
CUDA_R_64F = 1, 
# 64
CUDA_C_64F = 5, 
# 65
CUDA_R_4I = 16, 
# 66
CUDA_C_4I, 
# 67
CUDA_R_4U, 
# 68
CUDA_C_4U, 
# 69
CUDA_R_8I = 3, 
# 70
CUDA_C_8I = 7, 
# 71
CUDA_R_8U, 
# 72
CUDA_C_8U, 
# 73
CUDA_R_16I = 20, 
# 74
CUDA_C_16I, 
# 75
CUDA_R_16U, 
# 76
CUDA_C_16U, 
# 77
CUDA_R_32I = 10, 
# 78
CUDA_C_32I, 
# 79
CUDA_R_32U, 
# 80
CUDA_C_32U, 
# 81
CUDA_R_64I = 24, 
# 82
CUDA_C_64I, 
# 83
CUDA_R_64U, 
# 84
CUDA_C_64U, 
# 85
CUDA_R_8F_E4M3, 
# 86
CUDA_R_8F_E5M2
# 87
} cudaDataType; 
# 95
typedef 
# 90
enum libraryPropertyType_t { 
# 92
MAJOR_VERSION, 
# 93
MINOR_VERSION, 
# 94
PATCH_LEVEL
# 95
} libraryPropertyType; 
# 278 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std { 
# 280
typedef unsigned long size_t; 
# 281
typedef long ptrdiff_t; 
# 284
typedef __decltype((nullptr)) nullptr_t; 
# 286
}
# 300 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++config.h" 3
namespace std { 
# 302
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 303
}
# 304
namespace __gnu_cxx { 
# 306
inline namespace __cxx11 __attribute((__abi_tag__("cxx11"))) { }
# 307
}
# 34 "/usr/include/stdlib.h" 3
extern "C" {
# 74 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3
typedef float __complex__ __cfloat128 __attribute((__mode__(__TC__))); 
# 86 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3
typedef __float128 _Float128; 
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef float _Float32; 
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float64; 
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef double _Float32x; 
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3
typedef long double _Float64x; 
# 63 "/usr/include/stdlib.h" 3
typedef 
# 60
struct { 
# 61
int quot; 
# 62
int rem; 
# 63
} div_t; 
# 71
typedef 
# 68
struct { 
# 69
long quot; 
# 70
long rem; 
# 71
} ldiv_t; 
# 81
__extension__ typedef 
# 78
struct { 
# 79
long long quot; 
# 80
long long rem; 
# 81
} lldiv_t; 
# 98 "/usr/include/stdlib.h" 3
extern size_t __ctype_get_mb_cur_max() noexcept(true); 
# 102
extern double atof(const char * __nptr) noexcept(true)
# 103
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105
extern int atoi(const char * __nptr) noexcept(true)
# 106
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 108
extern long atol(const char * __nptr) noexcept(true)
# 109
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 113
__extension__ extern long long atoll(const char * __nptr) noexcept(true)
# 114
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 118
extern double strtod(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 120
 __attribute((__nonnull__(1))); 
# 124
extern float strtof(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 125
 __attribute((__nonnull__(1))); 
# 127
extern long double strtold(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 129
 __attribute((__nonnull__(1))); 
# 141 "/usr/include/stdlib.h" 3
extern _Float32 strtof32(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 143
 __attribute((__nonnull__(1))); 
# 147
extern _Float64 strtof64(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 149
 __attribute((__nonnull__(1))); 
# 153
extern _Float128 strtof128(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 155
 __attribute((__nonnull__(1))); 
# 159
extern _Float32x strtof32x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 161
 __attribute((__nonnull__(1))); 
# 165
extern _Float64x strtof64x(const char *__restrict__ __nptr, char **__restrict__ __endptr) noexcept(true)
# 167
 __attribute((__nonnull__(1))); 
# 177 "/usr/include/stdlib.h" 3
extern long strtol(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 179
 __attribute((__nonnull__(1))); 
# 181
extern unsigned long strtoul(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 183
 __attribute((__nonnull__(1))); 
# 188
__extension__ extern long long strtoq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 190
 __attribute((__nonnull__(1))); 
# 193
__extension__ extern unsigned long long strtouq(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 195
 __attribute((__nonnull__(1))); 
# 201
__extension__ extern long long strtoll(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 203
 __attribute((__nonnull__(1))); 
# 206
__extension__ extern unsigned long long strtoull(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base) noexcept(true)
# 208
 __attribute((__nonnull__(1))); 
# 213
extern int strfromd(char * __dest, size_t __size, const char * __format, double __f) noexcept(true)
# 215
 __attribute((__nonnull__(3))); 
# 217
extern int strfromf(char * __dest, size_t __size, const char * __format, float __f) noexcept(true)
# 219
 __attribute((__nonnull__(3))); 
# 221
extern int strfroml(char * __dest, size_t __size, const char * __format, long double __f) noexcept(true)
# 223
 __attribute((__nonnull__(3))); 
# 233 "/usr/include/stdlib.h" 3
extern int strfromf32(char * __dest, size_t __size, const char * __format, _Float32 __f) noexcept(true)
# 235
 __attribute((__nonnull__(3))); 
# 239
extern int strfromf64(char * __dest, size_t __size, const char * __format, _Float64 __f) noexcept(true)
# 241
 __attribute((__nonnull__(3))); 
# 245
extern int strfromf128(char * __dest, size_t __size, const char * __format, _Float128 __f) noexcept(true)
# 247
 __attribute((__nonnull__(3))); 
# 251
extern int strfromf32x(char * __dest, size_t __size, const char * __format, _Float32x __f) noexcept(true)
# 253
 __attribute((__nonnull__(3))); 
# 257
extern int strfromf64x(char * __dest, size_t __size, const char * __format, _Float64x __f) noexcept(true)
# 259
 __attribute((__nonnull__(3))); 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3
struct __locale_struct { 
# 30
struct __locale_data *__locales[13]; 
# 33
const unsigned short *__ctype_b; 
# 34
const int *__ctype_tolower; 
# 35
const int *__ctype_toupper; 
# 38
const char *__names[13]; 
# 39
}; 
# 41
typedef __locale_struct *__locale_t; 
# 24 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3
typedef __locale_t locale_t; 
# 275 "/usr/include/stdlib.h" 3
extern long strtol_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 277
 __attribute((__nonnull__(1, 4))); 
# 279
extern unsigned long strtoul_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 282
 __attribute((__nonnull__(1, 4))); 
# 285
__extension__ extern long long strtoll_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 288
 __attribute((__nonnull__(1, 4))); 
# 291
__extension__ extern unsigned long long strtoull_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true)
# 294
 __attribute((__nonnull__(1, 4))); 
# 296
extern double strtod_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 298
 __attribute((__nonnull__(1, 3))); 
# 300
extern float strtof_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 302
 __attribute((__nonnull__(1, 3))); 
# 304
extern long double strtold_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 307
 __attribute((__nonnull__(1, 3))); 
# 317 "/usr/include/stdlib.h" 3
extern _Float32 strtof32_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 320
 __attribute((__nonnull__(1, 3))); 
# 324
extern _Float64 strtof64_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 327
 __attribute((__nonnull__(1, 3))); 
# 331
extern _Float128 strtof128_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 334
 __attribute((__nonnull__(1, 3))); 
# 338
extern _Float32x strtof32x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 341
 __attribute((__nonnull__(1, 3))); 
# 345
extern _Float64x strtof64x_l(const char *__restrict__ __nptr, char **__restrict__ __endptr, locale_t __loc) noexcept(true)
# 348
 __attribute((__nonnull__(1, 3))); 
# 386 "/usr/include/stdlib.h" 3
extern char *l64a(long __n) noexcept(true); 
# 389
extern long a64l(const char * __s) noexcept(true)
# 390
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
extern "C" {
# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned char __u_char; 
# 32
typedef unsigned short __u_short; 
# 33
typedef unsigned __u_int; 
# 34
typedef unsigned long __u_long; 
# 37
typedef signed char __int8_t; 
# 38
typedef unsigned char __uint8_t; 
# 39
typedef signed short __int16_t; 
# 40
typedef unsigned short __uint16_t; 
# 41
typedef signed int __int32_t; 
# 42
typedef unsigned __uint32_t; 
# 44
typedef signed long __int64_t; 
# 45
typedef unsigned long __uint64_t; 
# 52
typedef __int8_t __int_least8_t; 
# 53
typedef __uint8_t __uint_least8_t; 
# 54
typedef __int16_t __int_least16_t; 
# 55
typedef __uint16_t __uint_least16_t; 
# 56
typedef __int32_t __int_least32_t; 
# 57
typedef __uint32_t __uint_least32_t; 
# 58
typedef __int64_t __int_least64_t; 
# 59
typedef __uint64_t __uint_least64_t; 
# 63
typedef long __quad_t; 
# 64
typedef unsigned long __u_quad_t; 
# 72
typedef long __intmax_t; 
# 73
typedef unsigned long __uintmax_t; 
# 145 "/usr/include/x86_64-linux-gnu/bits/types.h" 3
typedef unsigned long __dev_t; 
# 146
typedef unsigned __uid_t; 
# 147
typedef unsigned __gid_t; 
# 148
typedef unsigned long __ino_t; 
# 149
typedef unsigned long __ino64_t; 
# 150
typedef unsigned __mode_t; 
# 151
typedef unsigned long __nlink_t; 
# 152
typedef long __off_t; 
# 153
typedef long __off64_t; 
# 154
typedef int __pid_t; 
# 155
typedef struct { int __val[2]; } __fsid_t; 
# 156
typedef long __clock_t; 
# 157
typedef unsigned long __rlim_t; 
# 158
typedef unsigned long __rlim64_t; 
# 159
typedef unsigned __id_t; 
# 160
typedef long __time_t; 
# 161
typedef unsigned __useconds_t; 
# 162
typedef long __suseconds_t; 
# 163
typedef long __suseconds64_t; 
# 165
typedef int __daddr_t; 
# 166
typedef int __key_t; 
# 169
typedef int __clockid_t; 
# 172
typedef void *__timer_t; 
# 175
typedef long __blksize_t; 
# 180
typedef long __blkcnt_t; 
# 181
typedef long __blkcnt64_t; 
# 184
typedef unsigned long __fsblkcnt_t; 
# 185
typedef unsigned long __fsblkcnt64_t; 
# 188
typedef unsigned long __fsfilcnt_t; 
# 189
typedef unsigned long __fsfilcnt64_t; 
# 192
typedef long __fsword_t; 
# 194
typedef long __ssize_t; 
# 197
typedef long __syscall_slong_t; 
# 199
typedef unsigned long __syscall_ulong_t; 
# 203
typedef __off64_t __loff_t; 
# 204
typedef char *__caddr_t; 
# 207
typedef long __intptr_t; 
# 210
typedef unsigned __socklen_t; 
# 215
typedef int __sig_atomic_t; 
# 33 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __u_char u_char; 
# 34
typedef __u_short u_short; 
# 35
typedef __u_int u_int; 
# 36
typedef __u_long u_long; 
# 37
typedef __quad_t quad_t; 
# 38
typedef __u_quad_t u_quad_t; 
# 39
typedef __fsid_t fsid_t; 
# 42
typedef __loff_t loff_t; 
# 47
typedef __ino_t ino_t; 
# 54
typedef __ino64_t ino64_t; 
# 59
typedef __dev_t dev_t; 
# 64
typedef __gid_t gid_t; 
# 69
typedef __mode_t mode_t; 
# 74
typedef __nlink_t nlink_t; 
# 79
typedef __uid_t uid_t; 
# 85
typedef __off_t off_t; 
# 92
typedef __off64_t off64_t; 
# 97
typedef __pid_t pid_t; 
# 103
typedef __id_t id_t; 
# 108
typedef __ssize_t ssize_t; 
# 114
typedef __daddr_t daddr_t; 
# 115
typedef __caddr_t caddr_t; 
# 121
typedef __key_t key_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 3
typedef __clock_t clock_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 3
typedef __clockid_t clockid_t; 
# 10 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 3
typedef __time_t time_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 3
typedef __timer_t timer_t; 
# 134 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __useconds_t useconds_t; 
# 138
typedef __suseconds_t suseconds_t; 
# 148 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef unsigned long ulong; 
# 149
typedef unsigned short ushort; 
# 150
typedef unsigned uint; 
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3
typedef __int8_t int8_t; 
# 25
typedef __int16_t int16_t; 
# 26
typedef __int32_t int32_t; 
# 27
typedef __int64_t int64_t; 
# 158 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __uint8_t u_int8_t; 
# 159
typedef __uint16_t u_int16_t; 
# 160
typedef __uint32_t u_int32_t; 
# 161
typedef __uint64_t u_int64_t; 
# 164
typedef long register_t __attribute((__mode__(__word__))); 
# 34 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
static inline __uint16_t __bswap_16(__uint16_t __bsx) 
# 35
{ 
# 37
return __builtin_bswap16(__bsx); 
# 41
} 
# 49
static inline __uint32_t __bswap_32(__uint32_t __bsx) 
# 50
{ 
# 52
return __builtin_bswap32(__bsx); 
# 56
} 
# 70 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3
__extension__ static inline __uint64_t __bswap_64(__uint64_t __bsx) 
# 71
{ 
# 73
return __builtin_bswap64(__bsx); 
# 77
} 
# 33 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3
static inline __uint16_t __uint16_identity(__uint16_t __x) 
# 34
{ 
# 35
return __x; 
# 36
} 
# 39
static inline __uint32_t __uint32_identity(__uint32_t __x) 
# 40
{ 
# 41
return __x; 
# 42
} 
# 45
static inline __uint64_t __uint64_identity(__uint64_t __x) 
# 46
{ 
# 47
return __x; 
# 48
} 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 3
typedef 
# 6
struct { 
# 7
unsigned long __val[(1024) / ((8) * sizeof(unsigned long))]; 
# 8
} __sigset_t; 
# 7 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 3
typedef __sigset_t sigset_t; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 3
struct timeval { 
# 14
__time_t tv_sec; 
# 15
__suseconds_t tv_usec; 
# 17
}; 
# 11 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
struct timespec { 
# 16
__time_t tv_sec; 
# 21
__syscall_slong_t tv_nsec; 
# 31 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3
}; 
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef long __fd_mask; 
# 70 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
typedef 
# 60
struct { 
# 64
__fd_mask fds_bits[1024 / (8 * ((int)sizeof(__fd_mask)))]; 
# 70
} fd_set; 
# 77
typedef __fd_mask fd_mask; 
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern "C" {
# 102 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int select(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, timeval *__restrict__ __timeout); 
# 127 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
extern int pselect(int __nfds, fd_set *__restrict__ __readfds, fd_set *__restrict__ __writefds, fd_set *__restrict__ __exceptfds, const timespec *__restrict__ __timeout, const __sigset_t *__restrict__ __sigmask); 
# 153 "/usr/include/x86_64-linux-gnu/sys/select.h" 3
}
# 185 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blksize_t blksize_t; 
# 192
typedef __blkcnt_t blkcnt_t; 
# 196
typedef __fsblkcnt_t fsblkcnt_t; 
# 200
typedef __fsfilcnt_t fsfilcnt_t; 
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
typedef __blkcnt64_t blkcnt64_t; 
# 220
typedef __fsblkcnt64_t fsblkcnt64_t; 
# 221
typedef __fsfilcnt64_t fsfilcnt64_t; 
# 33 "/usr/include/x86_64-linux-gnu/bits/atomic_wide_counter.h" 3
typedef 
# 26
union { 
# 27
__extension__ unsigned long long __value64; 
# 29
struct { 
# 30
unsigned __low; 
# 31
unsigned __high; 
# 32
} __value32; 
# 33
} __atomic_wide_counter; 
# 55 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
typedef 
# 51
struct __pthread_internal_list { 
# 53
__pthread_internal_list *__prev; 
# 54
__pthread_internal_list *__next; 
# 55
} __pthread_list_t; 
# 60
typedef 
# 57
struct __pthread_internal_slist { 
# 59
__pthread_internal_slist *__next; 
# 60
} __pthread_slist_t; 
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
struct __pthread_mutex_s { 
# 24
int __lock; 
# 25
unsigned __count; 
# 26
int __owner; 
# 28
unsigned __nusers; 
# 32
int __kind; 
# 34
short __spins; 
# 35
short __elision; 
# 36
__pthread_list_t __list; 
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
struct __pthread_rwlock_arch_t { 
# 25
unsigned __readers; 
# 26
unsigned __writers; 
# 27
unsigned __wrphase_futex; 
# 28
unsigned __writers_futex; 
# 29
unsigned __pad3; 
# 30
unsigned __pad4; 
# 32
int __cur_writer; 
# 33
int __shared; 
# 34
signed char __rwelision; 
# 39
unsigned char __pad1[7]; 
# 42
unsigned long __pad2; 
# 45
unsigned __flags; 
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3
}; 
# 94 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3
struct __pthread_cond_s { 
# 96
__atomic_wide_counter __wseq; 
# 97
__atomic_wide_counter __g1_start; 
# 98
unsigned __g_refs[2]; 
# 99
unsigned __g_size[2]; 
# 100
unsigned __g1_orig_size; 
# 101
unsigned __wrefs; 
# 102
unsigned __g_signals[2]; 
# 103
}; 
# 105
typedef unsigned __tss_t; 
# 106
typedef unsigned long __thrd_t; 
# 111
typedef 
# 109
struct { 
# 110
int __data; 
# 111
} __once_flag; 
# 27 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3
typedef unsigned long pthread_t; 
# 36
typedef 
# 33
union { 
# 34
char __size[4]; 
# 35
int __align; 
# 36
} pthread_mutexattr_t; 
# 45
typedef 
# 42
union { 
# 43
char __size[4]; 
# 44
int __align; 
# 45
} pthread_condattr_t; 
# 49
typedef unsigned pthread_key_t; 
# 53
typedef int pthread_once_t; 
# 56
union pthread_attr_t { 
# 58
char __size[56]; 
# 59
long __align; 
# 60
}; 
# 62
typedef pthread_attr_t pthread_attr_t; 
# 72
typedef 
# 68
union { 
# 69
__pthread_mutex_s __data; 
# 70
char __size[40]; 
# 71
long __align; 
# 72
} pthread_mutex_t; 
# 80
typedef 
# 76
union { 
# 77
__pthread_cond_s __data; 
# 78
char __size[48]; 
# 79
__extension__ long long __align; 
# 80
} pthread_cond_t; 
# 91
typedef 
# 87
union { 
# 88
__pthread_rwlock_arch_t __data; 
# 89
char __size[56]; 
# 90
long __align; 
# 91
} pthread_rwlock_t; 
# 97
typedef 
# 94
union { 
# 95
char __size[8]; 
# 96
long __align; 
# 97
} pthread_rwlockattr_t; 
# 103
typedef volatile int pthread_spinlock_t; 
# 112
typedef 
# 109
union { 
# 110
char __size[32]; 
# 111
long __align; 
# 112
} pthread_barrier_t; 
# 118
typedef 
# 115
union { 
# 116
char __size[4]; 
# 117
int __align; 
# 118
} pthread_barrierattr_t; 
# 230 "/usr/include/x86_64-linux-gnu/sys/types.h" 3
}
# 402 "/usr/include/stdlib.h" 3
extern long random() noexcept(true); 
# 405
extern void srandom(unsigned __seed) noexcept(true); 
# 411
extern char *initstate(unsigned __seed, char * __statebuf, size_t __statelen) noexcept(true)
# 412
 __attribute((__nonnull__(2))); 
# 416
extern char *setstate(char * __statebuf) noexcept(true) __attribute((__nonnull__(1))); 
# 424
struct random_data { 
# 426
int32_t *fptr; 
# 427
int32_t *rptr; 
# 428
int32_t *state; 
# 429
int rand_type; 
# 430
int rand_deg; 
# 431
int rand_sep; 
# 432
int32_t *end_ptr; 
# 433
}; 
# 435
extern int random_r(random_data *__restrict__ __buf, int32_t *__restrict__ __result) noexcept(true)
# 436
 __attribute((__nonnull__(1, 2))); 
# 438
extern int srandom_r(unsigned __seed, random_data * __buf) noexcept(true)
# 439
 __attribute((__nonnull__(2))); 
# 441
extern int initstate_r(unsigned __seed, char *__restrict__ __statebuf, size_t __statelen, random_data *__restrict__ __buf) noexcept(true)
# 444
 __attribute((__nonnull__(2, 4))); 
# 446
extern int setstate_r(char *__restrict__ __statebuf, random_data *__restrict__ __buf) noexcept(true)
# 448
 __attribute((__nonnull__(1, 2))); 
# 454
extern int rand() noexcept(true); 
# 456
extern void srand(unsigned __seed) noexcept(true); 
# 460
extern int rand_r(unsigned * __seed) noexcept(true); 
# 468
extern double drand48() noexcept(true); 
# 469
extern double erand48(unsigned short  __xsubi[3]) noexcept(true) __attribute((__nonnull__(1))); 
# 472
extern long lrand48() noexcept(true); 
# 473
extern long nrand48(unsigned short  __xsubi[3]) noexcept(true)
# 474
 __attribute((__nonnull__(1))); 
# 477
extern long mrand48() noexcept(true); 
# 478
extern long jrand48(unsigned short  __xsubi[3]) noexcept(true)
# 479
 __attribute((__nonnull__(1))); 
# 482
extern void srand48(long __seedval) noexcept(true); 
# 483
extern unsigned short *seed48(unsigned short  __seed16v[3]) noexcept(true)
# 484
 __attribute((__nonnull__(1))); 
# 485
extern void lcong48(unsigned short  __param[7]) noexcept(true) __attribute((__nonnull__(1))); 
# 491
struct drand48_data { 
# 493
unsigned short __x[3]; 
# 494
unsigned short __old_x[3]; 
# 495
unsigned short __c; 
# 496
unsigned short __init; 
# 497
__extension__ unsigned long long __a; 
# 499
}; 
# 502
extern int drand48_r(drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 503
 __attribute((__nonnull__(1, 2))); 
# 504
extern int erand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, double *__restrict__ __result) noexcept(true)
# 506
 __attribute((__nonnull__(1, 2))); 
# 509
extern int lrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 511
 __attribute((__nonnull__(1, 2))); 
# 512
extern int nrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 515
 __attribute((__nonnull__(1, 2))); 
# 518
extern int mrand48_r(drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 520
 __attribute((__nonnull__(1, 2))); 
# 521
extern int jrand48_r(unsigned short  __xsubi[3], drand48_data *__restrict__ __buffer, long *__restrict__ __result) noexcept(true)
# 524
 __attribute((__nonnull__(1, 2))); 
# 527
extern int srand48_r(long __seedval, drand48_data * __buffer) noexcept(true)
# 528
 __attribute((__nonnull__(2))); 
# 530
extern int seed48_r(unsigned short  __seed16v[3], drand48_data * __buffer) noexcept(true)
# 531
 __attribute((__nonnull__(1, 2))); 
# 533
extern int lcong48_r(unsigned short  __param[7], drand48_data * __buffer) noexcept(true)
# 535
 __attribute((__nonnull__(1, 2))); 
# 540
extern void *malloc(size_t __size) noexcept(true) __attribute((__malloc__))
# 541
 __attribute((__alloc_size__(1))); 
# 543
extern void *calloc(size_t __nmemb, size_t __size) noexcept(true)
# 544
 __attribute((__malloc__)) __attribute((__alloc_size__(1, 2))); 
# 551
extern void *realloc(void * __ptr, size_t __size) noexcept(true)
# 552
 __attribute((__warn_unused_result__)) __attribute((__alloc_size__(2))); 
# 555
extern void free(void * __ptr) noexcept(true); 
# 563
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) noexcept(true)
# 564
 __attribute((__warn_unused_result__))
# 565
 __attribute((__alloc_size__(2, 3)))
# 566
 __attribute((__malloc__(__builtin_free, 1))); 
# 569
extern void *reallocarray(void * __ptr, size_t __nmemb, size_t __size) noexcept(true)
# 570
 __attribute((__malloc__(reallocarray, 1))); 
# 26 "/usr/include/alloca.h" 3
extern "C" {
# 32
extern void *alloca(size_t __size) noexcept(true); 
# 38
}
# 580 "/usr/include/stdlib.h" 3
extern void *valloc(size_t __size) noexcept(true) __attribute((__malloc__))
# 581
 __attribute((__alloc_size__(1))); 
# 586
extern int posix_memalign(void ** __memptr, size_t __alignment, size_t __size) noexcept(true)
# 587
 __attribute((__nonnull__(1))); 
# 592
extern void *aligned_alloc(size_t __alignment, size_t __size) noexcept(true)
# 593
 __attribute((__malloc__)) __attribute((__alloc_align__(1 )))
# 594
 __attribute((__alloc_size__(2))); 
# 598
extern void abort() noexcept(true) __attribute((__noreturn__)); 
# 602
extern int atexit(void (* __func)(void)) noexcept(true) __attribute((__nonnull__(1))); 
# 607
extern "C++" int at_quick_exit(void (* __func)(void)) noexcept(true) __asm__("at_quick_exit")
# 608
 __attribute((__nonnull__(1))); 
# 617 "/usr/include/stdlib.h" 3
extern int on_exit(void (* __func)(int __status, void * __arg), void * __arg) noexcept(true)
# 618
 __attribute((__nonnull__(1))); 
# 624
extern void exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 630
extern void quick_exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 636
extern void _Exit(int __status) noexcept(true) __attribute((__noreturn__)); 
# 641
extern char *getenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 646
extern char *secure_getenv(const char * __name) noexcept(true)
# 647
 __attribute((__nonnull__(1))); 
# 654
extern int putenv(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 660
extern int setenv(const char * __name, const char * __value, int __replace) noexcept(true)
# 661
 __attribute((__nonnull__(2))); 
# 664
extern int unsetenv(const char * __name) noexcept(true) __attribute((__nonnull__(1))); 
# 671
extern int clearenv() noexcept(true); 
# 682 "/usr/include/stdlib.h" 3
extern char *mktemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 695 "/usr/include/stdlib.h" 3
extern int mkstemp(char * __template) __attribute((__nonnull__(1))); 
# 705 "/usr/include/stdlib.h" 3
extern int mkstemp64(char * __template) __attribute((__nonnull__(1))); 
# 717 "/usr/include/stdlib.h" 3
extern int mkstemps(char * __template, int __suffixlen) __attribute((__nonnull__(1))); 
# 727 "/usr/include/stdlib.h" 3
extern int mkstemps64(char * __template, int __suffixlen)
# 728
 __attribute((__nonnull__(1))); 
# 738 "/usr/include/stdlib.h" 3
extern char *mkdtemp(char * __template) noexcept(true) __attribute((__nonnull__(1))); 
# 749 "/usr/include/stdlib.h" 3
extern int mkostemp(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 759 "/usr/include/stdlib.h" 3
extern int mkostemp64(char * __template, int __flags) __attribute((__nonnull__(1))); 
# 769 "/usr/include/stdlib.h" 3
extern int mkostemps(char * __template, int __suffixlen, int __flags)
# 770
 __attribute((__nonnull__(1))); 
# 781 "/usr/include/stdlib.h" 3
extern int mkostemps64(char * __template, int __suffixlen, int __flags)
# 782
 __attribute((__nonnull__(1))); 
# 791 "/usr/include/stdlib.h" 3
extern int system(const char * __command); 
# 797
extern char *canonicalize_file_name(const char * __name) noexcept(true)
# 798
 __attribute((__nonnull__(1))) __attribute((__malloc__))
# 799
 __attribute((__malloc__(__builtin_free, 1))); 
# 808 "/usr/include/stdlib.h" 3
extern char *realpath(const char *__restrict__ __name, char *__restrict__ __resolved) noexcept(true); 
# 816
typedef int (*__compar_fn_t)(const void *, const void *); 
# 819
typedef __compar_fn_t comparison_fn_t; 
# 823
typedef int (*__compar_d_fn_t)(const void *, const void *, void *); 
# 828
extern void *bsearch(const void * __key, const void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 830
 __attribute((__nonnull__(1, 2, 5))); 
# 838
extern void qsort(void * __base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
# 839
 __attribute((__nonnull__(1, 4))); 
# 841
extern void qsort_r(void * __base, size_t __nmemb, size_t __size, __compar_d_fn_t __compar, void * __arg)
# 843
 __attribute((__nonnull__(1, 4))); 
# 848
extern int abs(int __x) noexcept(true) __attribute((const)); 
# 849
extern long labs(long __x) noexcept(true) __attribute((const)); 
# 852
__extension__ extern long long llabs(long long __x) noexcept(true)
# 853
 __attribute((const)); 
# 860
extern div_t div(int __numer, int __denom) noexcept(true)
# 861
 __attribute((const)); 
# 862
extern ldiv_t ldiv(long __numer, long __denom) noexcept(true)
# 863
 __attribute((const)); 
# 866
__extension__ extern lldiv_t lldiv(long long __numer, long long __denom) noexcept(true)
# 868
 __attribute((const)); 
# 880 "/usr/include/stdlib.h" 3
extern char *ecvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 881
 __attribute((__nonnull__(3, 4))); 
# 886
extern char *fcvt(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 887
 __attribute((__nonnull__(3, 4))); 
# 892
extern char *gcvt(double __value, int __ndigit, char * __buf) noexcept(true)
# 893
 __attribute((__nonnull__(3))); 
# 898
extern char *qecvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 900
 __attribute((__nonnull__(3, 4))); 
# 901
extern char *qfcvt(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign) noexcept(true)
# 903
 __attribute((__nonnull__(3, 4))); 
# 904
extern char *qgcvt(long double __value, int __ndigit, char * __buf) noexcept(true)
# 905
 __attribute((__nonnull__(3))); 
# 910
extern int ecvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 912
 __attribute((__nonnull__(3, 4, 5))); 
# 913
extern int fcvt_r(double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 915
 __attribute((__nonnull__(3, 4, 5))); 
# 917
extern int qecvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 920
 __attribute((__nonnull__(3, 4, 5))); 
# 921
extern int qfcvt_r(long double __value, int __ndigit, int *__restrict__ __decpt, int *__restrict__ __sign, char *__restrict__ __buf, size_t __len) noexcept(true)
# 924
 __attribute((__nonnull__(3, 4, 5))); 
# 930
extern int mblen(const char * __s, size_t __n) noexcept(true); 
# 933
extern int mbtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n) noexcept(true); 
# 937
extern int wctomb(char * __s, wchar_t __wchar) noexcept(true); 
# 941
extern size_t mbstowcs(wchar_t *__restrict__ __pwcs, const char *__restrict__ __s, size_t __n) noexcept(true)
# 943
 __attribute((__access__(__read_only__ , 2 ))); 
# 945
extern size_t wcstombs(char *__restrict__ __s, const wchar_t *__restrict__ __pwcs, size_t __n) noexcept(true)
# 948
 __attribute((__access__(__write_only__ , 1 , 3 )))
# 949
 __attribute((__access__(__read_only__ , 2 ))); 
# 956
extern int rpmatch(const char * __response) noexcept(true) __attribute((__nonnull__(1))); 
# 967 "/usr/include/stdlib.h" 3
extern int getsubopt(char **__restrict__ __optionp, char *const *__restrict__ __tokens, char **__restrict__ __valuep) noexcept(true)
# 970
 __attribute((__nonnull__(1, 2, 3))); 
# 978
extern int posix_openpt(int __oflag); 
# 986
extern int grantpt(int __fd) noexcept(true); 
# 990
extern int unlockpt(int __fd) noexcept(true); 
# 995
extern char *ptsname(int __fd) noexcept(true); 
# 1002
extern int ptsname_r(int __fd, char * __buf, size_t __buflen) noexcept(true)
# 1003
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 2 , 3 ))); 
# 1006
extern int getpt(); 
# 1013
extern int getloadavg(double  __loadavg[], int __nelem) noexcept(true)
# 1014
 __attribute((__nonnull__(1))); 
# 1035 "/usr/include/stdlib.h" 3
}
# 46 "/usr/include/c++/11/bits/std_abs.h" 3
extern "C++" {
# 48
namespace std __attribute((__visibility__("default"))) { 
# 52
using ::abs;
# 56
inline long abs(long __i) { return __builtin_labs(__i); } 
# 61
inline long long abs(long long __x) { return __builtin_llabs(__x); } 
# 71 "/usr/include/c++/11/bits/std_abs.h" 3
constexpr double abs(double __x) 
# 72
{ return __builtin_fabs(__x); } 
# 75
constexpr float abs(float __x) 
# 76
{ return __builtin_fabsf(__x); } 
# 79
constexpr long double abs(long double __x) 
# 80
{ return __builtin_fabsl(__x); } 
# 85
constexpr __int128 abs(__int128 __x) { return (__x >= (0)) ? __x : (-__x); } 
# 108 "/usr/include/c++/11/bits/std_abs.h" 3
}
# 109
}
# 121 "/usr/include/c++/11/cstdlib" 3
extern "C++" {
# 123
namespace std __attribute((__visibility__("default"))) { 
# 127
using ::div_t;
# 128
using ::ldiv_t;
# 130
using ::abort;
# 132
using ::aligned_alloc;
# 134
using ::atexit;
# 137
using ::at_quick_exit;
# 140
using ::atof;
# 141
using ::atoi;
# 142
using ::atol;
# 143
using ::bsearch;
# 144
using ::calloc;
# 145
using ::div;
# 146
using ::exit;
# 147
using ::free;
# 148
using ::getenv;
# 149
using ::labs;
# 150
using ::ldiv;
# 151
using ::malloc;
# 153
using ::mblen;
# 154
using ::mbstowcs;
# 155
using ::mbtowc;
# 157
using ::qsort;
# 160
using ::quick_exit;
# 163
using ::rand;
# 164
using ::realloc;
# 165
using ::srand;
# 166
using ::strtod;
# 167
using ::strtol;
# 168
using ::strtoul;
# 169
using ::system;
# 171
using ::wcstombs;
# 172
using ::wctomb;
# 177
inline ldiv_t div(long __i, long __j) { return ldiv(__i, __j); } 
# 182
}
# 195 "/usr/include/c++/11/cstdlib" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 200
using ::lldiv_t;
# 206
using ::_Exit;
# 210
using ::llabs;
# 213
inline lldiv_t div(long long __n, long long __d) 
# 214
{ lldiv_t __q; (__q.quot) = (__n / __d); (__q.rem) = (__n % __d); return __q; } 
# 216
using ::lldiv;
# 227 "/usr/include/c++/11/cstdlib" 3
using ::atoll;
# 228
using ::strtoll;
# 229
using ::strtoull;
# 231
using ::strtof;
# 232
using ::strtold;
# 235
}
# 237
namespace std { 
# 240
using __gnu_cxx::lldiv_t;
# 242
using __gnu_cxx::_Exit;
# 244
using __gnu_cxx::llabs;
# 245
using __gnu_cxx::div;
# 246
using __gnu_cxx::lldiv;
# 248
using __gnu_cxx::atoll;
# 249
using __gnu_cxx::strtof;
# 250
using __gnu_cxx::strtoll;
# 251
using __gnu_cxx::strtoull;
# 252
using __gnu_cxx::strtold;
# 253
}
# 257
}
# 38 "/usr/include/c++/11/stdlib.h" 3
using std::abort;
# 39
using std::atexit;
# 40
using std::exit;
# 43
using std::at_quick_exit;
# 46
using std::quick_exit;
# 54
using std::abs;
# 55
using std::atof;
# 56
using std::atoi;
# 57
using std::atol;
# 58
using std::bsearch;
# 59
using std::calloc;
# 60
using std::div;
# 61
using std::free;
# 62
using std::getenv;
# 63
using std::labs;
# 64
using std::ldiv;
# 65
using std::malloc;
# 67
using std::mblen;
# 68
using std::mbstowcs;
# 69
using std::mbtowc;
# 71
using std::qsort;
# 72
using std::rand;
# 73
using std::realloc;
# 74
using std::srand;
# 75
using std::strtod;
# 76
using std::strtol;
# 77
using std::strtoul;
# 78
using std::system;
# 80
using std::wcstombs;
# 81
using std::wctomb;
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
extern "C" {
# 186
__attribute__((unused)) extern cudaError_t __cudaDeviceSynchronizeDeprecationAvoidance(); 
# 235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 236
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 237
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 238
__attribute__((unused)) extern cudaError_t __cudaCDP2DeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 239
__attribute__((unused)) extern cudaError_t __cudaCDP2GetLastError(); 
# 240
__attribute__((unused)) extern cudaError_t __cudaCDP2PeekAtLastError(); 
# 241
__attribute__((unused)) extern const char *__cudaCDP2GetErrorString(cudaError_t error); 
# 242
__attribute__((unused)) extern const char *__cudaCDP2GetErrorName(cudaError_t error); 
# 243
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDeviceCount(int * count); 
# 244
__attribute__((unused)) extern cudaError_t __cudaCDP2GetDevice(int * device); 
# 245
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 246
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamDestroy(cudaStream_t stream); 
# 247
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 248
__attribute__((unused)) extern cudaError_t __cudaCDP2StreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); 
# 249
__attribute__((unused)) extern cudaError_t __cudaCDP2EventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 250
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord(cudaEvent_t event, cudaStream_t stream); 
# 251
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); 
# 252
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 253
__attribute__((unused)) extern cudaError_t __cudaCDP2EventRecordWithFlags_ptsz(cudaEvent_t event, cudaStream_t stream, unsigned flags); 
# 254
__attribute__((unused)) extern cudaError_t __cudaCDP2EventDestroy(cudaEvent_t event); 
# 255
__attribute__((unused)) extern cudaError_t __cudaCDP2FuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 256
__attribute__((unused)) extern cudaError_t __cudaCDP2Free(void * devPtr); 
# 257
__attribute__((unused)) extern cudaError_t __cudaCDP2Malloc(void ** devPtr, size_t size); 
# 258
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 259
__attribute__((unused)) extern cudaError_t __cudaCDP2MemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); 
# 260
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 261
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); 
# 262
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 263
__attribute__((unused)) extern cudaError_t __cudaCDP2Memcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); 
# 264
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 265
__attribute__((unused)) extern cudaError_t __cudaCDP2MemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); 
# 266
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 267
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); 
# 268
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 269
__attribute__((unused)) extern cudaError_t __cudaCDP2Memset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); 
# 270
__attribute__((unused)) extern cudaError_t __cudaCDP2RuntimeGetVersion(int * runtimeVersion); 
# 271
__attribute__((unused)) extern void *__cudaCDP2GetParameterBuffer(size_t alignment, size_t size); 
# 272
__attribute__((unused)) extern void *__cudaCDP2GetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); 
# 273
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 274
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); 
# 275
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); 
# 276
__attribute__((unused)) extern cudaError_t __cudaCDP2LaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); 
# 277
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); 
# 278
__attribute__((unused)) extern cudaError_t __cudaCDP2OccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 281
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 300 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaGraphExec_t cudaGetCurrentGraphExec() 
# 301
{int volatile ___ = 1;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned long long current_graph_exec; 
# 303
__asm__("mov.u64 %0, %%current_graph_exec;" : "=l" (current_graph_exec) :); 
# 304
return (cudaGraphExec_t)current_graph_exec; 
# 305
} 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void cudaTriggerProgrammaticLaunchCompletion() 
# 324
{int volatile ___ = 1;
# 326
::exit(___);}
#if 0
# 324
{ 
# 325
__asm__ volatile("griddepcontrol.launch_dependents;" : :); 
# 326
} 
#endif
# 339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void cudaGridDependencySynchronize() 
# 340
{int volatile ___ = 1;
# 342
::exit(___);}
#if 0
# 340
{ 
# 341
__asm__ volatile("griddepcontrol.wait;" : : : "memory"); 
# 342
} 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) extern unsigned long long cudaCGGetIntrinsicHandle(cudaCGScope scope); 
# 347
__attribute__((unused)) extern cudaError_t cudaCGSynchronize(unsigned long long handle, unsigned flags); 
# 348
__attribute__((unused)) extern cudaError_t cudaCGSynchronizeGrid(unsigned long long handle, unsigned flags); 
# 349
__attribute__((unused)) extern cudaError_t cudaCGGetSize(unsigned * numThreads, unsigned * numGrids, unsigned long long handle); 
# 350
__attribute__((unused)) extern cudaError_t cudaCGGetRank(unsigned * threadRank, unsigned * gridRank, unsigned long long handle); 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void *cudaGetParameterBuffer(size_t alignment, size_t size) 
# 573
{int volatile ___ = 1;(void)alignment;(void)size;
# 575
::exit(___);}
#if 0
# 573
{ 
# 574
return __cudaCDP2GetParameterBuffer(alignment, size); 
# 575
} 
#endif
# 608 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline void *cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize) 
# 609
{int volatile ___ = 1;(void)func;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;
# 611
::exit(___);}
#if 0
# 609
{ 
# 610
return __cudaCDP2GetParameterBufferV2(func, gridDimension, blockDimension, sharedMemSize); 
# 611
} 
#endif
# 618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice_ptsz(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 619
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 621
::exit(___);}
#if 0
# 619
{ 
# 620
return __cudaCDP2LaunchDevice_ptsz(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 621
} 
#endif
# 623 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2_ptsz(void *parameterBuffer, cudaStream_t stream) 
# 624
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 626
::exit(___);}
#if 0
# 624
{ 
# 625
return __cudaCDP2LaunchDeviceV2_ptsz(parameterBuffer, stream); 
# 626
} 
#endif
# 658 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream) 
# 659
{int volatile ___ = 1;(void)func;(void)parameterBuffer;(void)gridDimension;(void)blockDimension;(void)sharedMemSize;(void)stream;
# 661
::exit(___);}
#if 0
# 659
{ 
# 660
return __cudaCDP2LaunchDevice(func, parameterBuffer, gridDimension, blockDimension, sharedMemSize, stream); 
# 661
} 
#endif
# 663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
__attribute__((unused)) static inline cudaError_t cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream) 
# 664
{int volatile ___ = 1;(void)parameterBuffer;(void)stream;
# 666
::exit(___);}
#if 0
# 664
{ 
# 665
return __cudaCDP2LaunchDeviceV2(parameterBuffer, stream); 
# 666
} 
#endif
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_device_runtime_api.h"
}
# 722
template< class T> static inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
# 723
template< class T> static inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
# 724
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
# 725
template< class T> static inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
# 272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern "C" {
# 312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceReset(); 
# 334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSynchronize(); 
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetLimit(cudaLimit limit, size_t value); 
# 456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); 
# 479 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetTexture1DLinearMaxWidth(size_t * maxWidthInElements, const cudaChannelFormatDesc * fmtDesc, int device); 
# 513 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); 
# 594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); 
# 625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); 
# 669 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); 
# 696 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); 
# 726 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); 
# 776 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); 
# 819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); 
# 863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); 
# 929 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); 
# 967 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaIpcCloseMemHandle(void * devPtr); 
# 999 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceFlushGPUDirectRDMAWrites(cudaFlushGPUDirectRDMAWritesTarget target, cudaFlushGPUDirectRDMAWritesScope scope); 
# 1042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadExit(); 
# 1068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSynchronize(); 
# 1117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetLimit(cudaLimit limit, size_t value); 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetLimit(size_t * pValue, cudaLimit limit); 
# 1186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); 
# 1233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); 
# 1298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetLastError(); 
# 1349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaPeekAtLastError(); 
# 1365 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern const char *cudaGetErrorName(cudaError_t error); 
# 1381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern const char *cudaGetErrorString(cudaError_t error); 
# 1410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceCount(int * count); 
# 1715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceProperties_v2(cudaDeviceProp * prop, int device); 
# 1917 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); 
# 1935 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetDefaultMemPool(cudaMemPool_t * memPool, int device); 
# 1959 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetMemPool(int device, cudaMemPool_t memPool); 
# 1979 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetMemPool(cudaMemPool_t * memPool, int device); 
# 2041 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetNvSciSyncAttributes(void * nvSciSyncAttrList, int device, int flags); 
# 2081 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetP2PAttribute(int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice); 
# 2103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaChooseDevice(int * device, const cudaDeviceProp * prop); 
# 2132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaInitDevice(int device, unsigned deviceFlags, unsigned flags); 
# 2178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDevice(int device); 
# 2200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDevice(int * device); 
# 2231 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetValidDevices(int * device_arr, int len); 
# 2297 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSetDeviceFlags(unsigned flags); 
# 2342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDeviceFlags(unsigned * flags); 
# 2382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreate(cudaStream_t * pStream); 
# 2414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); 
# 2460 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); 
# 2487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetPriority(cudaStream_t hStream, int * priority); 
# 2512 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); 
# 2549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetId(cudaStream_t hStream, unsigned long long * streamId); 
# 2564 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCtxResetPersistingL2Cache(); 
# 2584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamCopyAttributes(cudaStream_t dst, cudaStream_t src); 
# 2605 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 2629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSetAttribute(cudaStream_t hStream, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 2663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamDestroy(cudaStream_t stream); 
# 2694 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags = 0); 
# 2702
typedef void (*cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); 
# 2769 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); 
# 2793 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamSynchronize(cudaStream_t stream); 
# 2818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamQuery(cudaStream_t stream); 
# 2902 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length = 0, unsigned flags = 4); 
# 2941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamBeginCapture(cudaStream_t stream, cudaStreamCaptureMode mode); 
# 2992 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaThreadExchangeStreamCaptureMode(cudaStreamCaptureMode * mode); 
# 3020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamEndCapture(cudaStream_t stream, cudaGraph_t * pGraph); 
# 3058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamIsCapturing(cudaStream_t stream, cudaStreamCaptureStatus * pCaptureStatus); 
# 3106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamGetCaptureInfo_v2(cudaStream_t stream, cudaStreamCaptureStatus * captureStatus_out, unsigned long long * id_out = 0, cudaGraph_t * graph_out = 0, const cudaGraphNode_t ** dependencies_out = 0, size_t * numDependencies_out = 0); 
# 3138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaStreamUpdateCaptureDependencies(cudaStream_t stream, cudaGraphNode_t * dependencies, size_t numDependencies, unsigned flags = 0); 
# 3175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreate(cudaEvent_t * event); 
# 3212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); 
# 3252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); 
# 3299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventRecordWithFlags(cudaEvent_t event, cudaStream_t stream = 0, unsigned flags = 0); 
# 3331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventQuery(cudaEvent_t event); 
# 3361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventSynchronize(cudaEvent_t event); 
# 3390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventDestroy(cudaEvent_t event); 
# 3434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); 
# 3615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalMemory(cudaExternalMemory_t * extMem_out, const cudaExternalMemoryHandleDesc * memHandleDesc); 
# 3670 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedBuffer(void ** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc * bufferDesc); 
# 3730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaExternalMemoryGetMappedMipmappedArray(cudaMipmappedArray_t * mipmap, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc * mipmapDesc); 
# 3754 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalMemory(cudaExternalMemory_t extMem); 
# 3908 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaImportExternalSemaphore(cudaExternalSemaphore_t * extSem_out, const cudaExternalSemaphoreHandleDesc * semHandleDesc); 
# 3991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaSignalExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreSignalParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaWaitExternalSemaphoresAsync_v2(const cudaExternalSemaphore_t * extSemArray, const cudaExternalSemaphoreWaitParams * paramsArray, unsigned numExtSems, cudaStream_t stream = 0); 
# 4090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyExternalSemaphore(cudaExternalSemaphore_t extSem); 
# 4157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchKernelExC(const cudaLaunchConfig_t * config, const void * func, void ** args); 
# 4276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchCooperativeKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); 
# 4377 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaLaunchCooperativeKernelMultiDevice(cudaLaunchParams * launchParamsList, unsigned numDevices, unsigned flags = 0); 
# 4422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); 
# 4477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); 
# 4510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); 
# 4547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFuncSetAttribute(const void * func, cudaFuncAttribute attr, int value); 
# 4571 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForDevice(double * d); 
# 4595 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaSetDoubleForHost(double * d); 
# 4661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaLaunchHostFunc(cudaStream_t stream, cudaHostFn_t fn, void * userData); 
# 4718 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); 
# 4747 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyAvailableDynamicSMemPerBlock(size_t * dynamicSmemSize, const void * func, int numBlocks, int blockSize); 
# 4792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); 
# 4827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxPotentialClusterSize(int * clusterSize, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 4866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaOccupancyMaxActiveClusters(int * numClusters, const void * func, const cudaLaunchConfig_t * launchConfig); 
# 4986 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocManaged(void ** devPtr, size_t size, unsigned flags = 1); 
# 5019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc(void ** devPtr, size_t size); 
# 5052 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocHost(void ** ptr, size_t size); 
# 5095 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); 
# 5147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); 
# 5185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFree(void * devPtr); 
# 5208 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeHost(void * ptr); 
# 5231 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeArray(cudaArray_t array); 
# 5254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); 
# 5320 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostAlloc(void ** pHost, size_t size, unsigned flags); 
# 5417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostRegister(void * ptr, size_t size, unsigned flags); 
# 5440 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostUnregister(void * ptr); 
# 5485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); 
# 5507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaHostGetFlags(unsigned * pFlags, void * pHost); 
# 5546 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); 
# 5691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); 
# 5836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); 
# 5869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); 
# 5974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3D(const cudaMemcpy3DParms * p); 
# 6006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); 
# 6124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); 
# 6151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); 
# 6185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemGetInfo(size_t * free, size_t * total); 
# 6211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); 
# 6240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetPlane(cudaArray_t * pPlaneArray, cudaArray_t hArray, unsigned planeIdx); 
# 6263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaArray_t array, int device); 
# 6287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetMemoryRequirements(cudaArrayMemoryRequirements * memoryRequirements, cudaMipmappedArray_t mipmap, int device); 
# 6315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaArray_t array); 
# 6345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMipmappedArrayGetSparseProperties(cudaArraySparseProperties * sparseProperties, cudaMipmappedArray_t mipmap); 
# 6390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 6425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); 
# 6474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); 
# 6574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); 
# 6621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 6664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); 
# 6707 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); 
# 6764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); 
# 6862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 6977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7079 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset(void * devPtr, int value, size_t count); 
# 7142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); 
# 7188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); 
# 7224 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); 
# 7265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); 
# 7318 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); 
# 7346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolAddress(void ** devPtr, const void * symbol); 
# 7373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSymbolSize(size_t * size, const void * symbol); 
# 7443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPrefetchAsync(const void * devPtr, size_t count, int dstDevice, cudaStream_t stream = 0); 
# 7559 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemAdvise(const void * devPtr, size_t count, cudaMemoryAdvise advice, int device); 
# 7618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttribute(void * data, size_t dataSize, cudaMemRangeAttribute attribute, const void * devPtr, size_t count); 
# 7657 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemRangeGetAttributes(void ** data, size_t * dataSizes, cudaMemRangeAttribute * attributes, size_t numAttributes, const void * devPtr, size_t count); 
# 7717 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); 
# 7759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); 
# 7802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); 
# 7853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7903 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
__attribute((deprecated)) extern cudaError_t cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); 
# 7972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocAsync(void ** devPtr, size_t size, cudaStream_t hStream); 
# 7998 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaFreeAsync(void * devPtr, cudaStream_t hStream); 
# 8023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolTrimTo(cudaMemPool_t memPool, size_t minBytesToKeep); 
# 8067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAttribute(cudaMemPool_t memPool, cudaMemPoolAttr attr, void * value); 
# 8130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolSetAccess(cudaMemPool_t memPool, const cudaMemAccessDesc * descList, size_t count); 
# 8143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolGetAccess(cudaMemAccessFlags * flags, cudaMemPool_t memPool, cudaMemLocation * location); 
# 8163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolCreate(cudaMemPool_t * memPool, const cudaMemPoolProps * poolProps); 
# 8185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolDestroy(cudaMemPool_t memPool); 
# 8221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMallocFromPoolAsync(void ** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream); 
# 8246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportToShareableHandle(void * shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportFromShareableHandle(cudaMemPool_t * memPool, void * shareableHandle, cudaMemAllocationHandleType handleType, unsigned flags); 
# 8296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolExportPointer(cudaMemPoolPtrExportData * exportData, void * ptr); 
# 8325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaMemPoolImportPointer(void ** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData * exportData); 
# 8478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); 
# 8519 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); 
# 8561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); 
# 8583 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceDisablePeerAccess(int peerDevice); 
# 8647 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); 
# 8682 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); 
# 8721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); 
# 8788 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); 
# 8826 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); 
# 8855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); 
# 8890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); 
# 8920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaChannelFormatDesc cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); 
# 9144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); 
# 9164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroyTextureObject(cudaTextureObject_t texObject); 
# 9184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); 
# 9204 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); 
# 9225 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); 
# 9270 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); 
# 9290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); 
# 9309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); 
# 9343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDriverGetVersion(int * driverVersion); 
# 9372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaRuntimeGetVersion(int * runtimeVersion); 
# 9419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphCreate(cudaGraph_t * pGraph, unsigned flags); 
# 9516 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddKernelNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaKernelNodeParams * pNodeParams); 
# 9549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetParams(cudaGraphNode_t node, cudaKernelNodeParams * pNodeParams); 
# 9574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetParams(cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 9594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeCopyAttributes(cudaGraphNode_t hSrc, cudaGraphNode_t hDst); 
# 9617 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeGetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, cudaLaunchAttributeValue * value_out); 
# 9641 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphKernelNodeSetAttribute(cudaGraphNode_t hNode, cudaLaunchAttributeID attr, const cudaLaunchAttributeValue * value); 
# 9691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemcpy3DParms * pCopyParams); 
# 9750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 9887 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemcpyNode1D(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 9919 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeGetParams(cudaGraphNode_t node, cudaMemcpy3DParms * pNodeParams); 
# 9945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams(cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 9984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 10076 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemcpyNodeSetParams1D(cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 10123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemsetNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaMemsetParams * pMemsetParams); 
# 10146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeGetParams(cudaGraphNode_t node, cudaMemsetParams * pNodeParams); 
# 10169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemsetNodeSetParams(cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 10210 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddHostNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaHostNodeParams * pNodeParams); 
# 10233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeGetParams(cudaGraphNode_t node, cudaHostNodeParams * pNodeParams); 
# 10256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphHostNodeSetParams(cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 10296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddChildGraphNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaGraph_t childGraph); 
# 10323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphChildGraphNodeGetGraph(cudaGraphNode_t node, cudaGraph_t * pGraph); 
# 10360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEmptyNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies); 
# 10403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventRecordNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10457 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventRecordNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10503 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddEventWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaEvent_t event); 
# 10530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeGetEvent(cudaGraphNode_t node, cudaEvent_t * event_out); 
# 10557 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphEventWaitNodeSetEvent(cudaGraphNode_t node, cudaEvent_t event); 
# 10606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresSignalNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams * params_out); 
# 10666 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 10715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddExternalSemaphoresWaitNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10748 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams(cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams * params_out); 
# 10775 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams(cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 10852 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemAllocNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, cudaMemAllocNodeParams * nodeParams); 
# 10879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemAllocNodeGetParams(cudaGraphNode_t node, cudaMemAllocNodeParams * params_out); 
# 10939 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddMemFreeNode(cudaGraphNode_t * pGraphNode, cudaGraph_t graph, const cudaGraphNode_t * pDependencies, size_t numDependencies, void * dptr); 
# 10963 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphMemFreeNodeGetParams(cudaGraphNode_t node, void * dptr_out); 
# 10991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGraphMemTrim(int device); 
# 11028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceGetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaDeviceSetGraphMemAttribute(int device, cudaGraphMemAttributeType attr, void * value); 
# 11090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphClone(cudaGraph_t * pGraphClone, cudaGraph_t originalGraph); 
# 11118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeFindInClone(cudaGraphNode_t * pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph); 
# 11149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetType(cudaGraphNode_t node, cudaGraphNodeType * pType); 
# 11180 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetNodes(cudaGraph_t graph, cudaGraphNode_t * nodes, size_t * numNodes); 
# 11211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetRootNodes(cudaGraph_t graph, cudaGraphNode_t * pRootNodes, size_t * pNumRootNodes); 
# 11245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphGetEdges(cudaGraph_t graph, cudaGraphNode_t * from, cudaGraphNode_t * to, size_t * numEdges); 
# 11276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependencies(cudaGraphNode_t node, cudaGraphNode_t * pDependencies, size_t * pNumDependencies); 
# 11308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetDependentNodes(cudaGraphNode_t node, cudaGraphNode_t * pDependentNodes, size_t * pNumDependentNodes); 
# 11339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphAddDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRemoveDependencies(cudaGraph_t graph, const cudaGraphNode_t * from, const cudaGraphNode_t * to, size_t numDependencies); 
# 11400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroyNode(cudaGraphNode_t node); 
# 11462 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiate(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 11533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithFlags(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, unsigned long long flags = 0); 
# 11638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphInstantiateWithParams(cudaGraphExec_t * pGraphExec, cudaGraph_t graph, cudaGraphInstantiateParams * instantiateParams); 
# 11663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecGetFlags(cudaGraphExec_t graphExec, unsigned long long * flags); 
# 11714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecKernelNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams * pNodeParams); 
# 11764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms * pNodeParams); 
# 11819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11882 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind); 
# 11943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemcpyNodeSetParams1D(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void * dst, const void * src, size_t count, cudaMemcpyKind kind); 
# 11997 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecMemsetNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams * pNodeParams); 
# 12036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecHostNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams * pNodeParams); 
# 12082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecChildGraphNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph); 
# 12126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventRecordNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecEventWaitNodeSetEvent(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event); 
# 12217 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams * nodeParams); 
# 12264 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams * nodeParams); 
# 12304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeSetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned isEnabled); 
# 12338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphNodeGetEnabled(cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned * isEnabled); 
# 12423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo * resultInfo); 
# 12448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphUpload(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12479 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphLaunch(cudaGraphExec_t graphExec, cudaStream_t stream); 
# 12502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphExecDestroy(cudaGraphExec_t graphExec); 
# 12523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDestroy(cudaGraph_t graph); 
# 12542 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphDebugDotPrint(cudaGraph_t graph, const char * path, unsigned flags); 
# 12578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectCreate(cudaUserObject_t * object_out, void * ptr, cudaHostFn_t destroy, unsigned initialRefcount, unsigned flags); 
# 12602 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRetain(cudaUserObject_t object, unsigned count = 1); 
# 12630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaUserObjectRelease(cudaUserObject_t object, unsigned count = 1); 
# 12658 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphRetainUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1, unsigned flags = 0); 
# 12683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGraphReleaseUserObject(cudaGraph_t graph, cudaUserObject_t object, unsigned count = 1); 
# 12761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetDriverEntryPoint(const char * symbol, void ** funcPtr, unsigned long long flags, cudaDriverEntryPointQueryResult * driverStatus = 0); 
# 12769 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); 
# 12948 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetFuncBySymbol(cudaFunction_t * functionPtr, const void * symbolPtr); 
# 12964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
extern cudaError_t cudaGetKernel(cudaKernel_t * kernelPtr, const void * entryFuncAddr); 
# 13125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime_api.h"
}
# 117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template< class T> inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 118
{ 
# 119
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 120
} 
# 122
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
# 123
{ 
# 124
int e = (((int)sizeof(unsigned short)) * 8); 
# 126
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 127
} 
# 129
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
# 130
{ 
# 131
int e = (((int)sizeof(unsigned short)) * 8); 
# 133
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 134
} 
# 136
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
# 137
{ 
# 138
int e = (((int)sizeof(unsigned short)) * 8); 
# 140
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 141
} 
# 143
static inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
# 144
{ 
# 145
int e = (((int)sizeof(unsigned short)) * 8); 
# 147
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 148
} 
# 150
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
# 151
{ 
# 152
int e = (((int)sizeof(char)) * 8); 
# 157
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 159
} 
# 161
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
# 162
{ 
# 163
int e = (((int)sizeof(signed char)) * 8); 
# 165
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 166
} 
# 168
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
# 169
{ 
# 170
int e = (((int)sizeof(unsigned char)) * 8); 
# 172
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 173
} 
# 175
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
# 176
{ 
# 177
int e = (((int)sizeof(signed char)) * 8); 
# 179
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 180
} 
# 182
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
# 183
{ 
# 184
int e = (((int)sizeof(unsigned char)) * 8); 
# 186
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 187
} 
# 189
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
# 190
{ 
# 191
int e = (((int)sizeof(signed char)) * 8); 
# 193
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 194
} 
# 196
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
# 197
{ 
# 198
int e = (((int)sizeof(unsigned char)) * 8); 
# 200
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 201
} 
# 203
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
# 204
{ 
# 205
int e = (((int)sizeof(signed char)) * 8); 
# 207
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 208
} 
# 210
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
# 211
{ 
# 212
int e = (((int)sizeof(unsigned char)) * 8); 
# 214
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 215
} 
# 217
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
# 218
{ 
# 219
int e = (((int)sizeof(short)) * 8); 
# 221
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 222
} 
# 224
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
# 225
{ 
# 226
int e = (((int)sizeof(unsigned short)) * 8); 
# 228
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 229
} 
# 231
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
# 232
{ 
# 233
int e = (((int)sizeof(short)) * 8); 
# 235
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 236
} 
# 238
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
# 239
{ 
# 240
int e = (((int)sizeof(unsigned short)) * 8); 
# 242
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 243
} 
# 245
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
# 246
{ 
# 247
int e = (((int)sizeof(short)) * 8); 
# 249
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 250
} 
# 252
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
# 253
{ 
# 254
int e = (((int)sizeof(unsigned short)) * 8); 
# 256
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 257
} 
# 259
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
# 260
{ 
# 261
int e = (((int)sizeof(short)) * 8); 
# 263
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 264
} 
# 266
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
# 267
{ 
# 268
int e = (((int)sizeof(unsigned short)) * 8); 
# 270
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 271
} 
# 273
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
# 274
{ 
# 275
int e = (((int)sizeof(int)) * 8); 
# 277
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 278
} 
# 280
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
# 281
{ 
# 282
int e = (((int)sizeof(unsigned)) * 8); 
# 284
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 285
} 
# 287
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
# 288
{ 
# 289
int e = (((int)sizeof(int)) * 8); 
# 291
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
# 292
} 
# 294
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
# 295
{ 
# 296
int e = (((int)sizeof(unsigned)) * 8); 
# 298
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
# 299
} 
# 301
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
# 302
{ 
# 303
int e = (((int)sizeof(int)) * 8); 
# 305
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
# 306
} 
# 308
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
# 309
{ 
# 310
int e = (((int)sizeof(unsigned)) * 8); 
# 312
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
# 313
} 
# 315
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
# 316
{ 
# 317
int e = (((int)sizeof(int)) * 8); 
# 319
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
# 320
} 
# 322
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
# 323
{ 
# 324
int e = (((int)sizeof(unsigned)) * 8); 
# 326
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
# 327
} 
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/channel_descriptor.h"
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
# 390
{ 
# 391
int e = (((int)sizeof(float)) * 8); 
# 393
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 394
} 
# 396
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
# 397
{ 
# 398
int e = (((int)sizeof(float)) * 8); 
# 400
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
# 401
} 
# 403
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
# 404
{ 
# 405
int e = (((int)sizeof(float)) * 8); 
# 407
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
# 408
} 
# 410
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
# 411
{ 
# 412
int e = (((int)sizeof(float)) * 8); 
# 414
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
# 415
} 
# 417
static inline cudaChannelFormatDesc cudaCreateChannelDescNV12() 
# 418
{ 
# 419
int e = (((int)sizeof(char)) * 8); 
# 421
return cudaCreateChannelDesc(e, e, e, 0, cudaChannelFormatKindNV12); 
# 422
} 
# 424
template< cudaChannelFormatKind > inline cudaChannelFormatDesc cudaCreateChannelDesc() 
# 425
{ 
# 426
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
# 427
} 
# 430
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X1> () 
# 431
{ 
# 432
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedNormalized8X1); 
# 433
} 
# 435
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X2> () 
# 436
{ 
# 437
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedNormalized8X2); 
# 438
} 
# 440
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized8X4> () 
# 441
{ 
# 442
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindSignedNormalized8X4); 
# 443
} 
# 446
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X1> () 
# 447
{ 
# 448
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized8X1); 
# 449
} 
# 451
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X2> () 
# 452
{ 
# 453
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedNormalized8X2); 
# 454
} 
# 456
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized8X4> () 
# 457
{ 
# 458
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedNormalized8X4); 
# 459
} 
# 462
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X1> () 
# 463
{ 
# 464
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindSignedNormalized16X1); 
# 465
} 
# 467
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X2> () 
# 468
{ 
# 469
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindSignedNormalized16X2); 
# 470
} 
# 472
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedNormalized16X4> () 
# 473
{ 
# 474
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindSignedNormalized16X4); 
# 475
} 
# 478
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X1> () 
# 479
{ 
# 480
return cudaCreateChannelDesc(16, 0, 0, 0, cudaChannelFormatKindUnsignedNormalized16X1); 
# 481
} 
# 483
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X2> () 
# 484
{ 
# 485
return cudaCreateChannelDesc(16, 16, 0, 0, cudaChannelFormatKindUnsignedNormalized16X2); 
# 486
} 
# 488
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedNormalized16X4> () 
# 489
{ 
# 490
return cudaCreateChannelDesc(16, 16, 16, 16, cudaChannelFormatKindUnsignedNormalized16X4); 
# 491
} 
# 494
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindNV12> () 
# 495
{ 
# 496
return cudaCreateChannelDesc(8, 8, 8, 0, cudaChannelFormatKindNV12); 
# 497
} 
# 500
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1> () 
# 501
{ 
# 502
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1); 
# 503
} 
# 506
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed1SRGB> () 
# 507
{ 
# 508
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed1SRGB); 
# 509
} 
# 512
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2> () 
# 513
{ 
# 514
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2); 
# 515
} 
# 518
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed2SRGB> () 
# 519
{ 
# 520
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed2SRGB); 
# 521
} 
# 524
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3> () 
# 525
{ 
# 526
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3); 
# 527
} 
# 530
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed3SRGB> () 
# 531
{ 
# 532
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed3SRGB); 
# 533
} 
# 536
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed4> () 
# 537
{ 
# 538
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed4); 
# 539
} 
# 542
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed4> () 
# 543
{ 
# 544
return cudaCreateChannelDesc(8, 0, 0, 0, cudaChannelFormatKindSignedBlockCompressed4); 
# 545
} 
# 548
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed5> () 
# 549
{ 
# 550
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindUnsignedBlockCompressed5); 
# 551
} 
# 554
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed5> () 
# 555
{ 
# 556
return cudaCreateChannelDesc(8, 8, 0, 0, cudaChannelFormatKindSignedBlockCompressed5); 
# 557
} 
# 560
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed6H> () 
# 561
{ 
# 562
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindUnsignedBlockCompressed6H); 
# 563
} 
# 566
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindSignedBlockCompressed6H> () 
# 567
{ 
# 568
return cudaCreateChannelDesc(16, 16, 16, 0, cudaChannelFormatKindSignedBlockCompressed6H); 
# 569
} 
# 572
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7> () 
# 573
{ 
# 574
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7); 
# 575
} 
# 578
template<> inline cudaChannelFormatDesc cudaCreateChannelDesc< cudaChannelFormatKindUnsignedBlockCompressed7SRGB> () 
# 579
{ 
# 580
return cudaCreateChannelDesc(8, 8, 8, 8, cudaChannelFormatKindUnsignedBlockCompressed7SRGB); 
# 581
} 
# 79 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
# 80
{ 
# 81
cudaPitchedPtr s; 
# 83
(s.ptr) = d; 
# 84
(s.pitch) = p; 
# 85
(s.xsize) = xsz; 
# 86
(s.ysize) = ysz; 
# 88
return s; 
# 89
} 
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
# 107
{ 
# 108
cudaPos p; 
# 110
(p.x) = x; 
# 111
(p.y) = y; 
# 112
(p.z) = z; 
# 114
return p; 
# 115
} 
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/driver_functions.h"
static inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
# 133
{ 
# 134
cudaExtent e; 
# 136
(e.width) = w; 
# 137
(e.height) = h; 
# 138
(e.depth) = d; 
# 140
return e; 
# 141
} 
# 73 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_functions.h"
static inline char1 make_char1(signed char x); 
# 75
static inline uchar1 make_uchar1(unsigned char x); 
# 77
static inline char2 make_char2(signed char x, signed char y); 
# 79
static inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
# 81
static inline char3 make_char3(signed char x, signed char y, signed char z); 
# 83
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
# 85
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
# 87
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
# 89
static inline short1 make_short1(short x); 
# 91
static inline ushort1 make_ushort1(unsigned short x); 
# 93
static inline short2 make_short2(short x, short y); 
# 95
static inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
# 97
static inline short3 make_short3(short x, short y, short z); 
# 99
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
# 101
static inline short4 make_short4(short x, short y, short z, short w); 
# 103
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
# 105
static inline int1 make_int1(int x); 
# 107
static inline uint1 make_uint1(unsigned x); 
# 109
static inline int2 make_int2(int x, int y); 
# 111
static inline uint2 make_uint2(unsigned x, unsigned y); 
# 113
static inline int3 make_int3(int x, int y, int z); 
# 115
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
# 117
static inline int4 make_int4(int x, int y, int z, int w); 
# 119
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
# 121
static inline long1 make_long1(long x); 
# 123
static inline ulong1 make_ulong1(unsigned long x); 
# 125
static inline long2 make_long2(long x, long y); 
# 127
static inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
# 129
static inline long3 make_long3(long x, long y, long z); 
# 131
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
# 133
static inline long4 make_long4(long x, long y, long z, long w); 
# 135
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
# 137
static inline float1 make_float1(float x); 
# 139
static inline float2 make_float2(float x, float y); 
# 141
static inline float3 make_float3(float x, float y, float z); 
# 143
static inline float4 make_float4(float x, float y, float z, float w); 
# 145
static inline longlong1 make_longlong1(long long x); 
# 147
static inline ulonglong1 make_ulonglong1(unsigned long long x); 
# 149
static inline longlong2 make_longlong2(long long x, long long y); 
# 151
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y); 
# 153
static inline longlong3 make_longlong3(long long x, long long y, long long z); 
# 155
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z); 
# 157
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w); 
# 159
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w); 
# 161
static inline double1 make_double1(double x); 
# 163
static inline double2 make_double2(double x, double y); 
# 165
static inline double3 make_double3(double x, double y, double z); 
# 167
static inline double4 make_double4(double x, double y, double z, double w); 
# 73 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/vector_functions.hpp"
static inline char1 make_char1(signed char x) 
# 74
{ 
# 75
char1 t; (t.x) = x; return t; 
# 76
} 
# 78
static inline uchar1 make_uchar1(unsigned char x) 
# 79
{ 
# 80
uchar1 t; (t.x) = x; return t; 
# 81
} 
# 83
static inline char2 make_char2(signed char x, signed char y) 
# 84
{ 
# 85
char2 t; (t.x) = x; (t.y) = y; return t; 
# 86
} 
# 88
static inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
# 89
{ 
# 90
uchar2 t; (t.x) = x; (t.y) = y; return t; 
# 91
} 
# 93
static inline char3 make_char3(signed char x, signed char y, signed char z) 
# 94
{ 
# 95
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 96
} 
# 98
static inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
# 99
{ 
# 100
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 101
} 
# 103
static inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
# 104
{ 
# 105
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 106
} 
# 108
static inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
# 109
{ 
# 110
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 111
} 
# 113
static inline short1 make_short1(short x) 
# 114
{ 
# 115
short1 t; (t.x) = x; return t; 
# 116
} 
# 118
static inline ushort1 make_ushort1(unsigned short x) 
# 119
{ 
# 120
ushort1 t; (t.x) = x; return t; 
# 121
} 
# 123
static inline short2 make_short2(short x, short y) 
# 124
{ 
# 125
short2 t; (t.x) = x; (t.y) = y; return t; 
# 126
} 
# 128
static inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
# 129
{ 
# 130
ushort2 t; (t.x) = x; (t.y) = y; return t; 
# 131
} 
# 133
static inline short3 make_short3(short x, short y, short z) 
# 134
{ 
# 135
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 136
} 
# 138
static inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
# 139
{ 
# 140
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 141
} 
# 143
static inline short4 make_short4(short x, short y, short z, short w) 
# 144
{ 
# 145
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 146
} 
# 148
static inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
# 149
{ 
# 150
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 151
} 
# 153
static inline int1 make_int1(int x) 
# 154
{ 
# 155
int1 t; (t.x) = x; return t; 
# 156
} 
# 158
static inline uint1 make_uint1(unsigned x) 
# 159
{ 
# 160
uint1 t; (t.x) = x; return t; 
# 161
} 
# 163
static inline int2 make_int2(int x, int y) 
# 164
{ 
# 165
int2 t; (t.x) = x; (t.y) = y; return t; 
# 166
} 
# 168
static inline uint2 make_uint2(unsigned x, unsigned y) 
# 169
{ 
# 170
uint2 t; (t.x) = x; (t.y) = y; return t; 
# 171
} 
# 173
static inline int3 make_int3(int x, int y, int z) 
# 174
{ 
# 175
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 176
} 
# 178
static inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
# 179
{ 
# 180
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 181
} 
# 183
static inline int4 make_int4(int x, int y, int z, int w) 
# 184
{ 
# 185
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 186
} 
# 188
static inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
# 189
{ 
# 190
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 191
} 
# 193
static inline long1 make_long1(long x) 
# 194
{ 
# 195
long1 t; (t.x) = x; return t; 
# 196
} 
# 198
static inline ulong1 make_ulong1(unsigned long x) 
# 199
{ 
# 200
ulong1 t; (t.x) = x; return t; 
# 201
} 
# 203
static inline long2 make_long2(long x, long y) 
# 204
{ 
# 205
long2 t; (t.x) = x; (t.y) = y; return t; 
# 206
} 
# 208
static inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
# 209
{ 
# 210
ulong2 t; (t.x) = x; (t.y) = y; return t; 
# 211
} 
# 213
static inline long3 make_long3(long x, long y, long z) 
# 214
{ 
# 215
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 216
} 
# 218
static inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
# 219
{ 
# 220
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 221
} 
# 223
static inline long4 make_long4(long x, long y, long z, long w) 
# 224
{ 
# 225
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 226
} 
# 228
static inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
# 229
{ 
# 230
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 231
} 
# 233
static inline float1 make_float1(float x) 
# 234
{ 
# 235
float1 t; (t.x) = x; return t; 
# 236
} 
# 238
static inline float2 make_float2(float x, float y) 
# 239
{ 
# 240
float2 t; (t.x) = x; (t.y) = y; return t; 
# 241
} 
# 243
static inline float3 make_float3(float x, float y, float z) 
# 244
{ 
# 245
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 246
} 
# 248
static inline float4 make_float4(float x, float y, float z, float w) 
# 249
{ 
# 250
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 251
} 
# 253
static inline longlong1 make_longlong1(long long x) 
# 254
{ 
# 255
longlong1 t; (t.x) = x; return t; 
# 256
} 
# 258
static inline ulonglong1 make_ulonglong1(unsigned long long x) 
# 259
{ 
# 260
ulonglong1 t; (t.x) = x; return t; 
# 261
} 
# 263
static inline longlong2 make_longlong2(long long x, long long y) 
# 264
{ 
# 265
longlong2 t; (t.x) = x; (t.y) = y; return t; 
# 266
} 
# 268
static inline ulonglong2 make_ulonglong2(unsigned long long x, unsigned long long y) 
# 269
{ 
# 270
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
# 271
} 
# 273
static inline longlong3 make_longlong3(long long x, long long y, long long z) 
# 274
{ 
# 275
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 276
} 
# 278
static inline ulonglong3 make_ulonglong3(unsigned long long x, unsigned long long y, unsigned long long z) 
# 279
{ 
# 280
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 281
} 
# 283
static inline longlong4 make_longlong4(long long x, long long y, long long z, long long w) 
# 284
{ 
# 285
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 286
} 
# 288
static inline ulonglong4 make_ulonglong4(unsigned long long x, unsigned long long y, unsigned long long z, unsigned long long w) 
# 289
{ 
# 290
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 291
} 
# 293
static inline double1 make_double1(double x) 
# 294
{ 
# 295
double1 t; (t.x) = x; return t; 
# 296
} 
# 298
static inline double2 make_double2(double x, double y) 
# 299
{ 
# 300
double2 t; (t.x) = x; (t.y) = y; return t; 
# 301
} 
# 303
static inline double3 make_double3(double x, double y, double z) 
# 304
{ 
# 305
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
# 306
} 
# 308
static inline double4 make_double4(double x, double y, double z, double w) 
# 309
{ 
# 310
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
# 311
} 
# 28 "/usr/include/string.h" 3
extern "C" {
# 43 "/usr/include/string.h" 3
extern void *memcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 44
 __attribute((__nonnull__(1, 2))); 
# 47
extern void *memmove(void * __dest, const void * __src, size_t __n) noexcept(true)
# 48
 __attribute((__nonnull__(1, 2))); 
# 54
extern void *memccpy(void *__restrict__ __dest, const void *__restrict__ __src, int __c, size_t __n) noexcept(true)
# 56
 __attribute((__nonnull__(1, 2))) __attribute((__access__(__write_only__ , 1 , 4 ))); 
# 61
extern void *memset(void * __s, int __c, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 64
extern int memcmp(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 65
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 80 "/usr/include/string.h" 3
extern int __memcmpeq(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 81
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 85
extern "C++" {
# 87
extern void *memchr(void * __s, int __c, size_t __n) noexcept(true) __asm__("memchr")
# 88
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 89
extern const void *memchr(const void * __s, int __c, size_t __n) noexcept(true) __asm__("memchr")
# 90
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 105 "/usr/include/string.h" 3
}
# 115 "/usr/include/string.h" 3
extern "C++" void *rawmemchr(void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 116
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 117
extern "C++" const void *rawmemchr(const void * __s, int __c) noexcept(true) __asm__("rawmemchr")
# 118
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 126
extern "C++" void *memrchr(void * __s, int __c, size_t __n) noexcept(true) __asm__("memrchr")
# 127
 __attribute((__pure__)) __attribute((__nonnull__(1)))
# 128
 __attribute((__access__(__read_only__ , 1 , 3 ))); 
# 129
extern "C++" const void *memrchr(const void * __s, int __c, size_t __n) noexcept(true) __asm__("memrchr")
# 130
 __attribute((__pure__)) __attribute((__nonnull__(1)))
# 131
 __attribute((__access__(__read_only__ , 1 , 3 ))); 
# 141 "/usr/include/string.h" 3
extern char *strcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 142
 __attribute((__nonnull__(1, 2))); 
# 144
extern char *strncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 146
 __attribute((__nonnull__(1, 2))); 
# 149
extern char *strcat(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 150
 __attribute((__nonnull__(1, 2))); 
# 152
extern char *strncat(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 153
 __attribute((__nonnull__(1, 2))); 
# 156
extern int strcmp(const char * __s1, const char * __s2) noexcept(true)
# 157
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 159
extern int strncmp(const char * __s1, const char * __s2, size_t __n) noexcept(true)
# 160
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 163
extern int strcoll(const char * __s1, const char * __s2) noexcept(true)
# 164
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 166
extern size_t strxfrm(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 168
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 1 , 3 ))); 
# 175
extern int strcoll_l(const char * __s1, const char * __s2, locale_t __l) noexcept(true)
# 176
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 179
extern size_t strxfrm_l(char * __dest, const char * __src, size_t __n, locale_t __l) noexcept(true)
# 180
 __attribute((__nonnull__(2, 4)))
# 181
 __attribute((__access__(__write_only__ , 1 , 3 ))); 
# 187
extern char *strdup(const char * __s) noexcept(true)
# 188
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 195
extern char *strndup(const char * __string, size_t __n) noexcept(true)
# 196
 __attribute((__malloc__)) __attribute((__nonnull__(1))); 
# 224 "/usr/include/string.h" 3
extern "C++" {
# 226
extern char *strchr(char * __s, int __c) noexcept(true) __asm__("strchr")
# 227
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 228
extern const char *strchr(const char * __s, int __c) noexcept(true) __asm__("strchr")
# 229
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 244 "/usr/include/string.h" 3
}
# 251
extern "C++" {
# 253
extern char *strrchr(char * __s, int __c) noexcept(true) __asm__("strrchr")
# 254
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 255
extern const char *strrchr(const char * __s, int __c) noexcept(true) __asm__("strrchr")
# 256
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 271 "/usr/include/string.h" 3
}
# 281 "/usr/include/string.h" 3
extern "C++" char *strchrnul(char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 282
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 283
extern "C++" const char *strchrnul(const char * __s, int __c) noexcept(true) __asm__("strchrnul")
# 284
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 293 "/usr/include/string.h" 3
extern size_t strcspn(const char * __s, const char * __reject) noexcept(true)
# 294
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 297
extern size_t strspn(const char * __s, const char * __accept) noexcept(true)
# 298
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 301
extern "C++" {
# 303
extern char *strpbrk(char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 304
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 305
extern const char *strpbrk(const char * __s, const char * __accept) noexcept(true) __asm__("strpbrk")
# 306
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 321 "/usr/include/string.h" 3
}
# 328
extern "C++" {
# 330
extern char *strstr(char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 331
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 332
extern const char *strstr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strstr")
# 333
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 348 "/usr/include/string.h" 3
}
# 356
extern char *strtok(char *__restrict__ __s, const char *__restrict__ __delim) noexcept(true)
# 357
 __attribute((__nonnull__(2))); 
# 361
extern char *__strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 364
 __attribute((__nonnull__(2, 3))); 
# 366
extern char *strtok_r(char *__restrict__ __s, const char *__restrict__ __delim, char **__restrict__ __save_ptr) noexcept(true)
# 368
 __attribute((__nonnull__(2, 3))); 
# 374
extern "C++" char *strcasestr(char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 375
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 376
extern "C++" const char *strcasestr(const char * __haystack, const char * __needle) noexcept(true) __asm__("strcasestr")
# 378
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 389 "/usr/include/string.h" 3
extern void *memmem(const void * __haystack, size_t __haystacklen, const void * __needle, size_t __needlelen) noexcept(true)
# 391
 __attribute((__pure__)) __attribute((__nonnull__(1, 3)))
# 392
 __attribute((__access__(__read_only__ , 1 , 2 )))
# 393
 __attribute((__access__(__read_only__ , 3 , 4 ))); 
# 397
extern void *__mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 399
 __attribute((__nonnull__(1, 2))); 
# 400
extern void *mempcpy(void *__restrict__ __dest, const void *__restrict__ __src, size_t __n) noexcept(true)
# 402
 __attribute((__nonnull__(1, 2))); 
# 407
extern size_t strlen(const char * __s) noexcept(true)
# 408
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 413
extern size_t strnlen(const char * __string, size_t __maxlen) noexcept(true)
# 414
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 419
extern char *strerror(int __errnum) noexcept(true); 
# 444 "/usr/include/string.h" 3
extern char *strerror_r(int __errnum, char * __buf, size_t __buflen) noexcept(true)
# 445
 __attribute((__nonnull__(2))) __attribute((__access__(__write_only__ , 2 , 3 ))); 
# 450
extern const char *strerrordesc_np(int __err) noexcept(true); 
# 452
extern const char *strerrorname_np(int __err) noexcept(true); 
# 458
extern char *strerror_l(int __errnum, locale_t __l) noexcept(true); 
# 30 "/usr/include/strings.h" 3
extern "C" {
# 34
extern int bcmp(const void * __s1, const void * __s2, size_t __n) noexcept(true)
# 35
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 38
extern void bcopy(const void * __src, void * __dest, size_t __n) noexcept(true)
# 39
 __attribute((__nonnull__(1, 2))); 
# 42
extern void bzero(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1))); 
# 46
extern "C++" {
# 48
extern char *index(char * __s, int __c) noexcept(true) __asm__("index")
# 49
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 50
extern const char *index(const char * __s, int __c) noexcept(true) __asm__("index")
# 51
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 66 "/usr/include/strings.h" 3
}
# 74
extern "C++" {
# 76
extern char *rindex(char * __s, int __c) noexcept(true) __asm__("rindex")
# 77
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 78
extern const char *rindex(const char * __s, int __c) noexcept(true) __asm__("rindex")
# 79
 __attribute((__pure__)) __attribute((__nonnull__(1))); 
# 94 "/usr/include/strings.h" 3
}
# 104 "/usr/include/strings.h" 3
extern int ffs(int __i) noexcept(true) __attribute((const)); 
# 110
extern int ffsl(long __l) noexcept(true) __attribute((const)); 
# 111
__extension__ extern int ffsll(long long __ll) noexcept(true)
# 112
 __attribute((const)); 
# 116
extern int strcasecmp(const char * __s1, const char * __s2) noexcept(true)
# 117
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 120
extern int strncasecmp(const char * __s1, const char * __s2, size_t __n) noexcept(true)
# 121
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 128
extern int strcasecmp_l(const char * __s1, const char * __s2, locale_t __loc) noexcept(true)
# 129
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 3))); 
# 133
extern int strncasecmp_l(const char * __s1, const char * __s2, size_t __n, locale_t __loc) noexcept(true)
# 135
 __attribute((__pure__)) __attribute((__nonnull__(1, 2, 4))); 
# 138
}
# 466 "/usr/include/string.h" 3
extern void explicit_bzero(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1)))
# 467
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 471
extern char *strsep(char **__restrict__ __stringp, const char *__restrict__ __delim) noexcept(true)
# 473
 __attribute((__nonnull__(1, 2))); 
# 478
extern char *strsignal(int __sig) noexcept(true); 
# 482
extern const char *sigabbrev_np(int __sig) noexcept(true); 
# 485
extern const char *sigdescr_np(int __sig) noexcept(true); 
# 489
extern char *__stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 490
 __attribute((__nonnull__(1, 2))); 
# 491
extern char *stpcpy(char *__restrict__ __dest, const char *__restrict__ __src) noexcept(true)
# 492
 __attribute((__nonnull__(1, 2))); 
# 496
extern char *__stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 498
 __attribute((__nonnull__(1, 2))); 
# 499
extern char *stpncpy(char *__restrict__ __dest, const char *__restrict__ __src, size_t __n) noexcept(true)
# 501
 __attribute((__nonnull__(1, 2))); 
# 506
extern int strverscmp(const char * __s1, const char * __s2) noexcept(true)
# 507
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 510
extern char *strfry(char * __string) noexcept(true) __attribute((__nonnull__(1))); 
# 513
extern void *memfrob(void * __s, size_t __n) noexcept(true) __attribute((__nonnull__(1)))
# 514
 __attribute((__access__(__read_write__ , 1 , 2 ))); 
# 522
extern "C++" char *basename(char * __filename) noexcept(true) __asm__("basename")
# 523
 __attribute((__nonnull__(1))); 
# 524
extern "C++" const char *basename(const char * __filename) noexcept(true) __asm__("basename")
# 525
 __attribute((__nonnull__(1))); 
# 539 "/usr/include/string.h" 3
}
# 26 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
struct timex { 
# 58 "/usr/include/x86_64-linux-gnu/bits/timex.h" 3
unsigned modes; 
# 59
__syscall_slong_t offset; 
# 60
__syscall_slong_t freq; 
# 61
__syscall_slong_t maxerror; 
# 62
__syscall_slong_t esterror; 
# 63
int status; 
# 64
__syscall_slong_t constant; 
# 65
__syscall_slong_t precision; 
# 66
__syscall_slong_t tolerance; 
# 67
timeval time; 
# 68
__syscall_slong_t tick; 
# 69
__syscall_slong_t ppsfreq; 
# 70
__syscall_slong_t jitter; 
# 71
int shift; 
# 72
__syscall_slong_t stabil; 
# 73
__syscall_slong_t jitcnt; 
# 74
__syscall_slong_t calcnt; 
# 75
__syscall_slong_t errcnt; 
# 76
__syscall_slong_t stbcnt; 
# 78
int tai; 
# 81
int:32; int:32; int:32; int:32; 
# 82
int:32; int:32; int:32; int:32; 
# 83
int:32; int:32; int:32; 
# 85
}; 
# 75 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
extern "C" {
# 78
extern int clock_adjtime(__clockid_t __clock_id, timex * __utx) noexcept(true); 
# 90 "/usr/include/x86_64-linux-gnu/bits/time.h" 3
}
# 7 "/usr/include/x86_64-linux-gnu/bits/types/struct_tm.h" 3
struct tm { 
# 9
int tm_sec; 
# 10
int tm_min; 
# 11
int tm_hour; 
# 12
int tm_mday; 
# 13
int tm_mon; 
# 14
int tm_year; 
# 15
int tm_wday; 
# 16
int tm_yday; 
# 17
int tm_isdst; 
# 20
long tm_gmtoff; 
# 21
const char *tm_zone; 
# 26
}; 
# 8 "/usr/include/x86_64-linux-gnu/bits/types/struct_itimerspec.h" 3
struct itimerspec { 
# 10
timespec it_interval; 
# 11
timespec it_value; 
# 12
}; 
# 49 "/usr/include/time.h" 3
struct sigevent; 
# 68 "/usr/include/time.h" 3
extern "C" {
# 72
extern clock_t clock() noexcept(true); 
# 76
extern time_t time(time_t * __timer) noexcept(true); 
# 79
extern double difftime(time_t __time1, time_t __time0) noexcept(true)
# 80
 __attribute((const)); 
# 83
extern time_t mktime(tm * __tp) noexcept(true); 
# 100 "/usr/include/time.h" 3
extern size_t strftime(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp) noexcept(true); 
# 107
extern char *strptime(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp) noexcept(true); 
# 116
extern size_t strftime_l(char *__restrict__ __s, size_t __maxsize, const char *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) noexcept(true); 
# 123
extern char *strptime_l(const char *__restrict__ __s, const char *__restrict__ __fmt, tm * __tp, locale_t __loc) noexcept(true); 
# 132
extern tm *gmtime(const time_t * __timer) noexcept(true); 
# 136
extern tm *localtime(const time_t * __timer) noexcept(true); 
# 154 "/usr/include/time.h" 3
extern tm *gmtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 159
extern tm *localtime_r(const time_t *__restrict__ __timer, tm *__restrict__ __tp) noexcept(true); 
# 179 "/usr/include/time.h" 3
extern char *asctime(const tm * __tp) noexcept(true); 
# 183
extern char *ctime(const time_t * __timer) noexcept(true); 
# 197 "/usr/include/time.h" 3
extern char *asctime_r(const tm *__restrict__ __tp, char *__restrict__ __buf) noexcept(true); 
# 202
extern char *ctime_r(const time_t *__restrict__ __timer, char *__restrict__ __buf) noexcept(true); 
# 217 "/usr/include/time.h" 3
extern char *__tzname[2]; 
# 218
extern int __daylight; 
# 219
extern long __timezone; 
# 224
extern char *tzname[2]; 
# 228
extern void tzset() noexcept(true); 
# 232
extern int daylight; 
# 233
extern long timezone; 
# 249 "/usr/include/time.h" 3
extern time_t timegm(tm * __tp) noexcept(true); 
# 251
extern time_t timelocal(tm * __tp) noexcept(true); 
# 262 "/usr/include/time.h" 3
extern int dysize(int __year) noexcept(true) __attribute((const)); 
# 272 "/usr/include/time.h" 3
extern int nanosleep(const timespec * __requested_time, timespec * __remaining); 
# 276
extern int clock_getres(clockid_t __clock_id, timespec * __res) noexcept(true); 
# 279
extern int clock_gettime(clockid_t __clock_id, timespec * __tp) noexcept(true); 
# 282
extern int clock_settime(clockid_t __clock_id, const timespec * __tp) noexcept(true); 
# 311 "/usr/include/time.h" 3
extern int clock_nanosleep(clockid_t __clock_id, int __flags, const timespec * __req, timespec * __rem); 
# 326 "/usr/include/time.h" 3
extern int clock_getcpuclockid(pid_t __pid, clockid_t * __clock_id) noexcept(true); 
# 331
extern int timer_create(clockid_t __clock_id, sigevent *__restrict__ __evp, timer_t *__restrict__ __timerid) noexcept(true); 
# 336
extern int timer_delete(timer_t __timerid) noexcept(true); 
# 340
extern int timer_settime(timer_t __timerid, int __flags, const itimerspec *__restrict__ __value, itimerspec *__restrict__ __ovalue) noexcept(true); 
# 345
extern int timer_gettime(timer_t __timerid, itimerspec * __value) noexcept(true); 
# 364 "/usr/include/time.h" 3
extern int timer_getoverrun(timer_t __timerid) noexcept(true); 
# 371
extern int timespec_get(timespec * __ts, int __base) noexcept(true)
# 372
 __attribute((__nonnull__(1))); 
# 387 "/usr/include/time.h" 3
extern int timespec_getres(timespec * __ts, int __base) noexcept(true); 
# 413 "/usr/include/time.h" 3
extern int getdate_err; 
# 422 "/usr/include/time.h" 3
extern tm *getdate(const char * __string); 
# 436 "/usr/include/time.h" 3
extern int getdate_r(const char *__restrict__ __string, tm *__restrict__ __resbufp); 
# 440
}
# 88 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern "C" {
# 91
extern clock_t clock() noexcept(true); 
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern void *memset(void *, int, size_t) noexcept(true); 
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
extern void *memcpy(void *, const void *, size_t) noexcept(true); 
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/common_functions.h"
}
# 121 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern "C" {
# 219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int abs(int a) noexcept(true); 
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long labs(long a) noexcept(true); 
# 235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llabs(long long a) noexcept(true); 
# 285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fabs(double x) noexcept(true); 
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fabsf(float x) noexcept(true); 
# 338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline int min(const int a, const int b); 
# 345
extern inline unsigned umin(const unsigned a, const unsigned b); 
# 352
extern inline long long llmin(const long long a, const long long b); 
# 359
extern inline unsigned long long ullmin(const unsigned long long a, const unsigned long long b); 
# 380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fminf(float x, float y) noexcept(true); 
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmin(double x, double y) noexcept(true); 
# 413 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline int max(const int a, const int b); 
# 421
extern inline unsigned umax(const unsigned a, const unsigned b); 
# 428
extern inline long long llmax(const long long a, const long long b); 
# 435
extern inline unsigned long long ullmax(const unsigned long long a, const unsigned long long b); 
# 456 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmaxf(float x, float y) noexcept(true); 
# 476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmax(double, double) noexcept(true); 
# 520 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sin(double x) noexcept(true); 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cos(double x) noexcept(true); 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincos(double x, double * sptr, double * cptr) noexcept(true); 
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincosf(float x, float * sptr, float * cptr) noexcept(true); 
# 633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tan(double x) noexcept(true); 
# 702 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sqrt(double x) noexcept(true); 
# 774 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double rsqrt(double x); 
# 844 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rsqrtf(float x); 
# 900 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log2(double x) noexcept(true); 
# 965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp2(double x) noexcept(true); 
# 1030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float exp2f(float x) noexcept(true); 
# 1097 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp10(double x) noexcept(true); 
# 1160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float exp10f(float x) noexcept(true); 
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double expm1(double x) noexcept(true); 
# 1345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float expm1f(float x) noexcept(true); 
# 1401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log2f(float x) noexcept(true); 
# 1455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log10(double x) noexcept(true); 
# 1525 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log(double x) noexcept(true); 
# 1621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double log1p(double x) noexcept(true); 
# 1720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log1pf(float x) noexcept(true); 
# 1784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double floor(double x) noexcept(true); 
# 1863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double exp(double x) noexcept(true); 
# 1904 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cosh(double x) noexcept(true); 
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sinh(double x) noexcept(true); 
# 2004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tanh(double x) noexcept(true); 
# 2059 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double acosh(double x) noexcept(true); 
# 2117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float acoshf(float x) noexcept(true); 
# 2170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double asinh(double x) noexcept(true); 
# 2223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float asinhf(float x) noexcept(true); 
# 2277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atanh(double x) noexcept(true); 
# 2331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atanhf(float x) noexcept(true); 
# 2380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double ldexp(double x, int exp) noexcept(true); 
# 2426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ldexpf(float x, int exp) noexcept(true); 
# 2478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double logb(double x) noexcept(true); 
# 2533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float logbf(float x) noexcept(true); 
# 2573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int ilogb(double x) noexcept(true); 
# 2613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int ilogbf(float x) noexcept(true); 
# 2689 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double scalbn(double x, int n) noexcept(true); 
# 2765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float scalbnf(float x, int n) noexcept(true); 
# 2841 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double scalbln(double x, long n) noexcept(true); 
# 2917 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float scalblnf(float x, long n) noexcept(true); 
# 2994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double frexp(double x, int * nptr) noexcept(true); 
# 3068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float frexpf(float x, int * nptr) noexcept(true); 
# 3120 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double round(double x) noexcept(true); 
# 3175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float roundf(float x) noexcept(true); 
# 3193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lround(double x) noexcept(true); 
# 3211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lroundf(float x) noexcept(true); 
# 3229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llround(double x) noexcept(true); 
# 3247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llroundf(float x) noexcept(true); 
# 3375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rintf(float x) noexcept(true); 
# 3392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lrint(double x) noexcept(true); 
# 3409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long lrintf(float x) noexcept(true); 
# 3426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llrint(double x) noexcept(true); 
# 3443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern long long llrintf(float x) noexcept(true); 
# 3496 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nearbyint(double x) noexcept(true); 
# 3549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nearbyintf(float x) noexcept(true); 
# 3611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double ceil(double x) noexcept(true); 
# 3661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double trunc(double x) noexcept(true); 
# 3714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float truncf(float x) noexcept(true); 
# 3740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fdim(double x, double y) noexcept(true); 
# 3766 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fdimf(float x, float y) noexcept(true); 
# 4066 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atan2(double y, double x) noexcept(true); 
# 4137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double atan(double x) noexcept(true); 
# 4160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double acos(double x) noexcept(true); 
# 4211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double asin(double x) noexcept(true); 
# 4279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double hypot(double x, double y) noexcept(true); 
# 4402 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float hypotf(float x, float y) noexcept(true); 
# 5188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cbrt(double x) noexcept(true); 
# 5274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cbrtf(float x) noexcept(true); 
# 5329 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double rcbrt(double x); 
# 5379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float rcbrtf(float x); 
# 5439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double sinpi(double x); 
# 5499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinpif(float x); 
# 5551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double cospi(double x); 
# 5603 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cospif(float x); 
# 5633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincospi(double x, double * sptr, double * cptr); 
# 5663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern void sincospif(float x, float * sptr, float * cptr); 
# 5996 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double pow(double x, double y) noexcept(true); 
# 6052 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double modf(double x, double * iptr) noexcept(true); 
# 6111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fmod(double x, double y) noexcept(true); 
# 6207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double remainder(double x, double y) noexcept(true); 
# 6306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float remainderf(float x, float y) noexcept(true); 
# 6378 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double remquo(double x, double y, int * quo) noexcept(true); 
# 6450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float remquof(float x, float y, int * quo) noexcept(true); 
# 6491 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double j0(double x) noexcept(true); 
# 6533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float j0f(float x) noexcept(true); 
# 6602 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double j1(double x) noexcept(true); 
# 6671 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float j1f(float x) noexcept(true); 
# 6714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double jn(int n, double x) noexcept(true); 
# 6757 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float jnf(int n, float x) noexcept(true); 
# 6818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double y0(double x) noexcept(true); 
# 6879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float y0f(float x) noexcept(true); 
# 6940 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double y1(double x) noexcept(true); 
# 7001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float y1f(float x) noexcept(true); 
# 7064 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double yn(int n, double x) noexcept(true); 
# 7127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ynf(int n, float x) noexcept(true); 
# 7316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erf(double x) noexcept(true); 
# 7398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erff(float x) noexcept(true); 
# 7470 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfinv(double x); 
# 7535 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfinvf(float x); 
# 7574 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfc(double x) noexcept(true); 
# 7612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcf(float x) noexcept(true); 
# 7729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double lgamma(double x) noexcept(true); 
# 7791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfcinv(double x); 
# 7846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcinvf(float x); 
# 7914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double normcdfinv(double x); 
# 7982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float normcdfinvf(float x); 
# 8025 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double normcdf(double x); 
# 8068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float normcdff(float x); 
# 8132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double erfcx(double x); 
# 8196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float erfcxf(float x); 
# 8315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float lgammaf(float x) noexcept(true); 
# 8413 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double tgamma(double x) noexcept(true); 
# 8511 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tgammaf(float x) noexcept(true); 
# 8524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double copysign(double x, double y) noexcept(true); 
# 8537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float copysignf(float x, float y) noexcept(true); 
# 8556 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nextafter(double x, double y) noexcept(true); 
# 8575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nextafterf(float x, float y) noexcept(true); 
# 8591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double nan(const char * tagp) noexcept(true); 
# 8607 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float nanf(const char * tagp) noexcept(true); 
# 8614 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinff(float) noexcept(true); 
# 8615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnanf(float) noexcept(true); 
# 8625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finite(double) noexcept(true); 
# 8626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finitef(float) noexcept(true); 
# 8627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbit(double) noexcept(true); 
# 8628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnan(double) noexcept(true); 
# 8629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinf(double) noexcept(true); 
# 8632 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbitf(float) noexcept(true); 
# 8791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern double fma(double x, double y, double z) noexcept(true); 
# 8949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmaf(float x, float y, float z) noexcept(true); 
# 8960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __signbitl(long double) noexcept(true); 
# 8966 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __finitel(long double) noexcept(true); 
# 8967 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isinfl(long double) noexcept(true); 
# 8968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern int __isnanl(long double) noexcept(true); 
# 9018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float acosf(float x) noexcept(true); 
# 9077 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float asinf(float x) noexcept(true); 
# 9157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atanf(float x) noexcept(true); 
# 9454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float atan2f(float y, float x) noexcept(true); 
# 9488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float cosf(float x) noexcept(true); 
# 9530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinf(float x) noexcept(true); 
# 9572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tanf(float x) noexcept(true); 
# 9613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float coshf(float x) noexcept(true); 
# 9663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sinhf(float x) noexcept(true); 
# 9713 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float tanhf(float x) noexcept(true); 
# 9765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float logf(float x) noexcept(true); 
# 9845 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float expf(float x) noexcept(true); 
# 9897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float log10f(float x) noexcept(true); 
# 9952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float modff(float x, float * iptr) noexcept(true); 
# 10282 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float powf(float x, float y) noexcept(true); 
# 10351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float sqrtf(float x) noexcept(true); 
# 10410 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float ceilf(float x) noexcept(true); 
# 10471 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float floorf(float x) noexcept(true); 
# 10529 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern float fmodf(float x, float y) noexcept(true); 
# 10544 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 67 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
extern "C++" {
# 69
namespace std __attribute((__visibility__("default"))) { 
# 73
struct __true_type { }; 
# 74
struct __false_type { }; 
# 76
template< bool > 
# 77
struct __truth_type { 
# 78
typedef __false_type __type; }; 
# 81
template<> struct __truth_type< true>  { 
# 82
typedef __true_type __type; }; 
# 86
template< class _Sp, class _Tp> 
# 87
struct __traitor { 
# 89
enum { __value = ((bool)_Sp::__value) || ((bool)_Tp::__value)}; 
# 90
typedef typename __truth_type< __value> ::__type __type; 
# 91
}; 
# 94
template< class , class > 
# 95
struct __are_same { 
# 97
enum { __value}; 
# 98
typedef __false_type __type; 
# 99
}; 
# 101
template< class _Tp> 
# 102
struct __are_same< _Tp, _Tp>  { 
# 104
enum { __value = 1}; 
# 105
typedef __true_type __type; 
# 106
}; 
# 109
template< class _Tp> 
# 110
struct __is_void { 
# 112
enum { __value}; 
# 113
typedef __false_type __type; 
# 114
}; 
# 117
template<> struct __is_void< void>  { 
# 119
enum { __value = 1}; 
# 120
typedef __true_type __type; 
# 121
}; 
# 126
template< class _Tp> 
# 127
struct __is_integer { 
# 129
enum { __value}; 
# 130
typedef __false_type __type; 
# 131
}; 
# 138
template<> struct __is_integer< bool>  { 
# 140
enum { __value = 1}; 
# 141
typedef __true_type __type; 
# 142
}; 
# 145
template<> struct __is_integer< char>  { 
# 147
enum { __value = 1}; 
# 148
typedef __true_type __type; 
# 149
}; 
# 152
template<> struct __is_integer< signed char>  { 
# 154
enum { __value = 1}; 
# 155
typedef __true_type __type; 
# 156
}; 
# 159
template<> struct __is_integer< unsigned char>  { 
# 161
enum { __value = 1}; 
# 162
typedef __true_type __type; 
# 163
}; 
# 167
template<> struct __is_integer< wchar_t>  { 
# 169
enum { __value = 1}; 
# 170
typedef __true_type __type; 
# 171
}; 
# 185 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template<> struct __is_integer< char16_t>  { 
# 187
enum { __value = 1}; 
# 188
typedef __true_type __type; 
# 189
}; 
# 192
template<> struct __is_integer< char32_t>  { 
# 194
enum { __value = 1}; 
# 195
typedef __true_type __type; 
# 196
}; 
# 200
template<> struct __is_integer< short>  { 
# 202
enum { __value = 1}; 
# 203
typedef __true_type __type; 
# 204
}; 
# 207
template<> struct __is_integer< unsigned short>  { 
# 209
enum { __value = 1}; 
# 210
typedef __true_type __type; 
# 211
}; 
# 214
template<> struct __is_integer< int>  { 
# 216
enum { __value = 1}; 
# 217
typedef __true_type __type; 
# 218
}; 
# 221
template<> struct __is_integer< unsigned>  { 
# 223
enum { __value = 1}; 
# 224
typedef __true_type __type; 
# 225
}; 
# 228
template<> struct __is_integer< long>  { 
# 230
enum { __value = 1}; 
# 231
typedef __true_type __type; 
# 232
}; 
# 235
template<> struct __is_integer< unsigned long>  { 
# 237
enum { __value = 1}; 
# 238
typedef __true_type __type; 
# 239
}; 
# 242
template<> struct __is_integer< long long>  { 
# 244
enum { __value = 1}; 
# 245
typedef __true_type __type; 
# 246
}; 
# 249
template<> struct __is_integer< unsigned long long>  { 
# 251
enum { __value = 1}; 
# 252
typedef __true_type __type; 
# 253
}; 
# 270 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template<> struct __is_integer< __int128>  { enum { __value = 1}; typedef __true_type __type; }; template<> struct __is_integer< unsigned __int128>  { enum { __value = 1}; typedef __true_type __type; }; 
# 287 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template< class _Tp> 
# 288
struct __is_floating { 
# 290
enum { __value}; 
# 291
typedef __false_type __type; 
# 292
}; 
# 296
template<> struct __is_floating< float>  { 
# 298
enum { __value = 1}; 
# 299
typedef __true_type __type; 
# 300
}; 
# 303
template<> struct __is_floating< double>  { 
# 305
enum { __value = 1}; 
# 306
typedef __true_type __type; 
# 307
}; 
# 310
template<> struct __is_floating< long double>  { 
# 312
enum { __value = 1}; 
# 313
typedef __true_type __type; 
# 314
}; 
# 319
template< class _Tp> 
# 320
struct __is_pointer { 
# 322
enum { __value}; 
# 323
typedef __false_type __type; 
# 324
}; 
# 326
template< class _Tp> 
# 327
struct __is_pointer< _Tp *>  { 
# 329
enum { __value = 1}; 
# 330
typedef __true_type __type; 
# 331
}; 
# 336
template< class _Tp> 
# 337
struct __is_arithmetic : public __traitor< __is_integer< _Tp> , __is_floating< _Tp> >  { 
# 339
}; 
# 344
template< class _Tp> 
# 345
struct __is_scalar : public __traitor< __is_arithmetic< _Tp> , __is_pointer< _Tp> >  { 
# 347
}; 
# 352
template< class _Tp> 
# 353
struct __is_char { 
# 355
enum { __value}; 
# 356
typedef __false_type __type; 
# 357
}; 
# 360
template<> struct __is_char< char>  { 
# 362
enum { __value = 1}; 
# 363
typedef __true_type __type; 
# 364
}; 
# 368
template<> struct __is_char< wchar_t>  { 
# 370
enum { __value = 1}; 
# 371
typedef __true_type __type; 
# 372
}; 
# 375
template< class _Tp> 
# 376
struct __is_byte { 
# 378
enum { __value}; 
# 379
typedef __false_type __type; 
# 380
}; 
# 383
template<> struct __is_byte< char>  { 
# 385
enum { __value = 1}; 
# 386
typedef __true_type __type; 
# 387
}; 
# 390
template<> struct __is_byte< signed char>  { 
# 392
enum { __value = 1}; 
# 393
typedef __true_type __type; 
# 394
}; 
# 397
template<> struct __is_byte< unsigned char>  { 
# 399
enum { __value = 1}; 
# 400
typedef __true_type __type; 
# 401
}; 
# 404
enum class byte: unsigned char; 
# 407
template<> struct __is_byte< byte>  { 
# 409
enum { __value = 1}; 
# 410
typedef __true_type __type; 
# 411
}; 
# 423 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template< class > struct iterator_traits; 
# 426
template< class _Tp> 
# 427
struct __is_nonvolatile_trivially_copyable { 
# 429
enum { __value = __is_trivially_copyable(_Tp)}; 
# 430
}; 
# 435
template< class _Tp> 
# 436
struct __is_nonvolatile_trivially_copyable< volatile _Tp>  { 
# 438
enum { __value}; 
# 439
}; 
# 442
template< class _OutputIter, class _InputIter> 
# 443
struct __memcpyable { 
# 445
enum { __value}; 
# 446
}; 
# 448
template< class _Tp> 
# 449
struct __memcpyable< _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 451
}; 
# 453
template< class _Tp> 
# 454
struct __memcpyable< _Tp *, const _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 456
}; 
# 463
template< class _Iter1, class _Iter2> 
# 464
struct __memcmpable { 
# 466
enum { __value}; 
# 467
}; 
# 470
template< class _Tp> 
# 471
struct __memcmpable< _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 473
}; 
# 475
template< class _Tp> 
# 476
struct __memcmpable< const _Tp *, _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 478
}; 
# 480
template< class _Tp> 
# 481
struct __memcmpable< _Tp *, const _Tp *>  : public __is_nonvolatile_trivially_copyable< _Tp>  { 
# 483
}; 
# 491
template< class _Tp, bool _TreatAsBytes = __is_byte< _Tp> ::__value> 
# 498
struct __is_memcmp_ordered { 
# 500
static const bool __value = (((_Tp)(-1)) > ((_Tp)1)); 
# 501
}; 
# 503
template< class _Tp> 
# 504
struct __is_memcmp_ordered< _Tp, false>  { 
# 506
static const bool __value = false; 
# 507
}; 
# 510
template< class _Tp, class _Up, bool  = sizeof(_Tp) == sizeof(_Up)> 
# 511
struct __is_memcmp_ordered_with { 
# 513
static const bool __value = (__is_memcmp_ordered< _Tp> ::__value && __is_memcmp_ordered< _Up> ::__value); 
# 515
}; 
# 517
template< class _Tp, class _Up> 
# 518
struct __is_memcmp_ordered_with< _Tp, _Up, false>  { 
# 520
static const bool __value = false; 
# 521
}; 
# 533 "/usr/include/c++/11/bits/cpp_type_traits.h" 3
template<> struct __is_memcmp_ordered_with< byte, byte, true>  { 
# 534
static constexpr inline bool __value = true; }; 
# 536
template< class _Tp, bool _SameSize> 
# 537
struct __is_memcmp_ordered_with< _Tp, byte, _SameSize>  { 
# 538
static constexpr inline bool __value = false; }; 
# 540
template< class _Up, bool _SameSize> 
# 541
struct __is_memcmp_ordered_with< byte, _Up, _SameSize>  { 
# 542
static constexpr inline bool __value = false; }; 
# 548
template< class _Tp> 
# 549
struct __is_move_iterator { 
# 551
enum { __value}; 
# 552
typedef __false_type __type; 
# 553
}; 
# 557
template< class _Iterator> inline _Iterator 
# 560
__miter_base(_Iterator __it) 
# 561
{ return __it; } 
# 564
}
# 565
}
# 37 "/usr/include/c++/11/ext/type_traits.h" 3
extern "C++" {
# 39
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 44
template< bool , class > 
# 45
struct __enable_if { 
# 46
}; 
# 48
template< class _Tp> 
# 49
struct __enable_if< true, _Tp>  { 
# 50
typedef _Tp __type; }; 
# 54
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 55
struct __conditional_type { 
# 56
typedef _Iftrue __type; }; 
# 58
template< class _Iftrue, class _Iffalse> 
# 59
struct __conditional_type< false, _Iftrue, _Iffalse>  { 
# 60
typedef _Iffalse __type; }; 
# 64
template< class _Tp> 
# 65
struct __add_unsigned { 
# 68
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 71
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 72
}; 
# 75
template<> struct __add_unsigned< char>  { 
# 76
typedef unsigned char __type; }; 
# 79
template<> struct __add_unsigned< signed char>  { 
# 80
typedef unsigned char __type; }; 
# 83
template<> struct __add_unsigned< short>  { 
# 84
typedef unsigned short __type; }; 
# 87
template<> struct __add_unsigned< int>  { 
# 88
typedef unsigned __type; }; 
# 91
template<> struct __add_unsigned< long>  { 
# 92
typedef unsigned long __type; }; 
# 95
template<> struct __add_unsigned< long long>  { 
# 96
typedef unsigned long long __type; }; 
# 100
template<> struct __add_unsigned< bool> ; 
# 103
template<> struct __add_unsigned< wchar_t> ; 
# 107
template< class _Tp> 
# 108
struct __remove_unsigned { 
# 111
private: typedef __enable_if< std::__is_integer< _Tp> ::__value, _Tp>  __if_type; 
# 114
public: typedef typename __enable_if< std::__is_integer< _Tp> ::__value, _Tp> ::__type __type; 
# 115
}; 
# 118
template<> struct __remove_unsigned< char>  { 
# 119
typedef signed char __type; }; 
# 122
template<> struct __remove_unsigned< unsigned char>  { 
# 123
typedef signed char __type; }; 
# 126
template<> struct __remove_unsigned< unsigned short>  { 
# 127
typedef short __type; }; 
# 130
template<> struct __remove_unsigned< unsigned>  { 
# 131
typedef int __type; }; 
# 134
template<> struct __remove_unsigned< unsigned long>  { 
# 135
typedef long __type; }; 
# 138
template<> struct __remove_unsigned< unsigned long long>  { 
# 139
typedef long long __type; }; 
# 143
template<> struct __remove_unsigned< bool> ; 
# 146
template<> struct __remove_unsigned< wchar_t> ; 
# 150
template< class _Type> inline bool 
# 152
__is_null_pointer(_Type *__ptr) 
# 153
{ return __ptr == 0; } 
# 155
template< class _Type> inline bool 
# 157
__is_null_pointer(_Type) 
# 158
{ return false; } 
# 162
inline bool __is_null_pointer(std::nullptr_t) 
# 163
{ return true; } 
# 168
template< class _Tp, bool  = std::template __is_integer< _Tp> ::__value> 
# 169
struct __promote { 
# 170
typedef double __type; }; 
# 175
template< class _Tp> 
# 176
struct __promote< _Tp, false>  { 
# 177
}; 
# 180
template<> struct __promote< long double>  { 
# 181
typedef long double __type; }; 
# 184
template<> struct __promote< double>  { 
# 185
typedef double __type; }; 
# 188
template<> struct __promote< float>  { 
# 189
typedef float __type; }; 
# 192
template< class ..._Tp> using __promoted_t = __decltype(((((typename __promote< _Tp> ::__type)0) + ... ))); 
# 196
template< class _Tp, class _Up, class 
# 197
_Tp2 = typename __promote< _Tp> ::__type, class 
# 198
_Up2 = typename __promote< _Up> ::__type> 
# 199
struct __promote_2 { 
# 201
typedef __typeof__(_Tp2() + _Up2()) __type; 
# 202
}; 
# 204
template< class _Tp, class _Up, class _Vp, class 
# 205
_Tp2 = typename __promote< _Tp> ::__type, class 
# 206
_Up2 = typename __promote< _Up> ::__type, class 
# 207
_Vp2 = typename __promote< _Vp> ::__type> 
# 208
struct __promote_3 { 
# 210
typedef __typeof__((_Tp2() + _Up2()) + _Vp2()) __type; 
# 211
}; 
# 213
template< class _Tp, class _Up, class _Vp, class _Wp, class 
# 214
_Tp2 = typename __promote< _Tp> ::__type, class 
# 215
_Up2 = typename __promote< _Up> ::__type, class 
# 216
_Vp2 = typename __promote< _Vp> ::__type, class 
# 217
_Wp2 = typename __promote< _Wp> ::__type> 
# 218
struct __promote_4 { 
# 220
typedef __typeof__(((_Tp2() + _Up2()) + _Vp2()) + _Wp2()) __type; 
# 221
}; 
# 224
}
# 225
}
# 34 "/usr/include/math.h" 3
extern "C" {
# 163 "/usr/include/math.h" 3
typedef float float_t; 
# 164
typedef double double_t; 
# 252 "/usr/include/math.h" 3
enum { 
# 253
FP_INT_UPWARD, 
# 256
FP_INT_DOWNWARD, 
# 259
FP_INT_TOWARDZERO, 
# 262
FP_INT_TONEARESTFROMZERO, 
# 265
FP_INT_TONEAREST
# 268
}; 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassify(double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbit(double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinf(double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finite(double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnan(double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsig(double __x, double __y) noexcept(true); 
# 44
extern int __issignaling(double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double acos(double __x) noexcept(true); extern double __acos(double __x) noexcept(true); 
# 55
extern double asin(double __x) noexcept(true); extern double __asin(double __x) noexcept(true); 
# 57
extern double atan(double __x) noexcept(true); extern double __atan(double __x) noexcept(true); 
# 59
extern double atan2(double __y, double __x) noexcept(true); extern double __atan2(double __y, double __x) noexcept(true); 
# 62
extern double cos(double __x) noexcept(true); extern double __cos(double __x) noexcept(true); 
# 64
extern double sin(double __x) noexcept(true); extern double __sin(double __x) noexcept(true); 
# 66
extern double tan(double __x) noexcept(true); extern double __tan(double __x) noexcept(true); 
# 71
extern double cosh(double __x) noexcept(true); extern double __cosh(double __x) noexcept(true); 
# 73
extern double sinh(double __x) noexcept(true); extern double __sinh(double __x) noexcept(true); 
# 75
extern double tanh(double __x) noexcept(true); extern double __tanh(double __x) noexcept(true); 
# 79
extern void sincos(double __x, double * __sinx, double * __cosx) noexcept(true); extern void __sincos(double __x, double * __sinx, double * __cosx) noexcept(true); 
# 85
extern double acosh(double __x) noexcept(true); extern double __acosh(double __x) noexcept(true); 
# 87
extern double asinh(double __x) noexcept(true); extern double __asinh(double __x) noexcept(true); 
# 89
extern double atanh(double __x) noexcept(true); extern double __atanh(double __x) noexcept(true); 
# 95
extern double exp(double __x) noexcept(true); extern double __exp(double __x) noexcept(true); 
# 98
extern double frexp(double __x, int * __exponent) noexcept(true); extern double __frexp(double __x, int * __exponent) noexcept(true); 
# 101
extern double ldexp(double __x, int __exponent) noexcept(true); extern double __ldexp(double __x, int __exponent) noexcept(true); 
# 104
extern double log(double __x) noexcept(true); extern double __log(double __x) noexcept(true); 
# 107
extern double log10(double __x) noexcept(true); extern double __log10(double __x) noexcept(true); 
# 110
extern double modf(double __x, double * __iptr) noexcept(true); extern double __modf(double __x, double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern double exp10(double __x) noexcept(true); extern double __exp10(double __x) noexcept(true); 
# 119
extern double expm1(double __x) noexcept(true); extern double __expm1(double __x) noexcept(true); 
# 122
extern double log1p(double __x) noexcept(true); extern double __log1p(double __x) noexcept(true); 
# 125
extern double logb(double __x) noexcept(true); extern double __logb(double __x) noexcept(true); 
# 130
extern double exp2(double __x) noexcept(true); extern double __exp2(double __x) noexcept(true); 
# 133
extern double log2(double __x) noexcept(true); extern double __log2(double __x) noexcept(true); 
# 140
extern double pow(double __x, double __y) noexcept(true); extern double __pow(double __x, double __y) noexcept(true); 
# 143
extern double sqrt(double __x) noexcept(true); extern double __sqrt(double __x) noexcept(true); 
# 147
extern double hypot(double __x, double __y) noexcept(true); extern double __hypot(double __x, double __y) noexcept(true); 
# 152
extern double cbrt(double __x) noexcept(true); extern double __cbrt(double __x) noexcept(true); 
# 159
extern double ceil(double __x) noexcept(true) __attribute((const)); extern double __ceil(double __x) noexcept(true) __attribute((const)); 
# 162
extern double fabs(double __x) noexcept(true) __attribute((const)); extern double __fabs(double __x) noexcept(true) __attribute((const)); 
# 165
extern double floor(double __x) noexcept(true) __attribute((const)); extern double __floor(double __x) noexcept(true) __attribute((const)); 
# 168
extern double fmod(double __x, double __y) noexcept(true); extern double __fmod(double __x, double __y) noexcept(true); 
# 183 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int finite(double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern double drem(double __x, double __y) noexcept(true); extern double __drem(double __x, double __y) noexcept(true); 
# 191
extern double significand(double __x) noexcept(true); extern double __significand(double __x) noexcept(true); 
# 198
extern double copysign(double __x, double __y) noexcept(true) __attribute((const)); extern double __copysign(double __x, double __y) noexcept(true) __attribute((const)); 
# 203
extern double nan(const char * __tagb) noexcept(true); extern double __nan(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern double j0(double) noexcept(true); extern double __j0(double) noexcept(true); 
# 221
extern double j1(double) noexcept(true); extern double __j1(double) noexcept(true); 
# 222
extern double jn(int, double) noexcept(true); extern double __jn(int, double) noexcept(true); 
# 223
extern double y0(double) noexcept(true); extern double __y0(double) noexcept(true); 
# 224
extern double y1(double) noexcept(true); extern double __y1(double) noexcept(true); 
# 225
extern double yn(int, double) noexcept(true); extern double __yn(int, double) noexcept(true); 
# 231
extern double erf(double) noexcept(true); extern double __erf(double) noexcept(true); 
# 232
extern double erfc(double) noexcept(true); extern double __erfc(double) noexcept(true); 
# 233
extern double lgamma(double) noexcept(true); extern double __lgamma(double) noexcept(true); 
# 238
extern double tgamma(double) noexcept(true); extern double __tgamma(double) noexcept(true); 
# 244
extern double gamma(double) noexcept(true); extern double __gamma(double) noexcept(true); 
# 252
extern double lgamma_r(double, int * __signgamp) noexcept(true); extern double __lgamma_r(double, int * __signgamp) noexcept(true); 
# 259
extern double rint(double __x) noexcept(true); extern double __rint(double __x) noexcept(true); 
# 262
extern double nextafter(double __x, double __y) noexcept(true); extern double __nextafter(double __x, double __y) noexcept(true); 
# 264
extern double nexttoward(double __x, long double __y) noexcept(true); extern double __nexttoward(double __x, long double __y) noexcept(true); 
# 269
extern double nextdown(double __x) noexcept(true); extern double __nextdown(double __x) noexcept(true); 
# 271
extern double nextup(double __x) noexcept(true); extern double __nextup(double __x) noexcept(true); 
# 275
extern double remainder(double __x, double __y) noexcept(true); extern double __remainder(double __x, double __y) noexcept(true); 
# 279
extern double scalbn(double __x, int __n) noexcept(true); extern double __scalbn(double __x, int __n) noexcept(true); 
# 283
extern int ilogb(double __x) noexcept(true); extern int __ilogb(double __x) noexcept(true); 
# 288
extern long llogb(double __x) noexcept(true); extern long __llogb(double __x) noexcept(true); 
# 293
extern double scalbln(double __x, long __n) noexcept(true); extern double __scalbln(double __x, long __n) noexcept(true); 
# 297
extern double nearbyint(double __x) noexcept(true); extern double __nearbyint(double __x) noexcept(true); 
# 301
extern double round(double __x) noexcept(true) __attribute((const)); extern double __round(double __x) noexcept(true) __attribute((const)); 
# 305
extern double trunc(double __x) noexcept(true) __attribute((const)); extern double __trunc(double __x) noexcept(true) __attribute((const)); 
# 310
extern double remquo(double __x, double __y, int * __quo) noexcept(true); extern double __remquo(double __x, double __y, int * __quo) noexcept(true); 
# 317
extern long lrint(double __x) noexcept(true); extern long __lrint(double __x) noexcept(true); 
# 319
__extension__ extern long long llrint(double __x) noexcept(true); extern long long __llrint(double __x) noexcept(true); 
# 323
extern long lround(double __x) noexcept(true); extern long __lround(double __x) noexcept(true); 
# 325
__extension__ extern long long llround(double __x) noexcept(true); extern long long __llround(double __x) noexcept(true); 
# 329
extern double fdim(double __x, double __y) noexcept(true); extern double __fdim(double __x, double __y) noexcept(true); 
# 333
extern double fmax(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmax(double __x, double __y) noexcept(true) __attribute((const)); 
# 336
extern double fmin(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmin(double __x, double __y) noexcept(true) __attribute((const)); 
# 340
extern double fma(double __x, double __y, double __z) noexcept(true); extern double __fma(double __x, double __y, double __z) noexcept(true); 
# 345
extern double roundeven(double __x) noexcept(true) __attribute((const)); extern double __roundeven(double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfp(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfp(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfp(double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpx(double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpx(double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalize(double * __cx, const double * __x) noexcept(true); 
# 377
extern double fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaxmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 380
extern double fminmag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminmag(double __x, double __y) noexcept(true) __attribute((const)); 
# 385
extern double fmaximum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum(double __x, double __y) noexcept(true) __attribute((const)); 
# 388
extern double fminimum(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum(double __x, double __y) noexcept(true) __attribute((const)); 
# 391
extern double fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 394
extern double fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 397
extern double fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 400
extern double fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag(double __x, double __y) noexcept(true) __attribute((const)); 
# 403
extern double fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fmaximum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 406
extern double fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); extern double __fminimum_mag_num(double __x, double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorder(const double * __x, const double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermag(const double * __x, const double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern double getpayload(const double * __x) noexcept(true); extern double __getpayload(const double * __x) noexcept(true); 
# 424
extern int setpayload(double * __x, double __payload) noexcept(true); 
# 427
extern int setpayloadsig(double * __x, double __payload) noexcept(true); 
# 435
extern double scalb(double __x, double __n) noexcept(true); extern double __scalb(double __x, double __n) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf(float __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf(float __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff(float __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef(float __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf(float __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf(float __x, float __y) noexcept(true); 
# 44
extern int __issignalingf(float __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern float acosf(float __x) noexcept(true); extern float __acosf(float __x) noexcept(true); 
# 55
extern float asinf(float __x) noexcept(true); extern float __asinf(float __x) noexcept(true); 
# 57
extern float atanf(float __x) noexcept(true); extern float __atanf(float __x) noexcept(true); 
# 59
extern float atan2f(float __y, float __x) noexcept(true); extern float __atan2f(float __y, float __x) noexcept(true); 
# 62
extern float cosf(float __x) noexcept(true); 
# 64
extern float sinf(float __x) noexcept(true); 
# 66
extern float tanf(float __x) noexcept(true); 
# 71
extern float coshf(float __x) noexcept(true); extern float __coshf(float __x) noexcept(true); 
# 73
extern float sinhf(float __x) noexcept(true); extern float __sinhf(float __x) noexcept(true); 
# 75
extern float tanhf(float __x) noexcept(true); extern float __tanhf(float __x) noexcept(true); 
# 79
extern void sincosf(float __x, float * __sinx, float * __cosx) noexcept(true); 
# 85
extern float acoshf(float __x) noexcept(true); extern float __acoshf(float __x) noexcept(true); 
# 87
extern float asinhf(float __x) noexcept(true); extern float __asinhf(float __x) noexcept(true); 
# 89
extern float atanhf(float __x) noexcept(true); extern float __atanhf(float __x) noexcept(true); 
# 95
extern float expf(float __x) noexcept(true); 
# 98
extern float frexpf(float __x, int * __exponent) noexcept(true); extern float __frexpf(float __x, int * __exponent) noexcept(true); 
# 101
extern float ldexpf(float __x, int __exponent) noexcept(true); extern float __ldexpf(float __x, int __exponent) noexcept(true); 
# 104
extern float logf(float __x) noexcept(true); 
# 107
extern float log10f(float __x) noexcept(true); 
# 110
extern float modff(float __x, float * __iptr) noexcept(true); extern float __modff(float __x, float * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern float exp10f(float __x) noexcept(true); 
# 119
extern float expm1f(float __x) noexcept(true); extern float __expm1f(float __x) noexcept(true); 
# 122
extern float log1pf(float __x) noexcept(true); extern float __log1pf(float __x) noexcept(true); 
# 125
extern float logbf(float __x) noexcept(true); extern float __logbf(float __x) noexcept(true); 
# 130
extern float exp2f(float __x) noexcept(true); extern float __exp2f(float __x) noexcept(true); 
# 133
extern float log2f(float __x) noexcept(true); 
# 140
extern float powf(float __x, float __y) noexcept(true); 
# 143
extern float sqrtf(float __x) noexcept(true); extern float __sqrtf(float __x) noexcept(true); 
# 147
extern float hypotf(float __x, float __y) noexcept(true); extern float __hypotf(float __x, float __y) noexcept(true); 
# 152
extern float cbrtf(float __x) noexcept(true); extern float __cbrtf(float __x) noexcept(true); 
# 159
extern float ceilf(float __x) noexcept(true) __attribute((const)); extern float __ceilf(float __x) noexcept(true) __attribute((const)); 
# 162
extern float fabsf(float __x) noexcept(true) __attribute((const)); extern float __fabsf(float __x) noexcept(true) __attribute((const)); 
# 165
extern float floorf(float __x) noexcept(true) __attribute((const)); extern float __floorf(float __x) noexcept(true) __attribute((const)); 
# 168
extern float fmodf(float __x, float __y) noexcept(true); extern float __fmodf(float __x, float __y) noexcept(true); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinff(float __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitef(float __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern float dremf(float __x, float __y) noexcept(true); extern float __dremf(float __x, float __y) noexcept(true); 
# 191
extern float significandf(float __x) noexcept(true); extern float __significandf(float __x) noexcept(true); 
# 198
extern float copysignf(float __x, float __y) noexcept(true) __attribute((const)); extern float __copysignf(float __x, float __y) noexcept(true) __attribute((const)); 
# 203
extern float nanf(const char * __tagb) noexcept(true); extern float __nanf(const char * __tagb) noexcept(true); 
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanf(float __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern float j0f(float) noexcept(true); extern float __j0f(float) noexcept(true); 
# 221
extern float j1f(float) noexcept(true); extern float __j1f(float) noexcept(true); 
# 222
extern float jnf(int, float) noexcept(true); extern float __jnf(int, float) noexcept(true); 
# 223
extern float y0f(float) noexcept(true); extern float __y0f(float) noexcept(true); 
# 224
extern float y1f(float) noexcept(true); extern float __y1f(float) noexcept(true); 
# 225
extern float ynf(int, float) noexcept(true); extern float __ynf(int, float) noexcept(true); 
# 231
extern float erff(float) noexcept(true); extern float __erff(float) noexcept(true); 
# 232
extern float erfcf(float) noexcept(true); extern float __erfcf(float) noexcept(true); 
# 233
extern float lgammaf(float) noexcept(true); extern float __lgammaf(float) noexcept(true); 
# 238
extern float tgammaf(float) noexcept(true); extern float __tgammaf(float) noexcept(true); 
# 244
extern float gammaf(float) noexcept(true); extern float __gammaf(float) noexcept(true); 
# 252
extern float lgammaf_r(float, int * __signgamp) noexcept(true); extern float __lgammaf_r(float, int * __signgamp) noexcept(true); 
# 259
extern float rintf(float __x) noexcept(true); extern float __rintf(float __x) noexcept(true); 
# 262
extern float nextafterf(float __x, float __y) noexcept(true); extern float __nextafterf(float __x, float __y) noexcept(true); 
# 264
extern float nexttowardf(float __x, long double __y) noexcept(true); extern float __nexttowardf(float __x, long double __y) noexcept(true); 
# 269
extern float nextdownf(float __x) noexcept(true); extern float __nextdownf(float __x) noexcept(true); 
# 271
extern float nextupf(float __x) noexcept(true); extern float __nextupf(float __x) noexcept(true); 
# 275
extern float remainderf(float __x, float __y) noexcept(true); extern float __remainderf(float __x, float __y) noexcept(true); 
# 279
extern float scalbnf(float __x, int __n) noexcept(true); extern float __scalbnf(float __x, int __n) noexcept(true); 
# 283
extern int ilogbf(float __x) noexcept(true); extern int __ilogbf(float __x) noexcept(true); 
# 288
extern long llogbf(float __x) noexcept(true); extern long __llogbf(float __x) noexcept(true); 
# 293
extern float scalblnf(float __x, long __n) noexcept(true); extern float __scalblnf(float __x, long __n) noexcept(true); 
# 297
extern float nearbyintf(float __x) noexcept(true); extern float __nearbyintf(float __x) noexcept(true); 
# 301
extern float roundf(float __x) noexcept(true) __attribute((const)); extern float __roundf(float __x) noexcept(true) __attribute((const)); 
# 305
extern float truncf(float __x) noexcept(true) __attribute((const)); extern float __truncf(float __x) noexcept(true) __attribute((const)); 
# 310
extern float remquof(float __x, float __y, int * __quo) noexcept(true); extern float __remquof(float __x, float __y, int * __quo) noexcept(true); 
# 317
extern long lrintf(float __x) noexcept(true); extern long __lrintf(float __x) noexcept(true); 
# 319
__extension__ extern long long llrintf(float __x) noexcept(true); extern long long __llrintf(float __x) noexcept(true); 
# 323
extern long lroundf(float __x) noexcept(true); extern long __lroundf(float __x) noexcept(true); 
# 325
__extension__ extern long long llroundf(float __x) noexcept(true); extern long long __llroundf(float __x) noexcept(true); 
# 329
extern float fdimf(float __x, float __y) noexcept(true); extern float __fdimf(float __x, float __y) noexcept(true); 
# 333
extern float fmaxf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxf(float __x, float __y) noexcept(true) __attribute((const)); 
# 336
extern float fminf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminf(float __x, float __y) noexcept(true) __attribute((const)); 
# 340
extern float fmaf(float __x, float __y, float __z) noexcept(true); extern float __fmaf(float __x, float __y, float __z) noexcept(true); 
# 345
extern float roundevenf(float __x) noexcept(true) __attribute((const)); extern float __roundevenf(float __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf(float __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf(float __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef(float * __cx, const float * __x) noexcept(true); 
# 377
extern float fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaxmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 380
extern float fminmagf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminmagf(float __x, float __y) noexcept(true) __attribute((const)); 
# 385
extern float fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 388
extern float fminimumf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimumf(float __x, float __y) noexcept(true) __attribute((const)); 
# 391
extern float fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 394
extern float fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 397
extern float fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 400
extern float fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_magf(float __x, float __y) noexcept(true) __attribute((const)); 
# 403
extern float fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fmaximum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 406
extern float fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); extern float __fminimum_mag_numf(float __x, float __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf(const float * __x, const float * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf(const float * __x, const float * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern float getpayloadf(const float * __x) noexcept(true); extern float __getpayloadf(const float * __x) noexcept(true); 
# 424
extern int setpayloadf(float * __x, float __payload) noexcept(true); 
# 427
extern int setpayloadsigf(float * __x, float __payload) noexcept(true); 
# 435
extern float scalbf(float __x, float __n) noexcept(true); extern float __scalbf(float __x, float __n) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyl(long double __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitl(long double __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinfl(long double __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitel(long double __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanl(long double __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigl(long double __x, long double __y) noexcept(true); 
# 44
extern int __issignalingl(long double __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern long double acosl(long double __x) noexcept(true); extern long double __acosl(long double __x) noexcept(true); 
# 55
extern long double asinl(long double __x) noexcept(true); extern long double __asinl(long double __x) noexcept(true); 
# 57
extern long double atanl(long double __x) noexcept(true); extern long double __atanl(long double __x) noexcept(true); 
# 59
extern long double atan2l(long double __y, long double __x) noexcept(true); extern long double __atan2l(long double __y, long double __x) noexcept(true); 
# 62
extern long double cosl(long double __x) noexcept(true); extern long double __cosl(long double __x) noexcept(true); 
# 64
extern long double sinl(long double __x) noexcept(true); extern long double __sinl(long double __x) noexcept(true); 
# 66
extern long double tanl(long double __x) noexcept(true); extern long double __tanl(long double __x) noexcept(true); 
# 71
extern long double coshl(long double __x) noexcept(true); extern long double __coshl(long double __x) noexcept(true); 
# 73
extern long double sinhl(long double __x) noexcept(true); extern long double __sinhl(long double __x) noexcept(true); 
# 75
extern long double tanhl(long double __x) noexcept(true); extern long double __tanhl(long double __x) noexcept(true); 
# 79
extern void sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); extern void __sincosl(long double __x, long double * __sinx, long double * __cosx) noexcept(true); 
# 85
extern long double acoshl(long double __x) noexcept(true); extern long double __acoshl(long double __x) noexcept(true); 
# 87
extern long double asinhl(long double __x) noexcept(true); extern long double __asinhl(long double __x) noexcept(true); 
# 89
extern long double atanhl(long double __x) noexcept(true); extern long double __atanhl(long double __x) noexcept(true); 
# 95
extern long double expl(long double __x) noexcept(true); extern long double __expl(long double __x) noexcept(true); 
# 98
extern long double frexpl(long double __x, int * __exponent) noexcept(true); extern long double __frexpl(long double __x, int * __exponent) noexcept(true); 
# 101
extern long double ldexpl(long double __x, int __exponent) noexcept(true); extern long double __ldexpl(long double __x, int __exponent) noexcept(true); 
# 104
extern long double logl(long double __x) noexcept(true); extern long double __logl(long double __x) noexcept(true); 
# 107
extern long double log10l(long double __x) noexcept(true); extern long double __log10l(long double __x) noexcept(true); 
# 110
extern long double modfl(long double __x, long double * __iptr) noexcept(true); extern long double __modfl(long double __x, long double * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern long double exp10l(long double __x) noexcept(true); extern long double __exp10l(long double __x) noexcept(true); 
# 119
extern long double expm1l(long double __x) noexcept(true); extern long double __expm1l(long double __x) noexcept(true); 
# 122
extern long double log1pl(long double __x) noexcept(true); extern long double __log1pl(long double __x) noexcept(true); 
# 125
extern long double logbl(long double __x) noexcept(true); extern long double __logbl(long double __x) noexcept(true); 
# 130
extern long double exp2l(long double __x) noexcept(true); extern long double __exp2l(long double __x) noexcept(true); 
# 133
extern long double log2l(long double __x) noexcept(true); extern long double __log2l(long double __x) noexcept(true); 
# 140
extern long double powl(long double __x, long double __y) noexcept(true); extern long double __powl(long double __x, long double __y) noexcept(true); 
# 143
extern long double sqrtl(long double __x) noexcept(true); extern long double __sqrtl(long double __x) noexcept(true); 
# 147
extern long double hypotl(long double __x, long double __y) noexcept(true); extern long double __hypotl(long double __x, long double __y) noexcept(true); 
# 152
extern long double cbrtl(long double __x) noexcept(true); extern long double __cbrtl(long double __x) noexcept(true); 
# 159
extern long double ceill(long double __x) noexcept(true) __attribute((const)); extern long double __ceill(long double __x) noexcept(true) __attribute((const)); 
# 162
extern long double fabsl(long double __x) noexcept(true) __attribute((const)); extern long double __fabsl(long double __x) noexcept(true) __attribute((const)); 
# 165
extern long double floorl(long double __x) noexcept(true) __attribute((const)); extern long double __floorl(long double __x) noexcept(true) __attribute((const)); 
# 168
extern long double fmodl(long double __x, long double __y) noexcept(true); extern long double __fmodl(long double __x, long double __y) noexcept(true); 
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isinfl(long double __value) noexcept(true)
# 178
 __attribute((const)); 
# 183
extern int finitel(long double __value) noexcept(true)
# 184
 __attribute((const)); 
# 187
extern long double dreml(long double __x, long double __y) noexcept(true); extern long double __dreml(long double __x, long double __y) noexcept(true); 
# 191
extern long double significandl(long double __x) noexcept(true); extern long double __significandl(long double __x) noexcept(true); 
# 198
extern long double copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __copysignl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 203
extern long double nanl(const char * __tagb) noexcept(true); extern long double __nanl(const char * __tagb) noexcept(true); 
# 213 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern int isnanl(long double __value) noexcept(true)
# 214
 __attribute((const)); 
# 220
extern long double j0l(long double) noexcept(true); extern long double __j0l(long double) noexcept(true); 
# 221
extern long double j1l(long double) noexcept(true); extern long double __j1l(long double) noexcept(true); 
# 222
extern long double jnl(int, long double) noexcept(true); extern long double __jnl(int, long double) noexcept(true); 
# 223
extern long double y0l(long double) noexcept(true); extern long double __y0l(long double) noexcept(true); 
# 224
extern long double y1l(long double) noexcept(true); extern long double __y1l(long double) noexcept(true); 
# 225
extern long double ynl(int, long double) noexcept(true); extern long double __ynl(int, long double) noexcept(true); 
# 231
extern long double erfl(long double) noexcept(true); extern long double __erfl(long double) noexcept(true); 
# 232
extern long double erfcl(long double) noexcept(true); extern long double __erfcl(long double) noexcept(true); 
# 233
extern long double lgammal(long double) noexcept(true); extern long double __lgammal(long double) noexcept(true); 
# 238
extern long double tgammal(long double) noexcept(true); extern long double __tgammal(long double) noexcept(true); 
# 244
extern long double gammal(long double) noexcept(true); extern long double __gammal(long double) noexcept(true); 
# 252
extern long double lgammal_r(long double, int * __signgamp) noexcept(true); extern long double __lgammal_r(long double, int * __signgamp) noexcept(true); 
# 259
extern long double rintl(long double __x) noexcept(true); extern long double __rintl(long double __x) noexcept(true); 
# 262
extern long double nextafterl(long double __x, long double __y) noexcept(true); extern long double __nextafterl(long double __x, long double __y) noexcept(true); 
# 264
extern long double nexttowardl(long double __x, long double __y) noexcept(true); extern long double __nexttowardl(long double __x, long double __y) noexcept(true); 
# 269
extern long double nextdownl(long double __x) noexcept(true); extern long double __nextdownl(long double __x) noexcept(true); 
# 271
extern long double nextupl(long double __x) noexcept(true); extern long double __nextupl(long double __x) noexcept(true); 
# 275
extern long double remainderl(long double __x, long double __y) noexcept(true); extern long double __remainderl(long double __x, long double __y) noexcept(true); 
# 279
extern long double scalbnl(long double __x, int __n) noexcept(true); extern long double __scalbnl(long double __x, int __n) noexcept(true); 
# 283
extern int ilogbl(long double __x) noexcept(true); extern int __ilogbl(long double __x) noexcept(true); 
# 288
extern long llogbl(long double __x) noexcept(true); extern long __llogbl(long double __x) noexcept(true); 
# 293
extern long double scalblnl(long double __x, long __n) noexcept(true); extern long double __scalblnl(long double __x, long __n) noexcept(true); 
# 297
extern long double nearbyintl(long double __x) noexcept(true); extern long double __nearbyintl(long double __x) noexcept(true); 
# 301
extern long double roundl(long double __x) noexcept(true) __attribute((const)); extern long double __roundl(long double __x) noexcept(true) __attribute((const)); 
# 305
extern long double truncl(long double __x) noexcept(true) __attribute((const)); extern long double __truncl(long double __x) noexcept(true) __attribute((const)); 
# 310
extern long double remquol(long double __x, long double __y, int * __quo) noexcept(true); extern long double __remquol(long double __x, long double __y, int * __quo) noexcept(true); 
# 317
extern long lrintl(long double __x) noexcept(true); extern long __lrintl(long double __x) noexcept(true); 
# 319
__extension__ extern long long llrintl(long double __x) noexcept(true); extern long long __llrintl(long double __x) noexcept(true); 
# 323
extern long lroundl(long double __x) noexcept(true); extern long __lroundl(long double __x) noexcept(true); 
# 325
__extension__ extern long long llroundl(long double __x) noexcept(true); extern long long __llroundl(long double __x) noexcept(true); 
# 329
extern long double fdiml(long double __x, long double __y) noexcept(true); extern long double __fdiml(long double __x, long double __y) noexcept(true); 
# 333
extern long double fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 336
extern long double fminl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 340
extern long double fmal(long double __x, long double __y, long double __z) noexcept(true); extern long double __fmal(long double __x, long double __y, long double __z) noexcept(true); 
# 345
extern long double roundevenl(long double __x) noexcept(true) __attribute((const)); extern long double __roundevenl(long double __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpl(long double __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxl(long double __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizel(long double * __cx, const long double * __x) noexcept(true); 
# 377
extern long double fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaxmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 380
extern long double fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminmagl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 385
extern long double fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 388
extern long double fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimuml(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 391
extern long double fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 394
extern long double fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 397
extern long double fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 400
extern long double fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_magl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 403
extern long double fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fmaximum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 406
extern long double fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); extern long double __fminimum_mag_numl(long double __x, long double __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderl(const long double * __x, const long double * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagl(const long double * __x, const long double * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern long double getpayloadl(const long double * __x) noexcept(true); extern long double __getpayloadl(const long double * __x) noexcept(true); 
# 424
extern int setpayloadl(long double * __x, long double __payload) noexcept(true); 
# 427
extern int setpayloadsigl(long double * __x, long double __payload) noexcept(true); 
# 435
extern long double scalbl(long double __x, long double __n) noexcept(true); extern long double __scalbl(long double __x, long double __n) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 acosf32(_Float32 __x) noexcept(true); extern _Float32 __acosf32(_Float32 __x) noexcept(true); 
# 55
extern _Float32 asinf32(_Float32 __x) noexcept(true); extern _Float32 __asinf32(_Float32 __x) noexcept(true); 
# 57
extern _Float32 atanf32(_Float32 __x) noexcept(true); extern _Float32 __atanf32(_Float32 __x) noexcept(true); 
# 59
extern _Float32 atan2f32(_Float32 __y, _Float32 __x) noexcept(true); extern _Float32 __atan2f32(_Float32 __y, _Float32 __x) noexcept(true); 
# 62
extern _Float32 cosf32(_Float32 __x) noexcept(true); extern _Float32 __cosf32(_Float32 __x) noexcept(true); 
# 64
extern _Float32 sinf32(_Float32 __x) noexcept(true); extern _Float32 __sinf32(_Float32 __x) noexcept(true); 
# 66
extern _Float32 tanf32(_Float32 __x) noexcept(true); extern _Float32 __tanf32(_Float32 __x) noexcept(true); 
# 71
extern _Float32 coshf32(_Float32 __x) noexcept(true); extern _Float32 __coshf32(_Float32 __x) noexcept(true); 
# 73
extern _Float32 sinhf32(_Float32 __x) noexcept(true); extern _Float32 __sinhf32(_Float32 __x) noexcept(true); 
# 75
extern _Float32 tanhf32(_Float32 __x) noexcept(true); extern _Float32 __tanhf32(_Float32 __x) noexcept(true); 
# 79
extern void sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); extern void __sincosf32(_Float32 __x, _Float32 * __sinx, _Float32 * __cosx) noexcept(true); 
# 85
extern _Float32 acoshf32(_Float32 __x) noexcept(true); extern _Float32 __acoshf32(_Float32 __x) noexcept(true); 
# 87
extern _Float32 asinhf32(_Float32 __x) noexcept(true); extern _Float32 __asinhf32(_Float32 __x) noexcept(true); 
# 89
extern _Float32 atanhf32(_Float32 __x) noexcept(true); extern _Float32 __atanhf32(_Float32 __x) noexcept(true); 
# 95
extern _Float32 expf32(_Float32 __x) noexcept(true); extern _Float32 __expf32(_Float32 __x) noexcept(true); 
# 98
extern _Float32 frexpf32(_Float32 __x, int * __exponent) noexcept(true); extern _Float32 __frexpf32(_Float32 __x, int * __exponent) noexcept(true); 
# 101
extern _Float32 ldexpf32(_Float32 __x, int __exponent) noexcept(true); extern _Float32 __ldexpf32(_Float32 __x, int __exponent) noexcept(true); 
# 104
extern _Float32 logf32(_Float32 __x) noexcept(true); extern _Float32 __logf32(_Float32 __x) noexcept(true); 
# 107
extern _Float32 log10f32(_Float32 __x) noexcept(true); extern _Float32 __log10f32(_Float32 __x) noexcept(true); 
# 110
extern _Float32 modff32(_Float32 __x, _Float32 * __iptr) noexcept(true); extern _Float32 __modff32(_Float32 __x, _Float32 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32 exp10f32(_Float32 __x) noexcept(true); extern _Float32 __exp10f32(_Float32 __x) noexcept(true); 
# 119
extern _Float32 expm1f32(_Float32 __x) noexcept(true); extern _Float32 __expm1f32(_Float32 __x) noexcept(true); 
# 122
extern _Float32 log1pf32(_Float32 __x) noexcept(true); extern _Float32 __log1pf32(_Float32 __x) noexcept(true); 
# 125
extern _Float32 logbf32(_Float32 __x) noexcept(true); extern _Float32 __logbf32(_Float32 __x) noexcept(true); 
# 130
extern _Float32 exp2f32(_Float32 __x) noexcept(true); extern _Float32 __exp2f32(_Float32 __x) noexcept(true); 
# 133
extern _Float32 log2f32(_Float32 __x) noexcept(true); extern _Float32 __log2f32(_Float32 __x) noexcept(true); 
# 140
extern _Float32 powf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __powf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 143
extern _Float32 sqrtf32(_Float32 __x) noexcept(true); extern _Float32 __sqrtf32(_Float32 __x) noexcept(true); 
# 147
extern _Float32 hypotf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __hypotf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 152
extern _Float32 cbrtf32(_Float32 __x) noexcept(true); extern _Float32 __cbrtf32(_Float32 __x) noexcept(true); 
# 159
extern _Float32 ceilf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __ceilf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32 fabsf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __fabsf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32 floorf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __floorf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32 fmodf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fmodf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __copysignf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32 nanf32(const char * __tagb) noexcept(true); extern _Float32 __nanf32(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 j0f32(_Float32) noexcept(true); extern _Float32 __j0f32(_Float32) noexcept(true); 
# 221
extern _Float32 j1f32(_Float32) noexcept(true); extern _Float32 __j1f32(_Float32) noexcept(true); 
# 222
extern _Float32 jnf32(int, _Float32) noexcept(true); extern _Float32 __jnf32(int, _Float32) noexcept(true); 
# 223
extern _Float32 y0f32(_Float32) noexcept(true); extern _Float32 __y0f32(_Float32) noexcept(true); 
# 224
extern _Float32 y1f32(_Float32) noexcept(true); extern _Float32 __y1f32(_Float32) noexcept(true); 
# 225
extern _Float32 ynf32(int, _Float32) noexcept(true); extern _Float32 __ynf32(int, _Float32) noexcept(true); 
# 231
extern _Float32 erff32(_Float32) noexcept(true); extern _Float32 __erff32(_Float32) noexcept(true); 
# 232
extern _Float32 erfcf32(_Float32) noexcept(true); extern _Float32 __erfcf32(_Float32) noexcept(true); 
# 233
extern _Float32 lgammaf32(_Float32) noexcept(true); extern _Float32 __lgammaf32(_Float32) noexcept(true); 
# 238
extern _Float32 tgammaf32(_Float32) noexcept(true); extern _Float32 __tgammaf32(_Float32) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32 lgammaf32_r(_Float32, int * __signgamp) noexcept(true); extern _Float32 __lgammaf32_r(_Float32, int * __signgamp) noexcept(true); 
# 259
extern _Float32 rintf32(_Float32 __x) noexcept(true); extern _Float32 __rintf32(_Float32 __x) noexcept(true); 
# 262
extern _Float32 nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __nextafterf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 269
extern _Float32 nextdownf32(_Float32 __x) noexcept(true); extern _Float32 __nextdownf32(_Float32 __x) noexcept(true); 
# 271
extern _Float32 nextupf32(_Float32 __x) noexcept(true); extern _Float32 __nextupf32(_Float32 __x) noexcept(true); 
# 275
extern _Float32 remainderf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __remainderf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 279
extern _Float32 scalbnf32(_Float32 __x, int __n) noexcept(true); extern _Float32 __scalbnf32(_Float32 __x, int __n) noexcept(true); 
# 283
extern int ilogbf32(_Float32 __x) noexcept(true); extern int __ilogbf32(_Float32 __x) noexcept(true); 
# 288
extern long llogbf32(_Float32 __x) noexcept(true); extern long __llogbf32(_Float32 __x) noexcept(true); 
# 293
extern _Float32 scalblnf32(_Float32 __x, long __n) noexcept(true); extern _Float32 __scalblnf32(_Float32 __x, long __n) noexcept(true); 
# 297
extern _Float32 nearbyintf32(_Float32 __x) noexcept(true); extern _Float32 __nearbyintf32(_Float32 __x) noexcept(true); 
# 301
extern _Float32 roundf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32 truncf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __truncf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32 remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); extern _Float32 __remquof32(_Float32 __x, _Float32 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32(_Float32 __x) noexcept(true); extern long __lrintf32(_Float32 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32(_Float32 __x) noexcept(true); extern long long __llrintf32(_Float32 __x) noexcept(true); 
# 323
extern long lroundf32(_Float32 __x) noexcept(true); extern long __lroundf32(_Float32 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32(_Float32 __x) noexcept(true); extern long long __llroundf32(_Float32 __x) noexcept(true); 
# 329
extern _Float32 fdimf32(_Float32 __x, _Float32 __y) noexcept(true); extern _Float32 __fdimf32(_Float32 __x, _Float32 __y) noexcept(true); 
# 333
extern _Float32 fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32 fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32 fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); extern _Float32 __fmaf32(_Float32 __x, _Float32 __y, _Float32 __z) noexcept(true); 
# 345
extern _Float32 roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); extern _Float32 __roundevenf32(_Float32 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32(_Float32 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32(_Float32 * __cx, const _Float32 * __x) noexcept(true); 
# 377
extern _Float32 fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaxmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32 fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminmagf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32 fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32 fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimumf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32 fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32 fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32 fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32 fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_magf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32 fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fmaximum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32 fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); extern _Float32 __fminimum_mag_numf32(_Float32 __x, _Float32 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32(const _Float32 * __x, const _Float32 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32 getpayloadf32(const _Float32 * __x) noexcept(true); extern _Float32 __getpayloadf32(const _Float32 * __x) noexcept(true); 
# 424
extern int setpayloadf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 427
extern int setpayloadsigf32(_Float32 * __x, _Float32 __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 acosf64(_Float64 __x) noexcept(true); extern _Float64 __acosf64(_Float64 __x) noexcept(true); 
# 55
extern _Float64 asinf64(_Float64 __x) noexcept(true); extern _Float64 __asinf64(_Float64 __x) noexcept(true); 
# 57
extern _Float64 atanf64(_Float64 __x) noexcept(true); extern _Float64 __atanf64(_Float64 __x) noexcept(true); 
# 59
extern _Float64 atan2f64(_Float64 __y, _Float64 __x) noexcept(true); extern _Float64 __atan2f64(_Float64 __y, _Float64 __x) noexcept(true); 
# 62
extern _Float64 cosf64(_Float64 __x) noexcept(true); extern _Float64 __cosf64(_Float64 __x) noexcept(true); 
# 64
extern _Float64 sinf64(_Float64 __x) noexcept(true); extern _Float64 __sinf64(_Float64 __x) noexcept(true); 
# 66
extern _Float64 tanf64(_Float64 __x) noexcept(true); extern _Float64 __tanf64(_Float64 __x) noexcept(true); 
# 71
extern _Float64 coshf64(_Float64 __x) noexcept(true); extern _Float64 __coshf64(_Float64 __x) noexcept(true); 
# 73
extern _Float64 sinhf64(_Float64 __x) noexcept(true); extern _Float64 __sinhf64(_Float64 __x) noexcept(true); 
# 75
extern _Float64 tanhf64(_Float64 __x) noexcept(true); extern _Float64 __tanhf64(_Float64 __x) noexcept(true); 
# 79
extern void sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); extern void __sincosf64(_Float64 __x, _Float64 * __sinx, _Float64 * __cosx) noexcept(true); 
# 85
extern _Float64 acoshf64(_Float64 __x) noexcept(true); extern _Float64 __acoshf64(_Float64 __x) noexcept(true); 
# 87
extern _Float64 asinhf64(_Float64 __x) noexcept(true); extern _Float64 __asinhf64(_Float64 __x) noexcept(true); 
# 89
extern _Float64 atanhf64(_Float64 __x) noexcept(true); extern _Float64 __atanhf64(_Float64 __x) noexcept(true); 
# 95
extern _Float64 expf64(_Float64 __x) noexcept(true); extern _Float64 __expf64(_Float64 __x) noexcept(true); 
# 98
extern _Float64 frexpf64(_Float64 __x, int * __exponent) noexcept(true); extern _Float64 __frexpf64(_Float64 __x, int * __exponent) noexcept(true); 
# 101
extern _Float64 ldexpf64(_Float64 __x, int __exponent) noexcept(true); extern _Float64 __ldexpf64(_Float64 __x, int __exponent) noexcept(true); 
# 104
extern _Float64 logf64(_Float64 __x) noexcept(true); extern _Float64 __logf64(_Float64 __x) noexcept(true); 
# 107
extern _Float64 log10f64(_Float64 __x) noexcept(true); extern _Float64 __log10f64(_Float64 __x) noexcept(true); 
# 110
extern _Float64 modff64(_Float64 __x, _Float64 * __iptr) noexcept(true); extern _Float64 __modff64(_Float64 __x, _Float64 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64 exp10f64(_Float64 __x) noexcept(true); extern _Float64 __exp10f64(_Float64 __x) noexcept(true); 
# 119
extern _Float64 expm1f64(_Float64 __x) noexcept(true); extern _Float64 __expm1f64(_Float64 __x) noexcept(true); 
# 122
extern _Float64 log1pf64(_Float64 __x) noexcept(true); extern _Float64 __log1pf64(_Float64 __x) noexcept(true); 
# 125
extern _Float64 logbf64(_Float64 __x) noexcept(true); extern _Float64 __logbf64(_Float64 __x) noexcept(true); 
# 130
extern _Float64 exp2f64(_Float64 __x) noexcept(true); extern _Float64 __exp2f64(_Float64 __x) noexcept(true); 
# 133
extern _Float64 log2f64(_Float64 __x) noexcept(true); extern _Float64 __log2f64(_Float64 __x) noexcept(true); 
# 140
extern _Float64 powf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __powf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 143
extern _Float64 sqrtf64(_Float64 __x) noexcept(true); extern _Float64 __sqrtf64(_Float64 __x) noexcept(true); 
# 147
extern _Float64 hypotf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __hypotf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 152
extern _Float64 cbrtf64(_Float64 __x) noexcept(true); extern _Float64 __cbrtf64(_Float64 __x) noexcept(true); 
# 159
extern _Float64 ceilf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __ceilf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64 fabsf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __fabsf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64 floorf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __floorf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64 fmodf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fmodf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __copysignf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64 nanf64(const char * __tagb) noexcept(true); extern _Float64 __nanf64(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 j0f64(_Float64) noexcept(true); extern _Float64 __j0f64(_Float64) noexcept(true); 
# 221
extern _Float64 j1f64(_Float64) noexcept(true); extern _Float64 __j1f64(_Float64) noexcept(true); 
# 222
extern _Float64 jnf64(int, _Float64) noexcept(true); extern _Float64 __jnf64(int, _Float64) noexcept(true); 
# 223
extern _Float64 y0f64(_Float64) noexcept(true); extern _Float64 __y0f64(_Float64) noexcept(true); 
# 224
extern _Float64 y1f64(_Float64) noexcept(true); extern _Float64 __y1f64(_Float64) noexcept(true); 
# 225
extern _Float64 ynf64(int, _Float64) noexcept(true); extern _Float64 __ynf64(int, _Float64) noexcept(true); 
# 231
extern _Float64 erff64(_Float64) noexcept(true); extern _Float64 __erff64(_Float64) noexcept(true); 
# 232
extern _Float64 erfcf64(_Float64) noexcept(true); extern _Float64 __erfcf64(_Float64) noexcept(true); 
# 233
extern _Float64 lgammaf64(_Float64) noexcept(true); extern _Float64 __lgammaf64(_Float64) noexcept(true); 
# 238
extern _Float64 tgammaf64(_Float64) noexcept(true); extern _Float64 __tgammaf64(_Float64) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64 lgammaf64_r(_Float64, int * __signgamp) noexcept(true); extern _Float64 __lgammaf64_r(_Float64, int * __signgamp) noexcept(true); 
# 259
extern _Float64 rintf64(_Float64 __x) noexcept(true); extern _Float64 __rintf64(_Float64 __x) noexcept(true); 
# 262
extern _Float64 nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __nextafterf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 269
extern _Float64 nextdownf64(_Float64 __x) noexcept(true); extern _Float64 __nextdownf64(_Float64 __x) noexcept(true); 
# 271
extern _Float64 nextupf64(_Float64 __x) noexcept(true); extern _Float64 __nextupf64(_Float64 __x) noexcept(true); 
# 275
extern _Float64 remainderf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __remainderf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 279
extern _Float64 scalbnf64(_Float64 __x, int __n) noexcept(true); extern _Float64 __scalbnf64(_Float64 __x, int __n) noexcept(true); 
# 283
extern int ilogbf64(_Float64 __x) noexcept(true); extern int __ilogbf64(_Float64 __x) noexcept(true); 
# 288
extern long llogbf64(_Float64 __x) noexcept(true); extern long __llogbf64(_Float64 __x) noexcept(true); 
# 293
extern _Float64 scalblnf64(_Float64 __x, long __n) noexcept(true); extern _Float64 __scalblnf64(_Float64 __x, long __n) noexcept(true); 
# 297
extern _Float64 nearbyintf64(_Float64 __x) noexcept(true); extern _Float64 __nearbyintf64(_Float64 __x) noexcept(true); 
# 301
extern _Float64 roundf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64 truncf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __truncf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64 remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); extern _Float64 __remquof64(_Float64 __x, _Float64 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64(_Float64 __x) noexcept(true); extern long __lrintf64(_Float64 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64(_Float64 __x) noexcept(true); extern long long __llrintf64(_Float64 __x) noexcept(true); 
# 323
extern long lroundf64(_Float64 __x) noexcept(true); extern long __lroundf64(_Float64 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64(_Float64 __x) noexcept(true); extern long long __llroundf64(_Float64 __x) noexcept(true); 
# 329
extern _Float64 fdimf64(_Float64 __x, _Float64 __y) noexcept(true); extern _Float64 __fdimf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 333
extern _Float64 fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64 fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64 fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); extern _Float64 __fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 345
extern _Float64 roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); extern _Float64 __roundevenf64(_Float64 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64(_Float64 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64(_Float64 * __cx, const _Float64 * __x) noexcept(true); 
# 377
extern _Float64 fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaxmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64 fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminmagf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64 fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64 fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimumf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64 fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64 fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64 fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64 fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_magf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64 fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fmaximum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64 fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); extern _Float64 __fminimum_mag_numf64(_Float64 __x, _Float64 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64(const _Float64 * __x, const _Float64 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64 getpayloadf64(const _Float64 * __x) noexcept(true); extern _Float64 __getpayloadf64(const _Float64 * __x) noexcept(true); 
# 424
extern int setpayloadf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 427
extern int setpayloadsigf64(_Float64 * __x, _Float64 __payload) noexcept(true); 
# 20 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3
extern int __fpclassifyf128(_Float128 __value) noexcept(true)
# 21
 __attribute((const)); 
# 24
extern int __signbitf128(_Float128 __value) noexcept(true)
# 25
 __attribute((const)); 
# 29
extern int __isinff128(_Float128 __value) noexcept(true)
# 30
 __attribute((const)); 
# 33
extern int __finitef128(_Float128 __value) noexcept(true)
# 34
 __attribute((const)); 
# 37
extern int __isnanf128(_Float128 __value) noexcept(true)
# 38
 __attribute((const)); 
# 41
extern int __iseqsigf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 44
extern int __issignalingf128(_Float128 __value) noexcept(true)
# 45
 __attribute((const)); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 acosf128(_Float128 __x) noexcept(true); extern _Float128 __acosf128(_Float128 __x) noexcept(true); 
# 55
extern _Float128 asinf128(_Float128 __x) noexcept(true); extern _Float128 __asinf128(_Float128 __x) noexcept(true); 
# 57
extern _Float128 atanf128(_Float128 __x) noexcept(true); extern _Float128 __atanf128(_Float128 __x) noexcept(true); 
# 59
extern _Float128 atan2f128(_Float128 __y, _Float128 __x) noexcept(true); extern _Float128 __atan2f128(_Float128 __y, _Float128 __x) noexcept(true); 
# 62
extern _Float128 cosf128(_Float128 __x) noexcept(true); extern _Float128 __cosf128(_Float128 __x) noexcept(true); 
# 64
extern _Float128 sinf128(_Float128 __x) noexcept(true); extern _Float128 __sinf128(_Float128 __x) noexcept(true); 
# 66
extern _Float128 tanf128(_Float128 __x) noexcept(true); extern _Float128 __tanf128(_Float128 __x) noexcept(true); 
# 71
extern _Float128 coshf128(_Float128 __x) noexcept(true); extern _Float128 __coshf128(_Float128 __x) noexcept(true); 
# 73
extern _Float128 sinhf128(_Float128 __x) noexcept(true); extern _Float128 __sinhf128(_Float128 __x) noexcept(true); 
# 75
extern _Float128 tanhf128(_Float128 __x) noexcept(true); extern _Float128 __tanhf128(_Float128 __x) noexcept(true); 
# 79
extern void sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) noexcept(true); extern void __sincosf128(_Float128 __x, _Float128 * __sinx, _Float128 * __cosx) noexcept(true); 
# 85
extern _Float128 acoshf128(_Float128 __x) noexcept(true); extern _Float128 __acoshf128(_Float128 __x) noexcept(true); 
# 87
extern _Float128 asinhf128(_Float128 __x) noexcept(true); extern _Float128 __asinhf128(_Float128 __x) noexcept(true); 
# 89
extern _Float128 atanhf128(_Float128 __x) noexcept(true); extern _Float128 __atanhf128(_Float128 __x) noexcept(true); 
# 95
extern _Float128 expf128(_Float128 __x) noexcept(true); extern _Float128 __expf128(_Float128 __x) noexcept(true); 
# 98
extern _Float128 frexpf128(_Float128 __x, int * __exponent) noexcept(true); extern _Float128 __frexpf128(_Float128 __x, int * __exponent) noexcept(true); 
# 101
extern _Float128 ldexpf128(_Float128 __x, int __exponent) noexcept(true); extern _Float128 __ldexpf128(_Float128 __x, int __exponent) noexcept(true); 
# 104
extern _Float128 logf128(_Float128 __x) noexcept(true); extern _Float128 __logf128(_Float128 __x) noexcept(true); 
# 107
extern _Float128 log10f128(_Float128 __x) noexcept(true); extern _Float128 __log10f128(_Float128 __x) noexcept(true); 
# 110
extern _Float128 modff128(_Float128 __x, _Float128 * __iptr) noexcept(true); extern _Float128 __modff128(_Float128 __x, _Float128 * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float128 exp10f128(_Float128 __x) noexcept(true); extern _Float128 __exp10f128(_Float128 __x) noexcept(true); 
# 119
extern _Float128 expm1f128(_Float128 __x) noexcept(true); extern _Float128 __expm1f128(_Float128 __x) noexcept(true); 
# 122
extern _Float128 log1pf128(_Float128 __x) noexcept(true); extern _Float128 __log1pf128(_Float128 __x) noexcept(true); 
# 125
extern _Float128 logbf128(_Float128 __x) noexcept(true); extern _Float128 __logbf128(_Float128 __x) noexcept(true); 
# 130
extern _Float128 exp2f128(_Float128 __x) noexcept(true); extern _Float128 __exp2f128(_Float128 __x) noexcept(true); 
# 133
extern _Float128 log2f128(_Float128 __x) noexcept(true); extern _Float128 __log2f128(_Float128 __x) noexcept(true); 
# 140
extern _Float128 powf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __powf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 143
extern _Float128 sqrtf128(_Float128 __x) noexcept(true); extern _Float128 __sqrtf128(_Float128 __x) noexcept(true); 
# 147
extern _Float128 hypotf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __hypotf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 152
extern _Float128 cbrtf128(_Float128 __x) noexcept(true); extern _Float128 __cbrtf128(_Float128 __x) noexcept(true); 
# 159
extern _Float128 ceilf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __ceilf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 162
extern _Float128 fabsf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __fabsf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 165
extern _Float128 floorf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __floorf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 168
extern _Float128 fmodf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __fmodf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 copysignf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __copysignf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 203
extern _Float128 nanf128(const char * __tagb) noexcept(true); extern _Float128 __nanf128(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 j0f128(_Float128) noexcept(true); extern _Float128 __j0f128(_Float128) noexcept(true); 
# 221
extern _Float128 j1f128(_Float128) noexcept(true); extern _Float128 __j1f128(_Float128) noexcept(true); 
# 222
extern _Float128 jnf128(int, _Float128) noexcept(true); extern _Float128 __jnf128(int, _Float128) noexcept(true); 
# 223
extern _Float128 y0f128(_Float128) noexcept(true); extern _Float128 __y0f128(_Float128) noexcept(true); 
# 224
extern _Float128 y1f128(_Float128) noexcept(true); extern _Float128 __y1f128(_Float128) noexcept(true); 
# 225
extern _Float128 ynf128(int, _Float128) noexcept(true); extern _Float128 __ynf128(int, _Float128) noexcept(true); 
# 231
extern _Float128 erff128(_Float128) noexcept(true); extern _Float128 __erff128(_Float128) noexcept(true); 
# 232
extern _Float128 erfcf128(_Float128) noexcept(true); extern _Float128 __erfcf128(_Float128) noexcept(true); 
# 233
extern _Float128 lgammaf128(_Float128) noexcept(true); extern _Float128 __lgammaf128(_Float128) noexcept(true); 
# 238
extern _Float128 tgammaf128(_Float128) noexcept(true); extern _Float128 __tgammaf128(_Float128) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float128 lgammaf128_r(_Float128, int * __signgamp) noexcept(true); extern _Float128 __lgammaf128_r(_Float128, int * __signgamp) noexcept(true); 
# 259
extern _Float128 rintf128(_Float128 __x) noexcept(true); extern _Float128 __rintf128(_Float128 __x) noexcept(true); 
# 262
extern _Float128 nextafterf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __nextafterf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 269
extern _Float128 nextdownf128(_Float128 __x) noexcept(true); extern _Float128 __nextdownf128(_Float128 __x) noexcept(true); 
# 271
extern _Float128 nextupf128(_Float128 __x) noexcept(true); extern _Float128 __nextupf128(_Float128 __x) noexcept(true); 
# 275
extern _Float128 remainderf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __remainderf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 279
extern _Float128 scalbnf128(_Float128 __x, int __n) noexcept(true); extern _Float128 __scalbnf128(_Float128 __x, int __n) noexcept(true); 
# 283
extern int ilogbf128(_Float128 __x) noexcept(true); extern int __ilogbf128(_Float128 __x) noexcept(true); 
# 288
extern long llogbf128(_Float128 __x) noexcept(true); extern long __llogbf128(_Float128 __x) noexcept(true); 
# 293
extern _Float128 scalblnf128(_Float128 __x, long __n) noexcept(true); extern _Float128 __scalblnf128(_Float128 __x, long __n) noexcept(true); 
# 297
extern _Float128 nearbyintf128(_Float128 __x) noexcept(true); extern _Float128 __nearbyintf128(_Float128 __x) noexcept(true); 
# 301
extern _Float128 roundf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __roundf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 305
extern _Float128 truncf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __truncf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 310
extern _Float128 remquof128(_Float128 __x, _Float128 __y, int * __quo) noexcept(true); extern _Float128 __remquof128(_Float128 __x, _Float128 __y, int * __quo) noexcept(true); 
# 317
extern long lrintf128(_Float128 __x) noexcept(true); extern long __lrintf128(_Float128 __x) noexcept(true); 
# 319
__extension__ extern long long llrintf128(_Float128 __x) noexcept(true); extern long long __llrintf128(_Float128 __x) noexcept(true); 
# 323
extern long lroundf128(_Float128 __x) noexcept(true); extern long __lroundf128(_Float128 __x) noexcept(true); 
# 325
__extension__ extern long long llroundf128(_Float128 __x) noexcept(true); extern long long __llroundf128(_Float128 __x) noexcept(true); 
# 329
extern _Float128 fdimf128(_Float128 __x, _Float128 __y) noexcept(true); extern _Float128 __fdimf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 333
extern _Float128 fmaxf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaxf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 336
extern _Float128 fminf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 340
extern _Float128 fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); extern _Float128 __fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 345
extern _Float128 roundevenf128(_Float128 __x) noexcept(true) __attribute((const)); extern _Float128 __roundevenf128(_Float128 __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf128(_Float128 __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef128(_Float128 * __cx, const _Float128 * __x) noexcept(true); 
# 377
extern _Float128 fmaxmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaxmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 380
extern _Float128 fminmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminmagf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 385
extern _Float128 fmaximumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 388
extern _Float128 fminimumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimumf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 391
extern _Float128 fmaximum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 394
extern _Float128 fminimum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 397
extern _Float128 fmaximum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 400
extern _Float128 fminimum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_magf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 403
extern _Float128 fmaximum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fmaximum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 406
extern _Float128 fminimum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); extern _Float128 __fminimum_mag_numf128(_Float128 __x, _Float128 __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf128(const _Float128 * __x, const _Float128 * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf128(const _Float128 * __x, const _Float128 * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float128 getpayloadf128(const _Float128 * __x) noexcept(true); extern _Float128 __getpayloadf128(const _Float128 * __x) noexcept(true); 
# 424
extern int setpayloadf128(_Float128 * __x, _Float128 __payload) noexcept(true); 
# 427
extern int setpayloadsigf128(_Float128 * __x, _Float128 __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x acosf32x(_Float32x __x) noexcept(true); extern _Float32x __acosf32x(_Float32x __x) noexcept(true); 
# 55
extern _Float32x asinf32x(_Float32x __x) noexcept(true); extern _Float32x __asinf32x(_Float32x __x) noexcept(true); 
# 57
extern _Float32x atanf32x(_Float32x __x) noexcept(true); extern _Float32x __atanf32x(_Float32x __x) noexcept(true); 
# 59
extern _Float32x atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); extern _Float32x __atan2f32x(_Float32x __y, _Float32x __x) noexcept(true); 
# 62
extern _Float32x cosf32x(_Float32x __x) noexcept(true); extern _Float32x __cosf32x(_Float32x __x) noexcept(true); 
# 64
extern _Float32x sinf32x(_Float32x __x) noexcept(true); extern _Float32x __sinf32x(_Float32x __x) noexcept(true); 
# 66
extern _Float32x tanf32x(_Float32x __x) noexcept(true); extern _Float32x __tanf32x(_Float32x __x) noexcept(true); 
# 71
extern _Float32x coshf32x(_Float32x __x) noexcept(true); extern _Float32x __coshf32x(_Float32x __x) noexcept(true); 
# 73
extern _Float32x sinhf32x(_Float32x __x) noexcept(true); extern _Float32x __sinhf32x(_Float32x __x) noexcept(true); 
# 75
extern _Float32x tanhf32x(_Float32x __x) noexcept(true); extern _Float32x __tanhf32x(_Float32x __x) noexcept(true); 
# 79
extern void sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); extern void __sincosf32x(_Float32x __x, _Float32x * __sinx, _Float32x * __cosx) noexcept(true); 
# 85
extern _Float32x acoshf32x(_Float32x __x) noexcept(true); extern _Float32x __acoshf32x(_Float32x __x) noexcept(true); 
# 87
extern _Float32x asinhf32x(_Float32x __x) noexcept(true); extern _Float32x __asinhf32x(_Float32x __x) noexcept(true); 
# 89
extern _Float32x atanhf32x(_Float32x __x) noexcept(true); extern _Float32x __atanhf32x(_Float32x __x) noexcept(true); 
# 95
extern _Float32x expf32x(_Float32x __x) noexcept(true); extern _Float32x __expf32x(_Float32x __x) noexcept(true); 
# 98
extern _Float32x frexpf32x(_Float32x __x, int * __exponent) noexcept(true); extern _Float32x __frexpf32x(_Float32x __x, int * __exponent) noexcept(true); 
# 101
extern _Float32x ldexpf32x(_Float32x __x, int __exponent) noexcept(true); extern _Float32x __ldexpf32x(_Float32x __x, int __exponent) noexcept(true); 
# 104
extern _Float32x logf32x(_Float32x __x) noexcept(true); extern _Float32x __logf32x(_Float32x __x) noexcept(true); 
# 107
extern _Float32x log10f32x(_Float32x __x) noexcept(true); extern _Float32x __log10f32x(_Float32x __x) noexcept(true); 
# 110
extern _Float32x modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true); extern _Float32x __modff32x(_Float32x __x, _Float32x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float32x exp10f32x(_Float32x __x) noexcept(true); extern _Float32x __exp10f32x(_Float32x __x) noexcept(true); 
# 119
extern _Float32x expm1f32x(_Float32x __x) noexcept(true); extern _Float32x __expm1f32x(_Float32x __x) noexcept(true); 
# 122
extern _Float32x log1pf32x(_Float32x __x) noexcept(true); extern _Float32x __log1pf32x(_Float32x __x) noexcept(true); 
# 125
extern _Float32x logbf32x(_Float32x __x) noexcept(true); extern _Float32x __logbf32x(_Float32x __x) noexcept(true); 
# 130
extern _Float32x exp2f32x(_Float32x __x) noexcept(true); extern _Float32x __exp2f32x(_Float32x __x) noexcept(true); 
# 133
extern _Float32x log2f32x(_Float32x __x) noexcept(true); extern _Float32x __log2f32x(_Float32x __x) noexcept(true); 
# 140
extern _Float32x powf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __powf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 143
extern _Float32x sqrtf32x(_Float32x __x) noexcept(true); extern _Float32x __sqrtf32x(_Float32x __x) noexcept(true); 
# 147
extern _Float32x hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __hypotf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 152
extern _Float32x cbrtf32x(_Float32x __x) noexcept(true); extern _Float32x __cbrtf32x(_Float32x __x) noexcept(true); 
# 159
extern _Float32x ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __ceilf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float32x fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __fabsf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float32x floorf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __floorf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float32x fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fmodf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __copysignf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float32x nanf32x(const char * __tagb) noexcept(true); extern _Float32x __nanf32x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x j0f32x(_Float32x) noexcept(true); extern _Float32x __j0f32x(_Float32x) noexcept(true); 
# 221
extern _Float32x j1f32x(_Float32x) noexcept(true); extern _Float32x __j1f32x(_Float32x) noexcept(true); 
# 222
extern _Float32x jnf32x(int, _Float32x) noexcept(true); extern _Float32x __jnf32x(int, _Float32x) noexcept(true); 
# 223
extern _Float32x y0f32x(_Float32x) noexcept(true); extern _Float32x __y0f32x(_Float32x) noexcept(true); 
# 224
extern _Float32x y1f32x(_Float32x) noexcept(true); extern _Float32x __y1f32x(_Float32x) noexcept(true); 
# 225
extern _Float32x ynf32x(int, _Float32x) noexcept(true); extern _Float32x __ynf32x(int, _Float32x) noexcept(true); 
# 231
extern _Float32x erff32x(_Float32x) noexcept(true); extern _Float32x __erff32x(_Float32x) noexcept(true); 
# 232
extern _Float32x erfcf32x(_Float32x) noexcept(true); extern _Float32x __erfcf32x(_Float32x) noexcept(true); 
# 233
extern _Float32x lgammaf32x(_Float32x) noexcept(true); extern _Float32x __lgammaf32x(_Float32x) noexcept(true); 
# 238
extern _Float32x tgammaf32x(_Float32x) noexcept(true); extern _Float32x __tgammaf32x(_Float32x) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float32x lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); extern _Float32x __lgammaf32x_r(_Float32x, int * __signgamp) noexcept(true); 
# 259
extern _Float32x rintf32x(_Float32x __x) noexcept(true); extern _Float32x __rintf32x(_Float32x __x) noexcept(true); 
# 262
extern _Float32x nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __nextafterf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 269
extern _Float32x nextdownf32x(_Float32x __x) noexcept(true); extern _Float32x __nextdownf32x(_Float32x __x) noexcept(true); 
# 271
extern _Float32x nextupf32x(_Float32x __x) noexcept(true); extern _Float32x __nextupf32x(_Float32x __x) noexcept(true); 
# 275
extern _Float32x remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __remainderf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 279
extern _Float32x scalbnf32x(_Float32x __x, int __n) noexcept(true); extern _Float32x __scalbnf32x(_Float32x __x, int __n) noexcept(true); 
# 283
extern int ilogbf32x(_Float32x __x) noexcept(true); extern int __ilogbf32x(_Float32x __x) noexcept(true); 
# 288
extern long llogbf32x(_Float32x __x) noexcept(true); extern long __llogbf32x(_Float32x __x) noexcept(true); 
# 293
extern _Float32x scalblnf32x(_Float32x __x, long __n) noexcept(true); extern _Float32x __scalblnf32x(_Float32x __x, long __n) noexcept(true); 
# 297
extern _Float32x nearbyintf32x(_Float32x __x) noexcept(true); extern _Float32x __nearbyintf32x(_Float32x __x) noexcept(true); 
# 301
extern _Float32x roundf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float32x truncf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __truncf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float32x remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); extern _Float32x __remquof32x(_Float32x __x, _Float32x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf32x(_Float32x __x) noexcept(true); extern long __lrintf32x(_Float32x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf32x(_Float32x __x) noexcept(true); extern long long __llrintf32x(_Float32x __x) noexcept(true); 
# 323
extern long lroundf32x(_Float32x __x) noexcept(true); extern long __lroundf32x(_Float32x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf32x(_Float32x __x) noexcept(true); extern long long __llroundf32x(_Float32x __x) noexcept(true); 
# 329
extern _Float32x fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); extern _Float32x __fdimf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 333
extern _Float32x fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float32x fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float32x fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); extern _Float32x __fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 345
extern _Float32x roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); extern _Float32x __roundevenf32x(_Float32x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf32x(_Float32x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef32x(_Float32x * __cx, const _Float32x * __x) noexcept(true); 
# 377
extern _Float32x fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaxmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float32x fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminmagf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float32x fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float32x fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimumf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float32x fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float32x fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float32x fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float32x fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_magf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float32x fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fmaximum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float32x fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); extern _Float32x __fminimum_mag_numf32x(_Float32x __x, _Float32x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf32x(const _Float32x * __x, const _Float32x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float32x getpayloadf32x(const _Float32x * __x) noexcept(true); extern _Float32x __getpayloadf32x(const _Float32x * __x) noexcept(true); 
# 424
extern int setpayloadf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 427
extern int setpayloadsigf32x(_Float32x * __x, _Float32x __payload) noexcept(true); 
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x acosf64x(_Float64x __x) noexcept(true); extern _Float64x __acosf64x(_Float64x __x) noexcept(true); 
# 55
extern _Float64x asinf64x(_Float64x __x) noexcept(true); extern _Float64x __asinf64x(_Float64x __x) noexcept(true); 
# 57
extern _Float64x atanf64x(_Float64x __x) noexcept(true); extern _Float64x __atanf64x(_Float64x __x) noexcept(true); 
# 59
extern _Float64x atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); extern _Float64x __atan2f64x(_Float64x __y, _Float64x __x) noexcept(true); 
# 62
extern _Float64x cosf64x(_Float64x __x) noexcept(true); extern _Float64x __cosf64x(_Float64x __x) noexcept(true); 
# 64
extern _Float64x sinf64x(_Float64x __x) noexcept(true); extern _Float64x __sinf64x(_Float64x __x) noexcept(true); 
# 66
extern _Float64x tanf64x(_Float64x __x) noexcept(true); extern _Float64x __tanf64x(_Float64x __x) noexcept(true); 
# 71
extern _Float64x coshf64x(_Float64x __x) noexcept(true); extern _Float64x __coshf64x(_Float64x __x) noexcept(true); 
# 73
extern _Float64x sinhf64x(_Float64x __x) noexcept(true); extern _Float64x __sinhf64x(_Float64x __x) noexcept(true); 
# 75
extern _Float64x tanhf64x(_Float64x __x) noexcept(true); extern _Float64x __tanhf64x(_Float64x __x) noexcept(true); 
# 79
extern void sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); extern void __sincosf64x(_Float64x __x, _Float64x * __sinx, _Float64x * __cosx) noexcept(true); 
# 85
extern _Float64x acoshf64x(_Float64x __x) noexcept(true); extern _Float64x __acoshf64x(_Float64x __x) noexcept(true); 
# 87
extern _Float64x asinhf64x(_Float64x __x) noexcept(true); extern _Float64x __asinhf64x(_Float64x __x) noexcept(true); 
# 89
extern _Float64x atanhf64x(_Float64x __x) noexcept(true); extern _Float64x __atanhf64x(_Float64x __x) noexcept(true); 
# 95
extern _Float64x expf64x(_Float64x __x) noexcept(true); extern _Float64x __expf64x(_Float64x __x) noexcept(true); 
# 98
extern _Float64x frexpf64x(_Float64x __x, int * __exponent) noexcept(true); extern _Float64x __frexpf64x(_Float64x __x, int * __exponent) noexcept(true); 
# 101
extern _Float64x ldexpf64x(_Float64x __x, int __exponent) noexcept(true); extern _Float64x __ldexpf64x(_Float64x __x, int __exponent) noexcept(true); 
# 104
extern _Float64x logf64x(_Float64x __x) noexcept(true); extern _Float64x __logf64x(_Float64x __x) noexcept(true); 
# 107
extern _Float64x log10f64x(_Float64x __x) noexcept(true); extern _Float64x __log10f64x(_Float64x __x) noexcept(true); 
# 110
extern _Float64x modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true); extern _Float64x __modff64x(_Float64x __x, _Float64x * __iptr) noexcept(true) __attribute((__nonnull__(2))); 
# 114
extern _Float64x exp10f64x(_Float64x __x) noexcept(true); extern _Float64x __exp10f64x(_Float64x __x) noexcept(true); 
# 119
extern _Float64x expm1f64x(_Float64x __x) noexcept(true); extern _Float64x __expm1f64x(_Float64x __x) noexcept(true); 
# 122
extern _Float64x log1pf64x(_Float64x __x) noexcept(true); extern _Float64x __log1pf64x(_Float64x __x) noexcept(true); 
# 125
extern _Float64x logbf64x(_Float64x __x) noexcept(true); extern _Float64x __logbf64x(_Float64x __x) noexcept(true); 
# 130
extern _Float64x exp2f64x(_Float64x __x) noexcept(true); extern _Float64x __exp2f64x(_Float64x __x) noexcept(true); 
# 133
extern _Float64x log2f64x(_Float64x __x) noexcept(true); extern _Float64x __log2f64x(_Float64x __x) noexcept(true); 
# 140
extern _Float64x powf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __powf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 143
extern _Float64x sqrtf64x(_Float64x __x) noexcept(true); extern _Float64x __sqrtf64x(_Float64x __x) noexcept(true); 
# 147
extern _Float64x hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __hypotf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 152
extern _Float64x cbrtf64x(_Float64x __x) noexcept(true); extern _Float64x __cbrtf64x(_Float64x __x) noexcept(true); 
# 159
extern _Float64x ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __ceilf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 162
extern _Float64x fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __fabsf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 165
extern _Float64x floorf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __floorf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 168
extern _Float64x fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fmodf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 198 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __copysignf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 203
extern _Float64x nanf64x(const char * __tagb) noexcept(true); extern _Float64x __nanf64x(const char * __tagb) noexcept(true); 
# 220 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x j0f64x(_Float64x) noexcept(true); extern _Float64x __j0f64x(_Float64x) noexcept(true); 
# 221
extern _Float64x j1f64x(_Float64x) noexcept(true); extern _Float64x __j1f64x(_Float64x) noexcept(true); 
# 222
extern _Float64x jnf64x(int, _Float64x) noexcept(true); extern _Float64x __jnf64x(int, _Float64x) noexcept(true); 
# 223
extern _Float64x y0f64x(_Float64x) noexcept(true); extern _Float64x __y0f64x(_Float64x) noexcept(true); 
# 224
extern _Float64x y1f64x(_Float64x) noexcept(true); extern _Float64x __y1f64x(_Float64x) noexcept(true); 
# 225
extern _Float64x ynf64x(int, _Float64x) noexcept(true); extern _Float64x __ynf64x(int, _Float64x) noexcept(true); 
# 231
extern _Float64x erff64x(_Float64x) noexcept(true); extern _Float64x __erff64x(_Float64x) noexcept(true); 
# 232
extern _Float64x erfcf64x(_Float64x) noexcept(true); extern _Float64x __erfcf64x(_Float64x) noexcept(true); 
# 233
extern _Float64x lgammaf64x(_Float64x) noexcept(true); extern _Float64x __lgammaf64x(_Float64x) noexcept(true); 
# 238
extern _Float64x tgammaf64x(_Float64x) noexcept(true); extern _Float64x __tgammaf64x(_Float64x) noexcept(true); 
# 252 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3
extern _Float64x lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); extern _Float64x __lgammaf64x_r(_Float64x, int * __signgamp) noexcept(true); 
# 259
extern _Float64x rintf64x(_Float64x __x) noexcept(true); extern _Float64x __rintf64x(_Float64x __x) noexcept(true); 
# 262
extern _Float64x nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __nextafterf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 269
extern _Float64x nextdownf64x(_Float64x __x) noexcept(true); extern _Float64x __nextdownf64x(_Float64x __x) noexcept(true); 
# 271
extern _Float64x nextupf64x(_Float64x __x) noexcept(true); extern _Float64x __nextupf64x(_Float64x __x) noexcept(true); 
# 275
extern _Float64x remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __remainderf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 279
extern _Float64x scalbnf64x(_Float64x __x, int __n) noexcept(true); extern _Float64x __scalbnf64x(_Float64x __x, int __n) noexcept(true); 
# 283
extern int ilogbf64x(_Float64x __x) noexcept(true); extern int __ilogbf64x(_Float64x __x) noexcept(true); 
# 288
extern long llogbf64x(_Float64x __x) noexcept(true); extern long __llogbf64x(_Float64x __x) noexcept(true); 
# 293
extern _Float64x scalblnf64x(_Float64x __x, long __n) noexcept(true); extern _Float64x __scalblnf64x(_Float64x __x, long __n) noexcept(true); 
# 297
extern _Float64x nearbyintf64x(_Float64x __x) noexcept(true); extern _Float64x __nearbyintf64x(_Float64x __x) noexcept(true); 
# 301
extern _Float64x roundf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 305
extern _Float64x truncf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __truncf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 310
extern _Float64x remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); extern _Float64x __remquof64x(_Float64x __x, _Float64x __y, int * __quo) noexcept(true); 
# 317
extern long lrintf64x(_Float64x __x) noexcept(true); extern long __lrintf64x(_Float64x __x) noexcept(true); 
# 319
__extension__ extern long long llrintf64x(_Float64x __x) noexcept(true); extern long long __llrintf64x(_Float64x __x) noexcept(true); 
# 323
extern long lroundf64x(_Float64x __x) noexcept(true); extern long __lroundf64x(_Float64x __x) noexcept(true); 
# 325
__extension__ extern long long llroundf64x(_Float64x __x) noexcept(true); extern long long __llroundf64x(_Float64x __x) noexcept(true); 
# 329
extern _Float64x fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); extern _Float64x __fdimf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 333
extern _Float64x fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 336
extern _Float64x fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 340
extern _Float64x fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); extern _Float64x __fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 345
extern _Float64x roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); extern _Float64x __roundevenf64x(_Float64x __x) noexcept(true) __attribute((const)); 
# 349
extern __intmax_t fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 354
extern __uintmax_t ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 360
extern __intmax_t fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __intmax_t __fromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 366
extern __uintmax_t ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); extern __uintmax_t __ufromfpxf64x(_Float64x __x, int __round, unsigned __width) noexcept(true); 
# 370
extern int canonicalizef64x(_Float64x * __cx, const _Float64x * __x) noexcept(true); 
# 377
extern _Float64x fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaxmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 380
extern _Float64x fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminmagf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 385
extern _Float64x fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 388
extern _Float64x fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimumf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 391
extern _Float64x fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 394
extern _Float64x fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 397
extern _Float64x fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 400
extern _Float64x fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_magf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 403
extern _Float64x fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fmaximum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 406
extern _Float64x fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); extern _Float64x __fminimum_mag_numf64x(_Float64x __x, _Float64x __y) noexcept(true) __attribute((const)); 
# 411
extern int totalorderf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 413
 __attribute((__pure__)); 
# 416
extern int totalordermagf64x(const _Float64x * __x, const _Float64x * __y) noexcept(true)
# 418
 __attribute((__pure__)); 
# 421
extern _Float64x getpayloadf64x(const _Float64x * __x) noexcept(true); extern _Float64x __getpayloadf64x(const _Float64x * __x) noexcept(true); 
# 424
extern int setpayloadf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 427
extern int setpayloadsigf64x(_Float64x * __x, _Float64x __payload) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float fadd(double __x, double __y) noexcept(true); 
# 27
extern float fdiv(double __x, double __y) noexcept(true); 
# 30
extern float ffma(double __x, double __y, double __z) noexcept(true); 
# 33
extern float fmul(double __x, double __y) noexcept(true); 
# 36
extern float fsqrt(double __x) noexcept(true); 
# 39
extern float fsub(double __x, double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern float faddl(long double __x, long double __y) noexcept(true); 
# 27
extern float fdivl(long double __x, long double __y) noexcept(true); 
# 30
extern float ffmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern float fmull(long double __x, long double __y) noexcept(true); 
# 36
extern float fsqrtl(long double __x) noexcept(true); 
# 39
extern float fsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern double daddl(long double __x, long double __y) noexcept(true); 
# 27
extern double ddivl(long double __x, long double __y) noexcept(true); 
# 30
extern double dfmal(long double __x, long double __y, long double __z) noexcept(true); 
# 33
extern double dmull(long double __x, long double __y) noexcept(true); 
# 36
extern double dsqrtl(long double __x) noexcept(true); 
# 39
extern double dsubl(long double __x, long double __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 27
extern _Float32 f32divf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf32x(_Float32x __x, _Float32x __y, _Float32x __z) noexcept(true); 
# 33
extern _Float32 f32mulf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf32x(_Float32x __x) noexcept(true); 
# 39
extern _Float32 f32subf32x(_Float32x __x, _Float32x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32 f32divf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32 f32mulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32 f32subf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32 f32divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32 f32fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32 f32mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32 f32subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32 f32addf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float32 f32divf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float32 f32fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float32 f32mulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float32 f32sqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float32 f32subf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64(_Float64 __x, _Float64 __y, _Float64 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64(_Float64 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64(_Float64 __x, _Float64 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float32x f32xdivf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float32x f32xmulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float32x f32xsubf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float32x f32xaddf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float32x f32xdivf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float32x f32xfmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float32x f32xmulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float32x f32xsqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float32x f32xsubf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 27
extern _Float64 f64divf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 30
extern _Float64 f64fmaf64x(_Float64x __x, _Float64x __y, _Float64x __z) noexcept(true); 
# 33
extern _Float64 f64mulf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf64x(_Float64x __x) noexcept(true); 
# 39
extern _Float64 f64subf64x(_Float64x __x, _Float64x __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64 f64addf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float64 f64divf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float64 f64fmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float64 f64mulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float64 f64sqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float64 f64subf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3
extern _Float64x f64xaddf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 27
extern _Float64x f64xdivf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 30
extern _Float64x f64xfmaf128(_Float128 __x, _Float128 __y, _Float128 __z) noexcept(true); 
# 33
extern _Float64x f64xmulf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 36
extern _Float64x f64xsqrtf128(_Float128 __x) noexcept(true); 
# 39
extern _Float64x f64xsubf128(_Float128 __x, _Float128 __y) noexcept(true); 
# 854 "/usr/include/math.h" 3
extern int signgam; 
# 935 "/usr/include/math.h" 3
enum { 
# 936
FP_NAN, 
# 939
FP_INFINITE, 
# 942
FP_ZERO, 
# 945
FP_SUBNORMAL, 
# 948
FP_NORMAL
# 951
}; 
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern int __iscanonicall(long double __x) noexcept(true)
# 24
 __attribute((const)); 
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3
extern "C++" {
# 47
inline int iscanonical(float __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 48
inline int iscanonical(double __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 49
inline int iscanonical(long double __val) { return __iscanonicall(__val); } 
# 51
inline int iscanonical(_Float128 __val) { return (((void)((__typeof__(__val))__val)), 1); } 
# 53
}
# 1066 "/usr/include/math.h" 3
extern "C++" {
# 1067
inline int issignaling(float __val) { return __issignalingf(__val); } 
# 1068
inline int issignaling(double __val) { return __issignaling(__val); } 
# 1070
inline int issignaling(long double __val) 
# 1071
{ 
# 1075
return __issignalingl(__val); 
# 1077
} 
# 1081
inline int issignaling(_Float128 __val) { return __issignalingf128(__val); } 
# 1083
}
# 1097 "/usr/include/math.h" 3
extern "C++" {
# 1128 "/usr/include/math.h" 3
template< class __T> inline bool 
# 1129
iszero(__T __val) 
# 1130
{ 
# 1131
return __val == 0; 
# 1132
} 
# 1134
}
# 1363 "/usr/include/math.h" 3
extern "C++" {
# 1364
template< class > struct __iseqsig_type; 
# 1366
template<> struct __iseqsig_type< float>  { 
# 1368
static int __call(float __x, float __y) throw() 
# 1369
{ 
# 1370
return __iseqsigf(__x, __y); 
# 1371
} 
# 1372
}; 
# 1374
template<> struct __iseqsig_type< double>  { 
# 1376
static int __call(double __x, double __y) throw() 
# 1377
{ 
# 1378
return __iseqsig(__x, __y); 
# 1379
} 
# 1380
}; 
# 1382
template<> struct __iseqsig_type< long double>  { 
# 1384
static int __call(long double __x, long double __y) throw() 
# 1385
{ 
# 1387
return __iseqsigl(__x, __y); 
# 1391
} 
# 1392
}; 
# 1397
template<> struct __iseqsig_type< __float128>  { 
# 1399
static int __call(_Float128 __x, _Float128 __y) throw() 
# 1400
{ 
# 1401
return __iseqsigf128(__x, __y); 
# 1402
} 
# 1403
}; 
# 1406
template< class _T1, class _T2> inline int 
# 1408
iseqsig(_T1 __x, _T2 __y) throw() 
# 1409
{ 
# 1411
typedef __decltype(((__x + __y) + (0.0F))) _T3; 
# 1415
return __iseqsig_type< __decltype(((__x + __y) + (0.0F)))> ::__call(__x, __y); 
# 1416
} 
# 1418
}
# 1423
}
# 77 "/usr/include/c++/11/cmath" 3
extern "C++" {
# 79
namespace std __attribute((__visibility__("default"))) { 
# 83
using ::acos;
# 87
constexpr float acos(float __x) 
# 88
{ return __builtin_acosf(__x); } 
# 91
constexpr long double acos(long double __x) 
# 92
{ return __builtin_acosl(__x); } 
# 95
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 99
acos(_Tp __x) 
# 100
{ return __builtin_acos(__x); } 
# 102
using ::asin;
# 106
constexpr float asin(float __x) 
# 107
{ return __builtin_asinf(__x); } 
# 110
constexpr long double asin(long double __x) 
# 111
{ return __builtin_asinl(__x); } 
# 114
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 118
asin(_Tp __x) 
# 119
{ return __builtin_asin(__x); } 
# 121
using ::atan;
# 125
constexpr float atan(float __x) 
# 126
{ return __builtin_atanf(__x); } 
# 129
constexpr long double atan(long double __x) 
# 130
{ return __builtin_atanl(__x); } 
# 133
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 137
atan(_Tp __x) 
# 138
{ return __builtin_atan(__x); } 
# 140
using ::atan2;
# 144
constexpr float atan2(float __y, float __x) 
# 145
{ return __builtin_atan2f(__y, __x); } 
# 148
constexpr long double atan2(long double __y, long double __x) 
# 149
{ return __builtin_atan2l(__y, __x); } 
# 152
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 155
atan2(_Tp __y, _Up __x) 
# 156
{ 
# 157
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 158
return atan2((__type)__y, (__type)__x); 
# 159
} 
# 161
using ::ceil;
# 165
constexpr float ceil(float __x) 
# 166
{ return __builtin_ceilf(__x); } 
# 169
constexpr long double ceil(long double __x) 
# 170
{ return __builtin_ceill(__x); } 
# 173
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 177
ceil(_Tp __x) 
# 178
{ return __builtin_ceil(__x); } 
# 180
using ::cos;
# 184
constexpr float cos(float __x) 
# 185
{ return __builtin_cosf(__x); } 
# 188
constexpr long double cos(long double __x) 
# 189
{ return __builtin_cosl(__x); } 
# 192
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 196
cos(_Tp __x) 
# 197
{ return __builtin_cos(__x); } 
# 199
using ::cosh;
# 203
constexpr float cosh(float __x) 
# 204
{ return __builtin_coshf(__x); } 
# 207
constexpr long double cosh(long double __x) 
# 208
{ return __builtin_coshl(__x); } 
# 211
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 215
cosh(_Tp __x) 
# 216
{ return __builtin_cosh(__x); } 
# 218
using ::exp;
# 222
constexpr float exp(float __x) 
# 223
{ return __builtin_expf(__x); } 
# 226
constexpr long double exp(long double __x) 
# 227
{ return __builtin_expl(__x); } 
# 230
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 234
exp(_Tp __x) 
# 235
{ return __builtin_exp(__x); } 
# 237
using ::fabs;
# 241
constexpr float fabs(float __x) 
# 242
{ return __builtin_fabsf(__x); } 
# 245
constexpr long double fabs(long double __x) 
# 246
{ return __builtin_fabsl(__x); } 
# 249
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 253
fabs(_Tp __x) 
# 254
{ return __builtin_fabs(__x); } 
# 256
using ::floor;
# 260
constexpr float floor(float __x) 
# 261
{ return __builtin_floorf(__x); } 
# 264
constexpr long double floor(long double __x) 
# 265
{ return __builtin_floorl(__x); } 
# 268
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 272
floor(_Tp __x) 
# 273
{ return __builtin_floor(__x); } 
# 275
using ::fmod;
# 279
constexpr float fmod(float __x, float __y) 
# 280
{ return __builtin_fmodf(__x, __y); } 
# 283
constexpr long double fmod(long double __x, long double __y) 
# 284
{ return __builtin_fmodl(__x, __y); } 
# 287
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 290
fmod(_Tp __x, _Up __y) 
# 291
{ 
# 292
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 293
return fmod((__type)__x, (__type)__y); 
# 294
} 
# 296
using ::frexp;
# 300
inline float frexp(float __x, int *__exp) 
# 301
{ return __builtin_frexpf(__x, __exp); } 
# 304
inline long double frexp(long double __x, int *__exp) 
# 305
{ return __builtin_frexpl(__x, __exp); } 
# 308
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 312
frexp(_Tp __x, int *__exp) 
# 313
{ return __builtin_frexp(__x, __exp); } 
# 315
using ::ldexp;
# 319
constexpr float ldexp(float __x, int __exp) 
# 320
{ return __builtin_ldexpf(__x, __exp); } 
# 323
constexpr long double ldexp(long double __x, int __exp) 
# 324
{ return __builtin_ldexpl(__x, __exp); } 
# 327
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 331
ldexp(_Tp __x, int __exp) 
# 332
{ return __builtin_ldexp(__x, __exp); } 
# 334
using ::log;
# 338
constexpr float log(float __x) 
# 339
{ return __builtin_logf(__x); } 
# 342
constexpr long double log(long double __x) 
# 343
{ return __builtin_logl(__x); } 
# 346
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 350
log(_Tp __x) 
# 351
{ return __builtin_log(__x); } 
# 353
using ::log10;
# 357
constexpr float log10(float __x) 
# 358
{ return __builtin_log10f(__x); } 
# 361
constexpr long double log10(long double __x) 
# 362
{ return __builtin_log10l(__x); } 
# 365
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 369
log10(_Tp __x) 
# 370
{ return __builtin_log10(__x); } 
# 372
using ::modf;
# 376
inline float modf(float __x, float *__iptr) 
# 377
{ return __builtin_modff(__x, __iptr); } 
# 380
inline long double modf(long double __x, long double *__iptr) 
# 381
{ return __builtin_modfl(__x, __iptr); } 
# 384
using ::pow;
# 388
constexpr float pow(float __x, float __y) 
# 389
{ return __builtin_powf(__x, __y); } 
# 392
constexpr long double pow(long double __x, long double __y) 
# 393
{ return __builtin_powl(__x, __y); } 
# 412 "/usr/include/c++/11/cmath" 3
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 415
pow(_Tp __x, _Up __y) 
# 416
{ 
# 417
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 418
return pow((__type)__x, (__type)__y); 
# 419
} 
# 421
using ::sin;
# 425
constexpr float sin(float __x) 
# 426
{ return __builtin_sinf(__x); } 
# 429
constexpr long double sin(long double __x) 
# 430
{ return __builtin_sinl(__x); } 
# 433
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 437
sin(_Tp __x) 
# 438
{ return __builtin_sin(__x); } 
# 440
using ::sinh;
# 444
constexpr float sinh(float __x) 
# 445
{ return __builtin_sinhf(__x); } 
# 448
constexpr long double sinh(long double __x) 
# 449
{ return __builtin_sinhl(__x); } 
# 452
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 456
sinh(_Tp __x) 
# 457
{ return __builtin_sinh(__x); } 
# 459
using ::sqrt;
# 463
constexpr float sqrt(float __x) 
# 464
{ return __builtin_sqrtf(__x); } 
# 467
constexpr long double sqrt(long double __x) 
# 468
{ return __builtin_sqrtl(__x); } 
# 471
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 475
sqrt(_Tp __x) 
# 476
{ return __builtin_sqrt(__x); } 
# 478
using ::tan;
# 482
constexpr float tan(float __x) 
# 483
{ return __builtin_tanf(__x); } 
# 486
constexpr long double tan(long double __x) 
# 487
{ return __builtin_tanl(__x); } 
# 490
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 494
tan(_Tp __x) 
# 495
{ return __builtin_tan(__x); } 
# 497
using ::tanh;
# 501
constexpr float tanh(float __x) 
# 502
{ return __builtin_tanhf(__x); } 
# 505
constexpr long double tanh(long double __x) 
# 506
{ return __builtin_tanhl(__x); } 
# 509
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 513
tanh(_Tp __x) 
# 514
{ return __builtin_tanh(__x); } 
# 537 "/usr/include/c++/11/cmath" 3
constexpr int fpclassify(float __x) 
# 538
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 539
} 
# 542
constexpr int fpclassify(double __x) 
# 543
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 544
} 
# 547
constexpr int fpclassify(long double __x) 
# 548
{ return __builtin_fpclassify(0, 1, 4, 3, 2, __x); 
# 549
} 
# 553
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 556
fpclassify(_Tp __x) 
# 557
{ return (__x != 0) ? 4 : 2; } 
# 562
constexpr bool isfinite(float __x) 
# 563
{ return __builtin_isfinite(__x); } 
# 566
constexpr bool isfinite(double __x) 
# 567
{ return __builtin_isfinite(__x); } 
# 570
constexpr bool isfinite(long double __x) 
# 571
{ return __builtin_isfinite(__x); } 
# 575
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 578
isfinite(_Tp __x) 
# 579
{ return true; } 
# 584
constexpr bool isinf(float __x) 
# 585
{ return __builtin_isinf(__x); } 
# 592
constexpr bool isinf(double __x) 
# 593
{ return __builtin_isinf(__x); } 
# 597
constexpr bool isinf(long double __x) 
# 598
{ return __builtin_isinf(__x); } 
# 602
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 605
isinf(_Tp __x) 
# 606
{ return false; } 
# 611
constexpr bool isnan(float __x) 
# 612
{ return __builtin_isnan(__x); } 
# 619
constexpr bool isnan(double __x) 
# 620
{ return __builtin_isnan(__x); } 
# 624
constexpr bool isnan(long double __x) 
# 625
{ return __builtin_isnan(__x); } 
# 629
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 632
isnan(_Tp __x) 
# 633
{ return false; } 
# 638
constexpr bool isnormal(float __x) 
# 639
{ return __builtin_isnormal(__x); } 
# 642
constexpr bool isnormal(double __x) 
# 643
{ return __builtin_isnormal(__x); } 
# 646
constexpr bool isnormal(long double __x) 
# 647
{ return __builtin_isnormal(__x); } 
# 651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 654
isnormal(_Tp __x) 
# 655
{ return (__x != 0) ? true : false; } 
# 661
constexpr bool signbit(float __x) 
# 662
{ return __builtin_signbit(__x); } 
# 665
constexpr bool signbit(double __x) 
# 666
{ return __builtin_signbit(__x); } 
# 669
constexpr bool signbit(long double __x) 
# 670
{ return __builtin_signbit(__x); } 
# 674
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, bool> ::__type 
# 677
signbit(_Tp __x) 
# 678
{ return (__x < 0) ? true : false; } 
# 683
constexpr bool isgreater(float __x, float __y) 
# 684
{ return __builtin_isgreater(__x, __y); } 
# 687
constexpr bool isgreater(double __x, double __y) 
# 688
{ return __builtin_isgreater(__x, __y); } 
# 691
constexpr bool isgreater(long double __x, long double __y) 
# 692
{ return __builtin_isgreater(__x, __y); } 
# 696
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 700
isgreater(_Tp __x, _Up __y) 
# 701
{ 
# 702
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 703
return __builtin_isgreater((__type)__x, (__type)__y); 
# 704
} 
# 709
constexpr bool isgreaterequal(float __x, float __y) 
# 710
{ return __builtin_isgreaterequal(__x, __y); } 
# 713
constexpr bool isgreaterequal(double __x, double __y) 
# 714
{ return __builtin_isgreaterequal(__x, __y); } 
# 717
constexpr bool isgreaterequal(long double __x, long double __y) 
# 718
{ return __builtin_isgreaterequal(__x, __y); } 
# 722
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 726
isgreaterequal(_Tp __x, _Up __y) 
# 727
{ 
# 728
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 729
return __builtin_isgreaterequal((__type)__x, (__type)__y); 
# 730
} 
# 735
constexpr bool isless(float __x, float __y) 
# 736
{ return __builtin_isless(__x, __y); } 
# 739
constexpr bool isless(double __x, double __y) 
# 740
{ return __builtin_isless(__x, __y); } 
# 743
constexpr bool isless(long double __x, long double __y) 
# 744
{ return __builtin_isless(__x, __y); } 
# 748
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 752
isless(_Tp __x, _Up __y) 
# 753
{ 
# 754
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 755
return __builtin_isless((__type)__x, (__type)__y); 
# 756
} 
# 761
constexpr bool islessequal(float __x, float __y) 
# 762
{ return __builtin_islessequal(__x, __y); } 
# 765
constexpr bool islessequal(double __x, double __y) 
# 766
{ return __builtin_islessequal(__x, __y); } 
# 769
constexpr bool islessequal(long double __x, long double __y) 
# 770
{ return __builtin_islessequal(__x, __y); } 
# 774
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 778
islessequal(_Tp __x, _Up __y) 
# 779
{ 
# 780
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 781
return __builtin_islessequal((__type)__x, (__type)__y); 
# 782
} 
# 787
constexpr bool islessgreater(float __x, float __y) 
# 788
{ return __builtin_islessgreater(__x, __y); } 
# 791
constexpr bool islessgreater(double __x, double __y) 
# 792
{ return __builtin_islessgreater(__x, __y); } 
# 795
constexpr bool islessgreater(long double __x, long double __y) 
# 796
{ return __builtin_islessgreater(__x, __y); } 
# 800
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 804
islessgreater(_Tp __x, _Up __y) 
# 805
{ 
# 806
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 807
return __builtin_islessgreater((__type)__x, (__type)__y); 
# 808
} 
# 813
constexpr bool isunordered(float __x, float __y) 
# 814
{ return __builtin_isunordered(__x, __y); } 
# 817
constexpr bool isunordered(double __x, double __y) 
# 818
{ return __builtin_isunordered(__x, __y); } 
# 821
constexpr bool isunordered(long double __x, long double __y) 
# 822
{ return __builtin_isunordered(__x, __y); } 
# 826
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__enable_if< __is_arithmetic< _Tp> ::__value && __is_arithmetic< _Up> ::__value, bool> ::__type 
# 830
isunordered(_Tp __x, _Up __y) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 833
return __builtin_isunordered((__type)__x, (__type)__y); 
# 834
} 
# 1065 "/usr/include/c++/11/cmath" 3
using ::double_t;
# 1066
using ::float_t;
# 1069
using ::acosh;
# 1070
using ::acoshf;
# 1071
using ::acoshl;
# 1073
using ::asinh;
# 1074
using ::asinhf;
# 1075
using ::asinhl;
# 1077
using ::atanh;
# 1078
using ::atanhf;
# 1079
using ::atanhl;
# 1081
using ::cbrt;
# 1082
using ::cbrtf;
# 1083
using ::cbrtl;
# 1085
using ::copysign;
# 1086
using ::copysignf;
# 1087
using ::copysignl;
# 1089
using ::erf;
# 1090
using ::erff;
# 1091
using ::erfl;
# 1093
using ::erfc;
# 1094
using ::erfcf;
# 1095
using ::erfcl;
# 1097
using ::exp2;
# 1098
using ::exp2f;
# 1099
using ::exp2l;
# 1101
using ::expm1;
# 1102
using ::expm1f;
# 1103
using ::expm1l;
# 1105
using ::fdim;
# 1106
using ::fdimf;
# 1107
using ::fdiml;
# 1109
using ::fma;
# 1110
using ::fmaf;
# 1111
using ::fmal;
# 1113
using ::fmax;
# 1114
using ::fmaxf;
# 1115
using ::fmaxl;
# 1117
using ::fmin;
# 1118
using ::fminf;
# 1119
using ::fminl;
# 1121
using ::hypot;
# 1122
using ::hypotf;
# 1123
using ::hypotl;
# 1125
using ::ilogb;
# 1126
using ::ilogbf;
# 1127
using ::ilogbl;
# 1129
using ::lgamma;
# 1130
using ::lgammaf;
# 1131
using ::lgammal;
# 1134
using ::llrint;
# 1135
using ::llrintf;
# 1136
using ::llrintl;
# 1138
using ::llround;
# 1139
using ::llroundf;
# 1140
using ::llroundl;
# 1143
using ::log1p;
# 1144
using ::log1pf;
# 1145
using ::log1pl;
# 1147
using ::log2;
# 1148
using ::log2f;
# 1149
using ::log2l;
# 1151
using ::logb;
# 1152
using ::logbf;
# 1153
using ::logbl;
# 1155
using ::lrint;
# 1156
using ::lrintf;
# 1157
using ::lrintl;
# 1159
using ::lround;
# 1160
using ::lroundf;
# 1161
using ::lroundl;
# 1163
using ::nan;
# 1164
using ::nanf;
# 1165
using ::nanl;
# 1167
using ::nearbyint;
# 1168
using ::nearbyintf;
# 1169
using ::nearbyintl;
# 1171
using ::nextafter;
# 1172
using ::nextafterf;
# 1173
using ::nextafterl;
# 1175
using ::nexttoward;
# 1176
using ::nexttowardf;
# 1177
using ::nexttowardl;
# 1179
using ::remainder;
# 1180
using ::remainderf;
# 1181
using ::remainderl;
# 1183
using ::remquo;
# 1184
using ::remquof;
# 1185
using ::remquol;
# 1187
using ::rint;
# 1188
using ::rintf;
# 1189
using ::rintl;
# 1191
using ::round;
# 1192
using ::roundf;
# 1193
using ::roundl;
# 1195
using ::scalbln;
# 1196
using ::scalblnf;
# 1197
using ::scalblnl;
# 1199
using ::scalbn;
# 1200
using ::scalbnf;
# 1201
using ::scalbnl;
# 1203
using ::tgamma;
# 1204
using ::tgammaf;
# 1205
using ::tgammal;
# 1207
using ::trunc;
# 1208
using ::truncf;
# 1209
using ::truncl;
# 1214
constexpr float acosh(float __x) 
# 1215
{ return __builtin_acoshf(__x); } 
# 1218
constexpr long double acosh(long double __x) 
# 1219
{ return __builtin_acoshl(__x); } 
# 1223
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1226
acosh(_Tp __x) 
# 1227
{ return __builtin_acosh(__x); } 
# 1232
constexpr float asinh(float __x) 
# 1233
{ return __builtin_asinhf(__x); } 
# 1236
constexpr long double asinh(long double __x) 
# 1237
{ return __builtin_asinhl(__x); } 
# 1241
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1244
asinh(_Tp __x) 
# 1245
{ return __builtin_asinh(__x); } 
# 1250
constexpr float atanh(float __x) 
# 1251
{ return __builtin_atanhf(__x); } 
# 1254
constexpr long double atanh(long double __x) 
# 1255
{ return __builtin_atanhl(__x); } 
# 1259
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1262
atanh(_Tp __x) 
# 1263
{ return __builtin_atanh(__x); } 
# 1268
constexpr float cbrt(float __x) 
# 1269
{ return __builtin_cbrtf(__x); } 
# 1272
constexpr long double cbrt(long double __x) 
# 1273
{ return __builtin_cbrtl(__x); } 
# 1277
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1280
cbrt(_Tp __x) 
# 1281
{ return __builtin_cbrt(__x); } 
# 1286
constexpr float copysign(float __x, float __y) 
# 1287
{ return __builtin_copysignf(__x, __y); } 
# 1290
constexpr long double copysign(long double __x, long double __y) 
# 1291
{ return __builtin_copysignl(__x, __y); } 
# 1295
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1297
copysign(_Tp __x, _Up __y) 
# 1298
{ 
# 1299
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1300
return copysign((__type)__x, (__type)__y); 
# 1301
} 
# 1306
constexpr float erf(float __x) 
# 1307
{ return __builtin_erff(__x); } 
# 1310
constexpr long double erf(long double __x) 
# 1311
{ return __builtin_erfl(__x); } 
# 1315
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1318
erf(_Tp __x) 
# 1319
{ return __builtin_erf(__x); } 
# 1324
constexpr float erfc(float __x) 
# 1325
{ return __builtin_erfcf(__x); } 
# 1328
constexpr long double erfc(long double __x) 
# 1329
{ return __builtin_erfcl(__x); } 
# 1333
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1336
erfc(_Tp __x) 
# 1337
{ return __builtin_erfc(__x); } 
# 1342
constexpr float exp2(float __x) 
# 1343
{ return __builtin_exp2f(__x); } 
# 1346
constexpr long double exp2(long double __x) 
# 1347
{ return __builtin_exp2l(__x); } 
# 1351
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1354
exp2(_Tp __x) 
# 1355
{ return __builtin_exp2(__x); } 
# 1360
constexpr float expm1(float __x) 
# 1361
{ return __builtin_expm1f(__x); } 
# 1364
constexpr long double expm1(long double __x) 
# 1365
{ return __builtin_expm1l(__x); } 
# 1369
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1372
expm1(_Tp __x) 
# 1373
{ return __builtin_expm1(__x); } 
# 1378
constexpr float fdim(float __x, float __y) 
# 1379
{ return __builtin_fdimf(__x, __y); } 
# 1382
constexpr long double fdim(long double __x, long double __y) 
# 1383
{ return __builtin_fdiml(__x, __y); } 
# 1387
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1389
fdim(_Tp __x, _Up __y) 
# 1390
{ 
# 1391
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1392
return fdim((__type)__x, (__type)__y); 
# 1393
} 
# 1398
constexpr float fma(float __x, float __y, float __z) 
# 1399
{ return __builtin_fmaf(__x, __y, __z); } 
# 1402
constexpr long double fma(long double __x, long double __y, long double __z) 
# 1403
{ return __builtin_fmal(__x, __y, __z); } 
# 1407
template< class _Tp, class _Up, class _Vp> constexpr typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type 
# 1409
fma(_Tp __x, _Up __y, _Vp __z) 
# 1410
{ 
# 1411
typedef typename __gnu_cxx::__promote_3< _Tp, _Up, _Vp> ::__type __type; 
# 1412
return fma((__type)__x, (__type)__y, (__type)__z); 
# 1413
} 
# 1418
constexpr float fmax(float __x, float __y) 
# 1419
{ return __builtin_fmaxf(__x, __y); } 
# 1422
constexpr long double fmax(long double __x, long double __y) 
# 1423
{ return __builtin_fmaxl(__x, __y); } 
# 1427
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1429
fmax(_Tp __x, _Up __y) 
# 1430
{ 
# 1431
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1432
return fmax((__type)__x, (__type)__y); 
# 1433
} 
# 1438
constexpr float fmin(float __x, float __y) 
# 1439
{ return __builtin_fminf(__x, __y); } 
# 1442
constexpr long double fmin(long double __x, long double __y) 
# 1443
{ return __builtin_fminl(__x, __y); } 
# 1447
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1449
fmin(_Tp __x, _Up __y) 
# 1450
{ 
# 1451
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1452
return fmin((__type)__x, (__type)__y); 
# 1453
} 
# 1458
constexpr float hypot(float __x, float __y) 
# 1459
{ return __builtin_hypotf(__x, __y); } 
# 1462
constexpr long double hypot(long double __x, long double __y) 
# 1463
{ return __builtin_hypotl(__x, __y); } 
# 1467
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1469
hypot(_Tp __x, _Up __y) 
# 1470
{ 
# 1471
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1472
return hypot((__type)__x, (__type)__y); 
# 1473
} 
# 1478
constexpr int ilogb(float __x) 
# 1479
{ return __builtin_ilogbf(__x); } 
# 1482
constexpr int ilogb(long double __x) 
# 1483
{ return __builtin_ilogbl(__x); } 
# 1487
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, int> ::__type 
# 1491
ilogb(_Tp __x) 
# 1492
{ return __builtin_ilogb(__x); } 
# 1497
constexpr float lgamma(float __x) 
# 1498
{ return __builtin_lgammaf(__x); } 
# 1501
constexpr long double lgamma(long double __x) 
# 1502
{ return __builtin_lgammal(__x); } 
# 1506
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1509
lgamma(_Tp __x) 
# 1510
{ return __builtin_lgamma(__x); } 
# 1515
constexpr long long llrint(float __x) 
# 1516
{ return __builtin_llrintf(__x); } 
# 1519
constexpr long long llrint(long double __x) 
# 1520
{ return __builtin_llrintl(__x); } 
# 1524
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1527
llrint(_Tp __x) 
# 1528
{ return __builtin_llrint(__x); } 
# 1533
constexpr long long llround(float __x) 
# 1534
{ return __builtin_llroundf(__x); } 
# 1537
constexpr long long llround(long double __x) 
# 1538
{ return __builtin_llroundl(__x); } 
# 1542
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long long> ::__type 
# 1545
llround(_Tp __x) 
# 1546
{ return __builtin_llround(__x); } 
# 1551
constexpr float log1p(float __x) 
# 1552
{ return __builtin_log1pf(__x); } 
# 1555
constexpr long double log1p(long double __x) 
# 1556
{ return __builtin_log1pl(__x); } 
# 1560
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1563
log1p(_Tp __x) 
# 1564
{ return __builtin_log1p(__x); } 
# 1570
constexpr float log2(float __x) 
# 1571
{ return __builtin_log2f(__x); } 
# 1574
constexpr long double log2(long double __x) 
# 1575
{ return __builtin_log2l(__x); } 
# 1579
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1582
log2(_Tp __x) 
# 1583
{ return __builtin_log2(__x); } 
# 1588
constexpr float logb(float __x) 
# 1589
{ return __builtin_logbf(__x); } 
# 1592
constexpr long double logb(long double __x) 
# 1593
{ return __builtin_logbl(__x); } 
# 1597
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1600
logb(_Tp __x) 
# 1601
{ return __builtin_logb(__x); } 
# 1606
constexpr long lrint(float __x) 
# 1607
{ return __builtin_lrintf(__x); } 
# 1610
constexpr long lrint(long double __x) 
# 1611
{ return __builtin_lrintl(__x); } 
# 1615
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1618
lrint(_Tp __x) 
# 1619
{ return __builtin_lrint(__x); } 
# 1624
constexpr long lround(float __x) 
# 1625
{ return __builtin_lroundf(__x); } 
# 1628
constexpr long lround(long double __x) 
# 1629
{ return __builtin_lroundl(__x); } 
# 1633
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, long> ::__type 
# 1636
lround(_Tp __x) 
# 1637
{ return __builtin_lround(__x); } 
# 1642
constexpr float nearbyint(float __x) 
# 1643
{ return __builtin_nearbyintf(__x); } 
# 1646
constexpr long double nearbyint(long double __x) 
# 1647
{ return __builtin_nearbyintl(__x); } 
# 1651
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1654
nearbyint(_Tp __x) 
# 1655
{ return __builtin_nearbyint(__x); } 
# 1660
constexpr float nextafter(float __x, float __y) 
# 1661
{ return __builtin_nextafterf(__x, __y); } 
# 1664
constexpr long double nextafter(long double __x, long double __y) 
# 1665
{ return __builtin_nextafterl(__x, __y); } 
# 1669
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1671
nextafter(_Tp __x, _Up __y) 
# 1672
{ 
# 1673
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1674
return nextafter((__type)__x, (__type)__y); 
# 1675
} 
# 1680
constexpr float nexttoward(float __x, long double __y) 
# 1681
{ return __builtin_nexttowardf(__x, __y); } 
# 1684
constexpr long double nexttoward(long double __x, long double __y) 
# 1685
{ return __builtin_nexttowardl(__x, __y); } 
# 1689
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1692
nexttoward(_Tp __x, long double __y) 
# 1693
{ return __builtin_nexttoward(__x, __y); } 
# 1698
constexpr float remainder(float __x, float __y) 
# 1699
{ return __builtin_remainderf(__x, __y); } 
# 1702
constexpr long double remainder(long double __x, long double __y) 
# 1703
{ return __builtin_remainderl(__x, __y); } 
# 1707
template< class _Tp, class _Up> constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1709
remainder(_Tp __x, _Up __y) 
# 1710
{ 
# 1711
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1712
return remainder((__type)__x, (__type)__y); 
# 1713
} 
# 1718
inline float remquo(float __x, float __y, int *__pquo) 
# 1719
{ return __builtin_remquof(__x, __y, __pquo); } 
# 1722
inline long double remquo(long double __x, long double __y, int *__pquo) 
# 1723
{ return __builtin_remquol(__x, __y, __pquo); } 
# 1727
template< class _Tp, class _Up> inline typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type 
# 1729
remquo(_Tp __x, _Up __y, int *__pquo) 
# 1730
{ 
# 1731
typedef typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type __type; 
# 1732
return remquo((__type)__x, (__type)__y, __pquo); 
# 1733
} 
# 1738
constexpr float rint(float __x) 
# 1739
{ return __builtin_rintf(__x); } 
# 1742
constexpr long double rint(long double __x) 
# 1743
{ return __builtin_rintl(__x); } 
# 1747
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1750
rint(_Tp __x) 
# 1751
{ return __builtin_rint(__x); } 
# 1756
constexpr float round(float __x) 
# 1757
{ return __builtin_roundf(__x); } 
# 1760
constexpr long double round(long double __x) 
# 1761
{ return __builtin_roundl(__x); } 
# 1765
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1768
round(_Tp __x) 
# 1769
{ return __builtin_round(__x); } 
# 1774
constexpr float scalbln(float __x, long __ex) 
# 1775
{ return __builtin_scalblnf(__x, __ex); } 
# 1778
constexpr long double scalbln(long double __x, long __ex) 
# 1779
{ return __builtin_scalblnl(__x, __ex); } 
# 1783
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1786
scalbln(_Tp __x, long __ex) 
# 1787
{ return __builtin_scalbln(__x, __ex); } 
# 1792
constexpr float scalbn(float __x, int __ex) 
# 1793
{ return __builtin_scalbnf(__x, __ex); } 
# 1796
constexpr long double scalbn(long double __x, int __ex) 
# 1797
{ return __builtin_scalbnl(__x, __ex); } 
# 1801
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1804
scalbn(_Tp __x, int __ex) 
# 1805
{ return __builtin_scalbn(__x, __ex); } 
# 1810
constexpr float tgamma(float __x) 
# 1811
{ return __builtin_tgammaf(__x); } 
# 1814
constexpr long double tgamma(long double __x) 
# 1815
{ return __builtin_tgammal(__x); } 
# 1819
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1822
tgamma(_Tp __x) 
# 1823
{ return __builtin_tgamma(__x); } 
# 1828
constexpr float trunc(float __x) 
# 1829
{ return __builtin_truncf(__x); } 
# 1832
constexpr long double trunc(long double __x) 
# 1833
{ return __builtin_truncl(__x); } 
# 1837
template< class _Tp> constexpr typename __gnu_cxx::__enable_if< __is_integer< _Tp> ::__value, double> ::__type 
# 1840
trunc(_Tp __x) 
# 1841
{ return __builtin_trunc(__x); } 
# 1852 "/usr/include/c++/11/cmath" 3
template< class _Tp> inline _Tp 
# 1854
__hypot3(_Tp __x, _Tp __y, _Tp __z) 
# 1855
{ 
# 1856
__x = std::abs(__x); 
# 1857
__y = std::abs(__y); 
# 1858
__z = std::abs(__z); 
# 1859
if (_Tp __a = (__x < __y) ? (__y < __z) ? __z : __y : ((__x < __z) ? __z : __x)) { 
# 1860
return __a * std::sqrt((((__x / __a) * (__x / __a)) + ((__y / __a) * (__y / __a))) + ((__z / __a) * (__z / __a))); } else { 
# 1864
return {}; }  
# 1865
} 
# 1868
inline float hypot(float __x, float __y, float __z) 
# 1869
{ return std::__hypot3< float> (__x, __y, __z); } 
# 1872
inline double hypot(double __x, double __y, double __z) 
# 1873
{ return std::__hypot3< double> (__x, __y, __z); } 
# 1876
inline long double hypot(long double __x, long double __y, long double __z) 
# 1877
{ return std::__hypot3< long double> (__x, __y, __z); } 
# 1879
template< class _Tp, class _Up, class _Vp> __gnu_cxx::__promoted_t< _Tp, _Up, _Vp>  
# 1881
hypot(_Tp __x, _Up __y, _Vp __z) 
# 1882
{ 
# 1883
using __type = __gnu_cxx::__promoted_t< _Tp, _Up, _Vp> ; 
# 1884
return std::__hypot3< __gnu_cxx::__promoted_t< _Tp, _Up, _Vp> > (__x, __y, __z); 
# 1885
} 
# 1932 "/usr/include/c++/11/cmath" 3
}
# 33 "/usr/include/c++/11/bits/specfun.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/11/bits/functexcept.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
void __throw_bad_exception() __attribute((__noreturn__)); 
# 52
void __throw_bad_alloc() __attribute((__noreturn__)); 
# 55
void __throw_bad_array_new_length() __attribute((__noreturn__)); 
# 59
void __throw_bad_cast() __attribute((__noreturn__)); 
# 62
void __throw_bad_typeid() __attribute((__noreturn__)); 
# 66
void __throw_logic_error(const char *) __attribute((__noreturn__)); 
# 69
void __throw_domain_error(const char *) __attribute((__noreturn__)); 
# 72
void __throw_invalid_argument(const char *) __attribute((__noreturn__)); 
# 75
void __throw_length_error(const char *) __attribute((__noreturn__)); 
# 78
void __throw_out_of_range(const char *) __attribute((__noreturn__)); 
# 81
void __throw_out_of_range_fmt(const char *, ...) __attribute((__noreturn__))
# 82
 __attribute((__format__(__gnu_printf__, 1, 2))); 
# 85
void __throw_runtime_error(const char *) __attribute((__noreturn__)); 
# 88
void __throw_range_error(const char *) __attribute((__noreturn__)); 
# 91
void __throw_overflow_error(const char *) __attribute((__noreturn__)); 
# 94
void __throw_underflow_error(const char *) __attribute((__noreturn__)); 
# 98
void __throw_ios_failure(const char *) __attribute((__noreturn__)); 
# 101
void __throw_ios_failure(const char *, int) __attribute((__noreturn__)); 
# 105
void __throw_system_error(int) __attribute((__noreturn__)); 
# 109
void __throw_future_error(int) __attribute((__noreturn__)); 
# 113
void __throw_bad_function_call() __attribute((__noreturn__)); 
# 116
}
# 37 "/usr/include/c++/11/ext/numeric_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/11/ext/numeric_traits.h" 3
template< class _Tp> 
# 51
struct __is_integer_nonstrict : public std::__is_integer< _Tp>  { 
# 54
using std::__is_integer< _Tp> ::__value;
# 57
enum { __width = (__value) ? sizeof(_Tp) * (8) : (0)}; 
# 58
}; 
# 60
template< class _Value> 
# 61
struct __numeric_traits_integer { 
# 64
static_assert((__is_integer_nonstrict< _Value> ::__value), "invalid specialization");
# 70
static const bool __is_signed = (((_Value)(-1)) < 0); 
# 71
static const int __digits = (__is_integer_nonstrict< _Value> ::__width - __is_signed); 
# 75
static const _Value __max = (__is_signed ? (((((_Value)1) << (__digits - 1)) - 1) << 1) + 1 : (~((_Value)0))); 
# 78
static const _Value __min = (__is_signed ? (-__max) - 1 : ((_Value)0)); 
# 79
}; 
# 81
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__min; 
# 84
template< class _Value> const _Value __numeric_traits_integer< _Value> ::__max; 
# 87
template< class _Value> const bool __numeric_traits_integer< _Value> ::__is_signed; 
# 90
template< class _Value> const int __numeric_traits_integer< _Value> ::__digits; 
# 135 "/usr/include/c++/11/ext/numeric_traits.h" 3
template< class _Tp> using __int_traits = __numeric_traits_integer< _Tp> ; 
# 155 "/usr/include/c++/11/ext/numeric_traits.h" 3
template< class _Value> 
# 156
struct __numeric_traits_floating { 
# 159
static const int __max_digits10 = ((2) + ((((std::template __are_same< _Value, float> ::__value) ? 24 : ((std::template __are_same< _Value, double> ::__value) ? 53 : 64)) * 643L) / (2136))); 
# 162
static const bool __is_signed = true; 
# 163
static const int __digits10 = ((std::template __are_same< _Value, float> ::__value) ? 6 : ((std::template __are_same< _Value, double> ::__value) ? 15 : 18)); 
# 164
static const int __max_exponent10 = ((std::template __are_same< _Value, float> ::__value) ? 38 : ((std::template __are_same< _Value, double> ::__value) ? 308 : 4932)); 
# 165
}; 
# 167
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_digits10; 
# 170
template< class _Value> const bool __numeric_traits_floating< _Value> ::__is_signed; 
# 173
template< class _Value> const int __numeric_traits_floating< _Value> ::__digits10; 
# 176
template< class _Value> const int __numeric_traits_floating< _Value> ::__max_exponent10; 
# 184
template< class _Value> 
# 185
struct __numeric_traits : public __numeric_traits_integer< _Value>  { 
# 187
}; 
# 190
template<> struct __numeric_traits< float>  : public __numeric_traits_floating< float>  { 
# 192
}; 
# 195
template<> struct __numeric_traits< double>  : public __numeric_traits_floating< double>  { 
# 197
}; 
# 200
template<> struct __numeric_traits< long double>  : public __numeric_traits_floating< long double>  { 
# 202
}; 
# 237 "/usr/include/c++/11/ext/numeric_traits.h" 3
}
# 38 "/usr/include/c++/11/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 47
template< class _Tp> constexpr _Tp *
# 49
__addressof(_Tp &__r) noexcept 
# 50
{ return __builtin_addressof(__r); } 
# 55
}
# 40 "/usr/include/c++/11/type_traits" 3
namespace std __attribute((__visibility__("default"))) { 
# 44
template< class ..._Elements> class tuple; 
# 47
template< class _Tp> class reference_wrapper; 
# 64 "/usr/include/c++/11/type_traits" 3
template< class _Tp, _Tp __v> 
# 65
struct integral_constant { 
# 67
static constexpr inline _Tp value = (__v); 
# 68
typedef _Tp value_type; 
# 69
typedef integral_constant type; 
# 70
constexpr operator value_type() const noexcept { return value; } 
# 75
constexpr value_type operator()() const noexcept { return value; } 
# 77
}; 
# 79
template< class _Tp, _Tp __v> constexpr inline _Tp integral_constant< _Tp, __v> ::value; 
# 83
using true_type = integral_constant< bool, true> ; 
# 86
using false_type = integral_constant< bool, false> ; 
# 90
template< bool __v> using __bool_constant = integral_constant< bool, __v> ; 
# 98
template< bool __v> using bool_constant = integral_constant< bool, __v> ; 
# 104
template< bool , class , class > struct conditional; 
# 108
template< class _Type> 
# 109
struct __type_identity { 
# 110
using type = _Type; }; 
# 112
template< class _Tp> using __type_identity_t = typename __type_identity< _Tp> ::type; 
# 115
template< class ...> struct __or_; 
# 119
template<> struct __or_< >  : public false_type { 
# 121
}; 
# 123
template< class _B1> 
# 124
struct __or_< _B1>  : public _B1 { 
# 126
}; 
# 128
template< class _B1, class _B2> 
# 129
struct __or_< _B1, _B2>  : public conditional< _B1::value, _B1, _B2> ::type { 
# 131
}; 
# 133
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 134
struct __or_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, _B1, std::__or_< _B2, _B3, _Bn...> > ::type { 
# 136
}; 
# 138
template< class ...> struct __and_; 
# 142
template<> struct __and_< >  : public true_type { 
# 144
}; 
# 146
template< class _B1> 
# 147
struct __and_< _B1>  : public _B1 { 
# 149
}; 
# 151
template< class _B1, class _B2> 
# 152
struct __and_< _B1, _B2>  : public conditional< _B1::value, _B2, _B1> ::type { 
# 154
}; 
# 156
template< class _B1, class _B2, class _B3, class ..._Bn> 
# 157
struct __and_< _B1, _B2, _B3, _Bn...>  : public conditional< _B1::value, std::__and_< _B2, _B3, _Bn...> , _B1> ::type { 
# 159
}; 
# 161
template< class _Pp> 
# 162
struct __not_ : public __bool_constant< !((bool)_Pp::value)>  { 
# 164
}; 
# 170
template< class ..._Bn> constexpr bool 
# 171
__or_v = (__or_< _Bn...> ::value); 
# 172
template< class ..._Bn> constexpr bool 
# 173
__and_v = (__and_< _Bn...> ::value); 
# 178
template< class ..._Bn> 
# 179
struct conjunction : public __and_< _Bn...>  { 
# 181
}; 
# 183
template< class ..._Bn> 
# 184
struct disjunction : public __or_< _Bn...>  { 
# 186
}; 
# 188
template< class _Pp> 
# 189
struct negation : public __not_< _Pp>  { 
# 191
}; 
# 196
template< class ..._Bn> constexpr bool 
# 197
conjunction_v = (conjunction< _Bn...> ::value); 
# 199
template< class ..._Bn> constexpr bool 
# 200
disjunction_v = (disjunction< _Bn...> ::value); 
# 202
template< class _Pp> constexpr bool 
# 203
negation_v = (negation< _Pp> ::value); 
# 209
template< class > struct is_reference; 
# 211
template< class > struct is_function; 
# 213
template< class > struct is_void; 
# 215
template< class > struct remove_cv; 
# 217
template< class > struct is_const; 
# 221
template< class > struct __is_array_unknown_bounds; 
# 227
template< class _Tp, size_t  = sizeof(_Tp)> constexpr true_type 
# 228
__is_complete_or_unbounded(__type_identity< _Tp> ) 
# 229
{ return {}; } 
# 231
template< class _TypeIdentity, class 
# 232
_NestedType = typename _TypeIdentity::type> constexpr typename __or_< is_reference< _NestedType> , is_function< _NestedType> , is_void< _NestedType> , __is_array_unknown_bounds< _NestedType> > ::type 
# 238
__is_complete_or_unbounded(_TypeIdentity) 
# 239
{ return {}; } 
# 246
template< class _Tp> 
# 247
struct __success_type { 
# 248
typedef _Tp type; }; 
# 250
struct __failure_type { 
# 251
}; 
# 254
template< class _Tp> using __remove_cv_t = typename remove_cv< _Tp> ::type; 
# 259
template< class > 
# 260
struct __is_void_helper : public false_type { 
# 261
}; 
# 264
template<> struct __is_void_helper< void>  : public true_type { 
# 265
}; 
# 269
template< class _Tp> 
# 270
struct is_void : public __is_void_helper< __remove_cv_t< _Tp> > ::type { 
# 272
}; 
# 275
template< class > 
# 276
struct __is_integral_helper : public false_type { 
# 277
}; 
# 280
template<> struct __is_integral_helper< bool>  : public true_type { 
# 281
}; 
# 284
template<> struct __is_integral_helper< char>  : public true_type { 
# 285
}; 
# 288
template<> struct __is_integral_helper< signed char>  : public true_type { 
# 289
}; 
# 292
template<> struct __is_integral_helper< unsigned char>  : public true_type { 
# 293
}; 
# 300
template<> struct __is_integral_helper< wchar_t>  : public true_type { 
# 301
}; 
# 311 "/usr/include/c++/11/type_traits" 3
template<> struct __is_integral_helper< char16_t>  : public true_type { 
# 312
}; 
# 315
template<> struct __is_integral_helper< char32_t>  : public true_type { 
# 316
}; 
# 319
template<> struct __is_integral_helper< short>  : public true_type { 
# 320
}; 
# 323
template<> struct __is_integral_helper< unsigned short>  : public true_type { 
# 324
}; 
# 327
template<> struct __is_integral_helper< int>  : public true_type { 
# 328
}; 
# 331
template<> struct __is_integral_helper< unsigned>  : public true_type { 
# 332
}; 
# 335
template<> struct __is_integral_helper< long>  : public true_type { 
# 336
}; 
# 339
template<> struct __is_integral_helper< unsigned long>  : public true_type { 
# 340
}; 
# 343
template<> struct __is_integral_helper< long long>  : public true_type { 
# 344
}; 
# 347
template<> struct __is_integral_helper< unsigned long long>  : public true_type { 
# 348
}; 
# 354
template<> struct __is_integral_helper< __int128>  : public true_type { 
# 355
}; 
# 358
template<> struct __is_integral_helper< unsigned __int128>  : public true_type { 
# 359
}; 
# 391 "/usr/include/c++/11/type_traits" 3
template< class _Tp> 
# 392
struct is_integral : public __is_integral_helper< __remove_cv_t< _Tp> > ::type { 
# 394
}; 
# 397
template< class > 
# 398
struct __is_floating_point_helper : public false_type { 
# 399
}; 
# 402
template<> struct __is_floating_point_helper< float>  : public true_type { 
# 403
}; 
# 406
template<> struct __is_floating_point_helper< double>  : public true_type { 
# 407
}; 
# 410
template<> struct __is_floating_point_helper< long double>  : public true_type { 
# 411
}; 
# 421 "/usr/include/c++/11/type_traits" 3
template< class _Tp> 
# 422
struct is_floating_point : public __is_floating_point_helper< __remove_cv_t< _Tp> > ::type { 
# 424
}; 
# 427
template< class > 
# 428
struct is_array : public false_type { 
# 429
}; 
# 431
template< class _Tp, size_t _Size> 
# 432
struct is_array< _Tp [_Size]>  : public true_type { 
# 433
}; 
# 435
template< class _Tp> 
# 436
struct is_array< _Tp []>  : public true_type { 
# 437
}; 
# 439
template< class > 
# 440
struct __is_pointer_helper : public false_type { 
# 441
}; 
# 443
template< class _Tp> 
# 444
struct __is_pointer_helper< _Tp *>  : public true_type { 
# 445
}; 
# 448
template< class _Tp> 
# 449
struct is_pointer : public __is_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 451
}; 
# 454
template< class > 
# 455
struct is_lvalue_reference : public false_type { 
# 456
}; 
# 458
template< class _Tp> 
# 459
struct is_lvalue_reference< _Tp &>  : public true_type { 
# 460
}; 
# 463
template< class > 
# 464
struct is_rvalue_reference : public false_type { 
# 465
}; 
# 467
template< class _Tp> 
# 468
struct is_rvalue_reference< _Tp &&>  : public true_type { 
# 469
}; 
# 471
template< class > 
# 472
struct __is_member_object_pointer_helper : public false_type { 
# 473
}; 
# 475
template< class _Tp, class _Cp> 
# 476
struct __is_member_object_pointer_helper< _Tp (_Cp::*)>  : public __not_< is_function< _Tp> > ::type { 
# 477
}; 
# 480
template< class _Tp> 
# 481
struct is_member_object_pointer : public __is_member_object_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 483
}; 
# 485
template< class > 
# 486
struct __is_member_function_pointer_helper : public false_type { 
# 487
}; 
# 489
template< class _Tp, class _Cp> 
# 490
struct __is_member_function_pointer_helper< _Tp (_Cp::*)>  : public is_function< _Tp> ::type { 
# 491
}; 
# 494
template< class _Tp> 
# 495
struct is_member_function_pointer : public __is_member_function_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 497
}; 
# 500
template< class _Tp> 
# 501
struct is_enum : public integral_constant< bool, __is_enum(_Tp)>  { 
# 503
}; 
# 506
template< class _Tp> 
# 507
struct is_union : public integral_constant< bool, __is_union(_Tp)>  { 
# 509
}; 
# 512
template< class _Tp> 
# 513
struct is_class : public integral_constant< bool, __is_class(_Tp)>  { 
# 515
}; 
# 518
template< class _Tp> 
# 519
struct is_function : public __bool_constant< !is_const< const _Tp> ::value>  { 
# 520
}; 
# 522
template< class _Tp> 
# 523
struct is_function< _Tp &>  : public false_type { 
# 524
}; 
# 526
template< class _Tp> 
# 527
struct is_function< _Tp &&>  : public false_type { 
# 528
}; 
# 532
template< class > 
# 533
struct __is_null_pointer_helper : public false_type { 
# 534
}; 
# 537
template<> struct __is_null_pointer_helper< __decltype((nullptr))>  : public true_type { 
# 538
}; 
# 541
template< class _Tp> 
# 542
struct is_null_pointer : public __is_null_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 544
}; 
# 548
template< class _Tp> 
# 549
struct __is_nullptr_t : public is_null_pointer< _Tp>  { 
# 551
} __attribute((__deprecated__("use \'std::is_null_pointer\' instead"))); 
# 556
template< class _Tp> 
# 557
struct is_reference : public __or_< is_lvalue_reference< _Tp> , is_rvalue_reference< _Tp> > ::type { 
# 560
}; 
# 563
template< class _Tp> 
# 564
struct is_arithmetic : public __or_< is_integral< _Tp> , is_floating_point< _Tp> > ::type { 
# 566
}; 
# 569
template< class _Tp> 
# 570
struct is_fundamental : public __or_< is_arithmetic< _Tp> , is_void< _Tp> , is_null_pointer< _Tp> > ::type { 
# 573
}; 
# 576
template< class _Tp> 
# 577
struct is_object : public __not_< __or_< is_function< _Tp> , is_reference< _Tp> , is_void< _Tp> > > ::type { 
# 580
}; 
# 582
template< class > struct is_member_pointer; 
# 586
template< class _Tp> 
# 587
struct is_scalar : public __or_< is_arithmetic< _Tp> , is_enum< _Tp> , is_pointer< _Tp> , is_member_pointer< _Tp> , is_null_pointer< _Tp> > ::type { 
# 590
}; 
# 593
template< class _Tp> 
# 594
struct is_compound : public __not_< is_fundamental< _Tp> > ::type { 
# 595
}; 
# 598
template< class _Tp> 
# 599
struct __is_member_pointer_helper : public false_type { 
# 600
}; 
# 602
template< class _Tp, class _Cp> 
# 603
struct __is_member_pointer_helper< _Tp (_Cp::*)>  : public true_type { 
# 604
}; 
# 608
template< class _Tp> 
# 609
struct is_member_pointer : public __is_member_pointer_helper< __remove_cv_t< _Tp> > ::type { 
# 611
}; 
# 613
template< class , class > struct is_same; 
# 617
template< class _Tp, class ..._Types> using __is_one_of = __or_< is_same< _Tp, _Types> ...> ; 
# 621
template< class _Tp> using __is_signed_integer = __is_one_of< __remove_cv_t< _Tp> , signed char, signed short, signed int, signed long, signed long long, signed __int128> ; 
# 640 "/usr/include/c++/11/type_traits" 3
template< class _Tp> using __is_unsigned_integer = __is_one_of< __remove_cv_t< _Tp> , unsigned char, unsigned short, unsigned, unsigned long, unsigned long long, unsigned __int128> ; 
# 659 "/usr/include/c++/11/type_traits" 3
template< class _Tp> using __is_standard_integer = __or_< __is_signed_integer< _Tp> , __is_unsigned_integer< _Tp> > ; 
# 664
template< class ...> using __void_t = void; 
# 668
template< class _Tp, class  = void> 
# 669
struct __is_referenceable : public false_type { 
# 671
}; 
# 673
template< class _Tp> 
# 674
struct __is_referenceable< _Tp, __void_t< _Tp &> >  : public true_type { 
# 676
}; 
# 682
template< class > 
# 683
struct is_const : public false_type { 
# 684
}; 
# 686
template< class _Tp> 
# 687
struct is_const< const _Tp>  : public true_type { 
# 688
}; 
# 691
template< class > 
# 692
struct is_volatile : public false_type { 
# 693
}; 
# 695
template< class _Tp> 
# 696
struct is_volatile< volatile _Tp>  : public true_type { 
# 697
}; 
# 700
template< class _Tp> 
# 701
struct is_trivial : public integral_constant< bool, __is_trivial(_Tp)>  { 
# 704
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 706
}; 
# 709
template< class _Tp> 
# 710
struct is_trivially_copyable : public integral_constant< bool, __is_trivially_copyable(_Tp)>  { 
# 713
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 715
}; 
# 718
template< class _Tp> 
# 719
struct is_standard_layout : public integral_constant< bool, __is_standard_layout(_Tp)>  { 
# 722
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 724
}; 
# 730
template< class _Tp> 
# 733
struct is_pod : public integral_constant< bool, __is_pod(_Tp)>  { 
# 736
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 738
}; 
# 743
template< class _Tp> 
# 746
struct
# 745
 [[__deprecated__]] is_literal_type : public integral_constant< bool, __is_literal_type(_Tp)>  { 
# 749
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 751
}; 
# 754
template< class _Tp> 
# 755
struct is_empty : public integral_constant< bool, __is_empty(_Tp)>  { 
# 757
}; 
# 760
template< class _Tp> 
# 761
struct is_polymorphic : public integral_constant< bool, __is_polymorphic(_Tp)>  { 
# 763
}; 
# 769
template< class _Tp> 
# 770
struct is_final : public integral_constant< bool, __is_final(_Tp)>  { 
# 772
}; 
# 776
template< class _Tp> 
# 777
struct is_abstract : public integral_constant< bool, __is_abstract(_Tp)>  { 
# 779
}; 
# 782
template< class _Tp, bool 
# 783
 = is_arithmetic< _Tp> ::value> 
# 784
struct __is_signed_helper : public false_type { 
# 785
}; 
# 787
template< class _Tp> 
# 788
struct __is_signed_helper< _Tp, true>  : public integral_constant< bool, ((_Tp)(-1)) < ((_Tp)0)>  { 
# 790
}; 
# 794
template< class _Tp> 
# 795
struct is_signed : public __is_signed_helper< _Tp> ::type { 
# 797
}; 
# 800
template< class _Tp> 
# 801
struct is_unsigned : public __and_< is_arithmetic< _Tp> , __not_< is_signed< _Tp> > >  { 
# 803
}; 
# 806
template< class _Tp, class _Up = _Tp &&> _Up __declval(int); 
# 810
template< class _Tp> _Tp __declval(long); 
# 815
template< class _Tp> auto declval() noexcept->__decltype((__declval< _Tp> (0))); 
# 818
template< class , unsigned  = 0U> struct extent; 
# 821
template< class > struct remove_all_extents; 
# 825
template< class _Tp> 
# 826
struct __is_array_known_bounds : public integral_constant< bool, (extent< _Tp> ::value > 0)>  { 
# 828
}; 
# 830
template< class _Tp> 
# 831
struct __is_array_unknown_bounds : public __and_< is_array< _Tp> , __not_< extent< _Tp> > >  { 
# 833
}; 
# 842 "/usr/include/c++/11/type_traits" 3
struct __do_is_destructible_impl { 
# 844
template< class _Tp, class  = __decltype((declval< _Tp &> ().~_Tp()))> static true_type __test(int); 
# 847
template< class > static false_type __test(...); 
# 849
}; 
# 851
template< class _Tp> 
# 852
struct __is_destructible_impl : public __do_is_destructible_impl { 
# 855
typedef __decltype((__test< _Tp> (0))) type; 
# 856
}; 
# 858
template< class _Tp, bool 
# 859
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 862
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_destructible_safe; 
# 865
template< class _Tp> 
# 866
struct __is_destructible_safe< _Tp, false, false>  : public __is_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 869
}; 
# 871
template< class _Tp> 
# 872
struct __is_destructible_safe< _Tp, true, false>  : public false_type { 
# 873
}; 
# 875
template< class _Tp> 
# 876
struct __is_destructible_safe< _Tp, false, true>  : public true_type { 
# 877
}; 
# 881
template< class _Tp> 
# 882
struct is_destructible : public __is_destructible_safe< _Tp> ::type { 
# 885
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 887
}; 
# 895
struct __do_is_nt_destructible_impl { 
# 897
template< class _Tp> static __bool_constant< noexcept(declval< _Tp &> ().~_Tp())>  __test(int); 
# 901
template< class > static false_type __test(...); 
# 903
}; 
# 905
template< class _Tp> 
# 906
struct __is_nt_destructible_impl : public __do_is_nt_destructible_impl { 
# 909
typedef __decltype((__test< _Tp> (0))) type; 
# 910
}; 
# 912
template< class _Tp, bool 
# 913
 = __or_< is_void< _Tp> , __is_array_unknown_bounds< _Tp> , is_function< _Tp> > ::value, bool 
# 916
 = __or_< is_reference< _Tp> , is_scalar< _Tp> > ::value> struct __is_nt_destructible_safe; 
# 919
template< class _Tp> 
# 920
struct __is_nt_destructible_safe< _Tp, false, false>  : public __is_nt_destructible_impl< typename remove_all_extents< _Tp> ::type> ::type { 
# 923
}; 
# 925
template< class _Tp> 
# 926
struct __is_nt_destructible_safe< _Tp, true, false>  : public false_type { 
# 927
}; 
# 929
template< class _Tp> 
# 930
struct __is_nt_destructible_safe< _Tp, false, true>  : public true_type { 
# 931
}; 
# 935
template< class _Tp> 
# 936
struct is_nothrow_destructible : public __is_nt_destructible_safe< _Tp> ::type { 
# 939
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 941
}; 
# 944
template< class _Tp, class ..._Args> 
# 945
struct __is_constructible_impl : public __bool_constant< __is_constructible(_Tp, _Args...)>  { 
# 947
}; 
# 951
template< class _Tp, class ..._Args> 
# 952
struct is_constructible : public __is_constructible_impl< _Tp, _Args...>  { 
# 955
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 957
}; 
# 960
template< class _Tp> 
# 961
struct is_default_constructible : public __is_constructible_impl< _Tp> ::type { 
# 964
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 966
}; 
# 969
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_constructible_impl; 
# 972
template< class _Tp> 
# 973
struct __is_copy_constructible_impl< _Tp, false>  : public false_type { 
# 974
}; 
# 976
template< class _Tp> 
# 977
struct __is_copy_constructible_impl< _Tp, true>  : public __is_constructible_impl< _Tp, const _Tp &>  { 
# 979
}; 
# 983
template< class _Tp> 
# 984
struct is_copy_constructible : public __is_copy_constructible_impl< _Tp>  { 
# 987
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 989
}; 
# 992
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_constructible_impl; 
# 995
template< class _Tp> 
# 996
struct __is_move_constructible_impl< _Tp, false>  : public false_type { 
# 997
}; 
# 999
template< class _Tp> 
# 1000
struct __is_move_constructible_impl< _Tp, true>  : public __is_constructible_impl< _Tp, _Tp &&>  { 
# 1002
}; 
# 1006
template< class _Tp> 
# 1007
struct is_move_constructible : public __is_move_constructible_impl< _Tp>  { 
# 1010
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1012
}; 
# 1015
template< class _Tp, class ..._Args> using __is_nothrow_constructible_impl = __bool_constant< __is_nothrow_constructible(_Tp, _Args...)> ; 
# 1021
template< class _Tp, class ..._Args> 
# 1022
struct is_nothrow_constructible : public __is_nothrow_constructible_impl< _Tp, _Args...> ::type { 
# 1025
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1027
}; 
# 1030
template< class _Tp> 
# 1031
struct is_nothrow_default_constructible : public __bool_constant< __is_nothrow_constructible(_Tp)>  { 
# 1034
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1036
}; 
# 1039
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_copy_constructible_impl; 
# 1042
template< class _Tp> 
# 1043
struct __is_nothrow_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1044
}; 
# 1046
template< class _Tp> 
# 1047
struct __is_nothrow_copy_constructible_impl< _Tp, true>  : public __is_nothrow_constructible_impl< _Tp, const _Tp &>  { 
# 1049
}; 
# 1053
template< class _Tp> 
# 1054
struct is_nothrow_copy_constructible : public __is_nothrow_copy_constructible_impl< _Tp> ::type { 
# 1057
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1059
}; 
# 1062
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nothrow_move_constructible_impl; 
# 1065
template< class _Tp> 
# 1066
struct __is_nothrow_move_constructible_impl< _Tp, false>  : public false_type { 
# 1067
}; 
# 1069
template< class _Tp> 
# 1070
struct __is_nothrow_move_constructible_impl< _Tp, true>  : public __is_nothrow_constructible_impl< _Tp, _Tp &&>  { 
# 1072
}; 
# 1076
template< class _Tp> 
# 1077
struct is_nothrow_move_constructible : public __is_nothrow_move_constructible_impl< _Tp> ::type { 
# 1080
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1082
}; 
# 1085
template< class _Tp, class _Up> 
# 1086
struct is_assignable : public __bool_constant< __is_assignable(_Tp, _Up)>  { 
# 1089
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1091
}; 
# 1093
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_copy_assignable_impl; 
# 1096
template< class _Tp> 
# 1097
struct __is_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1098
}; 
# 1100
template< class _Tp> 
# 1101
struct __is_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_assignable(_Tp &, const _Tp &)>  { 
# 1103
}; 
# 1106
template< class _Tp> 
# 1107
struct is_copy_assignable : public __is_copy_assignable_impl< _Tp> ::type { 
# 1110
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1112
}; 
# 1114
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_move_assignable_impl; 
# 1117
template< class _Tp> 
# 1118
struct __is_move_assignable_impl< _Tp, false>  : public false_type { 
# 1119
}; 
# 1121
template< class _Tp> 
# 1122
struct __is_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_assignable(_Tp &, _Tp &&)>  { 
# 1124
}; 
# 1127
template< class _Tp> 
# 1128
struct is_move_assignable : public __is_move_assignable_impl< _Tp> ::type { 
# 1131
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1133
}; 
# 1135
template< class _Tp, class _Up> using __is_nothrow_assignable_impl = __bool_constant< __is_nothrow_assignable(_Tp, _Up)> ; 
# 1140
template< class _Tp, class _Up> 
# 1141
struct is_nothrow_assignable : public __is_nothrow_assignable_impl< _Tp, _Up>  { 
# 1144
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1146
}; 
# 1148
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_copy_assignable_impl; 
# 1151
template< class _Tp> 
# 1152
struct __is_nt_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1153
}; 
# 1155
template< class _Tp> 
# 1156
struct __is_nt_copy_assignable_impl< _Tp, true>  : public __is_nothrow_assignable_impl< _Tp &, const _Tp &>  { 
# 1158
}; 
# 1161
template< class _Tp> 
# 1162
struct is_nothrow_copy_assignable : public __is_nt_copy_assignable_impl< _Tp>  { 
# 1165
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1167
}; 
# 1169
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_nt_move_assignable_impl; 
# 1172
template< class _Tp> 
# 1173
struct __is_nt_move_assignable_impl< _Tp, false>  : public false_type { 
# 1174
}; 
# 1176
template< class _Tp> 
# 1177
struct __is_nt_move_assignable_impl< _Tp, true>  : public __is_nothrow_assignable_impl< _Tp &, _Tp &&>  { 
# 1179
}; 
# 1182
template< class _Tp> 
# 1183
struct is_nothrow_move_assignable : public __is_nt_move_assignable_impl< _Tp>  { 
# 1186
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1188
}; 
# 1191
template< class _Tp, class ..._Args> 
# 1192
struct is_trivially_constructible : public __bool_constant< __is_trivially_constructible(_Tp, _Args...)>  { 
# 1195
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1197
}; 
# 1200
template< class _Tp> 
# 1201
struct is_trivially_default_constructible : public __bool_constant< __is_trivially_constructible(_Tp)>  { 
# 1204
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1206
}; 
# 1208
struct __do_is_implicitly_default_constructible_impl { 
# 1210
template< class _Tp> static void __helper(const _Tp &); 
# 1213
template< class _Tp> static true_type __test(const _Tp &, __decltype((__helper< const _Tp &> ({}))) * = 0); 
# 1217
static false_type __test(...); 
# 1218
}; 
# 1220
template< class _Tp> 
# 1221
struct __is_implicitly_default_constructible_impl : public __do_is_implicitly_default_constructible_impl { 
# 1224
typedef __decltype((__test(declval< _Tp> ()))) type; 
# 1225
}; 
# 1227
template< class _Tp> 
# 1228
struct __is_implicitly_default_constructible_safe : public __is_implicitly_default_constructible_impl< _Tp> ::type { 
# 1230
}; 
# 1232
template< class _Tp> 
# 1233
struct __is_implicitly_default_constructible : public __and_< __is_constructible_impl< _Tp> , __is_implicitly_default_constructible_safe< _Tp> >  { 
# 1236
}; 
# 1238
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_constructible_impl; 
# 1241
template< class _Tp> 
# 1242
struct __is_trivially_copy_constructible_impl< _Tp, false>  : public false_type { 
# 1243
}; 
# 1245
template< class _Tp> 
# 1246
struct __is_trivially_copy_constructible_impl< _Tp, true>  : public __and_< __is_copy_constructible_impl< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, const _Tp &)> >  { 
# 1250
}; 
# 1253
template< class _Tp> 
# 1254
struct is_trivially_copy_constructible : public __is_trivially_copy_constructible_impl< _Tp>  { 
# 1257
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1259
}; 
# 1261
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_constructible_impl; 
# 1264
template< class _Tp> 
# 1265
struct __is_trivially_move_constructible_impl< _Tp, false>  : public false_type { 
# 1266
}; 
# 1268
template< class _Tp> 
# 1269
struct __is_trivially_move_constructible_impl< _Tp, true>  : public __and_< __is_move_constructible_impl< _Tp> , integral_constant< bool, __is_trivially_constructible(_Tp, _Tp &&)> >  { 
# 1273
}; 
# 1276
template< class _Tp> 
# 1277
struct is_trivially_move_constructible : public __is_trivially_move_constructible_impl< _Tp>  { 
# 1280
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1282
}; 
# 1285
template< class _Tp, class _Up> 
# 1286
struct is_trivially_assignable : public __bool_constant< __is_trivially_assignable(_Tp, _Up)>  { 
# 1289
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1291
}; 
# 1293
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_copy_assignable_impl; 
# 1296
template< class _Tp> 
# 1297
struct __is_trivially_copy_assignable_impl< _Tp, false>  : public false_type { 
# 1298
}; 
# 1300
template< class _Tp> 
# 1301
struct __is_trivially_copy_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, const _Tp &)>  { 
# 1303
}; 
# 1306
template< class _Tp> 
# 1307
struct is_trivially_copy_assignable : public __is_trivially_copy_assignable_impl< _Tp>  { 
# 1310
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1312
}; 
# 1314
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> struct __is_trivially_move_assignable_impl; 
# 1317
template< class _Tp> 
# 1318
struct __is_trivially_move_assignable_impl< _Tp, false>  : public false_type { 
# 1319
}; 
# 1321
template< class _Tp> 
# 1322
struct __is_trivially_move_assignable_impl< _Tp, true>  : public __bool_constant< __is_trivially_assignable(_Tp &, _Tp &&)>  { 
# 1324
}; 
# 1327
template< class _Tp> 
# 1328
struct is_trivially_move_assignable : public __is_trivially_move_assignable_impl< _Tp>  { 
# 1331
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1333
}; 
# 1336
template< class _Tp> 
# 1337
struct is_trivially_destructible : public __and_< __is_destructible_safe< _Tp> , __bool_constant< __has_trivial_destructor(_Tp)> >  { 
# 1341
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1343
}; 
# 1347
template< class _Tp> 
# 1348
struct has_virtual_destructor : public integral_constant< bool, __has_virtual_destructor(_Tp)>  { 
# 1351
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1353
}; 
# 1359
template< class _Tp> 
# 1360
struct alignment_of : public integral_constant< unsigned long, __alignof__(_Tp)>  { 
# 1363
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 1365
}; 
# 1368
template< class > 
# 1369
struct rank : public integral_constant< unsigned long, 0UL>  { 
# 1370
}; 
# 1372
template< class _Tp, size_t _Size> 
# 1373
struct rank< _Tp [_Size]>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1374
}; 
# 1376
template< class _Tp> 
# 1377
struct rank< _Tp []>  : public integral_constant< unsigned long, 1 + std::rank< _Tp> ::value>  { 
# 1378
}; 
# 1381
template< class , unsigned _Uint> 
# 1382
struct extent : public integral_constant< unsigned long, 0UL>  { 
# 1383
}; 
# 1385
template< class _Tp, unsigned _Uint, size_t _Size> 
# 1386
struct extent< _Tp [_Size], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? _Size : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1390
}; 
# 1392
template< class _Tp, unsigned _Uint> 
# 1393
struct extent< _Tp [], _Uint>  : public integral_constant< unsigned long, (_Uint == (0)) ? 0 : std::extent< _Tp, _Uint - (1)> ::value>  { 
# 1397
}; 
# 1403
template< class _Tp, class _Up> 
# 1404
struct is_same : public integral_constant< bool, __is_same(_Tp, _Up)>  { 
# 1410
}; 
# 1420 "/usr/include/c++/11/type_traits" 3
template< class _Base, class _Derived> 
# 1421
struct is_base_of : public integral_constant< bool, __is_base_of(_Base, _Derived)>  { 
# 1423
}; 
# 1425
template< class _From, class _To, bool 
# 1426
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1428
struct __is_convertible_helper { 
# 1430
typedef typename is_void< _To> ::type type; 
# 1431
}; 
# 1433
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
template< class _From, class _To> 
# 1436
class __is_convertible_helper< _From, _To, false>  { 
# 1438
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1441
template< class _From1, class _To1, class 
# 1442
 = __decltype((__test_aux< _To1> (std::declval< _From1> ())))> static true_type 
# 1441
__test(int); 
# 1446
template< class , class > static false_type __test(...); 
# 1451
public: typedef __decltype((__test< _From, _To> (0))) type; 
# 1452
}; 
#pragma GCC diagnostic pop
# 1456
template< class _From, class _To> 
# 1457
struct is_convertible : public __is_convertible_helper< _From, _To> ::type { 
# 1459
}; 
# 1462
template< class _ToElementType, class _FromElementType> using __is_array_convertible = is_convertible< _FromElementType (*)[], _ToElementType (*)[]> ; 
# 1466
template< class _From, class _To, bool 
# 1467
 = __or_< is_void< _From> , is_function< _To> , is_array< _To> > ::value> 
# 1469
struct __is_nt_convertible_helper : public is_void< _To>  { 
# 1471
}; 
# 1473
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
template< class _From, class _To> 
# 1476
class __is_nt_convertible_helper< _From, _To, false>  { 
# 1478
template< class _To1> static void __test_aux(_To1) noexcept; 
# 1481
template< class _From1, class _To1> static __bool_constant< noexcept(__test_aux< _To1> (std::declval< _From1> ()))>  __test(int); 
# 1486
template< class , class > static false_type __test(...); 
# 1491
public: using type = __decltype((__test< _From, _To> (0))); 
# 1492
}; 
#pragma GCC diagnostic pop
# 1512 "/usr/include/c++/11/type_traits" 3
template< class _Tp> 
# 1513
struct remove_const { 
# 1514
typedef _Tp type; }; 
# 1516
template< class _Tp> 
# 1517
struct remove_const< const _Tp>  { 
# 1518
typedef _Tp type; }; 
# 1521
template< class _Tp> 
# 1522
struct remove_volatile { 
# 1523
typedef _Tp type; }; 
# 1525
template< class _Tp> 
# 1526
struct remove_volatile< volatile _Tp>  { 
# 1527
typedef _Tp type; }; 
# 1530
template< class _Tp> 
# 1531
struct remove_cv { 
# 1532
using type = _Tp; }; 
# 1534
template< class _Tp> 
# 1535
struct remove_cv< const _Tp>  { 
# 1536
using type = _Tp; }; 
# 1538
template< class _Tp> 
# 1539
struct remove_cv< volatile _Tp>  { 
# 1540
using type = _Tp; }; 
# 1542
template< class _Tp> 
# 1543
struct remove_cv< const volatile _Tp>  { 
# 1544
using type = _Tp; }; 
# 1547
template< class _Tp> 
# 1548
struct add_const { 
# 1549
typedef const _Tp type; }; 
# 1552
template< class _Tp> 
# 1553
struct add_volatile { 
# 1554
typedef volatile _Tp type; }; 
# 1557
template< class _Tp> 
# 1558
struct add_cv { 
# 1561
typedef typename add_const< typename add_volatile< _Tp> ::type> ::type type; 
# 1562
}; 
# 1569
template< class _Tp> using remove_const_t = typename remove_const< _Tp> ::type; 
# 1573
template< class _Tp> using remove_volatile_t = typename remove_volatile< _Tp> ::type; 
# 1577
template< class _Tp> using remove_cv_t = typename remove_cv< _Tp> ::type; 
# 1581
template< class _Tp> using add_const_t = typename add_const< _Tp> ::type; 
# 1585
template< class _Tp> using add_volatile_t = typename add_volatile< _Tp> ::type; 
# 1589
template< class _Tp> using add_cv_t = typename add_cv< _Tp> ::type; 
# 1596
template< class _Tp> 
# 1597
struct remove_reference { 
# 1598
typedef _Tp type; }; 
# 1600
template< class _Tp> 
# 1601
struct remove_reference< _Tp &>  { 
# 1602
typedef _Tp type; }; 
# 1604
template< class _Tp> 
# 1605
struct remove_reference< _Tp &&>  { 
# 1606
typedef _Tp type; }; 
# 1608
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1609
struct __add_lvalue_reference_helper { 
# 1610
typedef _Tp type; }; 
# 1612
template< class _Tp> 
# 1613
struct __add_lvalue_reference_helper< _Tp, true>  { 
# 1614
typedef _Tp &type; }; 
# 1617
template< class _Tp> 
# 1618
struct add_lvalue_reference : public __add_lvalue_reference_helper< _Tp>  { 
# 1620
}; 
# 1622
template< class _Tp, bool  = __is_referenceable< _Tp> ::value> 
# 1623
struct __add_rvalue_reference_helper { 
# 1624
typedef _Tp type; }; 
# 1626
template< class _Tp> 
# 1627
struct __add_rvalue_reference_helper< _Tp, true>  { 
# 1628
typedef _Tp &&type; }; 
# 1631
template< class _Tp> 
# 1632
struct add_rvalue_reference : public __add_rvalue_reference_helper< _Tp>  { 
# 1634
}; 
# 1638
template< class _Tp> using remove_reference_t = typename remove_reference< _Tp> ::type; 
# 1642
template< class _Tp> using add_lvalue_reference_t = typename add_lvalue_reference< _Tp> ::type; 
# 1646
template< class _Tp> using add_rvalue_reference_t = typename add_rvalue_reference< _Tp> ::type; 
# 1655
template< class _Unqualified, bool _IsConst, bool _IsVol> struct __cv_selector; 
# 1658
template< class _Unqualified> 
# 1659
struct __cv_selector< _Unqualified, false, false>  { 
# 1660
typedef _Unqualified __type; }; 
# 1662
template< class _Unqualified> 
# 1663
struct __cv_selector< _Unqualified, false, true>  { 
# 1664
typedef volatile _Unqualified __type; }; 
# 1666
template< class _Unqualified> 
# 1667
struct __cv_selector< _Unqualified, true, false>  { 
# 1668
typedef const _Unqualified __type; }; 
# 1670
template< class _Unqualified> 
# 1671
struct __cv_selector< _Unqualified, true, true>  { 
# 1672
typedef const volatile _Unqualified __type; }; 
# 1674
template< class _Qualified, class _Unqualified, bool 
# 1675
_IsConst = is_const< _Qualified> ::value, bool 
# 1676
_IsVol = is_volatile< _Qualified> ::value> 
# 1677
class __match_cv_qualifiers { 
# 1679
typedef __cv_selector< _Unqualified, _IsConst, _IsVol>  __match; 
# 1682
public: typedef typename __cv_selector< _Unqualified, _IsConst, _IsVol> ::__type __type; 
# 1683
}; 
# 1686
template< class _Tp> 
# 1687
struct __make_unsigned { 
# 1688
typedef _Tp __type; }; 
# 1691
template<> struct __make_unsigned< char>  { 
# 1692
typedef unsigned char __type; }; 
# 1695
template<> struct __make_unsigned< signed char>  { 
# 1696
typedef unsigned char __type; }; 
# 1699
template<> struct __make_unsigned< short>  { 
# 1700
typedef unsigned short __type; }; 
# 1703
template<> struct __make_unsigned< int>  { 
# 1704
typedef unsigned __type; }; 
# 1707
template<> struct __make_unsigned< long>  { 
# 1708
typedef unsigned long __type; }; 
# 1711
template<> struct __make_unsigned< long long>  { 
# 1712
typedef unsigned long long __type; }; 
# 1716
template<> struct __make_unsigned< __int128>  { 
# 1717
typedef unsigned __int128 __type; }; 
# 1736 "/usr/include/c++/11/type_traits" 3
template< class _Tp, bool 
# 1737
_IsInt = is_integral< _Tp> ::value, bool 
# 1738
_IsEnum = is_enum< _Tp> ::value> class __make_unsigned_selector; 
# 1741
template< class _Tp> 
# 1742
class __make_unsigned_selector< _Tp, true, false>  { 
# 1744
using __unsigned_type = typename __make_unsigned< __remove_cv_t< _Tp> > ::__type; 
# 1748
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1750
}; 
# 1752
class __make_unsigned_selector_base { 
# 1755
protected: template< class ...> struct _List { }; 
# 1757
template< class _Tp, class ..._Up> 
# 1758
struct _List< _Tp, _Up...>  : public __make_unsigned_selector_base::_List< _Up...>  { 
# 1759
static constexpr inline std::size_t __size = sizeof(_Tp); }; 
# 1761
template< size_t _Sz, class _Tp, bool  = _Sz <= _Tp::__size> struct __select; 
# 1764
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1765
struct __select< _Sz, _List< _Uint, _UInts...> , true>  { 
# 1766
using __type = _Uint; }; 
# 1768
template< size_t _Sz, class _Uint, class ..._UInts> 
# 1769
struct __select< _Sz, _List< _Uint, _UInts...> , false>  : public __make_unsigned_selector_base::__select< _Sz, _List< _UInts...> >  { 
# 1771
}; 
# 1772
}; 
# 1775
template< class _Tp> 
# 1776
class __make_unsigned_selector< _Tp, false, true>  : private __make_unsigned_selector_base { 
# 1780
using _UInts = _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> ; 
# 1783
using __unsigned_type = typename __select< sizeof(_Tp), _List< unsigned char, unsigned short, unsigned, unsigned long, unsigned long long> > ::__type; 
# 1786
public: using __type = typename __match_cv_qualifiers< _Tp, __unsigned_type> ::__type; 
# 1788
}; 
# 1796
template<> struct __make_unsigned< wchar_t>  { 
# 1798
using __type = __make_unsigned_selector< wchar_t, false, true> ::__type; 
# 1800
}; 
# 1813 "/usr/include/c++/11/type_traits" 3
template<> struct __make_unsigned< char16_t>  { 
# 1815
using __type = __make_unsigned_selector< char16_t, false, true> ::__type; 
# 1817
}; 
# 1820
template<> struct __make_unsigned< char32_t>  { 
# 1822
using __type = __make_unsigned_selector< char32_t, false, true> ::__type; 
# 1824
}; 
# 1831
template< class _Tp> 
# 1832
struct make_unsigned { 
# 1833
typedef typename __make_unsigned_selector< _Tp> ::__type type; }; 
# 1837
template<> struct make_unsigned< bool> ; 
# 1842
template< class _Tp> 
# 1843
struct __make_signed { 
# 1844
typedef _Tp __type; }; 
# 1847
template<> struct __make_signed< char>  { 
# 1848
typedef signed char __type; }; 
# 1851
template<> struct __make_signed< unsigned char>  { 
# 1852
typedef signed char __type; }; 
# 1855
template<> struct __make_signed< unsigned short>  { 
# 1856
typedef signed short __type; }; 
# 1859
template<> struct __make_signed< unsigned>  { 
# 1860
typedef signed int __type; }; 
# 1863
template<> struct __make_signed< unsigned long>  { 
# 1864
typedef signed long __type; }; 
# 1867
template<> struct __make_signed< unsigned long long>  { 
# 1868
typedef signed long long __type; }; 
# 1872
template<> struct __make_signed< unsigned __int128>  { 
# 1873
typedef __int128 __type; }; 
# 1892 "/usr/include/c++/11/type_traits" 3
template< class _Tp, bool 
# 1893
_IsInt = is_integral< _Tp> ::value, bool 
# 1894
_IsEnum = is_enum< _Tp> ::value> class __make_signed_selector; 
# 1897
template< class _Tp> 
# 1898
class __make_signed_selector< _Tp, true, false>  { 
# 1900
using __signed_type = typename __make_signed< __remove_cv_t< _Tp> > ::__type; 
# 1904
public: using __type = typename __match_cv_qualifiers< _Tp, __signed_type> ::__type; 
# 1906
}; 
# 1909
template< class _Tp> 
# 1910
class __make_signed_selector< _Tp, false, true>  { 
# 1912
typedef typename __make_unsigned_selector< _Tp> ::__type __unsigned_type; 
# 1915
public: typedef typename std::__make_signed_selector< __unsigned_type> ::__type __type; 
# 1916
}; 
# 1924
template<> struct __make_signed< wchar_t>  { 
# 1926
using __type = __make_signed_selector< wchar_t, false, true> ::__type; 
# 1928
}; 
# 1941 "/usr/include/c++/11/type_traits" 3
template<> struct __make_signed< char16_t>  { 
# 1943
using __type = __make_signed_selector< char16_t, false, true> ::__type; 
# 1945
}; 
# 1948
template<> struct __make_signed< char32_t>  { 
# 1950
using __type = __make_signed_selector< char32_t, false, true> ::__type; 
# 1952
}; 
# 1959
template< class _Tp> 
# 1960
struct make_signed { 
# 1961
typedef typename __make_signed_selector< _Tp> ::__type type; }; 
# 1965
template<> struct make_signed< bool> ; 
# 1969
template< class _Tp> using make_signed_t = typename make_signed< _Tp> ::type; 
# 1973
template< class _Tp> using make_unsigned_t = typename make_unsigned< _Tp> ::type; 
# 1980
template< class _Tp> 
# 1981
struct remove_extent { 
# 1982
typedef _Tp type; }; 
# 1984
template< class _Tp, size_t _Size> 
# 1985
struct remove_extent< _Tp [_Size]>  { 
# 1986
typedef _Tp type; }; 
# 1988
template< class _Tp> 
# 1989
struct remove_extent< _Tp []>  { 
# 1990
typedef _Tp type; }; 
# 1993
template< class _Tp> 
# 1994
struct remove_all_extents { 
# 1995
typedef _Tp type; }; 
# 1997
template< class _Tp, size_t _Size> 
# 1998
struct remove_all_extents< _Tp [_Size]>  { 
# 1999
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 2001
template< class _Tp> 
# 2002
struct remove_all_extents< _Tp []>  { 
# 2003
typedef typename std::remove_all_extents< _Tp> ::type type; }; 
# 2007
template< class _Tp> using remove_extent_t = typename remove_extent< _Tp> ::type; 
# 2011
template< class _Tp> using remove_all_extents_t = typename remove_all_extents< _Tp> ::type; 
# 2017
template< class _Tp, class > 
# 2018
struct __remove_pointer_helper { 
# 2019
typedef _Tp type; }; 
# 2021
template< class _Tp, class _Up> 
# 2022
struct __remove_pointer_helper< _Tp, _Up *>  { 
# 2023
typedef _Up type; }; 
# 2026
template< class _Tp> 
# 2027
struct remove_pointer : public __remove_pointer_helper< _Tp, __remove_cv_t< _Tp> >  { 
# 2029
}; 
# 2031
template< class _Tp, bool  = __or_< __is_referenceable< _Tp> , is_void< _Tp> > ::value> 
# 2033
struct __add_pointer_helper { 
# 2034
typedef _Tp type; }; 
# 2036
template< class _Tp> 
# 2037
struct __add_pointer_helper< _Tp, true>  { 
# 2038
typedef typename remove_reference< _Tp> ::type *type; }; 
# 2041
template< class _Tp> 
# 2042
struct add_pointer : public __add_pointer_helper< _Tp>  { 
# 2044
}; 
# 2048
template< class _Tp> using remove_pointer_t = typename remove_pointer< _Tp> ::type; 
# 2052
template< class _Tp> using add_pointer_t = typename add_pointer< _Tp> ::type; 
# 2056
template< size_t _Len> 
# 2057
struct __aligned_storage_msa { 
# 2059
union __type { 
# 2061
unsigned char __data[_Len]; 
# 2062
struct __attribute((__aligned__)) { } __align; 
# 2063
}; 
# 2064
}; 
# 2076 "/usr/include/c++/11/type_traits" 3
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> 
# 2078
struct aligned_storage { 
# 2080
union type { 
# 2082
unsigned char __data[_Len]; 
# 2083
struct __attribute((__aligned__(_Align))) { } __align; 
# 2084
}; 
# 2085
}; 
# 2087
template< class ..._Types> 
# 2088
struct __strictest_alignment { 
# 2090
static const size_t _S_alignment = (0); 
# 2091
static const size_t _S_size = (0); 
# 2092
}; 
# 2094
template< class _Tp, class ..._Types> 
# 2095
struct __strictest_alignment< _Tp, _Types...>  { 
# 2097
static const size_t _S_alignment = ((__alignof__(_Tp) > __strictest_alignment< _Types...> ::_S_alignment) ? __alignof__(_Tp) : __strictest_alignment< _Types...> ::_S_alignment); 
# 2100
static const size_t _S_size = ((sizeof(_Tp) > __strictest_alignment< _Types...> ::_S_size) ? sizeof(_Tp) : __strictest_alignment< _Types...> ::_S_size); 
# 2103
}; 
# 2115 "/usr/include/c++/11/type_traits" 3
template< size_t _Len, class ..._Types> 
# 2116
struct aligned_union { 
# 2119
static_assert((sizeof...(_Types) != (0)), "At least one type is required");
# 2121
private: using __strictest = __strictest_alignment< _Types...> ; 
# 2122
static const size_t _S_len = ((_Len > __strictest::_S_size) ? _Len : __strictest::_S_size); 
# 2126
public: static const size_t alignment_value = (__strictest::_S_alignment); 
# 2128
typedef typename aligned_storage< _S_len, alignment_value> ::type type; 
# 2129
}; 
# 2131
template< size_t _Len, class ..._Types> const size_t aligned_union< _Len, _Types...> ::alignment_value; 
# 2138
template< class _Up, bool 
# 2139
_IsArray = is_array< _Up> ::value, bool 
# 2140
_IsFunction = is_function< _Up> ::value> struct __decay_selector; 
# 2144
template< class _Up> 
# 2145
struct __decay_selector< _Up, false, false>  { 
# 2146
typedef __remove_cv_t< _Up>  __type; }; 
# 2148
template< class _Up> 
# 2149
struct __decay_selector< _Up, true, false>  { 
# 2150
typedef typename remove_extent< _Up> ::type *__type; }; 
# 2152
template< class _Up> 
# 2153
struct __decay_selector< _Up, false, true>  { 
# 2154
typedef typename add_pointer< _Up> ::type __type; }; 
# 2158
template< class _Tp> 
# 2159
class decay { 
# 2161
typedef typename remove_reference< _Tp> ::type __remove_type; 
# 2164
public: typedef typename __decay_selector< __remove_type> ::__type type; 
# 2165
}; 
# 2170
template< class _Tp> 
# 2171
struct __strip_reference_wrapper { 
# 2173
typedef _Tp __type; 
# 2174
}; 
# 2176
template< class _Tp> 
# 2177
struct __strip_reference_wrapper< reference_wrapper< _Tp> >  { 
# 2179
typedef _Tp &__type; 
# 2180
}; 
# 2183
template< class _Tp> using __decay_t = typename decay< _Tp> ::type; 
# 2186
template< class _Tp> using __decay_and_strip = __strip_reference_wrapper< __decay_t< _Tp> > ; 
# 2192
template< bool , class _Tp = void> 
# 2193
struct enable_if { 
# 2194
}; 
# 2197
template< class _Tp> 
# 2198
struct enable_if< true, _Tp>  { 
# 2199
typedef _Tp type; }; 
# 2204
template< bool _Cond, class _Tp = void> using __enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2208
template< class ..._Cond> using _Require = __enable_if_t< __and_< _Cond...> ::value> ; 
# 2212
template< class _Tp> using __remove_cvref_t = typename remove_cv< typename remove_reference< _Tp> ::type> ::type; 
# 2219
template< bool _Cond, class _Iftrue, class _Iffalse> 
# 2220
struct conditional { 
# 2221
typedef _Iftrue type; }; 
# 2224
template< class _Iftrue, class _Iffalse> 
# 2225
struct conditional< false, _Iftrue, _Iffalse>  { 
# 2226
typedef _Iffalse type; }; 
# 2229
template< class ..._Tp> struct common_type; 
# 2235
struct __do_common_type_impl { 
# 2237
template< class _Tp, class _Up> using __cond_t = __decltype((true ? std::declval< _Tp> () : std::declval< _Up> ())); 
# 2243
template< class _Tp, class _Up> static __success_type< __decay_t< __cond_t< _Tp, _Up> > >  _S_test(int); 
# 2255 "/usr/include/c++/11/type_traits" 3
template< class , class > static __failure_type _S_test_2(...); 
# 2259
template< class _Tp, class _Up> static __decltype((_S_test_2< _Tp, _Up> (0))) _S_test(...); 
# 2262
}; 
# 2266
template<> struct common_type< >  { 
# 2267
}; 
# 2270
template< class _Tp0> 
# 2271
struct common_type< _Tp0>  : public std::common_type< _Tp0, _Tp0>  { 
# 2273
}; 
# 2276
template< class _Tp1, class _Tp2, class 
# 2277
_Dp1 = __decay_t< _Tp1> , class _Dp2 = __decay_t< _Tp2> > 
# 2278
struct __common_type_impl { 
# 2282
using type = common_type< _Dp1, _Dp2> ; 
# 2283
}; 
# 2285
template< class _Tp1, class _Tp2> 
# 2286
struct __common_type_impl< _Tp1, _Tp2, _Tp1, _Tp2>  : private __do_common_type_impl { 
# 2291
using type = __decltype((_S_test< _Tp1, _Tp2> (0))); 
# 2292
}; 
# 2295
template< class _Tp1, class _Tp2> 
# 2296
struct common_type< _Tp1, _Tp2>  : public __common_type_impl< _Tp1, _Tp2> ::type { 
# 2298
}; 
# 2300
template< class ...> 
# 2301
struct __common_type_pack { 
# 2302
}; 
# 2304
template< class , class , class  = void> struct __common_type_fold; 
# 2308
template< class _Tp1, class _Tp2, class ..._Rp> 
# 2309
struct common_type< _Tp1, _Tp2, _Rp...>  : public __common_type_fold< std::common_type< _Tp1, _Tp2> , __common_type_pack< _Rp...> >  { 
# 2312
}; 
# 2317
template< class _CTp, class ..._Rp> 
# 2318
struct __common_type_fold< _CTp, __common_type_pack< _Rp...> , __void_t< typename _CTp::type> >  : public common_type< typename _CTp::type, _Rp...>  { 
# 2321
}; 
# 2324
template< class _CTp, class _Rp> 
# 2325
struct __common_type_fold< _CTp, _Rp, void>  { 
# 2326
}; 
# 2328
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 2329
struct __underlying_type_impl { 
# 2331
using type = __underlying_type(_Tp); 
# 2332
}; 
# 2334
template< class _Tp> 
# 2335
struct __underlying_type_impl< _Tp, false>  { 
# 2336
}; 
# 2340
template< class _Tp> 
# 2341
struct underlying_type : public __underlying_type_impl< _Tp>  { 
# 2343
}; 
# 2346
template< class _Tp> 
# 2347
struct __declval_protector { 
# 2349
static const bool __stop = false; 
# 2350
}; 
# 2357
template< class _Tp> auto 
# 2358
declval() noexcept->__decltype((__declval< _Tp> (0))) 
# 2359
{ 
# 2360
static_assert((__declval_protector< _Tp> ::__stop), "declval() must not be used!");
# 2362
return __declval< _Tp> (0); 
# 2363
} 
# 2366
template< class _Signature> struct result_of; 
# 2374
struct __invoke_memfun_ref { }; 
# 2375
struct __invoke_memfun_deref { }; 
# 2376
struct __invoke_memobj_ref { }; 
# 2377
struct __invoke_memobj_deref { }; 
# 2378
struct __invoke_other { }; 
# 2381
template< class _Tp, class _Tag> 
# 2382
struct __result_of_success : public __success_type< _Tp>  { 
# 2383
using __invoke_type = _Tag; }; 
# 2386
struct __result_of_memfun_ref_impl { 
# 2388
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype(((std::declval< _Tp1> ().*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_ref>  _S_test(int); 
# 2393
template< class ...> static __failure_type _S_test(...); 
# 2395
}; 
# 2397
template< class _MemPtr, class _Arg, class ..._Args> 
# 2398
struct __result_of_memfun_ref : private __result_of_memfun_ref_impl { 
# 2401
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2402
}; 
# 2405
struct __result_of_memfun_deref_impl { 
# 2407
template< class _Fp, class _Tp1, class ..._Args> static __result_of_success< __decltype((((*std::declval< _Tp1> ()).*std::declval< _Fp> ())(std::declval< _Args> ()...))), __invoke_memfun_deref>  _S_test(int); 
# 2412
template< class ...> static __failure_type _S_test(...); 
# 2414
}; 
# 2416
template< class _MemPtr, class _Arg, class ..._Args> 
# 2417
struct __result_of_memfun_deref : private __result_of_memfun_deref_impl { 
# 2420
typedef __decltype((_S_test< _MemPtr, _Arg, _Args...> (0))) type; 
# 2421
}; 
# 2424
struct __result_of_memobj_ref_impl { 
# 2426
template< class _Fp, class _Tp1> static __result_of_success< __decltype((std::declval< _Tp1> ().*std::declval< _Fp> ())), __invoke_memobj_ref>  _S_test(int); 
# 2431
template< class , class > static __failure_type _S_test(...); 
# 2433
}; 
# 2435
template< class _MemPtr, class _Arg> 
# 2436
struct __result_of_memobj_ref : private __result_of_memobj_ref_impl { 
# 2439
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2440
}; 
# 2443
struct __result_of_memobj_deref_impl { 
# 2445
template< class _Fp, class _Tp1> static __result_of_success< __decltype(((*std::declval< _Tp1> ()).*std::declval< _Fp> ())), __invoke_memobj_deref>  _S_test(int); 
# 2450
template< class , class > static __failure_type _S_test(...); 
# 2452
}; 
# 2454
template< class _MemPtr, class _Arg> 
# 2455
struct __result_of_memobj_deref : private __result_of_memobj_deref_impl { 
# 2458
typedef __decltype((_S_test< _MemPtr, _Arg> (0))) type; 
# 2459
}; 
# 2461
template< class _MemPtr, class _Arg> struct __result_of_memobj; 
# 2464
template< class _Res, class _Class, class _Arg> 
# 2465
struct __result_of_memobj< _Res (_Class::*), _Arg>  { 
# 2467
typedef __remove_cvref_t< _Arg>  _Argval; 
# 2468
typedef _Res (_Class::*_MemPtr); 
# 2473
typedef typename conditional< __or_< is_same< _Argval, _Class> , is_base_of< _Class, _Argval> > ::value, __result_of_memobj_ref< _MemPtr, _Arg> , __result_of_memobj_deref< _MemPtr, _Arg> > ::type::type type; 
# 2474
}; 
# 2476
template< class _MemPtr, class _Arg, class ..._Args> struct __result_of_memfun; 
# 2479
template< class _Res, class _Class, class _Arg, class ..._Args> 
# 2480
struct __result_of_memfun< _Res (_Class::*), _Arg, _Args...>  { 
# 2482
typedef typename remove_reference< _Arg> ::type _Argval; 
# 2483
typedef _Res (_Class::*_MemPtr); 
# 2487
typedef typename conditional< is_base_of< _Class, _Argval> ::value, __result_of_memfun_ref< _MemPtr, _Arg, _Args...> , __result_of_memfun_deref< _MemPtr, _Arg, _Args...> > ::type::type type; 
# 2488
}; 
# 2495
template< class _Tp, class _Up = __remove_cvref_t< _Tp> > 
# 2496
struct __inv_unwrap { 
# 2498
using type = _Tp; 
# 2499
}; 
# 2501
template< class _Tp, class _Up> 
# 2502
struct __inv_unwrap< _Tp, reference_wrapper< _Up> >  { 
# 2504
using type = _Up &; 
# 2505
}; 
# 2507
template< bool , bool , class _Functor, class ..._ArgTypes> 
# 2508
struct __result_of_impl { 
# 2510
typedef __failure_type type; 
# 2511
}; 
# 2513
template< class _MemPtr, class _Arg> 
# 2514
struct __result_of_impl< true, false, _MemPtr, _Arg>  : public __result_of_memobj< __decay_t< _MemPtr> , typename __inv_unwrap< _Arg> ::type>  { 
# 2517
}; 
# 2519
template< class _MemPtr, class _Arg, class ..._Args> 
# 2520
struct __result_of_impl< false, true, _MemPtr, _Arg, _Args...>  : public __result_of_memfun< __decay_t< _MemPtr> , typename __inv_unwrap< _Arg> ::type, _Args...>  { 
# 2523
}; 
# 2526
struct __result_of_other_impl { 
# 2528
template< class _Fn, class ..._Args> static __result_of_success< __decltype((std::declval< _Fn> ()(std::declval< _Args> ()...))), __invoke_other>  _S_test(int); 
# 2533
template< class ...> static __failure_type _S_test(...); 
# 2535
}; 
# 2537
template< class _Functor, class ..._ArgTypes> 
# 2538
struct __result_of_impl< false, false, _Functor, _ArgTypes...>  : private __result_of_other_impl { 
# 2541
typedef __decltype((_S_test< _Functor, _ArgTypes...> (0))) type; 
# 2542
}; 
# 2545
template< class _Functor, class ..._ArgTypes> 
# 2546
struct __invoke_result : public __result_of_impl< is_member_object_pointer< typename remove_reference< _Functor> ::type> ::value, is_member_function_pointer< typename remove_reference< _Functor> ::type> ::value, _Functor, _ArgTypes...> ::type { 
# 2556
}; 
# 2559
template< class _Functor, class ..._ArgTypes> 
# 2560
struct result_of< _Functor (_ArgTypes ...)>  : public __invoke_result< _Functor, _ArgTypes...>  { 
# 2562
}; 
# 2566
template< size_t _Len, size_t _Align = __alignof__(typename __aligned_storage_msa< _Len> ::__type)> using aligned_storage_t = typename aligned_storage< _Len, _Align> ::type; 
# 2570
template< size_t _Len, class ..._Types> using aligned_union_t = typename aligned_union< _Len, _Types...> ::type; 
# 2574
template< class _Tp> using decay_t = typename decay< _Tp> ::type; 
# 2578
template< bool _Cond, class _Tp = void> using enable_if_t = typename enable_if< _Cond, _Tp> ::type; 
# 2582
template< bool _Cond, class _Iftrue, class _Iffalse> using conditional_t = typename conditional< _Cond, _Iftrue, _Iffalse> ::type; 
# 2586
template< class ..._Tp> using common_type_t = typename common_type< _Tp...> ::type; 
# 2590
template< class _Tp> using underlying_type_t = typename underlying_type< _Tp> ::type; 
# 2594
template< class _Tp> using result_of_t = typename result_of< _Tp> ::type; 
# 2601
template< class ...> using void_t = void; 
# 2607
template< class _Default, class _AlwaysVoid, 
# 2608
template< class ...>  class _Op, class ..._Args> 
# 2609
struct __detector { 
# 2611
using value_t = false_type; 
# 2612
using type = _Default; 
# 2613
}; 
# 2616
template< class _Default, template< class ...>  class _Op, class ...
# 2617
_Args> 
# 2618
struct __detector< _Default, __void_t< _Op< _Args...> > , _Op, _Args...>  { 
# 2620
using value_t = true_type; 
# 2621
using type = _Op< _Args...> ; 
# 2622
}; 
# 2625
template< class _Default, template< class ...>  class _Op, class ...
# 2626
_Args> using __detected_or = __detector< _Default, void, _Op, _Args...> ; 
# 2630
template< class _Default, template< class ...>  class _Op, class ...
# 2631
_Args> using __detected_or_t = typename __detected_or< _Default, _Op, _Args...> ::type; 
# 2649 "/usr/include/c++/11/type_traits" 3
template< class _Tp> struct __is_swappable; 
# 2652
template< class _Tp> struct __is_nothrow_swappable; 
# 2655
template< class > 
# 2656
struct __is_tuple_like_impl : public false_type { 
# 2657
}; 
# 2659
template< class ..._Tps> 
# 2660
struct __is_tuple_like_impl< tuple< _Tps...> >  : public true_type { 
# 2661
}; 
# 2664
template< class _Tp> 
# 2665
struct __is_tuple_like : public __is_tuple_like_impl< __remove_cvref_t< _Tp> > ::type { 
# 2667
}; 
# 2670
template< class _Tp> inline _Require< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> >  swap(_Tp &, _Tp &) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value); 
# 2680
template< class _Tp, size_t _Nm> inline __enable_if_t< __is_swappable< _Tp> ::value>  swap(_Tp (& __a)[_Nm], _Tp (& __b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value); 
# 2688
namespace __swappable_details { 
# 2689
using std::swap;
# 2691
struct __do_is_swappable_impl { 
# 2693
template< class _Tp, class 
# 2694
 = __decltype((swap(std::declval< _Tp &> (), std::declval< _Tp &> ())))> static true_type 
# 2693
__test(int); 
# 2697
template< class > static false_type __test(...); 
# 2699
}; 
# 2701
struct __do_is_nothrow_swappable_impl { 
# 2703
template< class _Tp> static __bool_constant< noexcept(swap(std::declval< _Tp &> (), std::declval< _Tp &> ()))>  __test(int); 
# 2708
template< class > static false_type __test(...); 
# 2710
}; 
# 2712
}
# 2714
template< class _Tp> 
# 2715
struct __is_swappable_impl : public __swappable_details::__do_is_swappable_impl { 
# 2718
typedef __decltype((__test< _Tp> (0))) type; 
# 2719
}; 
# 2721
template< class _Tp> 
# 2722
struct __is_nothrow_swappable_impl : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2725
typedef __decltype((__test< _Tp> (0))) type; 
# 2726
}; 
# 2728
template< class _Tp> 
# 2729
struct __is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2731
}; 
# 2733
template< class _Tp> 
# 2734
struct __is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2736
}; 
# 2744
template< class _Tp> 
# 2745
struct is_swappable : public __is_swappable_impl< _Tp> ::type { 
# 2748
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 2750
}; 
# 2753
template< class _Tp> 
# 2754
struct is_nothrow_swappable : public __is_nothrow_swappable_impl< _Tp> ::type { 
# 2757
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 2759
}; 
# 2763
template< class _Tp> constexpr bool 
# 2764
is_swappable_v = (is_swappable< _Tp> ::value); 
# 2768
template< class _Tp> constexpr bool 
# 2769
is_nothrow_swappable_v = (is_nothrow_swappable< _Tp> ::value); 
# 2774
namespace __swappable_with_details { 
# 2775
using std::swap;
# 2777
struct __do_is_swappable_with_impl { 
# 2779
template< class _Tp, class _Up, class 
# 2780
 = __decltype((swap(std::declval< _Tp> (), std::declval< _Up> ()))), class 
# 2782
 = __decltype((swap(std::declval< _Up> (), std::declval< _Tp> ())))> static true_type 
# 2779
__test(int); 
# 2785
template< class , class > static false_type __test(...); 
# 2787
}; 
# 2789
struct __do_is_nothrow_swappable_with_impl { 
# 2791
template< class _Tp, class _Up> static __bool_constant< noexcept(swap(std::declval< _Tp> (), std::declval< _Up> ())) && noexcept(swap(std::declval< _Up> (), std::declval< _Tp> ()))>  __test(int); 
# 2798
template< class , class > static false_type __test(...); 
# 2800
}; 
# 2802
}
# 2804
template< class _Tp, class _Up> 
# 2805
struct __is_swappable_with_impl : public __swappable_with_details::__do_is_swappable_with_impl { 
# 2808
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2809
}; 
# 2812
template< class _Tp> 
# 2813
struct __is_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_swappable_impl { 
# 2816
typedef __decltype((__test< _Tp &> (0))) type; 
# 2817
}; 
# 2819
template< class _Tp, class _Up> 
# 2820
struct __is_nothrow_swappable_with_impl : public __swappable_with_details::__do_is_nothrow_swappable_with_impl { 
# 2823
typedef __decltype((__test< _Tp, _Up> (0))) type; 
# 2824
}; 
# 2827
template< class _Tp> 
# 2828
struct __is_nothrow_swappable_with_impl< _Tp &, _Tp &>  : public __swappable_details::__do_is_nothrow_swappable_impl { 
# 2831
typedef __decltype((__test< _Tp &> (0))) type; 
# 2832
}; 
# 2836
template< class _Tp, class _Up> 
# 2837
struct is_swappable_with : public __is_swappable_with_impl< _Tp, _Up> ::type { 
# 2840
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "first template argument must be a complete class or an unbounded array");
# 2842
static_assert((std::__is_complete_or_unbounded(__type_identity< _Up> {})), "second template argument must be a complete class or an unbounded array");
# 2844
}; 
# 2847
template< class _Tp, class _Up> 
# 2848
struct is_nothrow_swappable_with : public __is_nothrow_swappable_with_impl< _Tp, _Up> ::type { 
# 2851
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "first template argument must be a complete class or an unbounded array");
# 2853
static_assert((std::__is_complete_or_unbounded(__type_identity< _Up> {})), "second template argument must be a complete class or an unbounded array");
# 2855
}; 
# 2859
template< class _Tp, class _Up> constexpr bool 
# 2860
is_swappable_with_v = (is_swappable_with< _Tp, _Up> ::value); 
# 2864
template< class _Tp, class _Up> constexpr bool 
# 2865
is_nothrow_swappable_with_v = (is_nothrow_swappable_with< _Tp, _Up> ::value); 
# 2876 "/usr/include/c++/11/type_traits" 3
template< class _Result, class _Ret, bool 
# 2877
 = is_void< _Ret> ::value, class  = void> 
# 2878
struct __is_invocable_impl : public false_type { 
# 2881
using __nothrow_type = false_type; 
# 2882
}; 
# 2885
template< class _Result, class _Ret> 
# 2886
struct __is_invocable_impl< _Result, _Ret, true, __void_t< typename _Result::type> >  : public true_type { 
# 2891
using __nothrow_type = true_type; 
# 2892
}; 
# 2894
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
# 2897
template< class _Result, class _Ret> 
# 2898
struct __is_invocable_impl< _Result, _Ret, false, __void_t< typename _Result::type> >  { 
# 2906
private: static typename _Result::type _S_get() noexcept; 
# 2908
template< class _Tp> static void _S_conv(_Tp) noexcept; 
# 2912
template< class _Tp, bool _Check_Noex = false, class 
# 2913
 = __decltype((_S_conv< _Tp> ((_S_get)()))), bool 
# 2914
_Noex = noexcept(_S_conv< _Tp> ((_S_get)()))> static __bool_constant< _Check_Noex ? _Noex : true>  
# 2912
_S_test(int); 
# 2918
template< class _Tp, bool  = false> static false_type _S_test(...); 
# 2924
public: using type = __decltype((_S_test< _Ret> (1))); 
# 2927
using __nothrow_type = __decltype((_S_test< _Ret, true> (1))); 
# 2928
}; 
#pragma GCC diagnostic pop
# 2931
template< class _Fn, class ..._ArgTypes> 
# 2932
struct __is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 2934
}; 
# 2936
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2937
__call_is_nt(__invoke_memfun_ref) 
# 2938
{ 
# 2939
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2940
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2942
} 
# 2944
template< class _Fn, class _Tp, class ..._Args> constexpr bool 
# 2945
__call_is_nt(__invoke_memfun_deref) 
# 2946
{ 
# 2947
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())(std::declval< _Args> ()...)); 
# 2949
} 
# 2951
template< class _Fn, class _Tp> constexpr bool 
# 2952
__call_is_nt(__invoke_memobj_ref) 
# 2953
{ 
# 2954
using _Up = typename __inv_unwrap< _Tp> ::type; 
# 2955
return noexcept((std::declval< typename __inv_unwrap< _Tp> ::type> ().*std::declval< _Fn> ())); 
# 2956
} 
# 2958
template< class _Fn, class _Tp> constexpr bool 
# 2959
__call_is_nt(__invoke_memobj_deref) 
# 2960
{ 
# 2961
return noexcept(((*std::declval< _Tp> ()).*std::declval< _Fn> ())); 
# 2962
} 
# 2964
template< class _Fn, class ..._Args> constexpr bool 
# 2965
__call_is_nt(__invoke_other) 
# 2966
{ 
# 2967
return noexcept(std::declval< _Fn> ()(std::declval< _Args> ()...)); 
# 2968
} 
# 2970
template< class _Result, class _Fn, class ..._Args> 
# 2971
struct __call_is_nothrow : public __bool_constant< std::__call_is_nt< _Fn, _Args...> (typename _Result::__invoke_type{})>  { 
# 2975
}; 
# 2977
template< class _Fn, class ..._Args> using __call_is_nothrow_ = __call_is_nothrow< __invoke_result< _Fn, _Args...> , _Fn, _Args...> ; 
# 2982
template< class _Fn, class ..._Args> 
# 2983
struct __is_nothrow_invocable : public __and_< __is_invocable< _Fn, _Args...> , __call_is_nothrow_< _Fn, _Args...> > ::type { 
# 2986
}; 
# 2988
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wctor-dtor-privacy"
struct __nonesuchbase { }; 
# 2991
struct __nonesuch : private __nonesuchbase { 
# 2992
~__nonesuch() = delete;
# 2993
__nonesuch(const __nonesuch &) = delete;
# 2994
void operator=(const __nonesuch &) = delete;
# 2995
}; 
#pragma GCC diagnostic pop
# 3003
template< class _Functor, class ..._ArgTypes> 
# 3004
struct invoke_result : public __invoke_result< _Functor, _ArgTypes...>  { 
# 3007
static_assert((std::__is_complete_or_unbounded(__type_identity< _Functor> {})), "_Functor must be a complete class or an unbounded array");
# 3009
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3012
}; 
# 3015
template< class _Fn, class ..._Args> using invoke_result_t = typename invoke_result< _Fn, _Args...> ::type; 
# 3019
template< class _Fn, class ..._ArgTypes> 
# 3020
struct is_invocable : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> ::type { 
# 3023
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3025
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3028
}; 
# 3031
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 3032
struct is_invocable_r : public __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> ::type { 
# 3035
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3037
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3040
static_assert((std::__is_complete_or_unbounded(__type_identity< _Ret> {})), "_Ret must be a complete class or an unbounded array");
# 3042
}; 
# 3045
template< class _Fn, class ..._ArgTypes> 
# 3046
struct is_nothrow_invocable : public __and_< __is_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , void> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 3050
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3052
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3055
}; 
# 3058
template< class _Result, class _Ret> using __is_nt_invocable_impl = typename __is_invocable_impl< _Result, _Ret> ::__nothrow_type; 
# 3064
template< class _Ret, class _Fn, class ..._ArgTypes> 
# 3065
struct is_nothrow_invocable_r : public __and_< __is_nt_invocable_impl< __invoke_result< _Fn, _ArgTypes...> , _Ret> , __call_is_nothrow_< _Fn, _ArgTypes...> > ::type { 
# 3069
static_assert((std::__is_complete_or_unbounded(__type_identity< _Fn> {})), "_Fn must be a complete class or an unbounded array");
# 3071
static_assert(((std::__is_complete_or_unbounded(__type_identity< _ArgTypes> {}) && ... )), "each argument type must be a complete class or an unbounded array");
# 3074
static_assert((std::__is_complete_or_unbounded(__type_identity< _Ret> {})), "_Ret must be a complete class or an unbounded array");
# 3076
}; 
# 3094 "/usr/include/c++/11/type_traits" 3
template< class _Tp> constexpr bool 
# 3095
is_void_v = (is_void< _Tp> ::value); 
# 3096
template< class _Tp> constexpr bool 
# 3097
is_null_pointer_v = (is_null_pointer< _Tp> ::value); 
# 3098
template< class _Tp> constexpr bool 
# 3099
is_integral_v = (is_integral< _Tp> ::value); 
# 3100
template< class _Tp> constexpr bool 
# 3101
is_floating_point_v = (is_floating_point< _Tp> ::value); 
# 3102
template< class _Tp> constexpr bool 
# 3103
is_array_v = (is_array< _Tp> ::value); 
# 3104
template< class _Tp> constexpr bool 
# 3105
is_pointer_v = (is_pointer< _Tp> ::value); 
# 3106
template< class _Tp> constexpr bool 
# 3107
is_lvalue_reference_v = (is_lvalue_reference< _Tp> ::value); 
# 3109
template< class _Tp> constexpr bool 
# 3110
is_rvalue_reference_v = (is_rvalue_reference< _Tp> ::value); 
# 3112
template< class _Tp> constexpr bool 
# 3113
is_member_object_pointer_v = (is_member_object_pointer< _Tp> ::value); 
# 3115
template< class _Tp> constexpr bool 
# 3116
is_member_function_pointer_v = (is_member_function_pointer< _Tp> ::value); 
# 3118
template< class _Tp> constexpr bool 
# 3119
is_enum_v = (is_enum< _Tp> ::value); 
# 3120
template< class _Tp> constexpr bool 
# 3121
is_union_v = (is_union< _Tp> ::value); 
# 3122
template< class _Tp> constexpr bool 
# 3123
is_class_v = (is_class< _Tp> ::value); 
# 3124
template< class _Tp> constexpr bool 
# 3125
is_function_v = (is_function< _Tp> ::value); 
# 3126
template< class _Tp> constexpr bool 
# 3127
is_reference_v = (is_reference< _Tp> ::value); 
# 3128
template< class _Tp> constexpr bool 
# 3129
is_arithmetic_v = (is_arithmetic< _Tp> ::value); 
# 3130
template< class _Tp> constexpr bool 
# 3131
is_fundamental_v = (is_fundamental< _Tp> ::value); 
# 3132
template< class _Tp> constexpr bool 
# 3133
is_object_v = (is_object< _Tp> ::value); 
# 3134
template< class _Tp> constexpr bool 
# 3135
is_scalar_v = (is_scalar< _Tp> ::value); 
# 3136
template< class _Tp> constexpr bool 
# 3137
is_compound_v = (is_compound< _Tp> ::value); 
# 3138
template< class _Tp> constexpr bool 
# 3139
is_member_pointer_v = (is_member_pointer< _Tp> ::value); 
# 3140
template< class _Tp> constexpr bool 
# 3141
is_const_v = (is_const< _Tp> ::value); 
# 3142
template< class _Tp> constexpr bool 
# 3143
is_volatile_v = (is_volatile< _Tp> ::value); 
# 3144
template< class _Tp> constexpr bool 
# 3145
is_trivial_v = (is_trivial< _Tp> ::value); 
# 3146
template< class _Tp> constexpr bool 
# 3147
is_trivially_copyable_v = (is_trivially_copyable< _Tp> ::value); 
# 3149
template< class _Tp> constexpr bool 
# 3150
is_standard_layout_v = (is_standard_layout< _Tp> ::value); 
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
template< class _Tp> constexpr bool 
# 3155
is_pod_v = (is_pod< _Tp> ::value); 
# 3156
template< class _Tp> 
# 3157
[[__deprecated__]] constexpr bool 
# 3158
is_literal_type_v = (is_literal_type< _Tp> ::value); 
#pragma GCC diagnostic pop
template< class _Tp> constexpr bool 
# 3161
is_empty_v = (is_empty< _Tp> ::value); 
# 3162
template< class _Tp> constexpr bool 
# 3163
is_polymorphic_v = (is_polymorphic< _Tp> ::value); 
# 3164
template< class _Tp> constexpr bool 
# 3165
is_abstract_v = (is_abstract< _Tp> ::value); 
# 3166
template< class _Tp> constexpr bool 
# 3167
is_final_v = (is_final< _Tp> ::value); 
# 3168
template< class _Tp> constexpr bool 
# 3169
is_signed_v = (is_signed< _Tp> ::value); 
# 3170
template< class _Tp> constexpr bool 
# 3171
is_unsigned_v = (is_unsigned< _Tp> ::value); 
# 3172
template< class _Tp, class ..._Args> constexpr bool 
# 3173
is_constructible_v = (is_constructible< _Tp, _Args...> ::value); 
# 3175
template< class _Tp> constexpr bool 
# 3176
is_default_constructible_v = (is_default_constructible< _Tp> ::value); 
# 3178
template< class _Tp> constexpr bool 
# 3179
is_copy_constructible_v = (is_copy_constructible< _Tp> ::value); 
# 3181
template< class _Tp> constexpr bool 
# 3182
is_move_constructible_v = (is_move_constructible< _Tp> ::value); 
# 3184
template< class _Tp, class _Up> constexpr bool 
# 3185
is_assignable_v = (is_assignable< _Tp, _Up> ::value); 
# 3186
template< class _Tp> constexpr bool 
# 3187
is_copy_assignable_v = (is_copy_assignable< _Tp> ::value); 
# 3188
template< class _Tp> constexpr bool 
# 3189
is_move_assignable_v = (is_move_assignable< _Tp> ::value); 
# 3190
template< class _Tp> constexpr bool 
# 3191
is_destructible_v = (is_destructible< _Tp> ::value); 
# 3192
template< class _Tp, class ..._Args> constexpr bool 
# 3193
is_trivially_constructible_v = (is_trivially_constructible< _Tp, _Args...> ::value); 
# 3195
template< class _Tp> constexpr bool 
# 3196
is_trivially_default_constructible_v = (is_trivially_default_constructible< _Tp> ::value); 
# 3198
template< class _Tp> constexpr bool 
# 3199
is_trivially_copy_constructible_v = (is_trivially_copy_constructible< _Tp> ::value); 
# 3201
template< class _Tp> constexpr bool 
# 3202
is_trivially_move_constructible_v = (is_trivially_move_constructible< _Tp> ::value); 
# 3204
template< class _Tp, class _Up> constexpr bool 
# 3205
is_trivially_assignable_v = (is_trivially_assignable< _Tp, _Up> ::value); 
# 3207
template< class _Tp> constexpr bool 
# 3208
is_trivially_copy_assignable_v = (is_trivially_copy_assignable< _Tp> ::value); 
# 3210
template< class _Tp> constexpr bool 
# 3211
is_trivially_move_assignable_v = (is_trivially_move_assignable< _Tp> ::value); 
# 3213
template< class _Tp> constexpr bool 
# 3214
is_trivially_destructible_v = (is_trivially_destructible< _Tp> ::value); 
# 3216
template< class _Tp, class ..._Args> constexpr bool 
# 3217
is_nothrow_constructible_v = (is_nothrow_constructible< _Tp, _Args...> ::value); 
# 3219
template< class _Tp> constexpr bool 
# 3220
is_nothrow_default_constructible_v = (is_nothrow_default_constructible< _Tp> ::value); 
# 3222
template< class _Tp> constexpr bool 
# 3223
is_nothrow_copy_constructible_v = (is_nothrow_copy_constructible< _Tp> ::value); 
# 3225
template< class _Tp> constexpr bool 
# 3226
is_nothrow_move_constructible_v = (is_nothrow_move_constructible< _Tp> ::value); 
# 3228
template< class _Tp, class _Up> constexpr bool 
# 3229
is_nothrow_assignable_v = (is_nothrow_assignable< _Tp, _Up> ::value); 
# 3231
template< class _Tp> constexpr bool 
# 3232
is_nothrow_copy_assignable_v = (is_nothrow_copy_assignable< _Tp> ::value); 
# 3234
template< class _Tp> constexpr bool 
# 3235
is_nothrow_move_assignable_v = (is_nothrow_move_assignable< _Tp> ::value); 
# 3237
template< class _Tp> constexpr bool 
# 3238
is_nothrow_destructible_v = (is_nothrow_destructible< _Tp> ::value); 
# 3240
template< class _Tp> constexpr bool 
# 3241
has_virtual_destructor_v = (has_virtual_destructor< _Tp> ::value); 
# 3243
template< class _Tp> constexpr size_t 
# 3244
alignment_of_v = (alignment_of< _Tp> ::value); 
# 3245
template< class _Tp> constexpr size_t 
# 3246
rank_v = (rank< _Tp> ::value); 
# 3247
template< class _Tp, unsigned _Idx = 0U> constexpr size_t 
# 3248
extent_v = (extent< _Tp, _Idx> ::value); 
# 3250
template< class _Tp, class _Up> constexpr bool 
# 3251
is_same_v = __is_same(_Tp, _Up); 
# 3256
template< class _Base, class _Derived> constexpr bool 
# 3257
is_base_of_v = (is_base_of< _Base, _Derived> ::value); 
# 3258
template< class _From, class _To> constexpr bool 
# 3259
is_convertible_v = (is_convertible< _From, _To> ::value); 
# 3260
template< class _Fn, class ..._Args> constexpr bool 
# 3261
is_invocable_v = (is_invocable< _Fn, _Args...> ::value); 
# 3262
template< class _Fn, class ..._Args> constexpr bool 
# 3263
is_nothrow_invocable_v = (is_nothrow_invocable< _Fn, _Args...> ::value); 
# 3265
template< class _Ret, class _Fn, class ..._Args> constexpr bool 
# 3266
is_invocable_r_v = (is_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 3268
template< class _Ret, class _Fn, class ..._Args> constexpr bool 
# 3269
is_nothrow_invocable_r_v = (is_nothrow_invocable_r< _Ret, _Fn, _Args...> ::value); 
# 3276
template< class _Tp> 
# 3277
struct has_unique_object_representations : public bool_constant< __has_unique_object_representations(remove_cv_t< remove_all_extents_t< _Tp> > )>  { 
# 3282
static_assert((std::__is_complete_or_unbounded(__type_identity< _Tp> {})), "template argument must be a complete class or an unbounded array");
# 3284
}; 
# 3287
template< class _Tp> constexpr bool 
# 3288
has_unique_object_representations_v = (has_unique_object_representations< _Tp> ::value); 
# 3295
template< class _Tp> 
# 3296
struct is_aggregate : public bool_constant< __is_aggregate(remove_cv_t< _Tp> )>  { 
# 3298
}; 
# 3301
template< class _Tp> constexpr bool 
# 3302
is_aggregate_v = (is_aggregate< _Tp> ::value); 
# 3599 "/usr/include/c++/11/type_traits" 3
}
# 59 "/usr/include/c++/11/bits/move.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> 
# 75
[[__nodiscard__]] constexpr _Tp &&
# 77
forward(typename remove_reference< _Tp> ::type &__t) noexcept 
# 78
{ return static_cast< _Tp &&>(__t); } 
# 86
template< class _Tp> 
# 87
[[__nodiscard__]] constexpr _Tp &&
# 89
forward(typename remove_reference< _Tp> ::type &&__t) noexcept 
# 90
{ 
# 91
static_assert((!std::template is_lvalue_reference< _Tp> ::value), "std::forward must not be used to convert an rvalue to an lvalue");
# 93
return static_cast< _Tp &&>(__t); 
# 94
} 
# 101
template< class _Tp> 
# 102
[[__nodiscard__]] constexpr typename remove_reference< _Tp> ::type &&
# 104
move(_Tp &&__t) noexcept 
# 105
{ return static_cast< typename remove_reference< _Tp> ::type &&>(__t); } 
# 108
template< class _Tp> 
# 109
struct __move_if_noexcept_cond : public __and_< __not_< is_nothrow_move_constructible< _Tp> > , is_copy_constructible< _Tp> > ::type { 
# 111
}; 
# 121 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> 
# 122
[[__nodiscard__]] constexpr typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp &, _Tp &&> ::type 
# 125
move_if_noexcept(_Tp &__x) noexcept 
# 126
{ return std::move(__x); } 
# 142 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> 
# 143
[[__nodiscard__]] constexpr _Tp *
# 145
addressof(_Tp &__r) noexcept 
# 146
{ return std::__addressof(__r); } 
# 150
template < typename _Tp >
    const _Tp * addressof ( const _Tp && ) = delete;
# 154
template< class _Tp, class _Up = _Tp> inline _Tp 
# 157
__exchange(_Tp &__obj, _Up &&__new_val) 
# 158
{ 
# 159
_Tp __old_val = std::move(__obj); 
# 160
__obj = std::forward< _Up> (__new_val); 
# 161
return __old_val; 
# 162
} 
# 186 "/usr/include/c++/11/bits/move.h" 3
template< class _Tp> inline typename enable_if< __and_< __not_< __is_tuple_like< _Tp> > , is_move_constructible< _Tp> , is_move_assignable< _Tp> > ::value> ::type 
# 196
swap(_Tp &__a, _Tp &__b) noexcept(__and_< is_nothrow_move_constructible< _Tp> , is_nothrow_move_assignable< _Tp> > ::value) 
# 199
{ 
# 204
_Tp __tmp = std::move(__a); 
# 205
__a = std::move(__b); 
# 206
__b = std::move(__tmp); 
# 207
} 
# 212
template< class _Tp, size_t _Nm> inline typename enable_if< __is_swappable< _Tp> ::value> ::type 
# 220
swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm]) noexcept(__is_nothrow_swappable< _Tp> ::value) 
# 222
{ 
# 223
for (size_t __n = (0); __n < _Nm; ++__n) { 
# 224
swap(__a[__n], __b[__n]); }  
# 225
} 
# 229
}
# 69 "/usr/include/c++/11/bits/stl_pair.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80 "/usr/include/c++/11/bits/stl_pair.h" 3
struct piecewise_construct_t { explicit piecewise_construct_t() = default;}; 
# 83
constexpr inline piecewise_construct_t piecewise_construct = piecewise_construct_t(); 
# 89
template< class ...> class tuple; 
# 92
template< size_t ...> struct _Index_tuple; 
# 100
template< bool , class _T1, class _T2> 
# 101
struct _PCC { 
# 103
template< class _U1, class _U2> static constexpr bool 
# 104
_ConstructiblePair() 
# 105
{ 
# 106
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, const _U2 &> > ::value; 
# 108
} 
# 110
template< class _U1, class _U2> static constexpr bool 
# 111
_ImplicitlyConvertiblePair() 
# 112
{ 
# 113
return __and_< is_convertible< const _U1 &, _T1> , is_convertible< const _U2 &, _T2> > ::value; 
# 115
} 
# 117
template< class _U1, class _U2> static constexpr bool 
# 118
_MoveConstructiblePair() 
# 119
{ 
# 120
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, _U2 &&> > ::value; 
# 122
} 
# 124
template< class _U1, class _U2> static constexpr bool 
# 125
_ImplicitlyMoveConvertiblePair() 
# 126
{ 
# 127
return __and_< is_convertible< _U1 &&, _T1> , is_convertible< _U2 &&, _T2> > ::value; 
# 129
} 
# 131
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 132
_CopyMovePair() 
# 133
{ 
# 134
using __do_converts = __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > ; 
# 136
using __converts = typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type; 
# 139
return __and_< is_constructible< _T1, const _U1 &> , is_constructible< _T2, _U2 &&> , typename conditional< __implicit, __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > , __not_< __and_< is_convertible< const _U1 &, _T1> , is_convertible< _U2 &&, _T2> > > > ::type> ::value; 
# 143
} 
# 145
template< bool __implicit, class _U1, class _U2> static constexpr bool 
# 146
_MoveCopyPair() 
# 147
{ 
# 148
using __do_converts = __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > ; 
# 150
using __converts = typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type; 
# 153
return __and_< is_constructible< _T1, _U1 &&> , is_constructible< _T2, const _U2 &&> , typename conditional< __implicit, __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > , __not_< __and_< is_convertible< _U1 &&, _T1> , is_convertible< const _U2 &, _T2> > > > ::type> ::value; 
# 157
} 
# 158
}; 
# 160
template< class _T1, class _T2> 
# 161
struct _PCC< false, _T1, _T2>  { 
# 163
template< class _U1, class _U2> static constexpr bool 
# 164
_ConstructiblePair() 
# 165
{ 
# 166
return false; 
# 167
} 
# 169
template< class _U1, class _U2> static constexpr bool 
# 170
_ImplicitlyConvertiblePair() 
# 171
{ 
# 172
return false; 
# 173
} 
# 175
template< class _U1, class _U2> static constexpr bool 
# 176
_MoveConstructiblePair() 
# 177
{ 
# 178
return false; 
# 179
} 
# 181
template< class _U1, class _U2> static constexpr bool 
# 182
_ImplicitlyMoveConvertiblePair() 
# 183
{ 
# 184
return false; 
# 185
} 
# 186
}; 
# 189
template< class _U1, class _U2> class __pair_base { 
# 192
template< class _T1, class _T2> friend struct pair; 
# 193
__pair_base() = default;
# 194
~__pair_base() = default;
# 195
__pair_base(const __pair_base &) = default;
# 196
__pair_base &operator=(const __pair_base &) = delete;
# 198
}; 
# 210 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> 
# 211
struct pair : private __pair_base< _T1, _T2>  { 
# 214
typedef _T1 first_type; 
# 215
typedef _T2 second_type; 
# 217
_T1 first; 
# 218
_T2 second; 
# 225
template< class _U1 = _T1, class 
# 226
_U2 = _T2, typename enable_if< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > ::value, bool> ::type 
# 230
 = true> constexpr 
# 232
pair() : first(), second() 
# 233
{ } 
# 236
template< class _U1 = _T1, class 
# 237
_U2 = _T2, typename enable_if< __and_< is_default_constructible< _U1> , is_default_constructible< _U2> , __not_< __and_< __is_implicitly_default_constructible< _U1> , __is_implicitly_default_constructible< _U2> > > > ::value, bool> ::type 
# 244
 = false> constexpr explicit 
# 245
pair() : first(), second() 
# 246
{ } 
# 256 "/usr/include/c++/11/bits/stl_pair.h" 3
using _PCCP = _PCC< true, _T1, _T2> ; 
# 260
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 265
 = true> constexpr 
# 266
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 267
{ } 
# 270
template< class _U1 = _T1, class _U2 = _T2, typename enable_if< _PCC< true, _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 275
 = false> constexpr explicit 
# 276
pair(const _T1 &__a, const _T2 &__b) : first(__a), second(__b) 
# 277
{ } 
# 288 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _U1, class _U2> using _PCCFP = _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ; 
# 294
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> (), bool> ::type 
# 299
 = true> constexpr 
# 300
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 301
{ } 
# 303
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyConvertiblePair< _U1, _U2> ()), bool> ::type 
# 308
 = false> constexpr explicit 
# 309
pair(const std::pair< _U1, _U2>  &__p) : first((__p.first)), second((__p.second)) 
# 310
{ } 
# 314
constexpr pair(const pair &) = default;
# 315
constexpr pair(pair &&) = default;
# 318
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< true, _U1, _T2> (), bool> ::type 
# 321
 = true> constexpr 
# 322
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 323
{ } 
# 325
template< class _U1, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveCopyPair< false, _U1, _T2> (), bool> ::type 
# 328
 = false> constexpr explicit 
# 329
pair(_U1 &&__x, const _T2 &__y) : first(std::forward< _U1> (__x)), second(__y) 
# 330
{ } 
# 332
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< true, _T1, _U2> (), bool> ::type 
# 335
 = true> constexpr 
# 336
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 337
{ } 
# 339
template< class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _CopyMovePair< false, _T1, _U2> (), bool> ::type 
# 342
 = false> explicit 
# 343
pair(const _T1 &__x, _U2 &&__y) : first(__x), second(std::forward< _U2> (__y)) 
# 344
{ } 
# 346
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 351
 = true> constexpr 
# 352
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 353
{ } 
# 355
template< class _U1, class _U2, typename enable_if< _PCC< true, _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< true, _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 360
 = false> constexpr explicit 
# 361
pair(_U1 &&__x, _U2 &&__y) : first(std::forward< _U1> (__x)), second(std::forward< _U2> (__y)) 
# 362
{ } 
# 365
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> (), bool> ::type 
# 370
 = true> constexpr 
# 371
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 373
{ } 
# 375
template< class _U1, class _U2, typename enable_if< _PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _MoveConstructiblePair< _U1, _U2> () && (!_PCC< (!is_same< _T1, _U1> ::value) || (!is_same< _T2, _U2> ::value), _T1, _T2> ::template _ImplicitlyMoveConvertiblePair< _U1, _U2> ()), bool> ::type 
# 380
 = false> constexpr explicit 
# 381
pair(std::pair< _U1, _U2>  &&__p) : first(std::forward< _U1> ((__p.first))), second(std::forward< _U2> ((__p.second))) 
# 383
{ } 
# 385
template< class ..._Args1, class ..._Args2> pair(std::piecewise_construct_t, tuple< _Args1...> , tuple< _Args2...> ); 
# 390
pair &operator=(typename conditional< __and_< is_copy_assignable< _T1> , is_copy_assignable< _T2> > ::value, const pair &, const std::__nonesuch &> ::type 
# 393
__p) 
# 394
{ 
# 395
(first) = (__p.first); 
# 396
(second) = (__p.second); 
# 397
return *this; 
# 398
} 
# 401
pair &operator=(typename conditional< __and_< is_move_assignable< _T1> , is_move_assignable< _T2> > ::value, pair &&, std::__nonesuch &&> ::type 
# 404
__p) noexcept(__and_< is_nothrow_move_assignable< _T1> , is_nothrow_move_assignable< _T2> > ::value) 
# 407
{ 
# 408
(first) = std::forward< first_type> ((__p.first)); 
# 409
(second) = std::forward< second_type> ((__p.second)); 
# 410
return *this; 
# 411
} 
# 413
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, const _U1 &> , is_assignable< _T2 &, const _U2 &> > ::value, pair &> ::type 
# 418
operator=(const std::pair< _U1, _U2>  &__p) 
# 419
{ 
# 420
(first) = (__p.first); 
# 421
(second) = (__p.second); 
# 422
return *this; 
# 423
} 
# 425
template< class _U1, class _U2> typename enable_if< __and_< is_assignable< _T1 &, _U1 &&> , is_assignable< _T2 &, _U2 &&> > ::value, pair &> ::type 
# 430
operator=(std::pair< _U1, _U2>  &&__p) 
# 431
{ 
# 432
(first) = std::forward< _U1> ((__p.first)); 
# 433
(second) = std::forward< _U2> ((__p.second)); 
# 434
return *this; 
# 435
} 
# 439
void swap(pair &__p) noexcept(__and_< __is_nothrow_swappable< _T1> , __is_nothrow_swappable< _T2> > ::value) 
# 442
{ 
# 443
using std::swap;
# 444
swap(first, __p.first); 
# 445
swap(second, __p.second); 
# 446
} 
# 449
private: template< class ..._Args1, std::size_t ..._Indexes1, class ...
# 450
_Args2, std::size_t ..._Indexes2> 
# 449
pair(tuple< _Args1...>  &, tuple< _Args2...>  &, _Index_tuple< _Indexes1...> , _Index_tuple< _Indexes2...> ); 
# 455
}; 
# 460
template< class _T1, class _T2> pair(_T1, _T2)->pair< _T1, _T2> ; 
# 464
template< class _T1, class _T2> constexpr bool 
# 466
operator==(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 467
{ return ((__x.first) == (__y.first)) && ((__x.second) == (__y.second)); } 
# 487 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr bool 
# 489
operator<(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 490
{ return ((__x.first) < (__y.first)) || ((!((__y.first) < (__x.first))) && ((__x.second) < (__y.second))); 
# 491
} 
# 494
template< class _T1, class _T2> constexpr bool 
# 496
operator!=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 497
{ return !(__x == __y); } 
# 500
template< class _T1, class _T2> constexpr bool 
# 502
operator>(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 503
{ return __y < __x; } 
# 506
template< class _T1, class _T2> constexpr bool 
# 508
operator<=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 509
{ return !(__y < __x); } 
# 512
template< class _T1, class _T2> constexpr bool 
# 514
operator>=(const pair< _T1, _T2>  &__x, const pair< _T1, _T2>  &__y) 
# 515
{ return !(__x < __y); } 
# 524 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> inline typename enable_if< __and_< __is_swappable< _T1> , __is_swappable< _T2> > ::value> ::type 
# 533
swap(pair< _T1, _T2>  &__x, pair< _T1, _T2>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 535
{ __x.swap(__y); } 
# 538
template < typename _T1, typename _T2 >
    typename enable_if < ! __and_ < __is_swappable < _T1 >,
          __is_swappable < _T2 > > :: value > :: type
    swap ( pair < _T1, _T2 > &, pair < _T1, _T2 > & ) = delete;
# 564 "/usr/include/c++/11/bits/stl_pair.h" 3
template< class _T1, class _T2> constexpr pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  
# 567
make_pair(_T1 &&__x, _T2 &&__y) 
# 568
{ 
# 569
typedef typename __decay_and_strip< _T1> ::__type __ds_type1; 
# 570
typedef typename __decay_and_strip< _T2> ::__type __ds_type2; 
# 571
typedef pair< typename __decay_and_strip< _T1> ::__type, typename __decay_and_strip< _T2> ::__type>  __pair_type; 
# 572
return __pair_type(std::forward< _T1> (__x), std::forward< _T2> (__y)); 
# 573
} 
# 584 "/usr/include/c++/11/bits/stl_pair.h" 3
}
# 74 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 93 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
struct input_iterator_tag { }; 
# 96
struct output_iterator_tag { }; 
# 99
struct forward_iterator_tag : public input_iterator_tag { }; 
# 103
struct bidirectional_iterator_tag : public forward_iterator_tag { }; 
# 107
struct random_access_iterator_tag : public bidirectional_iterator_tag { }; 
# 125 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
template< class _Category, class _Tp, class _Distance = ptrdiff_t, class 
# 126
_Pointer = _Tp *, class _Reference = _Tp &> 
# 127
struct iterator { 
# 130
typedef _Category iterator_category; 
# 132
typedef _Tp value_type; 
# 134
typedef _Distance difference_type; 
# 136
typedef _Pointer pointer; 
# 138
typedef _Reference reference; 
# 139
}; 
# 149 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
template< class _Iterator> struct iterator_traits; 
# 155
template< class _Iterator, class  = __void_t< > > 
# 156
struct __iterator_traits { }; 
# 160
template< class _Iterator> 
# 161
struct __iterator_traits< _Iterator, __void_t< typename _Iterator::iterator_category, typename _Iterator::value_type, typename _Iterator::difference_type, typename _Iterator::pointer, typename _Iterator::reference> >  { 
# 168
typedef typename _Iterator::iterator_category iterator_category; 
# 169
typedef typename _Iterator::value_type value_type; 
# 170
typedef typename _Iterator::difference_type difference_type; 
# 171
typedef typename _Iterator::pointer pointer; 
# 172
typedef typename _Iterator::reference reference; 
# 173
}; 
# 176
template< class _Iterator> 
# 177
struct iterator_traits : public __iterator_traits< _Iterator>  { 
# 178
}; 
# 209 "/usr/include/c++/11/bits/stl_iterator_base_types.h" 3
template< class _Tp> 
# 210
struct iterator_traits< _Tp *>  { 
# 212
typedef random_access_iterator_tag iterator_category; 
# 213
typedef _Tp value_type; 
# 214
typedef ptrdiff_t difference_type; 
# 215
typedef _Tp *pointer; 
# 216
typedef _Tp &reference; 
# 217
}; 
# 220
template< class _Tp> 
# 221
struct iterator_traits< const _Tp *>  { 
# 223
typedef random_access_iterator_tag iterator_category; 
# 224
typedef _Tp value_type; 
# 225
typedef ptrdiff_t difference_type; 
# 226
typedef const _Tp *pointer; 
# 227
typedef const _Tp &reference; 
# 228
}; 
# 235
template< class _Iter> constexpr typename iterator_traits< _Iter> ::iterator_category 
# 238
__iterator_category(const _Iter &) 
# 239
{ return typename iterator_traits< _Iter> ::iterator_category(); } 
# 244
template< class _Iter> using __iterator_category_t = typename iterator_traits< _Iter> ::iterator_category; 
# 248
template< class _InIter> using _RequireInputIter = __enable_if_t< is_convertible< __iterator_category_t< _InIter> , input_iterator_tag> ::value> ; 
# 253
template< class _It, class 
# 254
_Cat = __iterator_category_t< _It> > 
# 255
struct __is_random_access_iter : public is_base_of< random_access_iterator_tag, _Cat>  { 
# 258
typedef is_base_of< std::random_access_iterator_tag, _Cat>  _Base; 
# 259
enum { __value = is_base_of< std::random_access_iterator_tag, _Cat> ::value}; 
# 260
}; 
# 269
}
# 67 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 73
template< class > struct _List_iterator; 
# 74
template< class > struct _List_const_iterator; 
# 77
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 80
__distance(_InputIterator __first, _InputIterator __last, input_iterator_tag) 
# 82
{ 
# 86
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 87
while (__first != __last) 
# 88
{ 
# 89
++__first; 
# 90
++__n; 
# 91
}  
# 92
return __n; 
# 93
} 
# 95
template< class _RandomAccessIterator> constexpr typename iterator_traits< _RandomAccessIterator> ::difference_type 
# 98
__distance(_RandomAccessIterator __first, _RandomAccessIterator __last, random_access_iterator_tag) 
# 100
{ 
# 104
return __last - __first; 
# 105
} 
# 109
template< class _Tp> ptrdiff_t __distance(_List_iterator< _Tp> , _List_iterator< _Tp> , input_iterator_tag); 
# 115
template< class _Tp> ptrdiff_t __distance(_List_const_iterator< _Tp> , _List_const_iterator< _Tp> , input_iterator_tag); 
# 135 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator> constexpr typename iterator_traits< _InputIterator> ::difference_type 
# 138
distance(_InputIterator __first, _InputIterator __last) 
# 139
{ 
# 141
return std::__distance(__first, __last, std::__iterator_category(__first)); 
# 143
} 
# 145
template< class _InputIterator, class _Distance> constexpr void 
# 147
__advance(_InputIterator &__i, _Distance __n, input_iterator_tag) 
# 148
{ 
# 151
do { if (__builtin_is_constant_evaluated() && (!((bool)(__n >= 0)))) { __builtin_unreachable(); }  } while (false); 
# 152
while (__n--) { 
# 153
++__i; }  
# 154
} 
# 156
template< class _BidirectionalIterator, class _Distance> constexpr void 
# 158
__advance(_BidirectionalIterator &__i, _Distance __n, bidirectional_iterator_tag) 
# 160
{ 
# 164
if (__n > 0) { 
# 165
while (__n--) { 
# 166
++__i; }  } else { 
# 168
while (__n++) { 
# 169
--__i; }  }  
# 170
} 
# 172
template< class _RandomAccessIterator, class _Distance> constexpr void 
# 174
__advance(_RandomAccessIterator &__i, _Distance __n, random_access_iterator_tag) 
# 176
{ 
# 180
if (__builtin_constant_p(__n) && (__n == 1)) { 
# 181
++__i; } else { 
# 182
if (__builtin_constant_p(__n) && (__n == (-1))) { 
# 183
--__i; } else { 
# 185
__i += __n; }  }  
# 186
} 
# 200 "/usr/include/c++/11/bits/stl_iterator_base_funcs.h" 3
template< class _InputIterator, class _Distance> constexpr void 
# 202
advance(_InputIterator &__i, _Distance __n) 
# 203
{ 
# 205
typename iterator_traits< _InputIterator> ::difference_type __d = __n; 
# 206
std::__advance(__i, __d, std::__iterator_category(__i)); 
# 207
} 
# 211
template< class _InputIterator> constexpr _InputIterator 
# 213
next(_InputIterator __x, typename iterator_traits< _InputIterator> ::difference_type 
# 214
__n = 1) 
# 215
{ 
# 218
std::advance(__x, __n); 
# 219
return __x; 
# 220
} 
# 222
template< class _BidirectionalIterator> constexpr _BidirectionalIterator 
# 224
prev(_BidirectionalIterator __x, typename iterator_traits< _BidirectionalIterator> ::difference_type 
# 225
__n = 1) 
# 226
{ 
# 230
std::advance(__x, -__n); 
# 231
return __x; 
# 232
} 
# 237
}
# 42 "/usr/include/c++/11/bits/ptr_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 46
class __undefined; 
# 49
template< class _Tp, class _Up> 
# 50
struct __replace_first_arg { 
# 51
}; 
# 53
template< template< class , class ...>  class _Template, class _Up, class 
# 54
_Tp, class ..._Types> 
# 55
struct __replace_first_arg< _Template< _Tp, _Types...> , _Up>  { 
# 56
using type = _Template< _Up, _Types...> ; }; 
# 58
template< class _Tp, class _Up> using __replace_first_arg_t = typename __replace_first_arg< _Tp, _Up> ::type; 
# 61
template< class _Tp> using __make_not_void = typename conditional< is_void< _Tp> ::value, __undefined, _Tp> ::type; 
# 65
template< class _Ptr> 
# 66
struct __ptr_traits_elem_1 { 
# 67
}; 
# 69
template< template< class , class ...>  class _SomePointer, class _Tp, class ...
# 70
_Args> 
# 71
struct __ptr_traits_elem_1< _SomePointer< _Tp, _Args...> >  { 
# 73
using element_type = _Tp; 
# 74
using pointer = _SomePointer< _Tp, _Args...> ; 
# 77
static pointer pointer_to(__make_not_void< element_type>  &__e) 
# 78
{ return pointer::pointer_to(__e); } 
# 79
}; 
# 81
template< class _Ptr, class  = void> 
# 82
struct __ptr_traits_elem : public __ptr_traits_elem_1< _Ptr>  { 
# 83
}; 
# 85
template< class _Ptr> 
# 86
struct __ptr_traits_elem< _Ptr, __void_t< typename _Ptr::element_type> >  { 
# 88
using element_type = typename _Ptr::element_type; 
# 91
static _Ptr pointer_to(__make_not_void< element_type>  &__e) 
# 92
{ return _Ptr::pointer_to(__e); } 
# 93
}; 
# 99
template< class _Ptr> 
# 100
struct pointer_traits : public __ptr_traits_elem< _Ptr>  { 
# 104
private: 
# 103
template< class _Tp> using __difference_type = typename _Tp::difference_type; 
# 106
template< class _Tp, class _Up, class  = void> 
# 107
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 109
template< class _Tp, class _Up> 
# 110
struct __rebind< _Tp, _Up, std::__void_t< typename _Tp::template rebind< _Up> > >  { 
# 111
using type = typename _Tp::template rebind< _Up> ; }; 
# 115
public: using pointer = _Ptr; 
# 118
using difference_type = std::__detected_or_t< std::ptrdiff_t, __difference_type, _Ptr> ; 
# 122
template< class _Up> using rebind = typename __rebind< _Ptr, _Up> ::type; 
# 124
}; 
# 130
template< class _Tp> 
# 131
struct pointer_traits< _Tp *>  { 
# 134
typedef _Tp *pointer; 
# 136
typedef _Tp element_type; 
# 138
typedef ptrdiff_t difference_type; 
# 140
template< class _Up> using rebind = _Up *; 
# 149
static pointer pointer_to(__make_not_void< element_type>  &__r) noexcept 
# 150
{ return std::addressof(__r); } 
# 151
}; 
# 154
template< class _Ptr, class _Tp> using __ptr_rebind = typename pointer_traits< _Ptr> ::template rebind< _Tp> ; 
# 157
template< class _Tp> constexpr _Tp *
# 159
__to_address(_Tp *__ptr) noexcept 
# 160
{ 
# 161
static_assert((!std::template is_function< _Tp> ::value), "not a function pointer");
# 162
return __ptr; 
# 163
} 
# 166
template< class _Ptr> constexpr typename pointer_traits< _Ptr> ::element_type *
# 168
__to_address(const _Ptr &__ptr) 
# 169
{ return std::__to_address(__ptr.operator->()); } 
# 215 "/usr/include/c++/11/bits/ptr_traits.h" 3
}
# 88 "/usr/include/c++/11/bits/stl_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 127 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> 
# 128
class reverse_iterator : public iterator< typename iterator_traits< _Iterator> ::iterator_category, typename iterator_traits< _Iterator> ::value_type, typename iterator_traits< _Iterator> ::difference_type, typename iterator_traits< _Iterator> ::pointer, typename iterator_traits< _Iterator> ::reference>  { 
# 135
template< class _Iter> friend class reverse_iterator; 
# 147 "/usr/include/c++/11/bits/stl_iterator.h" 3
protected: _Iterator current; 
# 149
typedef iterator_traits< _Iterator>  __traits_type; 
# 152
public: typedef _Iterator iterator_type; 
# 153
typedef typename iterator_traits< _Iterator> ::pointer pointer; 
# 155
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 156
typedef typename iterator_traits< _Iterator> ::reference reference; 
# 178 "/usr/include/c++/11/bits/stl_iterator.h" 3
constexpr reverse_iterator() : current() { } 
# 184
constexpr explicit reverse_iterator(iterator_type __x) : current(__x) { } 
# 190
constexpr reverse_iterator(const reverse_iterator &__x) : current(__x.current) 
# 191
{ } 
# 194
reverse_iterator &operator=(const reverse_iterator &) = default;
# 201
template< class _Iter> constexpr 
# 206
reverse_iterator(const reverse_iterator< _Iter>  &__x) : current((__x.current)) 
# 207
{ } 
# 210
template< class _Iter> constexpr reverse_iterator &
# 217
operator=(const reverse_iterator< _Iter>  &__x) 
# 218
{ 
# 219
(current) = (__x.current); 
# 220
return *this; 
# 221
} 
# 228
constexpr iterator_type base() const 
# 229
{ return current; } 
# 242 "/usr/include/c++/11/bits/stl_iterator.h" 3
constexpr reference operator*() const 
# 243
{ 
# 244
_Iterator __tmp = current; 
# 245
return *(--__tmp); 
# 246
} 
# 254
constexpr pointer operator->() const 
# 259
{ 
# 262
_Iterator __tmp = current; 
# 263
--__tmp; 
# 264
return _S_to_pointer(__tmp); 
# 265
} 
# 273
constexpr reverse_iterator &operator++() 
# 274
{ 
# 275
--(current); 
# 276
return *this; 
# 277
} 
# 285
constexpr reverse_iterator operator++(int) 
# 286
{ 
# 287
reverse_iterator __tmp = *this; 
# 288
--(current); 
# 289
return __tmp; 
# 290
} 
# 298
constexpr reverse_iterator &operator--() 
# 299
{ 
# 300
++(current); 
# 301
return *this; 
# 302
} 
# 310
constexpr reverse_iterator operator--(int) 
# 311
{ 
# 312
reverse_iterator __tmp = *this; 
# 313
++(current); 
# 314
return __tmp; 
# 315
} 
# 323
constexpr reverse_iterator operator+(difference_type __n) const 
# 324
{ return ((reverse_iterator)((current) - __n)); } 
# 333
constexpr reverse_iterator &operator+=(difference_type __n) 
# 334
{ 
# 335
(current) -= __n; 
# 336
return *this; 
# 337
} 
# 345
constexpr reverse_iterator operator-(difference_type __n) const 
# 346
{ return ((reverse_iterator)((current) + __n)); } 
# 355
constexpr reverse_iterator &operator-=(difference_type __n) 
# 356
{ 
# 357
(current) += __n; 
# 358
return *this; 
# 359
} 
# 367
constexpr reference operator[](difference_type __n) const 
# 368
{ return *((*this) + __n); } 
# 398 "/usr/include/c++/11/bits/stl_iterator.h" 3
private: 
# 396
template< class _Tp> static constexpr _Tp *
# 398
_S_to_pointer(_Tp *__p) 
# 399
{ return __p; } 
# 401
template< class _Tp> static constexpr pointer 
# 403
_S_to_pointer(_Tp __t) 
# 404
{ return __t.operator->(); } 
# 405
}; 
# 418 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> constexpr bool 
# 420
operator==(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 421
__y) 
# 422
{ return __x.base() == __y.base(); } 
# 424
template< class _Iterator> constexpr bool 
# 426
operator<(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 427
__y) 
# 428
{ return __y.base() < __x.base(); } 
# 430
template< class _Iterator> constexpr bool 
# 432
operator!=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 433
__y) 
# 434
{ return !(__x == __y); } 
# 436
template< class _Iterator> constexpr bool 
# 438
operator>(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 439
__y) 
# 440
{ return __y < __x; } 
# 442
template< class _Iterator> constexpr bool 
# 444
operator<=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 445
__y) 
# 446
{ return !(__y < __x); } 
# 448
template< class _Iterator> constexpr bool 
# 450
operator>=(const reverse_iterator< _Iterator>  &__x, const reverse_iterator< _Iterator>  &
# 451
__y) 
# 452
{ return !(__x < __y); } 
# 457
template< class _IteratorL, class _IteratorR> constexpr bool 
# 459
operator==(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 460
__y) 
# 461
{ return __x.base() == __y.base(); } 
# 463
template< class _IteratorL, class _IteratorR> constexpr bool 
# 465
operator<(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 466
__y) 
# 467
{ return __x.base() > __y.base(); } 
# 469
template< class _IteratorL, class _IteratorR> constexpr bool 
# 471
operator!=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 472
__y) 
# 473
{ return __x.base() != __y.base(); } 
# 475
template< class _IteratorL, class _IteratorR> constexpr bool 
# 477
operator>(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 478
__y) 
# 479
{ return __x.base() < __y.base(); } 
# 481
template< class _IteratorL, class _IteratorR> constexpr bool 
# 483
operator<=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 484
__y) 
# 485
{ return __x.base() >= __y.base(); } 
# 487
template< class _IteratorL, class _IteratorR> constexpr bool 
# 489
operator>=(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 490
__y) 
# 491
{ return __x.base() <= __y.base(); } 
# 575 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> constexpr auto 
# 577
operator-(const reverse_iterator< _IteratorL>  &__x, const reverse_iterator< _IteratorR>  &
# 578
__y)->__decltype((__y.base() - __x.base())) 
# 580
{ return __y.base() - __x.base(); } 
# 583
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 585
operator+(typename reverse_iterator< _Iterator> ::difference_type __n, const reverse_iterator< _Iterator>  &
# 586
__x) 
# 587
{ return ((reverse_iterator< _Iterator> )(__x.base() - __n)); } 
# 591
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 593
__make_reverse_iterator(_Iterator __i) 
# 594
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 602
template< class _Iterator> constexpr reverse_iterator< _Iterator>  
# 604
make_reverse_iterator(_Iterator __i) 
# 605
{ return ((reverse_iterator< _Iterator> )(__i)); } 
# 616 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> auto 
# 619
__niter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__niter_base(__it.base())))) 
# 621
{ return __make_reverse_iterator(__niter_base(__it.base())); } 
# 623
template< class _Iterator> 
# 624
struct __is_move_iterator< reverse_iterator< _Iterator> >  : public std::__is_move_iterator< _Iterator>  { 
# 626
}; 
# 628
template< class _Iterator> auto 
# 631
__miter_base(reverse_iterator< _Iterator>  __it)->__decltype((__make_reverse_iterator(__miter_base(__it.base())))) 
# 633
{ return __make_reverse_iterator(__miter_base(__it.base())); } 
# 647 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> 
# 648
class back_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 652
protected: _Container *container; 
# 656
public: typedef _Container container_type; 
# 665
explicit back_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 666
{ } 
# 689 "/usr/include/c++/11/bits/stl_iterator.h" 3
back_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 690
{ 
# 691
(container)->push_back(__value); 
# 692
return *this; 
# 693
} 
# 697
back_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 698
{ 
# 699
(container)->push_back(std::move(__value)); 
# 700
return *this; 
# 701
} 
# 707
back_insert_iterator &operator*() 
# 708
{ return *this; } 
# 713
back_insert_iterator &operator++() 
# 714
{ return *this; } 
# 719
back_insert_iterator operator++(int) 
# 720
{ return *this; } 
# 721
}; 
# 734 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> inline back_insert_iterator< _Container>  
# 737
back_inserter(_Container &__x) 
# 738
{ return ((back_insert_iterator< _Container> )(__x)); } 
# 750 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> 
# 751
class front_insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 755
protected: _Container *container; 
# 759
public: typedef _Container container_type; 
# 768
explicit front_insert_iterator(_Container &__x) : container(std::__addressof(__x)) 
# 769
{ } 
# 792 "/usr/include/c++/11/bits/stl_iterator.h" 3
front_insert_iterator &operator=(const typename _Container::value_type &__value) 
# 793
{ 
# 794
(container)->push_front(__value); 
# 795
return *this; 
# 796
} 
# 800
front_insert_iterator &operator=(typename _Container::value_type &&__value) 
# 801
{ 
# 802
(container)->push_front(std::move(__value)); 
# 803
return *this; 
# 804
} 
# 810
front_insert_iterator &operator*() 
# 811
{ return *this; } 
# 816
front_insert_iterator &operator++() 
# 817
{ return *this; } 
# 822
front_insert_iterator operator++(int) 
# 823
{ return *this; } 
# 824
}; 
# 837 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> inline front_insert_iterator< _Container>  
# 840
front_inserter(_Container &__x) 
# 841
{ return ((front_insert_iterator< _Container> )(__x)); } 
# 857 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> 
# 858
class insert_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 868
typedef typename _Container::iterator _Iter; 
# 871
protected: _Container *container; 
# 872
_Iter iter; 
# 877
public: typedef _Container container_type; 
# 890 "/usr/include/c++/11/bits/stl_iterator.h" 3
insert_iterator(_Container &__x, _Iter __i) : container(std::__addressof(__x)), iter(__i) 
# 891
{ } 
# 927 "/usr/include/c++/11/bits/stl_iterator.h" 3
insert_iterator &operator=(const typename _Container::value_type &__value) 
# 928
{ 
# 929
(iter) = (container)->insert(iter, __value); 
# 930
++(iter); 
# 931
return *this; 
# 932
} 
# 936
insert_iterator &operator=(typename _Container::value_type &&__value) 
# 937
{ 
# 938
(iter) = (container)->insert(iter, std::move(__value)); 
# 939
++(iter); 
# 940
return *this; 
# 941
} 
# 947
insert_iterator &operator*() 
# 948
{ return *this; } 
# 953
insert_iterator &operator++() 
# 954
{ return *this; } 
# 959
insert_iterator &operator++(int) 
# 960
{ return *this; } 
# 961
}; 
# 981 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Container> inline insert_iterator< _Container>  
# 983
inserter(_Container &__x, typename _Container::iterator __i) 
# 984
{ return insert_iterator< _Container> (__x, __i); } 
# 990
}
# 992
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 1003 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator, class _Container> 
# 1004
class __normal_iterator { 
# 1007
protected: _Iterator _M_current; 
# 1009
typedef std::iterator_traits< _Iterator>  __traits_type; 
# 1012
public: typedef _Iterator iterator_type; 
# 1013
typedef typename std::iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1014
typedef typename std::iterator_traits< _Iterator> ::value_type value_type; 
# 1015
typedef typename std::iterator_traits< _Iterator> ::difference_type difference_type; 
# 1016
typedef typename std::iterator_traits< _Iterator> ::reference reference; 
# 1017
typedef typename std::iterator_traits< _Iterator> ::pointer pointer; 
# 1023
constexpr __normal_iterator() noexcept : _M_current(_Iterator()) 
# 1024
{ } 
# 1027
explicit __normal_iterator(const _Iterator &__i) noexcept : _M_current(__i) 
# 1028
{ } 
# 1031
template< class _Iter> 
# 1033
__normal_iterator(const __normal_iterator< _Iter, typename __enable_if< std::__are_same< _Iter, typename _Container::pointer> ::__value, _Container> ::__type>  &
# 1036
__i) noexcept : _M_current(__i.base()) 
# 1037
{ } 
# 1042
reference operator*() const noexcept 
# 1043
{ return *(_M_current); } 
# 1047
pointer operator->() const noexcept 
# 1048
{ return _M_current; } 
# 1052
__normal_iterator &operator++() noexcept 
# 1053
{ 
# 1054
++(_M_current); 
# 1055
return *this; 
# 1056
} 
# 1060
__normal_iterator operator++(int) noexcept 
# 1061
{ return ((__normal_iterator)((_M_current)++)); } 
# 1066
__normal_iterator &operator--() noexcept 
# 1067
{ 
# 1068
--(_M_current); 
# 1069
return *this; 
# 1070
} 
# 1074
__normal_iterator operator--(int) noexcept 
# 1075
{ return ((__normal_iterator)((_M_current)--)); } 
# 1080
reference operator[](difference_type __n) const noexcept 
# 1081
{ return (_M_current)[__n]; } 
# 1085
__normal_iterator &operator+=(difference_type __n) noexcept 
# 1086
{ (_M_current) += __n; return *this; } 
# 1090
__normal_iterator operator+(difference_type __n) const noexcept 
# 1091
{ return ((__normal_iterator)((_M_current) + __n)); } 
# 1095
__normal_iterator &operator-=(difference_type __n) noexcept 
# 1096
{ (_M_current) -= __n; return *this; } 
# 1100
__normal_iterator operator-(difference_type __n) const noexcept 
# 1101
{ return ((__normal_iterator)((_M_current) - __n)); } 
# 1105
const _Iterator &base() const noexcept 
# 1106
{ return _M_current; } 
# 1107
}; 
# 1152 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1155
operator==(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1156
__rhs) noexcept 
# 1158
{ return __lhs.base() == __rhs.base(); } 
# 1160
template< class _Iterator, class _Container> inline bool 
# 1163
operator==(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1164
__rhs) noexcept 
# 1166
{ return __lhs.base() == __rhs.base(); } 
# 1168
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1171
operator!=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1172
__rhs) noexcept 
# 1174
{ return __lhs.base() != __rhs.base(); } 
# 1176
template< class _Iterator, class _Container> inline bool 
# 1179
operator!=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1180
__rhs) noexcept 
# 1182
{ return __lhs.base() != __rhs.base(); } 
# 1185
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1187
operator<(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1188
__rhs) noexcept 
# 1190
{ return __lhs.base() < __rhs.base(); } 
# 1192
template< class _Iterator, class _Container> inline bool 
# 1195
operator<(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1196
__rhs) noexcept 
# 1198
{ return __lhs.base() < __rhs.base(); } 
# 1200
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1202
operator>(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1203
__rhs) noexcept 
# 1205
{ return __lhs.base() > __rhs.base(); } 
# 1207
template< class _Iterator, class _Container> inline bool 
# 1210
operator>(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1211
__rhs) noexcept 
# 1213
{ return __lhs.base() > __rhs.base(); } 
# 1215
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1217
operator<=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1218
__rhs) noexcept 
# 1220
{ return __lhs.base() <= __rhs.base(); } 
# 1222
template< class _Iterator, class _Container> inline bool 
# 1225
operator<=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1226
__rhs) noexcept 
# 1228
{ return __lhs.base() <= __rhs.base(); } 
# 1230
template< class _IteratorL, class _IteratorR, class _Container> inline bool 
# 1232
operator>=(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1233
__rhs) noexcept 
# 1235
{ return __lhs.base() >= __rhs.base(); } 
# 1237
template< class _Iterator, class _Container> inline bool 
# 1240
operator>=(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1241
__rhs) noexcept 
# 1243
{ return __lhs.base() >= __rhs.base(); } 
# 1250
template< class _IteratorL, class _IteratorR, class _Container> inline auto 
# 1255
operator-(const __normal_iterator< _IteratorL, _Container>  &__lhs, const __normal_iterator< _IteratorR, _Container>  &
# 1256
__rhs) noexcept->__decltype((__lhs.base() - __rhs.base())) 
# 1263
{ return __lhs.base() - __rhs.base(); } 
# 1265
template< class _Iterator, class _Container> inline typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 1268
operator-(const __normal_iterator< _Iterator, _Container>  &__lhs, const __normal_iterator< _Iterator, _Container>  &
# 1269
__rhs) noexcept 
# 1271
{ return __lhs.base() - __rhs.base(); } 
# 1273
template< class _Iterator, class _Container> inline __normal_iterator< _Iterator, _Container>  
# 1276
operator+(typename __normal_iterator< _Iterator, _Container> ::difference_type 
# 1277
__n, const __normal_iterator< _Iterator, _Container>  &__i) noexcept 
# 1279
{ return ((__normal_iterator< _Iterator, _Container> )(__i.base() + __n)); } 
# 1282
}
# 1284
namespace std __attribute((__visibility__("default"))) { 
# 1288
template< class _Iterator, class _Container> _Iterator 
# 1291
__niter_base(__gnu_cxx::__normal_iterator< _Iterator, _Container>  __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 1293
{ return __it.base(); } 
# 1342 "/usr/include/c++/11/bits/stl_iterator.h" 3
namespace __detail { 
# 1358 "/usr/include/c++/11/bits/stl_iterator.h" 3
}
# 1369 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> 
# 1370
class move_iterator { 
# 1375
_Iterator _M_current; 
# 1377
using __traits_type = iterator_traits< _Iterator> ; 
# 1379
using __base_ref = typename iterator_traits< _Iterator> ::reference; 
# 1382
template< class _Iter2> friend class move_iterator; 
# 1409 "/usr/include/c++/11/bits/stl_iterator.h" 3
public: using iterator_type = _Iterator; 
# 1422 "/usr/include/c++/11/bits/stl_iterator.h" 3
typedef typename iterator_traits< _Iterator> ::iterator_category iterator_category; 
# 1423
typedef typename iterator_traits< _Iterator> ::value_type value_type; 
# 1424
typedef typename iterator_traits< _Iterator> ::difference_type difference_type; 
# 1426
typedef _Iterator pointer; 
# 1431
typedef typename conditional< is_reference< __base_ref> ::value, typename remove_reference< __base_ref> ::type &&, __base_ref> ::type reference; 
# 1435
constexpr move_iterator() : _M_current() 
# 1436
{ } 
# 1439
constexpr explicit move_iterator(iterator_type __i) : _M_current(std::move(__i)) 
# 1440
{ } 
# 1442
template< class _Iter> constexpr 
# 1447
move_iterator(const move_iterator< _Iter>  &__i) : _M_current((__i._M_current)) 
# 1448
{ } 
# 1450
template< class _Iter> constexpr move_iterator &
# 1456
operator=(const move_iterator< _Iter>  &__i) 
# 1457
{ 
# 1458
(_M_current) = (__i._M_current); 
# 1459
return *this; 
# 1460
} 
# 1464
constexpr iterator_type base() const 
# 1465
{ return _M_current; } 
# 1477 "/usr/include/c++/11/bits/stl_iterator.h" 3
constexpr reference operator*() const 
# 1481
{ return static_cast< reference>(*(_M_current)); } 
# 1485
constexpr pointer operator->() const 
# 1486
{ return _M_current; } 
# 1489
constexpr move_iterator &operator++() 
# 1490
{ 
# 1491
++(_M_current); 
# 1492
return *this; 
# 1493
} 
# 1496
constexpr move_iterator operator++(int) 
# 1497
{ 
# 1498
move_iterator __tmp = *this; 
# 1499
++(_M_current); 
# 1500
return __tmp; 
# 1501
} 
# 1510
constexpr move_iterator &operator--() 
# 1511
{ 
# 1512
--(_M_current); 
# 1513
return *this; 
# 1514
} 
# 1517
constexpr move_iterator operator--(int) 
# 1518
{ 
# 1519
move_iterator __tmp = *this; 
# 1520
--(_M_current); 
# 1521
return __tmp; 
# 1522
} 
# 1525
constexpr move_iterator operator+(difference_type __n) const 
# 1526
{ return ((move_iterator)((_M_current) + __n)); } 
# 1529
constexpr move_iterator &operator+=(difference_type __n) 
# 1530
{ 
# 1531
(_M_current) += __n; 
# 1532
return *this; 
# 1533
} 
# 1536
constexpr move_iterator operator-(difference_type __n) const 
# 1537
{ return ((move_iterator)((_M_current) - __n)); } 
# 1540
constexpr move_iterator &operator-=(difference_type __n) 
# 1541
{ 
# 1542
(_M_current) -= __n; 
# 1543
return *this; 
# 1544
} 
# 1547
constexpr reference operator[](difference_type __n) const 
# 1551
{ return std::move((_M_current)[__n]); } 
# 1581 "/usr/include/c++/11/bits/stl_iterator.h" 3
}; 
# 1583
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1585
operator==(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1586
__y) 
# 1590
{ return __x.base() == __y.base(); } 
# 1600 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1602
operator!=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1603
__y) 
# 1604
{ return !(__x == __y); } 
# 1607
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1609
operator<(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1610
__y) 
# 1614
{ return __x.base() < __y.base(); } 
# 1616
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1618
operator<=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1619
__y) 
# 1623
{ return !(__y < __x); } 
# 1625
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1627
operator>(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1628
__y) 
# 1632
{ return __y < __x; } 
# 1634
template< class _IteratorL, class _IteratorR> constexpr bool 
# 1636
operator>=(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1637
__y) 
# 1641
{ return !(__x < __y); } 
# 1646
template< class _Iterator> constexpr bool 
# 1648
operator==(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1649
__y) 
# 1650
{ return __x.base() == __y.base(); } 
# 1659 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> constexpr bool 
# 1661
operator!=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1662
__y) 
# 1663
{ return !(__x == __y); } 
# 1665
template< class _Iterator> constexpr bool 
# 1667
operator<(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1668
__y) 
# 1669
{ return __x.base() < __y.base(); } 
# 1671
template< class _Iterator> constexpr bool 
# 1673
operator<=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1674
__y) 
# 1675
{ return !(__y < __x); } 
# 1677
template< class _Iterator> constexpr bool 
# 1679
operator>(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1680
__y) 
# 1681
{ return __y < __x; } 
# 1683
template< class _Iterator> constexpr bool 
# 1685
operator>=(const move_iterator< _Iterator>  &__x, const move_iterator< _Iterator>  &
# 1686
__y) 
# 1687
{ return !(__x < __y); } 
# 1691
template< class _IteratorL, class _IteratorR> constexpr auto 
# 1693
operator-(const move_iterator< _IteratorL>  &__x, const move_iterator< _IteratorR>  &
# 1694
__y)->__decltype((__x.base() - __y.base())) 
# 1696
{ return __x.base() - __y.base(); } 
# 1698
template< class _Iterator> constexpr move_iterator< _Iterator>  
# 1700
operator+(typename move_iterator< _Iterator> ::difference_type __n, const move_iterator< _Iterator>  &
# 1701
__x) 
# 1702
{ return __x + __n; } 
# 1704
template< class _Iterator> constexpr move_iterator< _Iterator>  
# 1706
make_move_iterator(_Iterator __i) 
# 1707
{ return ((move_iterator< _Iterator> )(std::move(__i))); } 
# 1709
template< class _Iterator, class _ReturnType = typename conditional< __move_if_noexcept_cond< typename iterator_traits< _Iterator> ::value_type> ::value, _Iterator, move_iterator< _Iterator> > ::type> constexpr _ReturnType 
# 1714
__make_move_if_noexcept_iterator(_Iterator __i) 
# 1715
{ return (_ReturnType)__i; } 
# 1719
template< class _Tp, class _ReturnType = typename conditional< __move_if_noexcept_cond< _Tp> ::value, const _Tp *, move_iterator< _Tp *> > ::type> constexpr _ReturnType 
# 1723
__make_move_if_noexcept_iterator(_Tp *__i) 
# 1724
{ return (_ReturnType)__i; } 
# 2447 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _Iterator> auto 
# 2450
__niter_base(move_iterator< _Iterator>  __it)->__decltype((make_move_iterator(__niter_base(__it.base())))) 
# 2452
{ return make_move_iterator(__niter_base(__it.base())); } 
# 2454
template< class _Iterator> 
# 2455
struct __is_move_iterator< move_iterator< _Iterator> >  { 
# 2457
enum { __value = 1}; 
# 2458
typedef __true_type __type; 
# 2459
}; 
# 2461
template< class _Iterator> auto 
# 2464
__miter_base(move_iterator< _Iterator>  __it)->__decltype((__miter_base(__it.base()))) 
# 2466
{ return __miter_base(__it.base()); } 
# 2479 "/usr/include/c++/11/bits/stl_iterator.h" 3
template< class _InputIterator> using __iter_key_t = remove_const_t< typename iterator_traits< _InputIterator> ::value_type::first_type> ; 
# 2483
template< class _InputIterator> using __iter_val_t = typename iterator_traits< _InputIterator> ::value_type::second_type; 
# 2487
template< class _T1, class _T2> struct pair; 
# 2490
template< class _InputIterator> using __iter_to_alloc_t = pair< add_const_t< __iter_key_t< _InputIterator> > , __iter_val_t< _InputIterator> > ; 
# 2497
}
# 48 "/usr/include/c++/11/debug/debug.h" 3
namespace std { 
# 50
namespace __debug { }
# 51
}
# 56
namespace __gnu_debug { 
# 58
using namespace std::__debug;
# 60
template< class _Ite, class _Seq, class _Cat> struct _Safe_iterator; 
# 62
}
# 35 "/usr/include/c++/11/bits/predefined_ops.h" 3
namespace __gnu_cxx { 
# 37
namespace __ops { 
# 39
struct _Iter_less_iter { 
# 41
template< class _Iterator1, class _Iterator2> constexpr bool 
# 44
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 45
{ return (*__it1) < (*__it2); } 
# 46
}; 
# 50
constexpr _Iter_less_iter __iter_less_iter() 
# 51
{ return _Iter_less_iter(); } 
# 53
struct _Iter_less_val { 
# 56
constexpr _Iter_less_val() = default;
# 63
explicit _Iter_less_val(_Iter_less_iter) { } 
# 65
template< class _Iterator, class _Value> bool 
# 68
operator()(_Iterator __it, _Value &__val) const 
# 69
{ return (*__it) < __val; } 
# 70
}; 
# 74
inline _Iter_less_val __iter_less_val() 
# 75
{ return _Iter_less_val(); } 
# 79
inline _Iter_less_val __iter_comp_val(_Iter_less_iter) 
# 80
{ return _Iter_less_val(); } 
# 82
struct _Val_less_iter { 
# 85
constexpr _Val_less_iter() = default;
# 92
explicit _Val_less_iter(_Iter_less_iter) { } 
# 94
template< class _Value, class _Iterator> bool 
# 97
operator()(_Value &__val, _Iterator __it) const 
# 98
{ return __val < (*__it); } 
# 99
}; 
# 103
inline _Val_less_iter __val_less_iter() 
# 104
{ return _Val_less_iter(); } 
# 108
inline _Val_less_iter __val_comp_iter(_Iter_less_iter) 
# 109
{ return _Val_less_iter(); } 
# 111
struct _Iter_equal_to_iter { 
# 113
template< class _Iterator1, class _Iterator2> bool 
# 116
operator()(_Iterator1 __it1, _Iterator2 __it2) const 
# 117
{ return (*__it1) == (*__it2); } 
# 118
}; 
# 122
inline _Iter_equal_to_iter __iter_equal_to_iter() 
# 123
{ return _Iter_equal_to_iter(); } 
# 125
struct _Iter_equal_to_val { 
# 127
template< class _Iterator, class _Value> bool 
# 130
operator()(_Iterator __it, _Value &__val) const 
# 131
{ return (*__it) == __val; } 
# 132
}; 
# 136
inline _Iter_equal_to_val __iter_equal_to_val() 
# 137
{ return _Iter_equal_to_val(); } 
# 141
inline _Iter_equal_to_val __iter_comp_val(_Iter_equal_to_iter) 
# 142
{ return _Iter_equal_to_val(); } 
# 144
template< class _Compare> 
# 145
struct _Iter_comp_iter { 
# 147
_Compare _M_comp; 
# 150
constexpr explicit _Iter_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 152
{ } 
# 154
template< class _Iterator1, class _Iterator2> constexpr bool 
# 157
operator()(_Iterator1 __it1, _Iterator2 __it2) 
# 158
{ return (bool)(_M_comp)(*__it1, *__it2); } 
# 159
}; 
# 161
template< class _Compare> constexpr _Iter_comp_iter< _Compare>  
# 164
__iter_comp_iter(_Compare __comp) 
# 165
{ return ((_Iter_comp_iter< _Compare> )(std::move(__comp))); } 
# 167
template< class _Compare> 
# 168
struct _Iter_comp_val { 
# 170
_Compare _M_comp; 
# 174
explicit _Iter_comp_val(_Compare __comp) : _M_comp(std::move(__comp)) 
# 176
{ } 
# 180
explicit _Iter_comp_val(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 182
{ } 
# 187
explicit _Iter_comp_val(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 189
{ } 
# 192
template< class _Iterator, class _Value> bool 
# 195
operator()(_Iterator __it, _Value &__val) 
# 196
{ return (bool)(_M_comp)(*__it, __val); } 
# 197
}; 
# 199
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 202
__iter_comp_val(_Compare __comp) 
# 203
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 205
template< class _Compare> inline _Iter_comp_val< _Compare>  
# 208
__iter_comp_val(_Iter_comp_iter< _Compare>  __comp) 
# 209
{ return ((_Iter_comp_val< _Compare> )(std::move(__comp))); } 
# 211
template< class _Compare> 
# 212
struct _Val_comp_iter { 
# 214
_Compare _M_comp; 
# 218
explicit _Val_comp_iter(_Compare __comp) : _M_comp(std::move(__comp)) 
# 220
{ } 
# 224
explicit _Val_comp_iter(const _Iter_comp_iter< _Compare>  &__comp) : _M_comp((__comp._M_comp)) 
# 226
{ } 
# 231
explicit _Val_comp_iter(_Iter_comp_iter< _Compare>  &&__comp) : _M_comp(std::move((__comp._M_comp))) 
# 233
{ } 
# 236
template< class _Value, class _Iterator> bool 
# 239
operator()(_Value &__val, _Iterator __it) 
# 240
{ return (bool)(_M_comp)(__val, *__it); } 
# 241
}; 
# 243
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 246
__val_comp_iter(_Compare __comp) 
# 247
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 249
template< class _Compare> inline _Val_comp_iter< _Compare>  
# 252
__val_comp_iter(_Iter_comp_iter< _Compare>  __comp) 
# 253
{ return ((_Val_comp_iter< _Compare> )(std::move(__comp))); } 
# 255
template< class _Value> 
# 256
struct _Iter_equals_val { 
# 258
_Value &_M_value; 
# 262
explicit _Iter_equals_val(_Value &__value) : _M_value(__value) 
# 264
{ } 
# 266
template< class _Iterator> bool 
# 269
operator()(_Iterator __it) 
# 270
{ return (*__it) == (_M_value); } 
# 271
}; 
# 273
template< class _Value> inline _Iter_equals_val< _Value>  
# 276
__iter_equals_val(_Value &__val) 
# 277
{ return ((_Iter_equals_val< _Value> )(__val)); } 
# 279
template< class _Iterator1> 
# 280
struct _Iter_equals_iter { 
# 282
_Iterator1 _M_it1; 
# 286
explicit _Iter_equals_iter(_Iterator1 __it1) : _M_it1(__it1) 
# 288
{ } 
# 290
template< class _Iterator2> bool 
# 293
operator()(_Iterator2 __it2) 
# 294
{ return (*__it2) == (*(_M_it1)); } 
# 295
}; 
# 297
template< class _Iterator> inline _Iter_equals_iter< _Iterator>  
# 300
__iter_comp_iter(_Iter_equal_to_iter, _Iterator __it) 
# 301
{ return ((_Iter_equals_iter< _Iterator> )(__it)); } 
# 303
template< class _Predicate> 
# 304
struct _Iter_pred { 
# 306
_Predicate _M_pred; 
# 310
explicit _Iter_pred(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 312
{ } 
# 314
template< class _Iterator> bool 
# 317
operator()(_Iterator __it) 
# 318
{ return (bool)(_M_pred)(*__it); } 
# 319
}; 
# 321
template< class _Predicate> inline _Iter_pred< _Predicate>  
# 324
__pred_iter(_Predicate __pred) 
# 325
{ return ((_Iter_pred< _Predicate> )(std::move(__pred))); } 
# 327
template< class _Compare, class _Value> 
# 328
struct _Iter_comp_to_val { 
# 330
_Compare _M_comp; 
# 331
_Value &_M_value; 
# 334
_Iter_comp_to_val(_Compare __comp, _Value &__value) : _M_comp(std::move(__comp)), _M_value(__value) 
# 336
{ } 
# 338
template< class _Iterator> bool 
# 341
operator()(_Iterator __it) 
# 342
{ return (bool)(_M_comp)(*__it, _M_value); } 
# 343
}; 
# 345
template< class _Compare, class _Value> _Iter_comp_to_val< _Compare, _Value>  
# 348
__iter_comp_val(_Compare __comp, _Value &__val) 
# 349
{ 
# 350
return _Iter_comp_to_val< _Compare, _Value> (std::move(__comp), __val); 
# 351
} 
# 353
template< class _Compare, class _Iterator1> 
# 354
struct _Iter_comp_to_iter { 
# 356
_Compare _M_comp; 
# 357
_Iterator1 _M_it1; 
# 360
_Iter_comp_to_iter(_Compare __comp, _Iterator1 __it1) : _M_comp(std::move(__comp)), _M_it1(__it1) 
# 362
{ } 
# 364
template< class _Iterator2> bool 
# 367
operator()(_Iterator2 __it2) 
# 368
{ return (bool)(_M_comp)(*__it2, *(_M_it1)); } 
# 369
}; 
# 371
template< class _Compare, class _Iterator> inline _Iter_comp_to_iter< _Compare, _Iterator>  
# 374
__iter_comp_iter(_Iter_comp_iter< _Compare>  __comp, _Iterator __it) 
# 375
{ 
# 376
return _Iter_comp_to_iter< _Compare, _Iterator> (std::move((__comp._M_comp)), __it); 
# 378
} 
# 380
template< class _Predicate> 
# 381
struct _Iter_negate { 
# 383
_Predicate _M_pred; 
# 387
explicit _Iter_negate(_Predicate __pred) : _M_pred(std::move(__pred)) 
# 389
{ } 
# 391
template< class _Iterator> bool 
# 394
operator()(_Iterator __it) 
# 395
{ return !((bool)(_M_pred)(*__it)); } 
# 396
}; 
# 398
template< class _Predicate> inline _Iter_negate< _Predicate>  
# 401
__negate(_Iter_pred< _Predicate>  __pred) 
# 402
{ return ((_Iter_negate< _Predicate> )(std::move((__pred._M_pred)))); } 
# 404
}
# 405
}
# 79 "/usr/include/c++/11/bits/stl_algobase.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 87
template< class _Tp, class _Up> constexpr int 
# 90
__memcmp(const _Tp *__first1, const _Up *__first2, size_t __num) 
# 91
{ 
# 93
static_assert((sizeof(_Tp) == sizeof(_Up)), "can be compared with memcmp");
# 105 "/usr/include/c++/11/bits/stl_algobase.h" 3
return __builtin_memcmp(__first1, __first2, sizeof(_Tp) * __num); 
# 106
} 
# 149 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline void 
# 152
iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b) 
# 153
{ 
# 182 "/usr/include/c++/11/bits/stl_algobase.h" 3
swap(*__a, *__b); 
# 184
} 
# 198 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> _ForwardIterator2 
# 201
swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 202
__first2) 
# 203
{ 
# 209
; 
# 211
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 212
std::iter_swap(__first1, __first2); }  
# 213
return __first2; 
# 214
} 
# 227 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 230
min(const _Tp &__a, const _Tp &__b) 
# 231
{ 
# 235
if (__b < __a) { 
# 236
return __b; }  
# 237
return __a; 
# 238
} 
# 251 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp> constexpr const _Tp &
# 254
max(const _Tp &__a, const _Tp &__b) 
# 255
{ 
# 259
if (__a < __b) { 
# 260
return __b; }  
# 261
return __a; 
# 262
} 
# 275 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 278
min(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 279
{ 
# 281
if (__comp(__b, __a)) { 
# 282
return __b; }  
# 283
return __a; 
# 284
} 
# 297 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _Tp, class _Compare> constexpr const _Tp &
# 300
max(const _Tp &__a, const _Tp &__b, _Compare __comp) 
# 301
{ 
# 303
if (__comp(__a, __b)) { 
# 304
return __b; }  
# 305
return __a; 
# 306
} 
# 310
template< class _Iterator> inline _Iterator 
# 313
__niter_base(_Iterator __it) noexcept(std::template is_nothrow_copy_constructible< _Iterator> ::value) 
# 315
{ return __it; } 
# 317
template< class _Ite, class _Seq> _Ite __niter_base(const __gnu_debug::_Safe_iterator< _Ite, _Seq, random_access_iterator_tag>  &); 
# 325
template< class _From, class _To> inline _From 
# 328
__niter_wrap(_From __from, _To __res) 
# 329
{ return __from + (__res - std::__niter_base(__from)); } 
# 332
template< class _Iterator> inline _Iterator 
# 335
__niter_wrap(const _Iterator &, _Iterator __res) 
# 336
{ return __res; } 
# 344
template< bool _IsMove, bool _IsSimple, class _Category> 
# 345
struct __copy_move { 
# 347
template< class _II, class _OI> static _OI 
# 350
__copy_m(_II __first, _II __last, _OI __result) 
# 351
{ 
# 352
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 353
(*__result) = (*__first); }  
# 354
return __result; 
# 355
} 
# 356
}; 
# 359
template< class _Category> 
# 360
struct __copy_move< true, false, _Category>  { 
# 362
template< class _II, class _OI> static _OI 
# 365
__copy_m(_II __first, _II __last, _OI __result) 
# 366
{ 
# 367
for (; __first != __last; (++__result), ((void)(++__first))) { 
# 368
(*__result) = std::move(*__first); }  
# 369
return __result; 
# 370
} 
# 371
}; 
# 375
template<> struct __copy_move< false, false, random_access_iterator_tag>  { 
# 377
template< class _II, class _OI> static _OI 
# 380
__copy_m(_II __first, _II __last, _OI __result) 
# 381
{ 
# 382
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 383
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 384
{ 
# 385
(*__result) = (*__first); 
# 386
++__first; 
# 387
++__result; 
# 388
}  
# 389
return __result; 
# 390
} 
# 391
}; 
# 395
template<> struct __copy_move< true, false, random_access_iterator_tag>  { 
# 397
template< class _II, class _OI> static _OI 
# 400
__copy_m(_II __first, _II __last, _OI __result) 
# 401
{ 
# 402
typedef typename iterator_traits< _II> ::difference_type _Distance; 
# 403
for (_Distance __n = __last - __first; __n > 0; --__n) 
# 404
{ 
# 405
(*__result) = std::move(*__first); 
# 406
++__first; 
# 407
++__result; 
# 408
}  
# 409
return __result; 
# 410
} 
# 411
}; 
# 414
template< bool _IsMove> 
# 415
struct __copy_move< _IsMove, true, random_access_iterator_tag>  { 
# 417
template< class _Tp> static _Tp *
# 420
__copy_m(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 421
{ 
# 423
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 427
static_assert((__assignable::type::value), "type is not assignable");
# 429
const ptrdiff_t _Num = __last - __first; 
# 430
if (_Num) { 
# 431
__builtin_memmove(__result, __first, sizeof(_Tp) * _Num); }  
# 432
return __result + _Num; 
# 433
} 
# 434
}; 
# 438
template< class _Tp, class _Ref, class _Ptr> struct _Deque_iterator; 
# 441
struct _Bit_iterator; 
# 447
template< class _CharT> struct char_traits; 
# 450
template< class _CharT, class _Traits> class istreambuf_iterator; 
# 453
template< class _CharT, class _Traits> class ostreambuf_iterator; 
# 456
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(_CharT *, _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 462
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT, char_traits< _CharT> > > ::__type __copy_move_a2(const _CharT *, const _CharT *, ostreambuf_iterator< _CharT, char_traits< _CharT> > ); 
# 468
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _CharT *); 
# 474
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _Deque_iterator< _CharT, _CharT &, _CharT *> > ::__type __copy_move_a2(istreambuf_iterator< _CharT, char_traits< _CharT> > , istreambuf_iterator< _CharT, char_traits< _CharT> > , _Deque_iterator< _CharT, _CharT &, _CharT *> ); 
# 483
template< bool _IsMove, class _II, class _OI> inline _OI 
# 486
__copy_move_a2(_II __first, _II __last, _OI __result) 
# 487
{ 
# 488
typedef typename iterator_traits< _II> ::iterator_category _Category; 
# 494
return std::template __copy_move< _IsMove, __memcpyable< _OI, _II> ::__value, typename iterator_traits< _II> ::iterator_category> ::__copy_m(__first, __last, __result); 
# 496
} 
# 498
template< bool _IsMove, class 
# 499
_Tp, class _Ref, class _Ptr, class _OI> _OI 
# 498
__copy_move_a1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _OI); 
# 505
template< bool _IsMove, class 
# 506
_ITp, class _IRef, class _IPtr, class _OTp> _Deque_iterator< _OTp, _OTp &, _OTp *>  
# 505
__copy_move_a1(_Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _OTp, _OTp &, _OTp *> ); 
# 512
template< bool _IsMove, class _II, class _Tp> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, _Deque_iterator< _Tp, _Tp &, _Tp *> > ::__type __copy_move_a1(_II, _II, _Deque_iterator< _Tp, _Tp &, _Tp *> ); 
# 518
template< bool _IsMove, class _II, class _OI> inline _OI 
# 521
__copy_move_a1(_II __first, _II __last, _OI __result) 
# 522
{ return std::__copy_move_a2< _IsMove> (__first, __last, __result); } 
# 524
template< bool _IsMove, class _II, class _OI> inline _OI 
# 527
__copy_move_a(_II __first, _II __last, _OI __result) 
# 528
{ 
# 529
return std::__niter_wrap(__result, std::__copy_move_a1< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 533
} 
# 535
template< bool _IsMove, class 
# 536
_Ite, class _Seq, class _Cat, class _OI> _OI 
# 535
__copy_move_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, _OI); 
# 542
template< bool _IsMove, class 
# 543
_II, class _Ite, class _Seq, class _Cat> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 542
__copy_move_a(_II, _II, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &); 
# 548
template< bool _IsMove, class 
# 549
_IIte, class _ISeq, class _ICat, class 
# 550
_OIte, class _OSeq, class _OCat> __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  
# 548
__copy_move_a(const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  &); 
# 556
template< class _InputIterator, class _Size, class _OutputIterator> _OutputIterator 
# 559
__copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result, bool) 
# 561
{ 
# 562
if (__n > 0) 
# 563
{ 
# 564
while (true) 
# 565
{ 
# 566
(*__result) = (*__first); 
# 567
++__result; 
# 568
if ((--__n) > 0) { 
# 569
++__first; } else { 
# 571
break; }  
# 572
}  
# 573
}  
# 574
return __result; 
# 575
} 
# 577
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type __copy_n_a(istreambuf_iterator< _CharT, char_traits< _CharT> > , _Size, _CharT *, bool); 
# 583
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _Deque_iterator< _CharT, _CharT &, _CharT *> > ::__type __copy_n_a(istreambuf_iterator< _CharT, char_traits< _CharT> > , _Size, _Deque_iterator< _CharT, _CharT &, _CharT *> , bool); 
# 608 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 611
copy(_II __first, _II __last, _OI __result) 
# 612
{ 
# 617
; 
# 619
return std::__copy_move_a< __is_move_iterator< _II> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 621
} 
# 641 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II, class _OI> inline _OI 
# 644
move(_II __first, _II __last, _OI __result) 
# 645
{ 
# 650
; 
# 652
return std::__copy_move_a< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 654
} 
# 661
template< bool _IsMove, bool _IsSimple, class _Category> 
# 662
struct __copy_move_backward { 
# 664
template< class _BI1, class _BI2> static _BI2 
# 667
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 668
{ 
# 669
while (__first != __last) { 
# 670
(*(--__result)) = (*(--__last)); }  
# 671
return __result; 
# 672
} 
# 673
}; 
# 676
template< class _Category> 
# 677
struct __copy_move_backward< true, false, _Category>  { 
# 679
template< class _BI1, class _BI2> static _BI2 
# 682
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 683
{ 
# 684
while (__first != __last) { 
# 685
(*(--__result)) = std::move(*(--__last)); }  
# 686
return __result; 
# 687
} 
# 688
}; 
# 692
template<> struct __copy_move_backward< false, false, random_access_iterator_tag>  { 
# 694
template< class _BI1, class _BI2> static _BI2 
# 697
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 698
{ 
# 700
typename iterator_traits< _BI1> ::difference_type __n = __last - __first; 
# 701
for (; __n > 0; --__n) { 
# 702
(*(--__result)) = (*(--__last)); }  
# 703
return __result; 
# 704
} 
# 705
}; 
# 709
template<> struct __copy_move_backward< true, false, random_access_iterator_tag>  { 
# 711
template< class _BI1, class _BI2> static _BI2 
# 714
__copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result) 
# 715
{ 
# 717
typename iterator_traits< _BI1> ::difference_type __n = __last - __first; 
# 718
for (; __n > 0; --__n) { 
# 719
(*(--__result)) = std::move(*(--__last)); }  
# 720
return __result; 
# 721
} 
# 722
}; 
# 725
template< bool _IsMove> 
# 726
struct __copy_move_backward< _IsMove, true, random_access_iterator_tag>  { 
# 728
template< class _Tp> static _Tp *
# 731
__copy_move_b(const _Tp *__first, const _Tp *__last, _Tp *__result) 
# 732
{ 
# 734
using __assignable = conditional< _IsMove, is_move_assignable< _Tp> , is_copy_assignable< _Tp> > ; 
# 738
static_assert((__assignable::type::value), "type is not assignable");
# 740
const ptrdiff_t _Num = __last - __first; 
# 741
if (_Num) { 
# 742
__builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num); }  
# 743
return __result - _Num; 
# 744
} 
# 745
}; 
# 747
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 750
__copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result) 
# 751
{ 
# 752
typedef typename iterator_traits< _BI1> ::iterator_category _Category; 
# 758
return std::template __copy_move_backward< _IsMove, __memcpyable< _BI2, _BI1> ::__value, typename iterator_traits< _BI1> ::iterator_category> ::__copy_move_b(__first, __last, __result); 
# 763
} 
# 765
template< bool _IsMove, class _BI1, class _BI2> inline _BI2 
# 768
__copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result) 
# 769
{ return std::__copy_move_backward_a2< _IsMove> (__first, __last, __result); } 
# 771
template< bool _IsMove, class 
# 772
_Tp, class _Ref, class _Ptr, class _OI> _OI 
# 771
__copy_move_backward_a1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _OI); 
# 778
template< bool _IsMove, class 
# 779
_ITp, class _IRef, class _IPtr, class _OTp> _Deque_iterator< _OTp, _OTp &, _OTp *>  
# 778
__copy_move_backward_a1(_Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _ITp, _IRef, _IPtr> , _Deque_iterator< _OTp, _OTp &, _OTp *> ); 
# 786
template< bool _IsMove, class _II, class _Tp> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, _Deque_iterator< _Tp, _Tp &, _Tp *> > ::__type __copy_move_backward_a1(_II, _II, _Deque_iterator< _Tp, _Tp &, _Tp *> ); 
# 793
template< bool _IsMove, class _II, class _OI> inline _OI 
# 796
__copy_move_backward_a(_II __first, _II __last, _OI __result) 
# 797
{ 
# 798
return std::__niter_wrap(__result, std::__copy_move_backward_a1< _IsMove> (std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result))); 
# 802
} 
# 804
template< bool _IsMove, class 
# 805
_Ite, class _Seq, class _Cat, class _OI> _OI 
# 804
__copy_move_backward_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, _OI); 
# 812
template< bool _IsMove, class 
# 813
_II, class _Ite, class _Seq, class _Cat> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 812
__copy_move_backward_a(_II, _II, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &); 
# 818
template< bool _IsMove, class 
# 819
_IIte, class _ISeq, class _ICat, class 
# 820
_OIte, class _OSeq, class _OCat> __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  
# 818
__copy_move_backward_a(const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _IIte, _ISeq, _ICat>  &, const __gnu_debug::_Safe_iterator< _OIte, _OSeq, _OCat>  &); 
# 845 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 848
copy_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 849
{ 
# 856
; 
# 858
return std::__copy_move_backward_a< __is_move_iterator< _BI1> ::__value> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 860
} 
# 881 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _BI1, class _BI2> inline _BI2 
# 884
move_backward(_BI1 __first, _BI1 __last, _BI2 __result) 
# 885
{ 
# 892
; 
# 894
return std::__copy_move_backward_a< true> (std::__miter_base(__first), std::__miter_base(__last), __result); 
# 897
} 
# 904
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, void> ::__type 
# 908
__fill_a1(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 909
__value) 
# 910
{ 
# 911
for (; __first != __last; ++__first) { 
# 912
(*__first) = __value; }  
# 913
} 
# 915
template< class _ForwardIterator, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, void> ::__type 
# 919
__fill_a1(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 920
__value) 
# 921
{ 
# 922
const _Tp __tmp = __value; 
# 923
for (; __first != __last; ++__first) { 
# 924
(*__first) = __tmp; }  
# 925
} 
# 928
template< class _Tp> inline typename __gnu_cxx::__enable_if< __is_byte< _Tp> ::__value, void> ::__type 
# 932
__fill_a1(_Tp *__first, _Tp *__last, const _Tp &__c) 
# 933
{ 
# 934
const _Tp __tmp = __c; 
# 943 "/usr/include/c++/11/bits/stl_algobase.h" 3
if (const size_t __len = __last - __first) { 
# 944
__builtin_memset(__first, static_cast< unsigned char>(__tmp), __len); }  
# 945
} 
# 947
template< class _Ite, class _Cont, class _Tp> inline void 
# 950
__fill_a1(__gnu_cxx::__normal_iterator< _Ite, _Cont>  __first, __gnu_cxx::__normal_iterator< _Ite, _Cont>  
# 951
__last, const _Tp &
# 952
__value) 
# 953
{ std::__fill_a1(__first.base(), __last.base(), __value); } 
# 955
template< class _Tp, class _VTp> void __fill_a1(const _Deque_iterator< _Tp, _Tp &, _Tp *>  &, const _Deque_iterator< _Tp, _Tp &, _Tp *>  &, const _VTp &); 
# 962
inline void __fill_a1(_Bit_iterator, _Bit_iterator, const bool &); 
# 965
template< class _FIte, class _Tp> inline void 
# 968
__fill_a(_FIte __first, _FIte __last, const _Tp &__value) 
# 969
{ std::__fill_a1(__first, __last, __value); } 
# 971
template< class _Ite, class _Seq, class _Cat, class _Tp> void __fill_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  &, const _Tp &); 
# 989 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 992
fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &__value) 
# 993
{ 
# 997
; 
# 999
std::__fill_a(__first, __last, __value); 
# 1000
} 
# 1004
constexpr int __size_to_integer(int __n) { return __n; } 
# 1006
constexpr unsigned __size_to_integer(unsigned __n) { return __n; } 
# 1008
constexpr long __size_to_integer(long __n) { return __n; } 
# 1010
constexpr unsigned long __size_to_integer(unsigned long __n) { return __n; } 
# 1012
constexpr long long __size_to_integer(long long __n) { return __n; } 
# 1014
constexpr unsigned long long __size_to_integer(unsigned long long __n) { return __n; } 
# 1018
constexpr __int128 __size_to_integer(__int128 __n) { return __n; } 
# 1020
constexpr unsigned __int128 __size_to_integer(unsigned __int128 __n) { return __n; } 
# 1042 "/usr/include/c++/11/bits/stl_algobase.h" 3
constexpr long long __size_to_integer(float __n) { return (long long)__n; } 
# 1044
constexpr long long __size_to_integer(double __n) { return (long long)__n; } 
# 1046
constexpr long long __size_to_integer(long double __n) { return (long long)__n; } 
# 1052
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< !__is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 1056
__fill_n_a1(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 1057
{ 
# 1058
for (; __n > 0; (--__n), ((void)(++__first))) { 
# 1059
(*__first) = __value; }  
# 1060
return __first; 
# 1061
} 
# 1063
template< class _OutputIterator, class _Size, class _Tp> inline typename __gnu_cxx::__enable_if< __is_scalar< _Tp> ::__value, _OutputIterator> ::__type 
# 1067
__fill_n_a1(_OutputIterator __first, _Size __n, const _Tp &__value) 
# 1068
{ 
# 1069
const _Tp __tmp = __value; 
# 1070
for (; __n > 0; (--__n), ((void)(++__first))) { 
# 1071
(*__first) = __tmp; }  
# 1072
return __first; 
# 1073
} 
# 1075
template< class _Ite, class _Seq, class _Cat, class _Size, class 
# 1076
_Tp> __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  
# 1075
__fill_n_a(const __gnu_debug::_Safe_iterator< _Ite, _Seq, _Cat>  & __first, _Size __n, const _Tp & __value, input_iterator_tag); 
# 1082
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1085
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, output_iterator_tag) 
# 1087
{ 
# 1089
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1091
return __fill_n_a1(__first, __n, __value); 
# 1092
} 
# 1094
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1097
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, input_iterator_tag) 
# 1099
{ 
# 1101
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1103
return __fill_n_a1(__first, __n, __value); 
# 1104
} 
# 1106
template< class _OutputIterator, class _Size, class _Tp> inline _OutputIterator 
# 1109
__fill_n_a(_OutputIterator __first, _Size __n, const _Tp &__value, random_access_iterator_tag) 
# 1111
{ 
# 1113
static_assert((is_integral< _Size> {}), "fill_n must pass integral size");
# 1115
if (__n <= 0) { 
# 1116
return __first; }  
# 1118
; 
# 1120
std::__fill_a(__first, __first + __n, __value); 
# 1121
return __first + __n; 
# 1122
} 
# 1141 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _OI, class _Size, class _Tp> inline _OI 
# 1144
fill_n(_OI __first, _Size __n, const _Tp &__value) 
# 1145
{ 
# 1149
return std::__fill_n_a(__first, std::__size_to_integer(__n), __value, std::__iterator_category(__first)); 
# 1151
} 
# 1153
template< bool _BoolType> 
# 1154
struct __equal { 
# 1156
template< class _II1, class _II2> static bool 
# 1159
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1160
{ 
# 1161
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1162
if (!((*__first1) == (*__first2))) { 
# 1163
return false; }  }  
# 1164
return true; 
# 1165
} 
# 1166
}; 
# 1169
template<> struct __equal< true>  { 
# 1171
template< class _Tp> static bool 
# 1174
equal(const _Tp *__first1, const _Tp *__last1, const _Tp *__first2) 
# 1175
{ 
# 1176
if (const size_t __len = __last1 - __first1) { 
# 1177
return !std::__memcmp(__first1, __first2, __len); }  
# 1178
return true; 
# 1179
} 
# 1180
}; 
# 1182
template< class _Tp, class _Ref, class _Ptr, class _II> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, bool> ::__type __equal_aux1(_Deque_iterator< _Tp, _Ref, _Ptr> , _Deque_iterator< _Tp, _Ref, _Ptr> , _II); 
# 1189
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1190
_Tp2, class _Ref2, class _Ptr2> bool 
# 1189
__equal_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1196
template< class _II, class _Tp, class _Ref, class _Ptr> typename __gnu_cxx::__enable_if< __is_random_access_iter< _II> ::__value, bool> ::__type __equal_aux1(_II, _II, _Deque_iterator< _Tp, _Ref, _Ptr> ); 
# 1202
template< class _II1, class _II2> inline bool 
# 1205
__equal_aux1(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1206
{ 
# 1207
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 1208
const bool __simple = ((__is_integer< typename iterator_traits< _II1> ::value_type> ::__value || __is_pointer< typename iterator_traits< _II1> ::value_type> ::__value) && __memcmpable< _II1, _II2> ::__value); 
# 1211
return std::template __equal< __simple> ::equal(__first1, __last1, __first2); 
# 1212
} 
# 1214
template< class _II1, class _II2> inline bool 
# 1217
__equal_aux(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1218
{ 
# 1219
return std::__equal_aux1(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2)); 
# 1222
} 
# 1224
template< class _II1, class _Seq1, class _Cat1, class _II2> bool __equal_aux(const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, _II2); 
# 1230
template< class _II1, class _II2, class _Seq2, class _Cat2> bool __equal_aux(_II1, _II1, const __gnu_debug::_Safe_iterator< _II2, _Seq2, _Cat2>  &); 
# 1235
template< class _II1, class _Seq1, class _Cat1, class 
# 1236
_II2, class _Seq2, class _Cat2> bool 
# 1235
__equal_aux(const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _II2, _Seq2, _Cat2>  &); 
# 1242
template< class , class > 
# 1243
struct __lc_rai { 
# 1245
template< class _II1, class _II2> static _II1 
# 1248
__newlast1(_II1, _II1 __last1, _II2, _II2) 
# 1249
{ return __last1; } 
# 1251
template< class _II> static bool 
# 1254
__cnd2(_II __first, _II __last) 
# 1255
{ return __first != __last; } 
# 1256
}; 
# 1259
template<> struct __lc_rai< random_access_iterator_tag, random_access_iterator_tag>  { 
# 1261
template< class _RAI1, class _RAI2> static _RAI1 
# 1264
__newlast1(_RAI1 __first1, _RAI1 __last1, _RAI2 
# 1265
__first2, _RAI2 __last2) 
# 1266
{ 
# 1268
const typename iterator_traits< _RAI1> ::difference_type __diff1 = __last1 - __first1; 
# 1270
const typename iterator_traits< _RAI2> ::difference_type __diff2 = __last2 - __first2; 
# 1271
return (__diff2 < __diff1) ? __first1 + __diff2 : __last1; 
# 1272
} 
# 1274
template< class _RAI> static bool 
# 1276
__cnd2(_RAI, _RAI) 
# 1277
{ return true; } 
# 1278
}; 
# 1280
template< class _II1, class _II2, class _Compare> bool 
# 1283
__lexicographical_compare_impl(_II1 __first1, _II1 __last1, _II2 
# 1284
__first2, _II2 __last2, _Compare 
# 1285
__comp) 
# 1286
{ 
# 1287
typedef typename iterator_traits< _II1> ::iterator_category _Category1; 
# 1288
typedef typename iterator_traits< _II2> ::iterator_category _Category2; 
# 1289
typedef __lc_rai< typename iterator_traits< _II1> ::iterator_category, typename iterator_traits< _II2> ::iterator_category>  __rai_type; 
# 1291
__last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2); 
# 1292
for (; (__first1 != __last1) && __rai_type::__cnd2(__first2, __last2); (++__first1), ((void)(++__first2))) 
# 1294
{ 
# 1295
if (__comp(__first1, __first2)) { 
# 1296
return true; }  
# 1297
if (__comp(__first2, __first1)) { 
# 1298
return false; }  
# 1299
}  
# 1300
return (__first1 == __last1) && (__first2 != __last2); 
# 1301
} 
# 1303
template< bool _BoolType> 
# 1304
struct __lexicographical_compare { 
# 1306
template< class _II1, class _II2> static bool 
# 1309
__lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1310
{ 
# 1311
using __gnu_cxx::__ops::__iter_less_iter;
# 1312
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __iter_less_iter()); 
# 1315
} 
# 1317
template< class _II1, class _II2> static int 
# 1320
__3way(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1321
{ 
# 1322
while (__first1 != __last1) 
# 1323
{ 
# 1324
if (__first2 == __last2) { 
# 1325
return +1; }  
# 1326
if ((*__first1) < (*__first2)) { 
# 1327
return -1; }  
# 1328
if ((*__first2) < (*__first1)) { 
# 1329
return +1; }  
# 1330
++__first1; 
# 1331
++__first2; 
# 1332
}  
# 1333
return ((int)(__first2 == __last2)) - 1; 
# 1334
} 
# 1335
}; 
# 1338
template<> struct __lexicographical_compare< true>  { 
# 1340
template< class _Tp, class _Up> static bool 
# 1343
__lc(const _Tp *__first1, const _Tp *__last1, const _Up *
# 1344
__first2, const _Up *__last2) 
# 1345
{ return __3way(__first1, __last1, __first2, __last2) < 0; } 
# 1347
template< class _Tp, class _Up> static ptrdiff_t 
# 1350
__3way(const _Tp *__first1, const _Tp *__last1, const _Up *
# 1351
__first2, const _Up *__last2) 
# 1352
{ 
# 1353
const size_t __len1 = __last1 - __first1; 
# 1354
const size_t __len2 = __last2 - __first2; 
# 1355
if (const size_t __len = std::min(__len1, __len2)) { 
# 1356
if (int __result = std::__memcmp(__first1, __first2, __len)) { 
# 1357
return __result; }  }  
# 1358
return (ptrdiff_t)(__len1 - __len2); 
# 1359
} 
# 1360
}; 
# 1362
template< class _II1, class _II2> inline bool 
# 1365
__lexicographical_compare_aux1(_II1 __first1, _II1 __last1, _II2 
# 1366
__first2, _II2 __last2) 
# 1367
{ 
# 1368
typedef typename iterator_traits< _II1> ::value_type _ValueType1; 
# 1369
typedef typename iterator_traits< _II2> ::value_type _ValueType2; 
# 1370
const bool __simple = (__is_memcmp_ordered_with< typename iterator_traits< _II1> ::value_type, typename iterator_traits< _II2> ::value_type> ::__value && __is_pointer< _II1> ::__value && __is_pointer< _II2> ::__value); 
# 1383
return std::template __lexicographical_compare< __simple> ::__lc(__first1, __last1, __first2, __last2); 
# 1385
} 
# 1387
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1388
_Tp2> bool 
# 1387
__lexicographical_compare_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Tp2 *, _Tp2 *); 
# 1395
template< class _Tp1, class 
# 1396
_Tp2, class _Ref2, class _Ptr2> bool 
# 1395
__lexicographical_compare_aux1(_Tp1 *, _Tp1 *, _Deque_iterator< _Tp2, _Ref2, _Ptr2> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1402
template< class _Tp1, class _Ref1, class _Ptr1, class 
# 1403
_Tp2, class _Ref2, class _Ptr2> bool 
# 1402
__lexicographical_compare_aux1(_Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp1, _Ref1, _Ptr1> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> , _Deque_iterator< _Tp2, _Ref2, _Ptr2> ); 
# 1411
template< class _II1, class _II2> inline bool 
# 1414
__lexicographical_compare_aux(_II1 __first1, _II1 __last1, _II2 
# 1415
__first2, _II2 __last2) 
# 1416
{ 
# 1417
return std::__lexicographical_compare_aux1(std::__niter_base(__first1), std::__niter_base(__last1), std::__niter_base(__first2), std::__niter_base(__last2)); 
# 1421
} 
# 1423
template< class _Iter1, class _Seq1, class _Cat1, class 
# 1424
_II2> bool 
# 1423
__lexicographical_compare_aux(const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, _II2, _II2); 
# 1431
template< class _II1, class 
# 1432
_Iter2, class _Seq2, class _Cat2> bool 
# 1431
__lexicographical_compare_aux(_II1, _II1, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &); 
# 1439
template< class _Iter1, class _Seq1, class _Cat1, class 
# 1440
_Iter2, class _Seq2, class _Cat2> bool 
# 1439
__lexicographical_compare_aux(const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter1, _Seq1, _Cat1>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &, const __gnu_debug::_Safe_iterator< _Iter2, _Seq2, _Cat2>  &); 
# 1448
template< class _ForwardIterator, class _Tp, class _Compare> _ForwardIterator 
# 1451
__lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1452
__val, _Compare __comp) 
# 1453
{ 
# 1455
typedef typename iterator_traits< _ForwardIterator> ::difference_type _DistanceType; 
# 1457
_DistanceType __len = std::distance(__first, __last); 
# 1459
while (__len > 0) 
# 1460
{ 
# 1461
_DistanceType __half = __len >> 1; 
# 1462
_ForwardIterator __middle = __first; 
# 1463
std::advance(__middle, __half); 
# 1464
if (__comp(__middle, __val)) 
# 1465
{ 
# 1466
__first = __middle; 
# 1467
++__first; 
# 1468
__len = ((__len - __half) - 1); 
# 1469
} else { 
# 1471
__len = __half; }  
# 1472
}  
# 1473
return __first; 
# 1474
} 
# 1487 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 1490
lower_bound(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 1491
__val) 
# 1492
{ 
# 1497
; 
# 1499
return std::__lower_bound(__first, __last, __val, __gnu_cxx::__ops::__iter_less_val()); 
# 1501
} 
# 1506
constexpr int __lg(int __n) 
# 1507
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1510
constexpr unsigned __lg(unsigned __n) 
# 1511
{ return ((((int)sizeof(int)) * 8) - 1) - __builtin_clz(__n); } 
# 1514
constexpr long __lg(long __n) 
# 1515
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1518
constexpr unsigned long __lg(unsigned long __n) 
# 1519
{ return ((((int)sizeof(long)) * 8) - 1) - __builtin_clzl(__n); } 
# 1522
constexpr long long __lg(long long __n) 
# 1523
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1526
constexpr unsigned long long __lg(unsigned long long __n) 
# 1527
{ return ((((int)sizeof(long long)) * 8) - 1) - __builtin_clzll(__n); } 
# 1543 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1546
equal(_II1 __first1, _II1 __last1, _II2 __first2) 
# 1547
{ 
# 1554
; 
# 1556
return std::__equal_aux(__first1, __last1, __first2); 
# 1557
} 
# 1574 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1577
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1578
__first2, _BinaryPredicate __binary_pred) 
# 1579
{ 
# 1583
; 
# 1585
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 1586
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1587
return false; }  }  
# 1588
return true; 
# 1589
} 
# 1593
template< class _II1, class _II2> inline bool 
# 1596
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1597
{ 
# 1598
using _RATag = random_access_iterator_tag; 
# 1599
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1600
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1601
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1602
if (_RAIters()) 
# 1603
{ 
# 1604
auto __d1 = std::distance(__first1, __last1); 
# 1605
auto __d2 = std::distance(__first2, __last2); 
# 1606
if (__d1 != __d2) { 
# 1607
return false; }  
# 1608
return std::equal(__first1, __last1, __first2); 
# 1609
}  
# 1611
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1613
if (!((*__first1) == (*__first2))) { 
# 1614
return false; }  }  
# 1615
return (__first1 == __last1) && (__first2 == __last2); 
# 1616
} 
# 1619
template< class _II1, class _II2, class _BinaryPredicate> inline bool 
# 1622
__equal4(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2, _BinaryPredicate 
# 1623
__binary_pred) 
# 1624
{ 
# 1625
using _RATag = random_access_iterator_tag; 
# 1626
using _Cat1 = typename iterator_traits< _II1> ::iterator_category; 
# 1627
using _Cat2 = typename iterator_traits< _II2> ::iterator_category; 
# 1628
using _RAIters = __and_< is_same< typename iterator_traits< _II1> ::iterator_category, random_access_iterator_tag> , is_same< typename iterator_traits< _II2> ::iterator_category, random_access_iterator_tag> > ; 
# 1629
if (_RAIters()) 
# 1630
{ 
# 1631
auto __d1 = std::distance(__first1, __last1); 
# 1632
auto __d2 = std::distance(__first2, __last2); 
# 1633
if (__d1 != __d2) { 
# 1634
return false; }  
# 1635
return std::equal(__first1, __last1, __first2, __binary_pred); 
# 1637
}  
# 1639
for (; (__first1 != __last1) && (__first2 != __last2); (++__first1), ((void)(++__first2))) { 
# 1641
if (!((bool)__binary_pred(*__first1, *__first2))) { 
# 1642
return false; }  }  
# 1643
return (__first1 == __last1) && (__first2 == __last2); 
# 1644
} 
# 1664 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1667
equal(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2) 
# 1668
{ 
# 1675
; 
# 1676
; 
# 1678
return std::__equal4(__first1, __last1, __first2, __last2); 
# 1679
} 
# 1697 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _IIter1, class _IIter2, class _BinaryPredicate> inline bool 
# 1700
equal(_IIter1 __first1, _IIter1 __last1, _IIter2 
# 1701
__first2, _IIter2 __last2, _BinaryPredicate __binary_pred) 
# 1702
{ 
# 1706
; 
# 1707
; 
# 1709
return std::__equal4(__first1, __last1, __first2, __last2, __binary_pred); 
# 1711
} 
# 1729 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2> inline bool 
# 1732
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1733
__first2, _II2 __last2) 
# 1734
{ 
# 1744
; 
# 1745
; 
# 1747
return std::__lexicographical_compare_aux(__first1, __last1, __first2, __last2); 
# 1749
} 
# 1764 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _II1, class _II2, class _Compare> inline bool 
# 1767
lexicographical_compare(_II1 __first1, _II1 __last1, _II2 
# 1768
__first2, _II2 __last2, _Compare __comp) 
# 1769
{ 
# 1773
; 
# 1774
; 
# 1776
return std::__lexicographical_compare_impl(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__comp)); 
# 1779
} 
# 1877 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1878
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1881
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1882
__first2, _BinaryPredicate __binary_pred) 
# 1883
{ 
# 1884
while ((__first1 != __last1) && __binary_pred(__first1, __first2)) 
# 1885
{ 
# 1886
++__first1; 
# 1887
++__first2; 
# 1888
}  
# 1889
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1890
} 
# 1905 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1908
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1909
__first2) 
# 1910
{ 
# 1917
; 
# 1919
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 1921
} 
# 1939 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 1940
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 1943
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1944
__first2, _BinaryPredicate __binary_pred) 
# 1945
{ 
# 1949
; 
# 1951
return std::__mismatch(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 1953
} 
# 1957
template< class _InputIterator1, class _InputIterator2, class 
# 1958
_BinaryPredicate> pair< _InputIterator1, _InputIterator2>  
# 1961
__mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1962
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 1963
__binary_pred) 
# 1964
{ 
# 1965
while ((__first1 != __last1) && (__first2 != __last2) && __binary_pred(__first1, __first2)) 
# 1967
{ 
# 1968
++__first1; 
# 1969
++__first2; 
# 1970
}  
# 1971
return pair< _InputIterator1, _InputIterator2> (__first1, __first2); 
# 1972
} 
# 1988 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2> inline pair< _InputIterator1, _InputIterator2>  
# 1991
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 1992
__first2, _InputIterator2 __last2) 
# 1993
{ 
# 2000
; 
# 2001
; 
# 2003
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 2005
} 
# 2024 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 2025
_BinaryPredicate> inline pair< _InputIterator1, _InputIterator2>  
# 2028
mismatch(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 2029
__first2, _InputIterator2 __last2, _BinaryPredicate 
# 2030
__binary_pred) 
# 2031
{ 
# 2035
; 
# 2036
; 
# 2038
return std::__mismatch(__first1, __last1, __first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__binary_pred)); 
# 2040
} 
# 2046
template< class _InputIterator, class _Predicate> inline _InputIterator 
# 2049
__find_if(_InputIterator __first, _InputIterator __last, _Predicate 
# 2050
__pred, input_iterator_tag) 
# 2051
{ 
# 2052
while ((__first != __last) && (!__pred(__first))) { 
# 2053
++__first; }  
# 2054
return __first; 
# 2055
} 
# 2058
template< class _RandomAccessIterator, class _Predicate> _RandomAccessIterator 
# 2061
__find_if(_RandomAccessIterator __first, _RandomAccessIterator __last, _Predicate 
# 2062
__pred, random_access_iterator_tag) 
# 2063
{ 
# 2065
typename iterator_traits< _RandomAccessIterator> ::difference_type __trip_count = (__last - __first) >> 2; 
# 2067
for (; __trip_count > 0; --__trip_count) 
# 2068
{ 
# 2069
if (__pred(__first)) { 
# 2070
return __first; }  
# 2071
++__first; 
# 2073
if (__pred(__first)) { 
# 2074
return __first; }  
# 2075
++__first; 
# 2077
if (__pred(__first)) { 
# 2078
return __first; }  
# 2079
++__first; 
# 2081
if (__pred(__first)) { 
# 2082
return __first; }  
# 2083
++__first; 
# 2084
}  
# 2086
switch (__last - __first) 
# 2087
{ 
# 2088
case 3:  
# 2089
if (__pred(__first)) { 
# 2090
return __first; }  
# 2091
++__first; 
# 2093
case 2:  
# 2094
if (__pred(__first)) { 
# 2095
return __first; }  
# 2096
++__first; 
# 2098
case 1:  
# 2099
if (__pred(__first)) { 
# 2100
return __first; }  
# 2101
++__first; 
# 2103
case 0:  
# 2104
default:  
# 2105
return __last; 
# 2106
}  
# 2107
} 
# 2109
template< class _Iterator, class _Predicate> inline _Iterator 
# 2112
__find_if(_Iterator __first, _Iterator __last, _Predicate __pred) 
# 2113
{ 
# 2114
return __find_if(__first, __last, __pred, std::__iterator_category(__first)); 
# 2116
} 
# 2118
template< class _InputIterator, class _Predicate> typename iterator_traits< _InputIterator> ::difference_type 
# 2121
__count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred) 
# 2122
{ 
# 2123
typename iterator_traits< _InputIterator> ::difference_type __n = (0); 
# 2124
for (; __first != __last; ++__first) { 
# 2125
if (__pred(__first)) { 
# 2126
++__n; }  }  
# 2127
return __n; 
# 2128
} 
# 2131
template< class _ForwardIterator1, class _ForwardIterator2, class 
# 2132
_BinaryPredicate> bool 
# 2135
__is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 2136
__first2, _BinaryPredicate __pred) 
# 2137
{ 
# 2140
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 2141
if (!__pred(__first1, __first2)) { 
# 2142
break; }  }  
# 2144
if (__first1 == __last1) { 
# 2145
return true; }  
# 2149
_ForwardIterator2 __last2 = __first2; 
# 2150
std::advance(__last2, std::distance(__first1, __last1)); 
# 2151
for (_ForwardIterator1 __scan = __first1; __scan != __last1; ++__scan) 
# 2152
{ 
# 2153
if (__scan != std::__find_if(__first1, __scan, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan))) { 
# 2155
continue; }  
# 2157
auto __matches = std::__count_if(__first2, __last2, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)); 
# 2160
if ((0 == __matches) || (std::__count_if(__scan, __last1, __gnu_cxx::__ops::__iter_comp_iter(__pred, __scan)) != __matches)) { 
# 2164
return false; }  
# 2165
}   
# 2166
return true; 
# 2167
} 
# 2181 "/usr/include/c++/11/bits/stl_algobase.h" 3
template< class _ForwardIterator1, class _ForwardIterator2> inline bool 
# 2184
is_permutation(_ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 
# 2185
__first2) 
# 2186
{ 
# 2193
; 
# 2195
return std::__is_permutation(__first1, __last1, __first2, __gnu_cxx::__ops::__iter_equal_to_iter()); 
# 2197
} 
# 2201
}
# 158 "/usr/include/c++/11/limits" 3
namespace std __attribute((__visibility__("default"))) { 
# 167
enum float_round_style { 
# 169
round_indeterminate = (-1), 
# 170
round_toward_zero = 0, 
# 171
round_to_nearest, 
# 172
round_toward_infinity, 
# 173
round_toward_neg_infinity
# 174
}; 
# 182
enum float_denorm_style { 
# 185
denorm_indeterminate = (-1), 
# 187
denorm_absent = 0, 
# 189
denorm_present
# 190
}; 
# 202 "/usr/include/c++/11/limits" 3
struct __numeric_limits_base { 
# 206
static constexpr inline bool is_specialized = false; 
# 211
static constexpr inline int digits = 0; 
# 214
static constexpr inline int digits10 = 0; 
# 219
static constexpr inline int max_digits10 = 0; 
# 223
static constexpr inline bool is_signed = false; 
# 226
static constexpr inline bool is_integer = false; 
# 231
static constexpr inline bool is_exact = false; 
# 235
static constexpr inline int radix = 0; 
# 239
static constexpr inline int min_exponent = 0; 
# 243
static constexpr inline int min_exponent10 = 0; 
# 248
static constexpr inline int max_exponent = 0; 
# 252
static constexpr inline int max_exponent10 = 0; 
# 255
static constexpr inline bool has_infinity = false; 
# 259
static constexpr inline bool has_quiet_NaN = false; 
# 263
static constexpr inline bool has_signaling_NaN = false; 
# 266
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 270
static constexpr inline bool has_denorm_loss = false; 
# 274
static constexpr inline bool is_iec559 = false; 
# 279
static constexpr inline bool is_bounded = false; 
# 288 "/usr/include/c++/11/limits" 3
static constexpr inline bool is_modulo = false; 
# 291
static constexpr inline bool traps = false; 
# 294
static constexpr inline bool tinyness_before = false; 
# 299
static constexpr inline float_round_style round_style = round_toward_zero; 
# 301
}; 
# 311 "/usr/include/c++/11/limits" 3
template< class _Tp> 
# 312
struct numeric_limits : public __numeric_limits_base { 
# 317
static constexpr _Tp min() noexcept { return _Tp(); } 
# 321
static constexpr _Tp max() noexcept { return _Tp(); } 
# 327
static constexpr _Tp lowest() noexcept { return _Tp(); } 
# 333
static constexpr _Tp epsilon() noexcept { return _Tp(); } 
# 337
static constexpr _Tp round_error() noexcept { return _Tp(); } 
# 341
static constexpr _Tp infinity() noexcept { return _Tp(); } 
# 346
static constexpr _Tp quiet_NaN() noexcept { return _Tp(); } 
# 351
static constexpr _Tp signaling_NaN() noexcept { return _Tp(); } 
# 357
static constexpr _Tp denorm_min() noexcept { return _Tp(); } 
# 358
}; 
# 363
template< class _Tp> 
# 364
struct numeric_limits< const _Tp>  : public std::numeric_limits< _Tp>  { 
# 365
}; 
# 367
template< class _Tp> 
# 368
struct numeric_limits< volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 369
}; 
# 371
template< class _Tp> 
# 372
struct numeric_limits< const volatile _Tp>  : public std::numeric_limits< _Tp>  { 
# 373
}; 
# 384 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< bool>  { 
# 386
static constexpr inline bool is_specialized = true; 
# 389
static constexpr bool min() noexcept { return false; } 
# 392
static constexpr bool max() noexcept { return true; } 
# 396
static constexpr bool lowest() noexcept { return min(); } 
# 398
static constexpr inline int digits = 1; 
# 399
static constexpr inline int digits10 = 0; 
# 401
static constexpr inline int max_digits10 = 0; 
# 403
static constexpr inline bool is_signed = false; 
# 404
static constexpr inline bool is_integer = true; 
# 405
static constexpr inline bool is_exact = true; 
# 406
static constexpr inline int radix = 2; 
# 409
static constexpr bool epsilon() noexcept { return false; } 
# 412
static constexpr bool round_error() noexcept { return false; } 
# 414
static constexpr inline int min_exponent = 0; 
# 415
static constexpr inline int min_exponent10 = 0; 
# 416
static constexpr inline int max_exponent = 0; 
# 417
static constexpr inline int max_exponent10 = 0; 
# 419
static constexpr inline bool has_infinity = false; 
# 420
static constexpr inline bool has_quiet_NaN = false; 
# 421
static constexpr inline bool has_signaling_NaN = false; 
# 422
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 424
static constexpr inline bool has_denorm_loss = false; 
# 427
static constexpr bool infinity() noexcept { return false; } 
# 430
static constexpr bool quiet_NaN() noexcept { return false; } 
# 433
static constexpr bool signaling_NaN() noexcept { return false; } 
# 436
static constexpr bool denorm_min() noexcept { return false; } 
# 438
static constexpr inline bool is_iec559 = false; 
# 439
static constexpr inline bool is_bounded = true; 
# 440
static constexpr inline bool is_modulo = false; 
# 445
static constexpr inline bool traps = true; 
# 446
static constexpr inline bool tinyness_before = false; 
# 447
static constexpr inline float_round_style round_style = round_toward_zero; 
# 449
}; 
# 453
template<> struct numeric_limits< char>  { 
# 455
static constexpr inline bool is_specialized = true; 
# 458
static constexpr char min() noexcept { return ((((char)(-1)) < 0) ? (-((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0)))) - 1 : ((char)0)); } 
# 461
static constexpr char max() noexcept { return ((((char)(-1)) < 0) ? (((((char)1) << (((sizeof(char) * (8)) - (((char)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char)0))); } 
# 465
static constexpr char lowest() noexcept { return min(); } 
# 468
static constexpr inline int digits = ((sizeof(char) * (8)) - (((char)(-1)) < 0)); 
# 469
static constexpr inline int digits10 = ((((sizeof(char) * (8)) - (((char)(-1)) < 0)) * (643L)) / (2136)); 
# 471
static constexpr inline int max_digits10 = 0; 
# 473
static constexpr inline bool is_signed = (((char)(-1)) < 0); 
# 474
static constexpr inline bool is_integer = true; 
# 475
static constexpr inline bool is_exact = true; 
# 476
static constexpr inline int radix = 2; 
# 479
static constexpr char epsilon() noexcept { return 0; } 
# 482
static constexpr char round_error() noexcept { return 0; } 
# 484
static constexpr inline int min_exponent = 0; 
# 485
static constexpr inline int min_exponent10 = 0; 
# 486
static constexpr inline int max_exponent = 0; 
# 487
static constexpr inline int max_exponent10 = 0; 
# 489
static constexpr inline bool has_infinity = false; 
# 490
static constexpr inline bool has_quiet_NaN = false; 
# 491
static constexpr inline bool has_signaling_NaN = false; 
# 492
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 494
static constexpr inline bool has_denorm_loss = false; 
# 497
static constexpr char infinity() noexcept { return ((char)0); } 
# 500
static constexpr char quiet_NaN() noexcept { return ((char)0); } 
# 503
static constexpr char signaling_NaN() noexcept { return ((char)0); } 
# 506
static constexpr char denorm_min() noexcept { return static_cast< char>(0); } 
# 508
static constexpr inline bool is_iec559 = false; 
# 509
static constexpr inline bool is_bounded = true; 
# 510
static constexpr inline bool is_modulo = (!is_signed); 
# 512
static constexpr inline bool traps = true; 
# 513
static constexpr inline bool tinyness_before = false; 
# 514
static constexpr inline float_round_style round_style = round_toward_zero; 
# 516
}; 
# 520
template<> struct numeric_limits< signed char>  { 
# 522
static constexpr inline bool is_specialized = true; 
# 525
static constexpr signed char min() noexcept { return (-127) - 1; } 
# 528
static constexpr signed char max() noexcept { return 127; } 
# 532
static constexpr signed char lowest() noexcept { return min(); } 
# 535
static constexpr inline int digits = ((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)); 
# 536
static constexpr inline int digits10 = ((((sizeof(signed char) * (8)) - (((signed char)(-1)) < 0)) * (643L)) / (2136)); 
# 539
static constexpr inline int max_digits10 = 0; 
# 541
static constexpr inline bool is_signed = true; 
# 542
static constexpr inline bool is_integer = true; 
# 543
static constexpr inline bool is_exact = true; 
# 544
static constexpr inline int radix = 2; 
# 547
static constexpr signed char epsilon() noexcept { return 0; } 
# 550
static constexpr signed char round_error() noexcept { return 0; } 
# 552
static constexpr inline int min_exponent = 0; 
# 553
static constexpr inline int min_exponent10 = 0; 
# 554
static constexpr inline int max_exponent = 0; 
# 555
static constexpr inline int max_exponent10 = 0; 
# 557
static constexpr inline bool has_infinity = false; 
# 558
static constexpr inline bool has_quiet_NaN = false; 
# 559
static constexpr inline bool has_signaling_NaN = false; 
# 560
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 562
static constexpr inline bool has_denorm_loss = false; 
# 565
static constexpr signed char infinity() noexcept { return static_cast< signed char>(0); } 
# 568
static constexpr signed char quiet_NaN() noexcept { return static_cast< signed char>(0); } 
# 571
static constexpr signed char signaling_NaN() noexcept 
# 572
{ return static_cast< signed char>(0); } 
# 575
static constexpr signed char denorm_min() noexcept 
# 576
{ return static_cast< signed char>(0); } 
# 578
static constexpr inline bool is_iec559 = false; 
# 579
static constexpr inline bool is_bounded = true; 
# 580
static constexpr inline bool is_modulo = false; 
# 582
static constexpr inline bool traps = true; 
# 583
static constexpr inline bool tinyness_before = false; 
# 584
static constexpr inline float_round_style round_style = round_toward_zero; 
# 586
}; 
# 590
template<> struct numeric_limits< unsigned char>  { 
# 592
static constexpr inline bool is_specialized = true; 
# 595
static constexpr unsigned char min() noexcept { return 0; } 
# 598
static constexpr unsigned char max() noexcept { return ((127) * 2U) + (1); } 
# 602
static constexpr unsigned char lowest() noexcept { return min(); } 
# 605
static constexpr inline int digits = ((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)); 
# 607
static constexpr inline int digits10 = ((((sizeof(unsigned char) * (8)) - (((unsigned char)(-1)) < 0)) * (643L)) / (2136)); 
# 610
static constexpr inline int max_digits10 = 0; 
# 612
static constexpr inline bool is_signed = false; 
# 613
static constexpr inline bool is_integer = true; 
# 614
static constexpr inline bool is_exact = true; 
# 615
static constexpr inline int radix = 2; 
# 618
static constexpr unsigned char epsilon() noexcept { return 0; } 
# 621
static constexpr unsigned char round_error() noexcept { return 0; } 
# 623
static constexpr inline int min_exponent = 0; 
# 624
static constexpr inline int min_exponent10 = 0; 
# 625
static constexpr inline int max_exponent = 0; 
# 626
static constexpr inline int max_exponent10 = 0; 
# 628
static constexpr inline bool has_infinity = false; 
# 629
static constexpr inline bool has_quiet_NaN = false; 
# 630
static constexpr inline bool has_signaling_NaN = false; 
# 631
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 633
static constexpr inline bool has_denorm_loss = false; 
# 636
static constexpr unsigned char infinity() noexcept 
# 637
{ return static_cast< unsigned char>(0); } 
# 640
static constexpr unsigned char quiet_NaN() noexcept 
# 641
{ return static_cast< unsigned char>(0); } 
# 644
static constexpr unsigned char signaling_NaN() noexcept 
# 645
{ return static_cast< unsigned char>(0); } 
# 648
static constexpr unsigned char denorm_min() noexcept 
# 649
{ return static_cast< unsigned char>(0); } 
# 651
static constexpr inline bool is_iec559 = false; 
# 652
static constexpr inline bool is_bounded = true; 
# 653
static constexpr inline bool is_modulo = true; 
# 655
static constexpr inline bool traps = true; 
# 656
static constexpr inline bool tinyness_before = false; 
# 657
static constexpr inline float_round_style round_style = round_toward_zero; 
# 659
}; 
# 663
template<> struct numeric_limits< wchar_t>  { 
# 665
static constexpr inline bool is_specialized = true; 
# 668
static constexpr wchar_t min() noexcept { return ((((wchar_t)(-1)) < 0) ? (-((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0)))) - 1 : ((wchar_t)0)); } 
# 671
static constexpr wchar_t max() noexcept { return ((((wchar_t)(-1)) < 0) ? (((((wchar_t)1) << (((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((wchar_t)0))); } 
# 675
static constexpr wchar_t lowest() noexcept { return min(); } 
# 678
static constexpr inline int digits = ((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)); 
# 679
static constexpr inline int digits10 = ((((sizeof(wchar_t) * (8)) - (((wchar_t)(-1)) < 0)) * (643L)) / (2136)); 
# 682
static constexpr inline int max_digits10 = 0; 
# 684
static constexpr inline bool is_signed = (((wchar_t)(-1)) < 0); 
# 685
static constexpr inline bool is_integer = true; 
# 686
static constexpr inline bool is_exact = true; 
# 687
static constexpr inline int radix = 2; 
# 690
static constexpr wchar_t epsilon() noexcept { return 0; } 
# 693
static constexpr wchar_t round_error() noexcept { return 0; } 
# 695
static constexpr inline int min_exponent = 0; 
# 696
static constexpr inline int min_exponent10 = 0; 
# 697
static constexpr inline int max_exponent = 0; 
# 698
static constexpr inline int max_exponent10 = 0; 
# 700
static constexpr inline bool has_infinity = false; 
# 701
static constexpr inline bool has_quiet_NaN = false; 
# 702
static constexpr inline bool has_signaling_NaN = false; 
# 703
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 705
static constexpr inline bool has_denorm_loss = false; 
# 708
static constexpr wchar_t infinity() noexcept { return ((wchar_t)0); } 
# 711
static constexpr wchar_t quiet_NaN() noexcept { return ((wchar_t)0); } 
# 714
static constexpr wchar_t signaling_NaN() noexcept { return ((wchar_t)0); } 
# 717
static constexpr wchar_t denorm_min() noexcept { return ((wchar_t)0); } 
# 719
static constexpr inline bool is_iec559 = false; 
# 720
static constexpr inline bool is_bounded = true; 
# 721
static constexpr inline bool is_modulo = (!is_signed); 
# 723
static constexpr inline bool traps = true; 
# 724
static constexpr inline bool tinyness_before = false; 
# 725
static constexpr inline float_round_style round_style = round_toward_zero; 
# 727
}; 
# 797 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< char16_t>  { 
# 799
static constexpr inline bool is_specialized = true; 
# 802
static constexpr char16_t min() noexcept { return ((((char16_t)(-1)) < 0) ? (-((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0)))) - 1 : ((char16_t)0)); } 
# 805
static constexpr char16_t max() noexcept { return ((((char16_t)(-1)) < 0) ? (((((char16_t)1) << (((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) - (1))) - 1) << 1) + 1 : (~((char16_t)0))); } 
# 808
static constexpr char16_t lowest() noexcept { return min(); } 
# 810
static constexpr inline int digits = ((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)); 
# 811
static constexpr inline int digits10 = ((((sizeof(char16_t) * (8)) - (((char16_t)(-1)) < 0)) * (643L)) / (2136)); 
# 812
static constexpr inline int max_digits10 = 0; 
# 813
static constexpr inline bool is_signed = (((char16_t)(-1)) < 0); 
# 814
static constexpr inline bool is_integer = true; 
# 815
static constexpr inline bool is_exact = true; 
# 816
static constexpr inline int radix = 2; 
# 819
static constexpr char16_t epsilon() noexcept { return 0; } 
# 822
static constexpr char16_t round_error() noexcept { return 0; } 
# 824
static constexpr inline int min_exponent = 0; 
# 825
static constexpr inline int min_exponent10 = 0; 
# 826
static constexpr inline int max_exponent = 0; 
# 827
static constexpr inline int max_exponent10 = 0; 
# 829
static constexpr inline bool has_infinity = false; 
# 830
static constexpr inline bool has_quiet_NaN = false; 
# 831
static constexpr inline bool has_signaling_NaN = false; 
# 832
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 833
static constexpr inline bool has_denorm_loss = false; 
# 836
static constexpr char16_t infinity() noexcept { return ((char16_t)0); } 
# 839
static constexpr char16_t quiet_NaN() noexcept { return ((char16_t)0); } 
# 842
static constexpr char16_t signaling_NaN() noexcept { return ((char16_t)0); } 
# 845
static constexpr char16_t denorm_min() noexcept { return ((char16_t)0); } 
# 847
static constexpr inline bool is_iec559 = false; 
# 848
static constexpr inline bool is_bounded = true; 
# 849
static constexpr inline bool is_modulo = (!is_signed); 
# 851
static constexpr inline bool traps = true; 
# 852
static constexpr inline bool tinyness_before = false; 
# 853
static constexpr inline float_round_style round_style = round_toward_zero; 
# 854
}; 
# 858
template<> struct numeric_limits< char32_t>  { 
# 860
static constexpr inline bool is_specialized = true; 
# 863
static constexpr char32_t min() noexcept { return ((((char32_t)(-1)) < (0)) ? (-((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0)))) - (1) : ((char32_t)0)); } 
# 866
static constexpr char32_t max() noexcept { return ((((char32_t)(-1)) < (0)) ? (((((char32_t)1) << (((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) - (1))) - (1)) << 1) + (1) : (~((char32_t)0))); } 
# 869
static constexpr char32_t lowest() noexcept { return min(); } 
# 871
static constexpr inline int digits = ((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))); 
# 872
static constexpr inline int digits10 = ((((sizeof(char32_t) * (8)) - (((char32_t)(-1)) < (0))) * (643L)) / (2136)); 
# 873
static constexpr inline int max_digits10 = 0; 
# 874
static constexpr inline bool is_signed = (((char32_t)(-1)) < (0)); 
# 875
static constexpr inline bool is_integer = true; 
# 876
static constexpr inline bool is_exact = true; 
# 877
static constexpr inline int radix = 2; 
# 880
static constexpr char32_t epsilon() noexcept { return 0; } 
# 883
static constexpr char32_t round_error() noexcept { return 0; } 
# 885
static constexpr inline int min_exponent = 0; 
# 886
static constexpr inline int min_exponent10 = 0; 
# 887
static constexpr inline int max_exponent = 0; 
# 888
static constexpr inline int max_exponent10 = 0; 
# 890
static constexpr inline bool has_infinity = false; 
# 891
static constexpr inline bool has_quiet_NaN = false; 
# 892
static constexpr inline bool has_signaling_NaN = false; 
# 893
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 894
static constexpr inline bool has_denorm_loss = false; 
# 897
static constexpr char32_t infinity() noexcept { return ((char32_t)0); } 
# 900
static constexpr char32_t quiet_NaN() noexcept { return ((char32_t)0); } 
# 903
static constexpr char32_t signaling_NaN() noexcept { return ((char32_t)0); } 
# 906
static constexpr char32_t denorm_min() noexcept { return ((char32_t)0); } 
# 908
static constexpr inline bool is_iec559 = false; 
# 909
static constexpr inline bool is_bounded = true; 
# 910
static constexpr inline bool is_modulo = (!is_signed); 
# 912
static constexpr inline bool traps = true; 
# 913
static constexpr inline bool tinyness_before = false; 
# 914
static constexpr inline float_round_style round_style = round_toward_zero; 
# 915
}; 
# 920
template<> struct numeric_limits< short>  { 
# 922
static constexpr inline bool is_specialized = true; 
# 925
static constexpr short min() noexcept { return (-32767) - 1; } 
# 928
static constexpr short max() noexcept { return 32767; } 
# 932
static constexpr short lowest() noexcept { return min(); } 
# 935
static constexpr inline int digits = ((sizeof(short) * (8)) - (((short)(-1)) < 0)); 
# 936
static constexpr inline int digits10 = ((((sizeof(short) * (8)) - (((short)(-1)) < 0)) * (643L)) / (2136)); 
# 938
static constexpr inline int max_digits10 = 0; 
# 940
static constexpr inline bool is_signed = true; 
# 941
static constexpr inline bool is_integer = true; 
# 942
static constexpr inline bool is_exact = true; 
# 943
static constexpr inline int radix = 2; 
# 946
static constexpr short epsilon() noexcept { return 0; } 
# 949
static constexpr short round_error() noexcept { return 0; } 
# 951
static constexpr inline int min_exponent = 0; 
# 952
static constexpr inline int min_exponent10 = 0; 
# 953
static constexpr inline int max_exponent = 0; 
# 954
static constexpr inline int max_exponent10 = 0; 
# 956
static constexpr inline bool has_infinity = false; 
# 957
static constexpr inline bool has_quiet_NaN = false; 
# 958
static constexpr inline bool has_signaling_NaN = false; 
# 959
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 961
static constexpr inline bool has_denorm_loss = false; 
# 964
static constexpr short infinity() noexcept { return ((short)0); } 
# 967
static constexpr short quiet_NaN() noexcept { return ((short)0); } 
# 970
static constexpr short signaling_NaN() noexcept { return ((short)0); } 
# 973
static constexpr short denorm_min() noexcept { return ((short)0); } 
# 975
static constexpr inline bool is_iec559 = false; 
# 976
static constexpr inline bool is_bounded = true; 
# 977
static constexpr inline bool is_modulo = false; 
# 979
static constexpr inline bool traps = true; 
# 980
static constexpr inline bool tinyness_before = false; 
# 981
static constexpr inline float_round_style round_style = round_toward_zero; 
# 983
}; 
# 987
template<> struct numeric_limits< unsigned short>  { 
# 989
static constexpr inline bool is_specialized = true; 
# 992
static constexpr unsigned short min() noexcept { return 0; } 
# 995
static constexpr unsigned short max() noexcept { return ((32767) * 2U) + (1); } 
# 999
static constexpr unsigned short lowest() noexcept { return min(); } 
# 1002
static constexpr inline int digits = ((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)); 
# 1004
static constexpr inline int digits10 = ((((sizeof(unsigned short) * (8)) - (((unsigned short)(-1)) < 0)) * (643L)) / (2136)); 
# 1007
static constexpr inline int max_digits10 = 0; 
# 1009
static constexpr inline bool is_signed = false; 
# 1010
static constexpr inline bool is_integer = true; 
# 1011
static constexpr inline bool is_exact = true; 
# 1012
static constexpr inline int radix = 2; 
# 1015
static constexpr unsigned short epsilon() noexcept { return 0; } 
# 1018
static constexpr unsigned short round_error() noexcept { return 0; } 
# 1020
static constexpr inline int min_exponent = 0; 
# 1021
static constexpr inline int min_exponent10 = 0; 
# 1022
static constexpr inline int max_exponent = 0; 
# 1023
static constexpr inline int max_exponent10 = 0; 
# 1025
static constexpr inline bool has_infinity = false; 
# 1026
static constexpr inline bool has_quiet_NaN = false; 
# 1027
static constexpr inline bool has_signaling_NaN = false; 
# 1028
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1030
static constexpr inline bool has_denorm_loss = false; 
# 1033
static constexpr unsigned short infinity() noexcept 
# 1034
{ return static_cast< unsigned short>(0); } 
# 1037
static constexpr unsigned short quiet_NaN() noexcept 
# 1038
{ return static_cast< unsigned short>(0); } 
# 1041
static constexpr unsigned short signaling_NaN() noexcept 
# 1042
{ return static_cast< unsigned short>(0); } 
# 1045
static constexpr unsigned short denorm_min() noexcept 
# 1046
{ return static_cast< unsigned short>(0); } 
# 1048
static constexpr inline bool is_iec559 = false; 
# 1049
static constexpr inline bool is_bounded = true; 
# 1050
static constexpr inline bool is_modulo = true; 
# 1052
static constexpr inline bool traps = true; 
# 1053
static constexpr inline bool tinyness_before = false; 
# 1054
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1056
}; 
# 1060
template<> struct numeric_limits< int>  { 
# 1062
static constexpr inline bool is_specialized = true; 
# 1065
static constexpr int min() noexcept { return (-2147483647) - 1; } 
# 1068
static constexpr int max() noexcept { return 2147483647; } 
# 1072
static constexpr int lowest() noexcept { return min(); } 
# 1075
static constexpr inline int digits = ((sizeof(int) * (8)) - (((int)(-1)) < 0)); 
# 1076
static constexpr inline int digits10 = ((((sizeof(int) * (8)) - (((int)(-1)) < 0)) * (643L)) / (2136)); 
# 1078
static constexpr inline int max_digits10 = 0; 
# 1080
static constexpr inline bool is_signed = true; 
# 1081
static constexpr inline bool is_integer = true; 
# 1082
static constexpr inline bool is_exact = true; 
# 1083
static constexpr inline int radix = 2; 
# 1086
static constexpr int epsilon() noexcept { return 0; } 
# 1089
static constexpr int round_error() noexcept { return 0; } 
# 1091
static constexpr inline int min_exponent = 0; 
# 1092
static constexpr inline int min_exponent10 = 0; 
# 1093
static constexpr inline int max_exponent = 0; 
# 1094
static constexpr inline int max_exponent10 = 0; 
# 1096
static constexpr inline bool has_infinity = false; 
# 1097
static constexpr inline bool has_quiet_NaN = false; 
# 1098
static constexpr inline bool has_signaling_NaN = false; 
# 1099
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1101
static constexpr inline bool has_denorm_loss = false; 
# 1104
static constexpr int infinity() noexcept { return static_cast< int>(0); } 
# 1107
static constexpr int quiet_NaN() noexcept { return static_cast< int>(0); } 
# 1110
static constexpr int signaling_NaN() noexcept { return static_cast< int>(0); } 
# 1113
static constexpr int denorm_min() noexcept { return static_cast< int>(0); } 
# 1115
static constexpr inline bool is_iec559 = false; 
# 1116
static constexpr inline bool is_bounded = true; 
# 1117
static constexpr inline bool is_modulo = false; 
# 1119
static constexpr inline bool traps = true; 
# 1120
static constexpr inline bool tinyness_before = false; 
# 1121
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1123
}; 
# 1127
template<> struct numeric_limits< unsigned>  { 
# 1129
static constexpr inline bool is_specialized = true; 
# 1132
static constexpr unsigned min() noexcept { return 0; } 
# 1135
static constexpr unsigned max() noexcept { return ((2147483647) * 2U) + (1); } 
# 1139
static constexpr unsigned lowest() noexcept { return min(); } 
# 1142
static constexpr inline int digits = ((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))); 
# 1144
static constexpr inline int digits10 = ((((sizeof(unsigned) * (8)) - (((unsigned)(-1)) < (0))) * (643L)) / (2136)); 
# 1147
static constexpr inline int max_digits10 = 0; 
# 1149
static constexpr inline bool is_signed = false; 
# 1150
static constexpr inline bool is_integer = true; 
# 1151
static constexpr inline bool is_exact = true; 
# 1152
static constexpr inline int radix = 2; 
# 1155
static constexpr unsigned epsilon() noexcept { return 0; } 
# 1158
static constexpr unsigned round_error() noexcept { return 0; } 
# 1160
static constexpr inline int min_exponent = 0; 
# 1161
static constexpr inline int min_exponent10 = 0; 
# 1162
static constexpr inline int max_exponent = 0; 
# 1163
static constexpr inline int max_exponent10 = 0; 
# 1165
static constexpr inline bool has_infinity = false; 
# 1166
static constexpr inline bool has_quiet_NaN = false; 
# 1167
static constexpr inline bool has_signaling_NaN = false; 
# 1168
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1170
static constexpr inline bool has_denorm_loss = false; 
# 1173
static constexpr unsigned infinity() noexcept { return static_cast< unsigned>(0); } 
# 1176
static constexpr unsigned quiet_NaN() noexcept 
# 1177
{ return static_cast< unsigned>(0); } 
# 1180
static constexpr unsigned signaling_NaN() noexcept 
# 1181
{ return static_cast< unsigned>(0); } 
# 1184
static constexpr unsigned denorm_min() noexcept 
# 1185
{ return static_cast< unsigned>(0); } 
# 1187
static constexpr inline bool is_iec559 = false; 
# 1188
static constexpr inline bool is_bounded = true; 
# 1189
static constexpr inline bool is_modulo = true; 
# 1191
static constexpr inline bool traps = true; 
# 1192
static constexpr inline bool tinyness_before = false; 
# 1193
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1195
}; 
# 1199
template<> struct numeric_limits< long>  { 
# 1201
static constexpr inline bool is_specialized = true; 
# 1204
static constexpr long min() noexcept { return (-9223372036854775807L) - (1); } 
# 1207
static constexpr long max() noexcept { return 9223372036854775807L; } 
# 1211
static constexpr long lowest() noexcept { return min(); } 
# 1214
static constexpr inline int digits = ((sizeof(long) * (8)) - (((long)(-1)) < (0))); 
# 1215
static constexpr inline int digits10 = ((((sizeof(long) * (8)) - (((long)(-1)) < (0))) * (643L)) / (2136)); 
# 1217
static constexpr inline int max_digits10 = 0; 
# 1219
static constexpr inline bool is_signed = true; 
# 1220
static constexpr inline bool is_integer = true; 
# 1221
static constexpr inline bool is_exact = true; 
# 1222
static constexpr inline int radix = 2; 
# 1225
static constexpr long epsilon() noexcept { return 0; } 
# 1228
static constexpr long round_error() noexcept { return 0; } 
# 1230
static constexpr inline int min_exponent = 0; 
# 1231
static constexpr inline int min_exponent10 = 0; 
# 1232
static constexpr inline int max_exponent = 0; 
# 1233
static constexpr inline int max_exponent10 = 0; 
# 1235
static constexpr inline bool has_infinity = false; 
# 1236
static constexpr inline bool has_quiet_NaN = false; 
# 1237
static constexpr inline bool has_signaling_NaN = false; 
# 1238
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1240
static constexpr inline bool has_denorm_loss = false; 
# 1243
static constexpr long infinity() noexcept { return static_cast< long>(0); } 
# 1246
static constexpr long quiet_NaN() noexcept { return static_cast< long>(0); } 
# 1249
static constexpr long signaling_NaN() noexcept { return static_cast< long>(0); } 
# 1252
static constexpr long denorm_min() noexcept { return static_cast< long>(0); } 
# 1254
static constexpr inline bool is_iec559 = false; 
# 1255
static constexpr inline bool is_bounded = true; 
# 1256
static constexpr inline bool is_modulo = false; 
# 1258
static constexpr inline bool traps = true; 
# 1259
static constexpr inline bool tinyness_before = false; 
# 1260
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1262
}; 
# 1266
template<> struct numeric_limits< unsigned long>  { 
# 1268
static constexpr inline bool is_specialized = true; 
# 1271
static constexpr unsigned long min() noexcept { return 0; } 
# 1274
static constexpr unsigned long max() noexcept { return ((9223372036854775807L) * 2UL) + (1); } 
# 1278
static constexpr unsigned long lowest() noexcept { return min(); } 
# 1281
static constexpr inline int digits = ((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))); 
# 1283
static constexpr inline int digits10 = ((((sizeof(unsigned long) * (8)) - (((unsigned long)(-1)) < (0))) * (643L)) / (2136)); 
# 1286
static constexpr inline int max_digits10 = 0; 
# 1288
static constexpr inline bool is_signed = false; 
# 1289
static constexpr inline bool is_integer = true; 
# 1290
static constexpr inline bool is_exact = true; 
# 1291
static constexpr inline int radix = 2; 
# 1294
static constexpr unsigned long epsilon() noexcept { return 0; } 
# 1297
static constexpr unsigned long round_error() noexcept { return 0; } 
# 1299
static constexpr inline int min_exponent = 0; 
# 1300
static constexpr inline int min_exponent10 = 0; 
# 1301
static constexpr inline int max_exponent = 0; 
# 1302
static constexpr inline int max_exponent10 = 0; 
# 1304
static constexpr inline bool has_infinity = false; 
# 1305
static constexpr inline bool has_quiet_NaN = false; 
# 1306
static constexpr inline bool has_signaling_NaN = false; 
# 1307
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1309
static constexpr inline bool has_denorm_loss = false; 
# 1312
static constexpr unsigned long infinity() noexcept 
# 1313
{ return static_cast< unsigned long>(0); } 
# 1316
static constexpr unsigned long quiet_NaN() noexcept 
# 1317
{ return static_cast< unsigned long>(0); } 
# 1320
static constexpr unsigned long signaling_NaN() noexcept 
# 1321
{ return static_cast< unsigned long>(0); } 
# 1324
static constexpr unsigned long denorm_min() noexcept 
# 1325
{ return static_cast< unsigned long>(0); } 
# 1327
static constexpr inline bool is_iec559 = false; 
# 1328
static constexpr inline bool is_bounded = true; 
# 1329
static constexpr inline bool is_modulo = true; 
# 1331
static constexpr inline bool traps = true; 
# 1332
static constexpr inline bool tinyness_before = false; 
# 1333
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1335
}; 
# 1339
template<> struct numeric_limits< long long>  { 
# 1341
static constexpr inline bool is_specialized = true; 
# 1344
static constexpr long long min() noexcept { return (-9223372036854775807LL) - (1); } 
# 1347
static constexpr long long max() noexcept { return 9223372036854775807LL; } 
# 1351
static constexpr long long lowest() noexcept { return min(); } 
# 1354
static constexpr inline int digits = ((sizeof(long long) * (8)) - (((long long)(-1)) < (0))); 
# 1356
static constexpr inline int digits10 = ((((sizeof(long long) * (8)) - (((long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1359
static constexpr inline int max_digits10 = 0; 
# 1361
static constexpr inline bool is_signed = true; 
# 1362
static constexpr inline bool is_integer = true; 
# 1363
static constexpr inline bool is_exact = true; 
# 1364
static constexpr inline int radix = 2; 
# 1367
static constexpr long long epsilon() noexcept { return 0; } 
# 1370
static constexpr long long round_error() noexcept { return 0; } 
# 1372
static constexpr inline int min_exponent = 0; 
# 1373
static constexpr inline int min_exponent10 = 0; 
# 1374
static constexpr inline int max_exponent = 0; 
# 1375
static constexpr inline int max_exponent10 = 0; 
# 1377
static constexpr inline bool has_infinity = false; 
# 1378
static constexpr inline bool has_quiet_NaN = false; 
# 1379
static constexpr inline bool has_signaling_NaN = false; 
# 1380
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1382
static constexpr inline bool has_denorm_loss = false; 
# 1385
static constexpr long long infinity() noexcept { return static_cast< long long>(0); } 
# 1388
static constexpr long long quiet_NaN() noexcept { return static_cast< long long>(0); } 
# 1391
static constexpr long long signaling_NaN() noexcept 
# 1392
{ return static_cast< long long>(0); } 
# 1395
static constexpr long long denorm_min() noexcept { return static_cast< long long>(0); } 
# 1397
static constexpr inline bool is_iec559 = false; 
# 1398
static constexpr inline bool is_bounded = true; 
# 1399
static constexpr inline bool is_modulo = false; 
# 1401
static constexpr inline bool traps = true; 
# 1402
static constexpr inline bool tinyness_before = false; 
# 1403
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1405
}; 
# 1409
template<> struct numeric_limits< unsigned long long>  { 
# 1411
static constexpr inline bool is_specialized = true; 
# 1414
static constexpr unsigned long long min() noexcept { return 0; } 
# 1417
static constexpr unsigned long long max() noexcept { return ((9223372036854775807LL) * 2ULL) + (1); } 
# 1421
static constexpr unsigned long long lowest() noexcept { return min(); } 
# 1424
static constexpr inline int digits = ((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))); 
# 1426
static constexpr inline int digits10 = ((((sizeof(unsigned long long) * (8)) - (((unsigned long long)(-1)) < (0))) * (643L)) / (2136)); 
# 1429
static constexpr inline int max_digits10 = 0; 
# 1431
static constexpr inline bool is_signed = false; 
# 1432
static constexpr inline bool is_integer = true; 
# 1433
static constexpr inline bool is_exact = true; 
# 1434
static constexpr inline int radix = 2; 
# 1437
static constexpr unsigned long long epsilon() noexcept { return 0; } 
# 1440
static constexpr unsigned long long round_error() noexcept { return 0; } 
# 1442
static constexpr inline int min_exponent = 0; 
# 1443
static constexpr inline int min_exponent10 = 0; 
# 1444
static constexpr inline int max_exponent = 0; 
# 1445
static constexpr inline int max_exponent10 = 0; 
# 1447
static constexpr inline bool has_infinity = false; 
# 1448
static constexpr inline bool has_quiet_NaN = false; 
# 1449
static constexpr inline bool has_signaling_NaN = false; 
# 1450
static constexpr inline float_denorm_style has_denorm = denorm_absent; 
# 1452
static constexpr inline bool has_denorm_loss = false; 
# 1455
static constexpr unsigned long long infinity() noexcept 
# 1456
{ return static_cast< unsigned long long>(0); } 
# 1459
static constexpr unsigned long long quiet_NaN() noexcept 
# 1460
{ return static_cast< unsigned long long>(0); } 
# 1463
static constexpr unsigned long long signaling_NaN() noexcept 
# 1464
{ return static_cast< unsigned long long>(0); } 
# 1467
static constexpr unsigned long long denorm_min() noexcept 
# 1468
{ return static_cast< unsigned long long>(0); } 
# 1470
static constexpr inline bool is_iec559 = false; 
# 1471
static constexpr inline bool is_bounded = true; 
# 1472
static constexpr inline bool is_modulo = true; 
# 1474
static constexpr inline bool traps = true; 
# 1475
static constexpr inline bool tinyness_before = false; 
# 1476
static constexpr inline float_round_style round_style = round_toward_zero; 
# 1478
}; 
# 1635 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< __int128>  { static constexpr inline bool is_specialized = true; static constexpr __int128 min() noexcept { return ((((__int128)(-1)) < (0)) ? (-((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0)))) - (1) : ((__int128)0)); } static constexpr __int128 max() noexcept { return ((((__int128)(-1)) < (0)) ? (((((__int128)1) << ((128 - (((__int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((__int128)0))); } static constexpr inline int digits = (128 - 1); static constexpr inline int digits10 = (((128 - 1) * 643L) / (2136)); static constexpr inline bool is_signed = true; static constexpr inline bool is_integer = true; static constexpr inline bool is_exact = true; static constexpr inline int radix = 2; static constexpr __int128 epsilon() noexcept { return 0; } static constexpr __int128 round_error() noexcept { return 0; } static constexpr __int128 lowest() noexcept { return min(); } static constexpr inline int max_digits10 = 0; static constexpr inline int min_exponent = 0; static constexpr inline int min_exponent10 = 0; static constexpr inline int max_exponent = 0; static constexpr inline int max_exponent10 = 0; static constexpr inline bool has_infinity = false; static constexpr inline bool has_quiet_NaN = false; static constexpr inline bool has_signaling_NaN = false; static constexpr inline float_denorm_style has_denorm = denorm_absent; static constexpr inline bool has_denorm_loss = false; static constexpr __int128 infinity() noexcept { return static_cast< __int128>(0); } static constexpr __int128 quiet_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 signaling_NaN() noexcept { return static_cast< __int128>(0); } static constexpr __int128 denorm_min() noexcept { return static_cast< __int128>(0); } static constexpr inline bool is_iec559 = false; static constexpr inline bool is_bounded = true; static constexpr inline bool is_modulo = false; static constexpr inline bool traps = true; static constexpr inline bool tinyness_before = false; static constexpr inline float_round_style round_style = round_toward_zero; }; template<> struct numeric_limits< unsigned __int128>  { static constexpr inline bool is_specialized = true; static constexpr unsigned __int128 min() noexcept { return 0; } static constexpr unsigned __int128 max() noexcept { return ((((unsigned __int128)(-1)) < (0)) ? (((((unsigned __int128)1) << ((128 - (((unsigned __int128)(-1)) < (0))) - 1)) - (1)) << 1) + (1) : (~((unsigned __int128)0))); } static constexpr unsigned __int128 lowest() noexcept { return min(); } static constexpr inline int max_digits10 = 0; static constexpr inline int digits = 128; static constexpr inline int digits10 = (((128) * 643L) / (2136)); static constexpr inline bool is_signed = false; static constexpr inline bool is_integer = true; static constexpr inline bool is_exact = true; static constexpr inline int radix = 2; static constexpr unsigned __int128 epsilon() noexcept { return 0; } static constexpr unsigned __int128 round_error() noexcept { return 0; } static constexpr inline int min_exponent = 0; static constexpr inline int min_exponent10 = 0; static constexpr inline int max_exponent = 0; static constexpr inline int max_exponent10 = 0; static constexpr inline bool has_infinity = false; static constexpr inline bool has_quiet_NaN = false; static constexpr inline bool has_signaling_NaN = false; static constexpr inline float_denorm_style has_denorm = denorm_absent; static constexpr inline bool has_denorm_loss = false; static constexpr unsigned __int128 infinity() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 quiet_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 signaling_NaN() noexcept { return static_cast< unsigned __int128>(0); } static constexpr unsigned __int128 denorm_min() noexcept { return static_cast< unsigned __int128>(0); } static constexpr inline bool is_iec559 = false; static constexpr inline bool is_bounded = true; static constexpr inline bool is_modulo = true; static constexpr inline bool traps = true; static constexpr inline bool tinyness_before = false; static constexpr inline float_round_style round_style = round_toward_zero; }; 
# 1668 "/usr/include/c++/11/limits" 3
template<> struct numeric_limits< float>  { 
# 1670
static constexpr inline bool is_specialized = true; 
# 1673
static constexpr float min() noexcept { return (1.1754944E-38F); } 
# 1676
static constexpr float max() noexcept { return (3.4028235E38F); } 
# 1680
static constexpr float lowest() noexcept { return -(3.4028235E38F); } 
# 1683
static constexpr inline int digits = 24; 
# 1684
static constexpr inline int digits10 = 6; 
# 1686
static constexpr inline int max_digits10 = ((2) + (((24) * 643L) / (2136))); 
# 1689
static constexpr inline bool is_signed = true; 
# 1690
static constexpr inline bool is_integer = false; 
# 1691
static constexpr inline bool is_exact = false; 
# 1692
static constexpr inline int radix = 2; 
# 1695
static constexpr float epsilon() noexcept { return (1.1920929E-7F); } 
# 1698
static constexpr float round_error() noexcept { return (0.5F); } 
# 1700
static constexpr inline int min_exponent = (-125); 
# 1701
static constexpr inline int min_exponent10 = (-37); 
# 1702
static constexpr inline int max_exponent = 128; 
# 1703
static constexpr inline int max_exponent10 = 38; 
# 1705
static constexpr inline bool has_infinity = (1); 
# 1706
static constexpr inline bool has_quiet_NaN = (1); 
# 1707
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1708
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1710
static constexpr inline bool has_denorm_loss = false; 
# 1714
static constexpr float infinity() noexcept { return __builtin_huge_valf(); } 
# 1717
static constexpr float quiet_NaN() noexcept { return __builtin_nanf(""); } 
# 1720
static constexpr float signaling_NaN() noexcept { return __builtin_nansf(""); } 
# 1723
static constexpr float denorm_min() noexcept { return (1.4E-45F); } 
# 1725
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1727
static constexpr inline bool is_bounded = true; 
# 1728
static constexpr inline bool is_modulo = false; 
# 1730
static constexpr inline bool traps = false; 
# 1731
static constexpr inline bool tinyness_before = false; 
# 1733
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1735
}; 
# 1743
template<> struct numeric_limits< double>  { 
# 1745
static constexpr inline bool is_specialized = true; 
# 1748
static constexpr double min() noexcept { return (double)(2.2250738585072013831E-308L); } 
# 1751
static constexpr double max() noexcept { return (double)(1.7976931348623157081E308L); } 
# 1755
static constexpr double lowest() noexcept { return -((double)(1.7976931348623157081E308L)); } 
# 1758
static constexpr inline int digits = 53; 
# 1759
static constexpr inline int digits10 = 15; 
# 1761
static constexpr inline int max_digits10 = ((2) + (((53) * 643L) / (2136))); 
# 1764
static constexpr inline bool is_signed = true; 
# 1765
static constexpr inline bool is_integer = false; 
# 1766
static constexpr inline bool is_exact = false; 
# 1767
static constexpr inline int radix = 2; 
# 1770
static constexpr double epsilon() noexcept { return (double)(2.2204460492503130808E-16L); } 
# 1773
static constexpr double round_error() noexcept { return (0.5); } 
# 1775
static constexpr inline int min_exponent = (-1021); 
# 1776
static constexpr inline int min_exponent10 = (-307); 
# 1777
static constexpr inline int max_exponent = 1024; 
# 1778
static constexpr inline int max_exponent10 = 308; 
# 1780
static constexpr inline bool has_infinity = (1); 
# 1781
static constexpr inline bool has_quiet_NaN = (1); 
# 1782
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1783
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1785
static constexpr inline bool has_denorm_loss = false; 
# 1789
static constexpr double infinity() noexcept { return __builtin_huge_val(); } 
# 1792
static constexpr double quiet_NaN() noexcept { return __builtin_nan(""); } 
# 1795
static constexpr double signaling_NaN() noexcept { return __builtin_nans(""); } 
# 1798
static constexpr double denorm_min() noexcept { return (double)(4.940656458412465442E-324L); } 
# 1800
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1802
static constexpr inline bool is_bounded = true; 
# 1803
static constexpr inline bool is_modulo = false; 
# 1805
static constexpr inline bool traps = false; 
# 1806
static constexpr inline bool tinyness_before = false; 
# 1808
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1810
}; 
# 1818
template<> struct numeric_limits< long double>  { 
# 1820
static constexpr inline bool is_specialized = true; 
# 1823
static constexpr long double min() noexcept { return (3.3621031431120935063E-4932L); } 
# 1826
static constexpr long double max() noexcept { return (1.189731495357231765E4932L); } 
# 1830
static constexpr long double lowest() noexcept { return -(1.189731495357231765E4932L); } 
# 1833
static constexpr inline int digits = 64; 
# 1834
static constexpr inline int digits10 = 18; 
# 1836
static constexpr inline int max_digits10 = ((2) + (((64) * 643L) / (2136))); 
# 1839
static constexpr inline bool is_signed = true; 
# 1840
static constexpr inline bool is_integer = false; 
# 1841
static constexpr inline bool is_exact = false; 
# 1842
static constexpr inline int radix = 2; 
# 1845
static constexpr long double epsilon() noexcept { return (1.084202172485504434E-19L); } 
# 1848
static constexpr long double round_error() noexcept { return (0.5L); } 
# 1850
static constexpr inline int min_exponent = (-16381); 
# 1851
static constexpr inline int min_exponent10 = (-4931); 
# 1852
static constexpr inline int max_exponent = 16384; 
# 1853
static constexpr inline int max_exponent10 = 4932; 
# 1855
static constexpr inline bool has_infinity = (1); 
# 1856
static constexpr inline bool has_quiet_NaN = (1); 
# 1857
static constexpr inline bool has_signaling_NaN = has_quiet_NaN; 
# 1858
static constexpr inline float_denorm_style has_denorm = (((bool)1) ? denorm_present : denorm_absent); 
# 1860
static constexpr inline bool has_denorm_loss = false; 
# 1864
static constexpr long double infinity() noexcept { return __builtin_huge_vall(); } 
# 1867
static constexpr long double quiet_NaN() noexcept { return __builtin_nanl(""); } 
# 1870
static constexpr long double signaling_NaN() noexcept { return __builtin_nansl(""); } 
# 1873
static constexpr long double denorm_min() noexcept { return (3.6E-4951L); } 
# 1875
static constexpr inline bool is_iec559 = (has_infinity && has_quiet_NaN && (has_denorm == (denorm_present))); 
# 1877
static constexpr inline bool is_bounded = true; 
# 1878
static constexpr inline bool is_modulo = false; 
# 1880
static constexpr inline bool traps = false; 
# 1881
static constexpr inline bool tinyness_before = false; 
# 1883
static constexpr inline float_round_style round_style = round_to_nearest; 
# 1885
}; 
# 1892
}
# 39 "/usr/include/c++/11/tr1/special_function_util.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/11/tr1/special_function_util.h" 3
namespace __detail { 
# 55
template< class _Tp> 
# 56
struct __floating_point_constant { 
# 58
static const _Tp __value; 
# 59
}; 
# 63
template< class _Tp> 
# 64
struct __numeric_constants { 
# 67
static _Tp __pi() throw() 
# 68
{ return static_cast< _Tp>((3.1415926535897932385L)); } 
# 70
static _Tp __pi_2() throw() 
# 71
{ return static_cast< _Tp>((1.5707963267948966193L)); } 
# 73
static _Tp __pi_3() throw() 
# 74
{ return static_cast< _Tp>((1.0471975511965977461L)); } 
# 76
static _Tp __pi_4() throw() 
# 77
{ return static_cast< _Tp>((0.78539816339744830963L)); } 
# 79
static _Tp __1_pi() throw() 
# 80
{ return static_cast< _Tp>((0.31830988618379067154L)); } 
# 82
static _Tp __2_sqrtpi() throw() 
# 83
{ return static_cast< _Tp>((1.1283791670955125738L)); } 
# 85
static _Tp __sqrt2() throw() 
# 86
{ return static_cast< _Tp>((1.4142135623730950488L)); } 
# 88
static _Tp __sqrt3() throw() 
# 89
{ return static_cast< _Tp>((1.7320508075688772936L)); } 
# 91
static _Tp __sqrtpio2() throw() 
# 92
{ return static_cast< _Tp>((1.2533141373155002512L)); } 
# 94
static _Tp __sqrt1_2() throw() 
# 95
{ return static_cast< _Tp>((0.7071067811865475244L)); } 
# 97
static _Tp __lnpi() throw() 
# 98
{ return static_cast< _Tp>((1.1447298858494001742L)); } 
# 100
static _Tp __gamma_e() throw() 
# 101
{ return static_cast< _Tp>((0.5772156649015328606L)); } 
# 103
static _Tp __euler() throw() 
# 104
{ return static_cast< _Tp>((2.7182818284590452354L)); } 
# 105
}; 
# 114 "/usr/include/c++/11/tr1/special_function_util.h" 3
template< class _Tp> inline bool 
# 115
__isnan(_Tp __x) 
# 116
{ return std::isnan(__x); } 
# 133 "/usr/include/c++/11/tr1/special_function_util.h" 3
}
# 139
}
# 51 "/usr/include/c++/11/tr1/gamma.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/gamma.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 78
__bernoulli_series(unsigned __n) 
# 79
{ 
# 81
static const _Tp __num[28] = {((_Tp)1UL), ((-((_Tp)1UL)) / ((_Tp)2UL)), (((_Tp)1UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)1UL) / ((_Tp)42UL)), ((_Tp)0UL), ((-((_Tp)1UL)) / ((_Tp)30UL)), ((_Tp)0UL), (((_Tp)5UL) / ((_Tp)66UL)), ((_Tp)0UL), ((-((_Tp)691UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)7UL) / ((_Tp)6UL)), ((_Tp)0UL), ((-((_Tp)3617UL)) / ((_Tp)510UL)), ((_Tp)0UL), (((_Tp)43867UL) / ((_Tp)798UL)), ((_Tp)0UL), ((-((_Tp)174611)) / ((_Tp)330UL)), ((_Tp)0UL), (((_Tp)854513UL) / ((_Tp)138UL)), ((_Tp)0UL), ((-((_Tp)236364091UL)) / ((_Tp)2730UL)), ((_Tp)0UL), (((_Tp)8553103UL) / ((_Tp)6UL)), ((_Tp)0UL)}; 
# 98
if (__n == (0)) { 
# 99
return (_Tp)1; }  
# 101
if (__n == (1)) { 
# 102
return (-((_Tp)1)) / ((_Tp)2); }  
# 105
if ((__n % (2)) == (1)) { 
# 106
return (_Tp)0; }  
# 109
if (__n < (28)) { 
# 110
return __num[__n]; }  
# 113
_Tp __fact = ((_Tp)1); 
# 114
if (((__n / (2)) % (2)) == (0)) { 
# 115
__fact *= ((_Tp)(-1)); }  
# 116
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 117
__fact *= (__k / (((_Tp)2) * __numeric_constants< _Tp> ::__pi())); }  
# 118
__fact *= ((_Tp)2); 
# 120
_Tp __sum = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (1000); ++__i) 
# 122
{ 
# 123
_Tp __term = std::pow((_Tp)__i, -((_Tp)__n)); 
# 124
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__sum += __term; 
# 127
}  
# 129
return __fact * __sum; 
# 130
} 
# 139 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 141
__bernoulli(int __n) 
# 142
{ return __bernoulli_series< _Tp> (__n); } 
# 153 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 155
__log_gamma_bernoulli(_Tp __x) 
# 156
{ 
# 157
_Tp __lg = (((__x - ((_Tp)(0.5L))) * std::log(__x)) - __x) + (((_Tp)(0.5L)) * std::log(((_Tp)2) * __numeric_constants< _Tp> ::__pi())); 
# 161
const _Tp __xx = __x * __x; 
# 162
_Tp __help = ((_Tp)1) / __x; 
# 163
for (unsigned __i = (1); __i < (20); ++__i) 
# 164
{ 
# 165
const _Tp __2i = (_Tp)((2) * __i); 
# 166
__help /= ((__2i * (__2i - ((_Tp)1))) * __xx); 
# 167
__lg += (__bernoulli< _Tp> ((2) * __i) * __help); 
# 168
}  
# 170
return __lg; 
# 171
} 
# 181 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 183
__log_gamma_lanczos(_Tp __x) 
# 184
{ 
# 185
const _Tp __xm1 = __x - ((_Tp)1); 
# 187
static const _Tp __lanczos_cheb_7[9] = {((_Tp)(0.99999999999980993226L)), ((_Tp)(676.52036812188509857L)), ((_Tp)(-(1259.1392167224028704L))), ((_Tp)(771.32342877765307887L)), ((_Tp)(-(176.61502916214059906L))), ((_Tp)(12.507343278686904814L)), ((_Tp)(-(0.1385710952657201169L))), ((_Tp)(9.9843695780195708595E-6L)), ((_Tp)(1.5056327351493115584E-7L))}; 
# 199
static const _Tp __LOGROOT2PI = ((_Tp)(0.9189385332046727418L)); 
# 202
_Tp __sum = (__lanczos_cheb_7[0]); 
# 203
for (unsigned __k = (1); __k < (9); ++__k) { 
# 204
__sum += ((__lanczos_cheb_7[__k]) / (__xm1 + __k)); }  
# 206
const _Tp __term1 = (__xm1 + ((_Tp)(0.5L))) * std::log((__xm1 + ((_Tp)(7.5L))) / __numeric_constants< _Tp> ::__euler()); 
# 209
const _Tp __term2 = __LOGROOT2PI + std::log(__sum); 
# 210
const _Tp __result = __term1 + (__term2 - ((_Tp)7)); 
# 212
return __result; 
# 213
} 
# 225 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 227
__log_gamma(_Tp __x) 
# 228
{ 
# 229
if (__x > ((_Tp)(0.5L))) { 
# 230
return __log_gamma_lanczos(__x); } else 
# 232
{ 
# 233
const _Tp __sin_fact = std::abs(std::sin(__numeric_constants< _Tp> ::__pi() * __x)); 
# 235
if (__sin_fact == ((_Tp)0)) { 
# 236
std::__throw_domain_error("Argument is nonpositive integer in __log_gamma"); }  
# 238
return (__numeric_constants< _Tp> ::__lnpi() - std::log(__sin_fact)) - __log_gamma_lanczos(((_Tp)1) - __x); 
# 241
}  
# 242
} 
# 252 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 254
__log_gamma_sign(_Tp __x) 
# 255
{ 
# 256
if (__x > ((_Tp)0)) { 
# 257
return (_Tp)1; } else 
# 259
{ 
# 260
const _Tp __sin_fact = std::sin(__numeric_constants< _Tp> ::__pi() * __x); 
# 262
if (__sin_fact > ((_Tp)0)) { 
# 263
return 1; } else { 
# 264
if (__sin_fact < ((_Tp)0)) { 
# 265
return -((_Tp)1); } else { 
# 267
return (_Tp)0; }  }  
# 268
}  
# 269
} 
# 283 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 285
__log_bincoef(unsigned __n, unsigned __k) 
# 286
{ 
# 288
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 292
_Tp __coeff = (std::lgamma((_Tp)((1) + __n)) - std::lgamma((_Tp)((1) + __k))) - std::lgamma((_Tp)(((1) + __n) - __k)); 
# 300
} 
# 314 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 316
__bincoef(unsigned __n, unsigned __k) 
# 317
{ 
# 319
static const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 323
const _Tp __log_coeff = __log_bincoef< _Tp> (__n, __k); 
# 324
if (__log_coeff > __max_bincoeff) { 
# 325
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 327
return std::exp(__log_coeff); }  
# 328
} 
# 337 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> inline _Tp 
# 339
__gamma(_Tp __x) 
# 340
{ return std::exp(__log_gamma(__x)); } 
# 356 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 358
__psi_series(_Tp __x) 
# 359
{ 
# 360
_Tp __sum = (-__numeric_constants< _Tp> ::__gamma_e()) - (((_Tp)1) / __x); 
# 361
const unsigned __max_iter = (100000); 
# 362
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 363
{ 
# 364
const _Tp __term = __x / (__k * (__k + __x)); 
# 365
__sum += __term; 
# 366
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 367
break; }  
# 368
}  
# 369
return __sum; 
# 370
} 
# 386 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 388
__psi_asymp(_Tp __x) 
# 389
{ 
# 390
_Tp __sum = std::log(__x) - (((_Tp)(0.5L)) / __x); 
# 391
const _Tp __xx = __x * __x; 
# 392
_Tp __xp = __xx; 
# 393
const unsigned __max_iter = (100); 
# 394
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 395
{ 
# 396
const _Tp __term = __bernoulli< _Tp> ((2) * __k) / (((2) * __k) * __xp); 
# 397
__sum -= __term; 
# 398
if (std::abs(__term / __sum) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 399
break; }  
# 400
__xp *= __xx; 
# 401
}  
# 402
return __sum; 
# 403
} 
# 417 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 419
__psi(_Tp __x) 
# 420
{ 
# 421
const int __n = static_cast< int>(__x + (0.5L)); 
# 422
const _Tp __eps = ((_Tp)4) * std::template numeric_limits< _Tp> ::epsilon(); 
# 423
if ((__n <= 0) && (std::abs(__x - ((_Tp)__n)) < __eps)) { 
# 424
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 425
if (__x < ((_Tp)0)) 
# 426
{ 
# 427
const _Tp __pi = __numeric_constants< _Tp> ::__pi(); 
# 428
return __psi(((_Tp)1) - __x) - ((__pi * std::cos(__pi * __x)) / std::sin(__pi * __x)); 
# 430
} else { 
# 431
if (__x > ((_Tp)100)) { 
# 432
return __psi_asymp(__x); } else { 
# 434
return __psi_series(__x); }  }  }  
# 435
} 
# 446 "/usr/include/c++/11/tr1/gamma.tcc" 3
template< class _Tp> _Tp 
# 448
__psi(unsigned __n, _Tp __x) 
# 449
{ 
# 450
if (__x <= ((_Tp)0)) { 
# 451
std::__throw_domain_error("Argument out of range in __psi"); } else { 
# 453
if (__n == (0)) { 
# 454
return __psi(__x); } else 
# 456
{ 
# 457
const _Tp __hzeta = __hurwitz_zeta((_Tp)(__n + (1)), __x); 
# 459
const _Tp __ln_nfact = std::lgamma((_Tp)(__n + (1))); 
# 463
_Tp __result = std::exp(__ln_nfact) * __hzeta; 
# 464
if ((__n % (2)) == (1)) { 
# 465
__result = (-__result); }  
# 466
return __result; 
# 467
}  }  
# 468
} 
# 469
}
# 476
}
# 55 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 71 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
namespace __detail { 
# 98 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 100
__gamma_temme(_Tp __mu, _Tp &
# 101
__gam1, _Tp &__gam2, _Tp &__gampl, _Tp &__gammi) 
# 102
{ 
# 104
__gampl = (((_Tp)1) / std::tgamma(((_Tp)1) + __mu)); 
# 105
__gammi = (((_Tp)1) / std::tgamma(((_Tp)1) - __mu)); 
# 111
if (std::abs(__mu) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 112
__gam1 = (-((_Tp)__numeric_constants< _Tp> ::__gamma_e())); } else { 
# 114
__gam1 = ((__gammi - __gampl) / (((_Tp)2) * __mu)); }  
# 116
__gam2 = ((__gammi + __gampl) / ((_Tp)2)); 
# 119
} 
# 136 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 138
__bessel_jn(_Tp __nu, _Tp __x, _Tp &
# 139
__Jnu, _Tp &__Nnu, _Tp &__Jpnu, _Tp &__Npnu) 
# 140
{ 
# 141
if (__x == ((_Tp)0)) 
# 142
{ 
# 143
if (__nu == ((_Tp)0)) 
# 144
{ 
# 145
__Jnu = ((_Tp)1); 
# 146
__Jpnu = ((_Tp)0); 
# 147
} else { 
# 148
if (__nu == ((_Tp)1)) 
# 149
{ 
# 150
__Jnu = ((_Tp)0); 
# 151
__Jpnu = ((_Tp)(0.5L)); 
# 152
} else 
# 154
{ 
# 155
__Jnu = ((_Tp)0); 
# 156
__Jpnu = ((_Tp)0); 
# 157
}  }  
# 158
__Nnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 159
__Npnu = std::template numeric_limits< _Tp> ::infinity(); 
# 160
return; 
# 161
}  
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 168
const _Tp __fp_min = std::sqrt(std::template numeric_limits< _Tp> ::min()); 
# 169
const int __max_iter = 15000; 
# 170
const _Tp __x_min = ((_Tp)2); 
# 172
const int __nl = (__x < __x_min) ? static_cast< int>(__nu + ((_Tp)(0.5L))) : std::max(0, static_cast< int>((__nu - __x) + ((_Tp)(1.5L)))); 
# 176
const _Tp __mu = __nu - __nl; 
# 177
const _Tp __mu2 = __mu * __mu; 
# 178
const _Tp __xi = ((_Tp)1) / __x; 
# 179
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 180
_Tp __w = __xi2 / __numeric_constants< _Tp> ::__pi(); 
# 181
int __isign = 1; 
# 182
_Tp __h = __nu * __xi; 
# 183
if (__h < __fp_min) { 
# 184
__h = __fp_min; }  
# 185
_Tp __b = __xi2 * __nu; 
# 186
_Tp __d = ((_Tp)0); 
# 187
_Tp __c = __h; 
# 188
int __i; 
# 189
for (__i = 1; __i <= __max_iter; ++__i) 
# 190
{ 
# 191
__b += __xi2; 
# 192
__d = (__b - __d); 
# 193
if (std::abs(__d) < __fp_min) { 
# 194
__d = __fp_min; }  
# 195
__c = (__b - (((_Tp)1) / __c)); 
# 196
if (std::abs(__c) < __fp_min) { 
# 197
__c = __fp_min; }  
# 198
__d = (((_Tp)1) / __d); 
# 199
const _Tp __del = __c * __d; 
# 200
__h *= __del; 
# 201
if (__d < ((_Tp)0)) { 
# 202
__isign = (-__isign); }  
# 203
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 204
break; }  
# 205
}  
# 206
if (__i > __max_iter) { 
# 207
std::__throw_runtime_error("Argument x too large in __bessel_jn; try asymptotic expansion."); }  
# 209
_Tp __Jnul = __isign * __fp_min; 
# 210
_Tp __Jpnul = __h * __Jnul; 
# 211
_Tp __Jnul1 = __Jnul; 
# 212
_Tp __Jpnu1 = __Jpnul; 
# 213
_Tp __fact = __nu * __xi; 
# 214
for (int __l = __nl; __l >= 1; --__l) 
# 215
{ 
# 216
const _Tp __Jnutemp = (__fact * __Jnul) + __Jpnul; 
# 217
__fact -= __xi; 
# 218
__Jpnul = ((__fact * __Jnutemp) - __Jnul); 
# 219
__Jnul = __Jnutemp; 
# 220
}  
# 221
if (__Jnul == ((_Tp)0)) { 
# 222
__Jnul = __eps; }  
# 223
_Tp __f = __Jpnul / __Jnul; 
# 224
_Tp __Nmu, __Nnu1, __Npmu, __Jmu; 
# 225
if (__x < __x_min) 
# 226
{ 
# 227
const _Tp __x2 = __x / ((_Tp)2); 
# 228
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 229
_Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 231
_Tp __d = (-std::log(__x2)); 
# 232
_Tp __e = __mu * __d; 
# 233
_Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 235
_Tp __gam1, __gam2, __gampl, __gammi; 
# 236
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 237
_Tp __ff = ((((_Tp)2) / __numeric_constants< _Tp> ::__pi()) * __fact) * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 239
__e = std::exp(__e); 
# 240
_Tp __p = __e / (__numeric_constants< _Tp> ::__pi() * __gampl); 
# 241
_Tp __q = ((_Tp)1) / ((__e * __numeric_constants< _Tp> ::__pi()) * __gammi); 
# 242
const _Tp __pimu2 = __pimu / ((_Tp)2); 
# 243
_Tp __fact3 = (std::abs(__pimu2) < __eps) ? (_Tp)1 : (std::sin(__pimu2) / __pimu2); 
# 245
_Tp __r = ((__numeric_constants< _Tp> ::__pi() * __pimu2) * __fact3) * __fact3; 
# 246
_Tp __c = ((_Tp)1); 
# 247
__d = ((-__x2) * __x2); 
# 248
_Tp __sum = __ff + (__r * __q); 
# 249
_Tp __sum1 = __p; 
# 250
for (__i = 1; __i <= __max_iter; ++__i) 
# 251
{ 
# 252
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 253
__c *= (__d / ((_Tp)__i)); 
# 254
__p /= (((_Tp)__i) - __mu); 
# 255
__q /= (((_Tp)__i) + __mu); 
# 256
const _Tp __del = __c * (__ff + (__r * __q)); 
# 257
__sum += __del; 
# 258
const _Tp __del1 = (__c * __p) - (__i * __del); 
# 259
__sum1 += __del1; 
# 260
if (std::abs(__del) < (__eps * (((_Tp)1) + std::abs(__sum)))) { 
# 261
break; }  
# 262
}  
# 263
if (__i > __max_iter) { 
# 264
std::__throw_runtime_error("Bessel y series failed to converge in __bessel_jn."); }  
# 266
__Nmu = (-__sum); 
# 267
__Nnu1 = ((-__sum1) * __xi2); 
# 268
__Npmu = (((__mu * __xi) * __Nmu) - __Nnu1); 
# 269
__Jmu = (__w / (__Npmu - (__f * __Nmu))); 
# 270
} else 
# 272
{ 
# 273
_Tp __a = ((_Tp)(0.25L)) - __mu2; 
# 274
_Tp __q = ((_Tp)1); 
# 275
_Tp __p = ((-__xi) / ((_Tp)2)); 
# 276
_Tp __br = ((_Tp)2) * __x; 
# 277
_Tp __bi = ((_Tp)2); 
# 278
_Tp __fact = (__a * __xi) / ((__p * __p) + (__q * __q)); 
# 279
_Tp __cr = __br + (__q * __fact); 
# 280
_Tp __ci = __bi + (__p * __fact); 
# 281
_Tp __den = (__br * __br) + (__bi * __bi); 
# 282
_Tp __dr = __br / __den; 
# 283
_Tp __di = (-__bi) / __den; 
# 284
_Tp __dlr = (__cr * __dr) - (__ci * __di); 
# 285
_Tp __dli = (__cr * __di) + (__ci * __dr); 
# 286
_Tp __temp = (__p * __dlr) - (__q * __dli); 
# 287
__q = ((__p * __dli) + (__q * __dlr)); 
# 288
__p = __temp; 
# 289
int __i; 
# 290
for (__i = 2; __i <= __max_iter; ++__i) 
# 291
{ 
# 292
__a += ((_Tp)(2 * (__i - 1))); 
# 293
__bi += ((_Tp)2); 
# 294
__dr = ((__a * __dr) + __br); 
# 295
__di = ((__a * __di) + __bi); 
# 296
if ((std::abs(__dr) + std::abs(__di)) < __fp_min) { 
# 297
__dr = __fp_min; }  
# 298
__fact = (__a / ((__cr * __cr) + (__ci * __ci))); 
# 299
__cr = (__br + (__cr * __fact)); 
# 300
__ci = (__bi - (__ci * __fact)); 
# 301
if ((std::abs(__cr) + std::abs(__ci)) < __fp_min) { 
# 302
__cr = __fp_min; }  
# 303
__den = ((__dr * __dr) + (__di * __di)); 
# 304
__dr /= __den; 
# 305
__di /= (-__den); 
# 306
__dlr = ((__cr * __dr) - (__ci * __di)); 
# 307
__dli = ((__cr * __di) + (__ci * __dr)); 
# 308
__temp = ((__p * __dlr) - (__q * __dli)); 
# 309
__q = ((__p * __dli) + (__q * __dlr)); 
# 310
__p = __temp; 
# 311
if ((std::abs(__dlr - ((_Tp)1)) + std::abs(__dli)) < __eps) { 
# 312
break; }  
# 313
}  
# 314
if (__i > __max_iter) { 
# 315
std::__throw_runtime_error("Lentz\'s method failed in __bessel_jn."); }  
# 317
const _Tp __gam = (__p - __f) / __q; 
# 318
__Jmu = std::sqrt(__w / (((__p - __f) * __gam) + __q)); 
# 320
__Jmu = std::copysign(__Jmu, __Jnul); 
# 325
__Nmu = (__gam * __Jmu); 
# 326
__Npmu = ((__p + (__q / __gam)) * __Nmu); 
# 327
__Nnu1 = (((__mu * __xi) * __Nmu) - __Npmu); 
# 328
}  
# 329
__fact = (__Jmu / __Jnul); 
# 330
__Jnu = (__fact * __Jnul1); 
# 331
__Jpnu = (__fact * __Jpnu1); 
# 332
for (__i = 1; __i <= __nl; ++__i) 
# 333
{ 
# 334
const _Tp __Nnutemp = (((__mu + __i) * __xi2) * __Nnu1) - __Nmu; 
# 335
__Nmu = __Nnu1; 
# 336
__Nnu1 = __Nnutemp; 
# 337
}  
# 338
__Nnu = __Nmu; 
# 339
__Npnu = (((__nu * __xi) * __Nmu) - __Nnu1); 
# 342
} 
# 361 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 363
__cyl_bessel_jn_asymp(_Tp __nu, _Tp __x, _Tp &__Jnu, _Tp &__Nnu) 
# 364
{ 
# 365
const _Tp __mu = (((_Tp)4) * __nu) * __nu; 
# 366
const _Tp __8x = ((_Tp)8) * __x; 
# 368
_Tp __P = ((_Tp)0); 
# 369
_Tp __Q = ((_Tp)0); 
# 371
_Tp __k = ((_Tp)0); 
# 372
_Tp __term = ((_Tp)1); 
# 374
int __epsP = 0; 
# 375
int __epsQ = 0; 
# 377
_Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 379
do 
# 380
{ 
# 381
__term *= ((__k == 0) ? (_Tp)1 : ((-(__mu - (((2 * __k) - 1) * ((2 * __k) - 1)))) / (__k * __8x))); 
# 385
__epsP = (std::abs(__term) < (__eps * std::abs(__P))); 
# 386
__P += __term; 
# 388
__k++; 
# 390
__term *= ((__mu - (((2 * __k) - 1) * ((2 * __k) - 1))) / (__k * __8x)); 
# 391
__epsQ = (std::abs(__term) < (__eps * std::abs(__Q))); 
# 392
__Q += __term; 
# 394
if (__epsP && __epsQ && (__k > (__nu / (2.0)))) { 
# 395
break; }  
# 397
__k++; 
# 398
} 
# 399
while (__k < 1000); 
# 401
const _Tp __chi = __x - ((__nu + ((_Tp)(0.5L))) * __numeric_constants< _Tp> ::__pi_2()); 
# 404
const _Tp __c = std::cos(__chi); 
# 405
const _Tp __s = std::sin(__chi); 
# 407
const _Tp __coef = std::sqrt(((_Tp)2) / (__numeric_constants< _Tp> ::__pi() * __x)); 
# 410
__Jnu = (__coef * ((__c * __P) - (__s * __Q))); 
# 411
__Nnu = (__coef * ((__s * __P) + (__c * __Q))); 
# 414
} 
# 444 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 446
__cyl_bessel_ij_series(_Tp __nu, _Tp __x, _Tp __sgn, unsigned 
# 447
__max_iter) 
# 448
{ 
# 449
if (__x == ((_Tp)0)) { 
# 450
return (__nu == ((_Tp)0)) ? (_Tp)1 : ((_Tp)0); }  
# 452
const _Tp __x2 = __x / ((_Tp)2); 
# 453
_Tp __fact = __nu * std::log(__x2); 
# 455
__fact -= std::lgamma(__nu + ((_Tp)1)); 
# 459
__fact = std::exp(__fact); 
# 460
const _Tp __xx4 = (__sgn * __x2) * __x2; 
# 461
_Tp __Jn = ((_Tp)1); 
# 462
_Tp __term = ((_Tp)1); 
# 464
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 465
{ 
# 466
__term *= (__xx4 / (((_Tp)__i) * (__nu + ((_Tp)__i)))); 
# 467
__Jn += __term; 
# 468
if (std::abs(__term / __Jn) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 469
break; }  
# 470
}  
# 472
return __fact * __Jn; 
# 473
} 
# 490 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 492
__cyl_bessel_j(_Tp __nu, _Tp __x) 
# 493
{ 
# 494
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 495
std::__throw_domain_error("Bad argument in __cyl_bessel_j."); } else { 
# 497
if (__isnan(__nu) || __isnan(__x)) { 
# 498
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 499
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 500
return __cyl_bessel_ij_series(__nu, __x, -((_Tp)1), 200); } else { 
# 501
if (__x > ((_Tp)1000)) 
# 502
{ 
# 503
_Tp __J_nu, __N_nu; 
# 504
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 505
return __J_nu; 
# 506
} else 
# 508
{ 
# 509
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 510
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 511
return __J_nu; 
# 512
}  }  }  }  
# 513
} 
# 532 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 534
__cyl_neumann_n(_Tp __nu, _Tp __x) 
# 535
{ 
# 536
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 537
std::__throw_domain_error("Bad argument in __cyl_neumann_n."); } else { 
# 539
if (__isnan(__nu) || __isnan(__x)) { 
# 540
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 541
if (__x > ((_Tp)1000)) 
# 542
{ 
# 543
_Tp __J_nu, __N_nu; 
# 544
__cyl_bessel_jn_asymp(__nu, __x, __J_nu, __N_nu); 
# 545
return __N_nu; 
# 546
} else 
# 548
{ 
# 549
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 550
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 551
return __N_nu; 
# 552
}  }  }  
# 553
} 
# 569 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> void 
# 571
__sph_bessel_jn(unsigned __n, _Tp __x, _Tp &
# 572
__j_n, _Tp &__n_n, _Tp &__jp_n, _Tp &__np_n) 
# 573
{ 
# 574
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 576
_Tp __J_nu, __N_nu, __Jp_nu, __Np_nu; 
# 577
__bessel_jn(__nu, __x, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 579
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 582
__j_n = (__factor * __J_nu); 
# 583
__n_n = (__factor * __N_nu); 
# 584
__jp_n = ((__factor * __Jp_nu) - (__j_n / (((_Tp)2) * __x))); 
# 585
__np_n = ((__factor * __Np_nu) - (__n_n / (((_Tp)2) * __x))); 
# 588
} 
# 604 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 606
__sph_bessel(unsigned __n, _Tp __x) 
# 607
{ 
# 608
if (__x < ((_Tp)0)) { 
# 609
std::__throw_domain_error("Bad argument in __sph_bessel."); } else { 
# 611
if (__isnan(__x)) { 
# 612
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 613
if (__x == ((_Tp)0)) 
# 614
{ 
# 615
if (__n == (0)) { 
# 616
return (_Tp)1; } else { 
# 618
return (_Tp)0; }  
# 619
} else 
# 621
{ 
# 622
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 623
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 624
return __j_n; 
# 625
}  }  }  
# 626
} 
# 642 "/usr/include/c++/11/tr1/bessel_function.tcc" 3
template< class _Tp> _Tp 
# 644
__sph_neumann(unsigned __n, _Tp __x) 
# 645
{ 
# 646
if (__x < ((_Tp)0)) { 
# 647
std::__throw_domain_error("Bad argument in __sph_neumann."); } else { 
# 649
if (__isnan(__x)) { 
# 650
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 651
if (__x == ((_Tp)0)) { 
# 652
return -std::template numeric_limits< _Tp> ::infinity(); } else 
# 654
{ 
# 655
_Tp __j_n, __n_n, __jp_n, __np_n; 
# 656
__sph_bessel_jn(__n, __x, __j_n, __n_n, __jp_n, __np_n); 
# 657
return __n_n; 
# 658
}  }  }  
# 659
} 
# 660
}
# 667
}
# 49 "/usr/include/c++/11/tr1/beta_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/beta_function.tcc" 3
namespace __detail { 
# 79 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 81
__beta_gamma(_Tp __x, _Tp __y) 
# 82
{ 
# 84
_Tp __bet; 
# 86
if (__x > __y) 
# 87
{ 
# 88
__bet = (std::tgamma(__x) / std::tgamma(__x + __y)); 
# 90
__bet *= std::tgamma(__y); 
# 91
} else 
# 93
{ 
# 94
__bet = (std::tgamma(__y) / std::tgamma(__x + __y)); 
# 96
__bet *= std::tgamma(__x); 
# 97
}  
# 111 "/usr/include/c++/11/tr1/beta_function.tcc" 3
return __bet; 
# 112
} 
# 127 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 129
__beta_lgamma(_Tp __x, _Tp __y) 
# 130
{ 
# 132
_Tp __bet = (std::lgamma(__x) + std::lgamma(__y)) - std::lgamma(__x + __y); 
# 140
__bet = std::exp(__bet); 
# 141
return __bet; 
# 142
} 
# 158 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> _Tp 
# 160
__beta_product(_Tp __x, _Tp __y) 
# 161
{ 
# 163
_Tp __bet = (__x + __y) / (__x * __y); 
# 165
unsigned __max_iter = (1000000); 
# 166
for (unsigned __k = (1); __k < __max_iter; ++__k) 
# 167
{ 
# 168
_Tp __term = (((_Tp)1) + ((__x + __y) / __k)) / ((((_Tp)1) + (__x / __k)) * (((_Tp)1) + (__y / __k))); 
# 170
__bet *= __term; 
# 171
}  
# 173
return __bet; 
# 174
} 
# 189 "/usr/include/c++/11/tr1/beta_function.tcc" 3
template< class _Tp> inline _Tp 
# 191
__beta(_Tp __x, _Tp __y) 
# 192
{ 
# 193
if (__isnan(__x) || __isnan(__y)) { 
# 194
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 196
return __beta_lgamma(__x, __y); }  
# 197
} 
# 198
}
# 205
}
# 45 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 59 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
namespace __detail { 
# 76 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 78
__ellint_rf(_Tp __x, _Tp __y, _Tp __z) 
# 79
{ 
# 80
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 81
const _Tp __lolim = ((_Tp)5) * __min; 
# 83
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 84
std::__throw_domain_error("Argument less than zero in __ellint_rf."); } else { 
# 86
if ((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) { 
# 88
std::__throw_domain_error("Argument too small in __ellint_rf"); } else 
# 90
{ 
# 91
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 92
const _Tp __c1 = (((_Tp)1) / ((_Tp)24)); 
# 93
const _Tp __c2 = (((_Tp)1) / ((_Tp)10)); 
# 94
const _Tp __c3 = (((_Tp)3) / ((_Tp)44)); 
# 95
const _Tp __c4 = (((_Tp)1) / ((_Tp)14)); 
# 97
_Tp __xn = __x; 
# 98
_Tp __yn = __y; 
# 99
_Tp __zn = __z; 
# 101
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 102
const _Tp __errtol = std::pow(__eps, ((_Tp)1) / ((_Tp)6)); 
# 103
_Tp __mu; 
# 104
_Tp __xndev, __yndev, __zndev; 
# 106
const unsigned __max_iter = (100); 
# 107
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 108
{ 
# 109
__mu = (((__xn + __yn) + __zn) / ((_Tp)3)); 
# 110
__xndev = (2 - ((__mu + __xn) / __mu)); 
# 111
__yndev = (2 - ((__mu + __yn) / __mu)); 
# 112
__zndev = (2 - ((__mu + __zn) / __mu)); 
# 113
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 114
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 115
if (__epsilon < __errtol) { 
# 116
break; }  
# 117
const _Tp __xnroot = std::sqrt(__xn); 
# 118
const _Tp __ynroot = std::sqrt(__yn); 
# 119
const _Tp __znroot = std::sqrt(__zn); 
# 120
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 122
__xn = (__c0 * (__xn + __lambda)); 
# 123
__yn = (__c0 * (__yn + __lambda)); 
# 124
__zn = (__c0 * (__zn + __lambda)); 
# 125
}  
# 127
const _Tp __e2 = (__xndev * __yndev) - (__zndev * __zndev); 
# 128
const _Tp __e3 = (__xndev * __yndev) * __zndev; 
# 129
const _Tp __s = (((_Tp)1) + ((((__c1 * __e2) - __c2) - (__c3 * __e3)) * __e2)) + (__c4 * __e3); 
# 132
return __s / std::sqrt(__mu); 
# 133
}  }  
# 134
} 
# 153 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 155
__comp_ellint_1_series(_Tp __k) 
# 156
{ 
# 158
const _Tp __kk = __k * __k; 
# 160
_Tp __term = __kk / ((_Tp)4); 
# 161
_Tp __sum = ((_Tp)1) + __term; 
# 163
const unsigned __max_iter = (1000); 
# 164
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 165
{ 
# 166
__term *= (((((2) * __i) - (1)) * __kk) / ((2) * __i)); 
# 167
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 168
break; }  
# 169
__sum += __term; 
# 170
}  
# 172
return __numeric_constants< _Tp> ::__pi_2() * __sum; 
# 173
} 
# 191 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 193
__comp_ellint_1(_Tp __k) 
# 194
{ 
# 196
if (__isnan(__k)) { 
# 197
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 198
if (std::abs(__k) >= ((_Tp)1)) { 
# 199
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 201
return __ellint_rf((_Tp)0, ((_Tp)1) - (__k * __k), (_Tp)1); }  }  
# 202
} 
# 219 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 221
__ellint_1(_Tp __k, _Tp __phi) 
# 222
{ 
# 224
if (__isnan(__k) || __isnan(__phi)) { 
# 225
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 226
if (std::abs(__k) > ((_Tp)1)) { 
# 227
std::__throw_domain_error("Bad argument in __ellint_1."); } else 
# 229
{ 
# 231
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 233
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 236
const _Tp __s = std::sin(__phi_red); 
# 237
const _Tp __c = std::cos(__phi_red); 
# 239
const _Tp __F = __s * __ellint_rf(__c * __c, ((_Tp)1) - (((__k * __k) * __s) * __s), (_Tp)1); 
# 243
if (__n == 0) { 
# 244
return __F; } else { 
# 246
return __F + ((((_Tp)2) * __n) * __comp_ellint_1(__k)); }  
# 247
}  }  
# 248
} 
# 266 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 268
__comp_ellint_2_series(_Tp __k) 
# 269
{ 
# 271
const _Tp __kk = __k * __k; 
# 273
_Tp __term = __kk; 
# 274
_Tp __sum = __term; 
# 276
const unsigned __max_iter = (1000); 
# 277
for (unsigned __i = (2); __i < __max_iter; ++__i) 
# 278
{ 
# 279
const _Tp __i2m = ((2) * __i) - (1); 
# 280
const _Tp __i2 = (2) * __i; 
# 281
__term *= (((__i2m * __i2m) * __kk) / (__i2 * __i2)); 
# 282
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 283
break; }  
# 284
__sum += (__term / __i2m); 
# 285
}  
# 287
return __numeric_constants< _Tp> ::__pi_2() * (((_Tp)1) - __sum); 
# 288
} 
# 314 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 316
__ellint_rd(_Tp __x, _Tp __y, _Tp __z) 
# 317
{ 
# 318
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 319
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 320
const _Tp __max = std::template numeric_limits< _Tp> ::max(); 
# 321
const _Tp __lolim = (((_Tp)2) / std::pow(__max, ((_Tp)2) / ((_Tp)3))); 
# 323
if ((__x < ((_Tp)0)) || (__y < ((_Tp)0))) { 
# 324
std::__throw_domain_error("Argument less than zero in __ellint_rd."); } else { 
# 326
if (((__x + __y) < __lolim) || (__z < __lolim)) { 
# 327
std::__throw_domain_error("Argument too small in __ellint_rd."); } else 
# 330
{ 
# 331
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 332
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 333
const _Tp __c2 = (((_Tp)1) / ((_Tp)6)); 
# 334
const _Tp __c3 = (((_Tp)9) / ((_Tp)22)); 
# 335
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 337
_Tp __xn = __x; 
# 338
_Tp __yn = __y; 
# 339
_Tp __zn = __z; 
# 340
_Tp __sigma = ((_Tp)0); 
# 341
_Tp __power4 = ((_Tp)1); 
# 343
_Tp __mu; 
# 344
_Tp __xndev, __yndev, __zndev; 
# 346
const unsigned __max_iter = (100); 
# 347
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 348
{ 
# 349
__mu = (((__xn + __yn) + (((_Tp)3) * __zn)) / ((_Tp)5)); 
# 350
__xndev = ((__mu - __xn) / __mu); 
# 351
__yndev = ((__mu - __yn) / __mu); 
# 352
__zndev = ((__mu - __zn) / __mu); 
# 353
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 354
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 355
if (__epsilon < __errtol) { 
# 356
break; }  
# 357
_Tp __xnroot = std::sqrt(__xn); 
# 358
_Tp __ynroot = std::sqrt(__yn); 
# 359
_Tp __znroot = std::sqrt(__zn); 
# 360
_Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 362
__sigma += (__power4 / (__znroot * (__zn + __lambda))); 
# 363
__power4 *= __c0; 
# 364
__xn = (__c0 * (__xn + __lambda)); 
# 365
__yn = (__c0 * (__yn + __lambda)); 
# 366
__zn = (__c0 * (__zn + __lambda)); 
# 367
}  
# 369
_Tp __ea = __xndev * __yndev; 
# 370
_Tp __eb = __zndev * __zndev; 
# 371
_Tp __ec = __ea - __eb; 
# 372
_Tp __ed = __ea - (((_Tp)6) * __eb); 
# 373
_Tp __ef = (__ed + __ec) + __ec; 
# 374
_Tp __s1 = __ed * (((-__c1) + ((__c3 * __ed) / ((_Tp)3))) - ((((((_Tp)3) * __c4) * __zndev) * __ef) / ((_Tp)2))); 
# 377
_Tp __s2 = __zndev * ((__c2 * __ef) + (__zndev * ((((-__c3) * __ec) - (__zndev * __c4)) - __ea))); 
# 381
return (((_Tp)3) * __sigma) + ((__power4 * ((((_Tp)1) + __s1) + __s2)) / (__mu * std::sqrt(__mu))); 
# 383
}  }  
# 384
} 
# 399 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 401
__comp_ellint_2(_Tp __k) 
# 402
{ 
# 404
if (__isnan(__k)) { 
# 405
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 406
if (std::abs(__k) == 1) { 
# 407
return (_Tp)1; } else { 
# 408
if (std::abs(__k) > ((_Tp)1)) { 
# 409
std::__throw_domain_error("Bad argument in __comp_ellint_2."); } else 
# 411
{ 
# 412
const _Tp __kk = __k * __k; 
# 414
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) - ((__kk * __ellint_rd((_Tp)0, ((_Tp)1) - __kk, (_Tp)1)) / ((_Tp)3)); 
# 416
}  }  }  
# 417
} 
# 433 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 435
__ellint_2(_Tp __k, _Tp __phi) 
# 436
{ 
# 438
if (__isnan(__k) || __isnan(__phi)) { 
# 439
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 440
if (std::abs(__k) > ((_Tp)1)) { 
# 441
std::__throw_domain_error("Bad argument in __ellint_2."); } else 
# 443
{ 
# 445
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 447
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 450
const _Tp __kk = __k * __k; 
# 451
const _Tp __s = std::sin(__phi_red); 
# 452
const _Tp __ss = __s * __s; 
# 453
const _Tp __sss = __ss * __s; 
# 454
const _Tp __c = std::cos(__phi_red); 
# 455
const _Tp __cc = __c * __c; 
# 457
const _Tp __E = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) - (((__kk * __sss) * __ellint_rd(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) / ((_Tp)3)); 
# 463
if (__n == 0) { 
# 464
return __E; } else { 
# 466
return __E + ((((_Tp)2) * __n) * __comp_ellint_2(__k)); }  
# 467
}  }  
# 468
} 
# 492 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 494
__ellint_rc(_Tp __x, _Tp __y) 
# 495
{ 
# 496
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 497
const _Tp __lolim = ((_Tp)5) * __min; 
# 499
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || ((__x + __y) < __lolim)) { 
# 500
std::__throw_domain_error("Argument less than zero in __ellint_rc."); } else 
# 503
{ 
# 504
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 505
const _Tp __c1 = (((_Tp)1) / ((_Tp)7)); 
# 506
const _Tp __c2 = (((_Tp)9) / ((_Tp)22)); 
# 507
const _Tp __c3 = (((_Tp)3) / ((_Tp)10)); 
# 508
const _Tp __c4 = (((_Tp)3) / ((_Tp)8)); 
# 510
_Tp __xn = __x; 
# 511
_Tp __yn = __y; 
# 513
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 514
const _Tp __errtol = std::pow(__eps / ((_Tp)30), ((_Tp)1) / ((_Tp)6)); 
# 515
_Tp __mu; 
# 516
_Tp __sn; 
# 518
const unsigned __max_iter = (100); 
# 519
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 520
{ 
# 521
__mu = ((__xn + (((_Tp)2) * __yn)) / ((_Tp)3)); 
# 522
__sn = (((__yn + __mu) / __mu) - ((_Tp)2)); 
# 523
if (std::abs(__sn) < __errtol) { 
# 524
break; }  
# 525
const _Tp __lambda = ((((_Tp)2) * std::sqrt(__xn)) * std::sqrt(__yn)) + __yn; 
# 527
__xn = (__c0 * (__xn + __lambda)); 
# 528
__yn = (__c0 * (__yn + __lambda)); 
# 529
}  
# 531
_Tp __s = (__sn * __sn) * (__c3 + (__sn * (__c1 + (__sn * (__c4 + (__sn * __c2)))))); 
# 534
return (((_Tp)1) + __s) / std::sqrt(__mu); 
# 535
}  
# 536
} 
# 561 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 563
__ellint_rj(_Tp __x, _Tp __y, _Tp __z, _Tp __p) 
# 564
{ 
# 565
const _Tp __min = std::template numeric_limits< _Tp> ::min(); 
# 566
const _Tp __lolim = std::pow(((_Tp)5) * __min, ((_Tp)1) / ((_Tp)3)); 
# 568
if (((__x < ((_Tp)0)) || (__y < ((_Tp)0))) || (__z < ((_Tp)0))) { 
# 569
std::__throw_domain_error("Argument less than zero in __ellint_rj."); } else { 
# 571
if (((((__x + __y) < __lolim) || ((__x + __z) < __lolim)) || ((__y + __z) < __lolim)) || (__p < __lolim)) { 
# 573
std::__throw_domain_error("Argument too small in __ellint_rj"); } else 
# 576
{ 
# 577
const _Tp __c0 = (((_Tp)1) / ((_Tp)4)); 
# 578
const _Tp __c1 = (((_Tp)3) / ((_Tp)14)); 
# 579
const _Tp __c2 = (((_Tp)1) / ((_Tp)3)); 
# 580
const _Tp __c3 = (((_Tp)3) / ((_Tp)22)); 
# 581
const _Tp __c4 = (((_Tp)3) / ((_Tp)26)); 
# 583
_Tp __xn = __x; 
# 584
_Tp __yn = __y; 
# 585
_Tp __zn = __z; 
# 586
_Tp __pn = __p; 
# 587
_Tp __sigma = ((_Tp)0); 
# 588
_Tp __power4 = ((_Tp)1); 
# 590
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 591
const _Tp __errtol = std::pow(__eps / ((_Tp)8), ((_Tp)1) / ((_Tp)6)); 
# 593
_Tp __mu; 
# 594
_Tp __xndev, __yndev, __zndev, __pndev; 
# 596
const unsigned __max_iter = (100); 
# 597
for (unsigned __iter = (0); __iter < __max_iter; ++__iter) 
# 598
{ 
# 599
__mu = ((((__xn + __yn) + __zn) + (((_Tp)2) * __pn)) / ((_Tp)5)); 
# 600
__xndev = ((__mu - __xn) / __mu); 
# 601
__yndev = ((__mu - __yn) / __mu); 
# 602
__zndev = ((__mu - __zn) / __mu); 
# 603
__pndev = ((__mu - __pn) / __mu); 
# 604
_Tp __epsilon = std::max(std::abs(__xndev), std::abs(__yndev)); 
# 605
__epsilon = std::max(__epsilon, std::abs(__zndev)); 
# 606
__epsilon = std::max(__epsilon, std::abs(__pndev)); 
# 607
if (__epsilon < __errtol) { 
# 608
break; }  
# 609
const _Tp __xnroot = std::sqrt(__xn); 
# 610
const _Tp __ynroot = std::sqrt(__yn); 
# 611
const _Tp __znroot = std::sqrt(__zn); 
# 612
const _Tp __lambda = (__xnroot * (__ynroot + __znroot)) + (__ynroot * __znroot); 
# 614
const _Tp __alpha1 = (__pn * ((__xnroot + __ynroot) + __znroot)) + ((__xnroot * __ynroot) * __znroot); 
# 616
const _Tp __alpha2 = __alpha1 * __alpha1; 
# 617
const _Tp __beta = (__pn * (__pn + __lambda)) * (__pn + __lambda); 
# 619
__sigma += (__power4 * __ellint_rc(__alpha2, __beta)); 
# 620
__power4 *= __c0; 
# 621
__xn = (__c0 * (__xn + __lambda)); 
# 622
__yn = (__c0 * (__yn + __lambda)); 
# 623
__zn = (__c0 * (__zn + __lambda)); 
# 624
__pn = (__c0 * (__pn + __lambda)); 
# 625
}  
# 627
_Tp __ea = (__xndev * (__yndev + __zndev)) + (__yndev * __zndev); 
# 628
_Tp __eb = (__xndev * __yndev) * __zndev; 
# 629
_Tp __ec = __pndev * __pndev; 
# 630
_Tp __e2 = __ea - (((_Tp)3) * __ec); 
# 631
_Tp __e3 = __eb + ((((_Tp)2) * __pndev) * (__ea - __ec)); 
# 632
_Tp __s1 = ((_Tp)1) + (__e2 * (((-__c1) + (((((_Tp)3) * __c3) * __e2) / ((_Tp)4))) - (((((_Tp)3) * __c4) * __e3) / ((_Tp)2)))); 
# 634
_Tp __s2 = __eb * ((__c2 / ((_Tp)2)) + (__pndev * (((-__c3) - __c3) + (__pndev * __c4)))); 
# 636
_Tp __s3 = ((__pndev * __ea) * (__c2 - (__pndev * __c3))) - ((__c2 * __pndev) * __ec); 
# 639
return (((_Tp)3) * __sigma) + ((__power4 * ((__s1 + __s2) + __s3)) / (__mu * std::sqrt(__mu))); 
# 641
}  }  
# 642
} 
# 661 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 663
__comp_ellint_3(_Tp __k, _Tp __nu) 
# 664
{ 
# 666
if (__isnan(__k) || __isnan(__nu)) { 
# 667
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 668
if (__nu == ((_Tp)1)) { 
# 669
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 670
if (std::abs(__k) > ((_Tp)1)) { 
# 671
std::__throw_domain_error("Bad argument in __comp_ellint_3."); } else 
# 673
{ 
# 674
const _Tp __kk = __k * __k; 
# 676
return __ellint_rf((_Tp)0, ((_Tp)1) - __kk, (_Tp)1) + ((__nu * __ellint_rj((_Tp)0, ((_Tp)1) - __kk, (_Tp)1, ((_Tp)1) - __nu)) / ((_Tp)3)); 
# 680
}  }  }  
# 681
} 
# 701 "/usr/include/c++/11/tr1/ell_integral.tcc" 3
template< class _Tp> _Tp 
# 703
__ellint_3(_Tp __k, _Tp __nu, _Tp __phi) 
# 704
{ 
# 706
if ((__isnan(__k) || __isnan(__nu)) || __isnan(__phi)) { 
# 707
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 708
if (std::abs(__k) > ((_Tp)1)) { 
# 709
std::__throw_domain_error("Bad argument in __ellint_3."); } else 
# 711
{ 
# 713
const int __n = std::floor((__phi / __numeric_constants< _Tp> ::__pi()) + ((_Tp)(0.5L))); 
# 715
const _Tp __phi_red = __phi - (__n * __numeric_constants< _Tp> ::__pi()); 
# 718
const _Tp __kk = __k * __k; 
# 719
const _Tp __s = std::sin(__phi_red); 
# 720
const _Tp __ss = __s * __s; 
# 721
const _Tp __sss = __ss * __s; 
# 722
const _Tp __c = std::cos(__phi_red); 
# 723
const _Tp __cc = __c * __c; 
# 725
const _Tp __Pi = (__s * __ellint_rf(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1)) + (((__nu * __sss) * __ellint_rj(__cc, ((_Tp)1) - (__kk * __ss), (_Tp)1, ((_Tp)1) - (__nu * __ss))) / ((_Tp)3)); 
# 731
if (__n == 0) { 
# 732
return __Pi; } else { 
# 734
return __Pi + ((((_Tp)2) * __n) * __comp_ellint_3(__k, __nu)); }  
# 735
}  }  
# 736
} 
# 737
}
# 743
}
# 50 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
namespace __detail { 
# 66
template< class _Tp> _Tp __expint_E1(_Tp); 
# 81 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 83
__expint_E1_series(_Tp __x) 
# 84
{ 
# 85
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 86
_Tp __term = ((_Tp)1); 
# 87
_Tp __esum = ((_Tp)0); 
# 88
_Tp __osum = ((_Tp)0); 
# 89
const unsigned __max_iter = (1000); 
# 90
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 91
{ 
# 92
__term *= ((-__x) / __i); 
# 93
if (std::abs(__term) < __eps) { 
# 94
break; }  
# 95
if (__term >= ((_Tp)0)) { 
# 96
__esum += (__term / __i); } else { 
# 98
__osum += (__term / __i); }  
# 99
}  
# 101
return (((-__esum) - __osum) - __numeric_constants< _Tp> ::__gamma_e()) - std::log(__x); 
# 103
} 
# 118 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 120
__expint_E1_asymp(_Tp __x) 
# 121
{ 
# 122
_Tp __term = ((_Tp)1); 
# 123
_Tp __esum = ((_Tp)1); 
# 124
_Tp __osum = ((_Tp)0); 
# 125
const unsigned __max_iter = (1000); 
# 126
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 127
{ 
# 128
_Tp __prev = __term; 
# 129
__term *= ((-__i) / __x); 
# 130
if (std::abs(__term) > std::abs(__prev)) { 
# 131
break; }  
# 132
if (__term >= ((_Tp)0)) { 
# 133
__esum += __term; } else { 
# 135
__osum += __term; }  
# 136
}  
# 138
return (std::exp(-__x) * (__esum + __osum)) / __x; 
# 139
} 
# 155 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 157
__expint_En_series(unsigned __n, _Tp __x) 
# 158
{ 
# 159
const unsigned __max_iter = (1000); 
# 160
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 161
const int __nm1 = __n - (1); 
# 162
_Tp __ans = (__nm1 != 0) ? ((_Tp)1) / __nm1 : ((-std::log(__x)) - __numeric_constants< _Tp> ::__gamma_e()); 
# 165
_Tp __fact = ((_Tp)1); 
# 166
for (int __i = 1; __i <= __max_iter; ++__i) 
# 167
{ 
# 168
__fact *= ((-__x) / ((_Tp)__i)); 
# 169
_Tp __del; 
# 170
if (__i != __nm1) { 
# 171
__del = ((-__fact) / ((_Tp)(__i - __nm1))); } else 
# 173
{ 
# 174
_Tp __psi = (-__numeric_constants< _Tp> ::gamma_e()); 
# 175
for (int __ii = 1; __ii <= __nm1; ++__ii) { 
# 176
__psi += (((_Tp)1) / ((_Tp)__ii)); }  
# 177
__del = (__fact * (__psi - std::log(__x))); 
# 178
}  
# 179
__ans += __del; 
# 180
if (std::abs(__del) < (__eps * std::abs(__ans))) { 
# 181
return __ans; }  
# 182
}  
# 183
std::__throw_runtime_error("Series summation failed in __expint_En_series."); 
# 185
} 
# 201 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 203
__expint_En_cont_frac(unsigned __n, _Tp __x) 
# 204
{ 
# 205
const unsigned __max_iter = (1000); 
# 206
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 207
const _Tp __fp_min = std::template numeric_limits< _Tp> ::min(); 
# 208
const int __nm1 = __n - (1); 
# 209
_Tp __b = __x + ((_Tp)__n); 
# 210
_Tp __c = ((_Tp)1) / __fp_min; 
# 211
_Tp __d = ((_Tp)1) / __b; 
# 212
_Tp __h = __d; 
# 213
for (unsigned __i = (1); __i <= __max_iter; ++__i) 
# 214
{ 
# 215
_Tp __a = (-((_Tp)(__i * (__nm1 + __i)))); 
# 216
__b += ((_Tp)2); 
# 217
__d = (((_Tp)1) / ((__a * __d) + __b)); 
# 218
__c = (__b + (__a / __c)); 
# 219
const _Tp __del = __c * __d; 
# 220
__h *= __del; 
# 221
if (std::abs(__del - ((_Tp)1)) < __eps) 
# 222
{ 
# 223
const _Tp __ans = __h * std::exp(-__x); 
# 224
return __ans; 
# 225
}  
# 226
}  
# 227
std::__throw_runtime_error("Continued fraction failed in __expint_En_cont_frac."); 
# 229
} 
# 246 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 248
__expint_En_recursion(unsigned __n, _Tp __x) 
# 249
{ 
# 250
_Tp __En; 
# 251
_Tp __E1 = __expint_E1(__x); 
# 252
if (__x < ((_Tp)__n)) 
# 253
{ 
# 255
__En = __E1; 
# 256
for (unsigned __j = (2); __j < __n; ++__j) { 
# 257
__En = ((std::exp(-__x) - (__x * __En)) / ((_Tp)(__j - (1)))); }  
# 258
} else 
# 260
{ 
# 262
__En = ((_Tp)1); 
# 263
const int __N = __n + (20); 
# 264
_Tp __save = ((_Tp)0); 
# 265
for (int __j = __N; __j > 0; --__j) 
# 266
{ 
# 267
__En = ((std::exp(-__x) - (__j * __En)) / __x); 
# 268
if (__j == __n) { 
# 269
__save = __En; }  
# 270
}  
# 271
_Tp __norm = __En / __E1; 
# 272
__En /= __norm; 
# 273
}  
# 275
return __En; 
# 276
} 
# 290 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 292
__expint_Ei_series(_Tp __x) 
# 293
{ 
# 294
_Tp __term = ((_Tp)1); 
# 295
_Tp __sum = ((_Tp)0); 
# 296
const unsigned __max_iter = (1000); 
# 297
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 298
{ 
# 299
__term *= (__x / __i); 
# 300
__sum += (__term / __i); 
# 301
if (__term < (std::template numeric_limits< _Tp> ::epsilon() * __sum)) { 
# 302
break; }  
# 303
}  
# 305
return (__numeric_constants< _Tp> ::__gamma_e() + __sum) + std::log(__x); 
# 306
} 
# 321 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 323
__expint_Ei_asymp(_Tp __x) 
# 324
{ 
# 325
_Tp __term = ((_Tp)1); 
# 326
_Tp __sum = ((_Tp)1); 
# 327
const unsigned __max_iter = (1000); 
# 328
for (unsigned __i = (1); __i < __max_iter; ++__i) 
# 329
{ 
# 330
_Tp __prev = __term; 
# 331
__term *= (__i / __x); 
# 332
if (__term < std::template numeric_limits< _Tp> ::epsilon()) { 
# 333
break; }  
# 334
if (__term >= __prev) { 
# 335
break; }  
# 336
__sum += __term; 
# 337
}  
# 339
return (std::exp(__x) * __sum) / __x; 
# 340
} 
# 354 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 356
__expint_Ei(_Tp __x) 
# 357
{ 
# 358
if (__x < ((_Tp)0)) { 
# 359
return -__expint_E1(-__x); } else { 
# 360
if (__x < (-std::log(std::template numeric_limits< _Tp> ::epsilon()))) { 
# 361
return __expint_Ei_series(__x); } else { 
# 363
return __expint_Ei_asymp(__x); }  }  
# 364
} 
# 378 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 380
__expint_E1(_Tp __x) 
# 381
{ 
# 382
if (__x < ((_Tp)0)) { 
# 383
return -__expint_Ei(-__x); } else { 
# 384
if (__x < ((_Tp)1)) { 
# 385
return __expint_E1_series(__x); } else { 
# 386
if (__x < ((_Tp)100)) { 
# 387
return __expint_En_cont_frac(1, __x); } else { 
# 389
return __expint_E1_asymp(__x); }  }  }  
# 390
} 
# 408 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 410
__expint_asymp(unsigned __n, _Tp __x) 
# 411
{ 
# 412
_Tp __term = ((_Tp)1); 
# 413
_Tp __sum = ((_Tp)1); 
# 414
for (unsigned __i = (1); __i <= __n; ++__i) 
# 415
{ 
# 416
_Tp __prev = __term; 
# 417
__term *= ((-((__n - __i) + (1))) / __x); 
# 418
if (std::abs(__term) > std::abs(__prev)) { 
# 419
break; }  
# 420
__sum += __term; 
# 421
}  
# 423
return (std::exp(-__x) * __sum) / __x; 
# 424
} 
# 442 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 444
__expint_large_n(unsigned __n, _Tp __x) 
# 445
{ 
# 446
const _Tp __xpn = __x + __n; 
# 447
const _Tp __xpn2 = __xpn * __xpn; 
# 448
_Tp __term = ((_Tp)1); 
# 449
_Tp __sum = ((_Tp)1); 
# 450
for (unsigned __i = (1); __i <= __n; ++__i) 
# 451
{ 
# 452
_Tp __prev = __term; 
# 453
__term *= ((__n - (((2) * (__i - (1))) * __x)) / __xpn2); 
# 454
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 455
break; }  
# 456
__sum += __term; 
# 457
}  
# 459
return (std::exp(-__x) * __sum) / __xpn; 
# 460
} 
# 476 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> _Tp 
# 478
__expint(unsigned __n, _Tp __x) 
# 479
{ 
# 481
if (__isnan(__x)) { 
# 482
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 483
if ((__n <= (1)) && (__x == ((_Tp)0))) { 
# 484
return std::template numeric_limits< _Tp> ::infinity(); } else 
# 486
{ 
# 487
_Tp __E0 = std::exp(__x) / __x; 
# 488
if (__n == (0)) { 
# 489
return __E0; }  
# 491
_Tp __E1 = __expint_E1(__x); 
# 492
if (__n == (1)) { 
# 493
return __E1; }  
# 495
if (__x == ((_Tp)0)) { 
# 496
return ((_Tp)1) / (static_cast< _Tp>(__n - (1))); }  
# 498
_Tp __En = __expint_En_recursion(__n, __x); 
# 500
return __En; 
# 501
}  }  
# 502
} 
# 516 "/usr/include/c++/11/tr1/exp_integral.tcc" 3
template< class _Tp> inline _Tp 
# 518
__expint(_Tp __x) 
# 519
{ 
# 520
if (__isnan(__x)) { 
# 521
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 523
return __expint_Ei(__x); }  
# 524
} 
# 525
}
# 531
}
# 44 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 85
__conf_hyperg_series(_Tp __a, _Tp __c, _Tp __x) 
# 86
{ 
# 87
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 89
_Tp __term = ((_Tp)1); 
# 90
_Tp __Fac = ((_Tp)1); 
# 91
const unsigned __max_iter = (100000); 
# 92
unsigned __i; 
# 93
for (__i = (0); __i < __max_iter; ++__i) 
# 94
{ 
# 95
__term *= (((__a + ((_Tp)__i)) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 97
if (std::abs(__term) < __eps) 
# 98
{ 
# 99
break; 
# 100
}  
# 101
__Fac += __term; 
# 102
}  
# 103
if (__i == __max_iter) { 
# 104
std::__throw_runtime_error("Series failed to converge in __conf_hyperg_series."); }  
# 107
return __Fac; 
# 108
} 
# 120 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 122
__conf_hyperg_luke(_Tp __a, _Tp __c, _Tp __xin) 
# 123
{ 
# 124
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 125
const int __nmax = 20000; 
# 126
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 127
const _Tp __x = (-__xin); 
# 128
const _Tp __x3 = (__x * __x) * __x; 
# 129
const _Tp __t0 = __a / __c; 
# 130
const _Tp __t1 = (__a + ((_Tp)1)) / (((_Tp)2) * __c); 
# 131
const _Tp __t2 = (__a + ((_Tp)2)) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 132
_Tp __F = ((_Tp)1); 
# 133
_Tp __prec; 
# 135
_Tp __Bnm3 = ((_Tp)1); 
# 136
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 137
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 139
_Tp __Anm3 = ((_Tp)1); 
# 140
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 141
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 144
int __n = 3; 
# 145
while (1) 
# 146
{ 
# 147
_Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 148
_Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 149
_Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 150
_Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 151
_Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 152
_Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 153
_Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 154
_Tp __F1 = (((_Tp)(__n - 2)) - __a) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 155
_Tp __F2 = ((((_Tp)__n) + __a) * __npam1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 157
_Tp __F3 = (((-__npam2) * __npam1) * (((_Tp)(__n - 2)) - __a)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 160
_Tp __E = ((-__npam1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 163
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 165
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 167
_Tp __r = __An / __Bn; 
# 169
__prec = std::abs((__F - __r) / __F); 
# 170
__F = __r; 
# 172
if ((__prec < __eps) || (__n > __nmax)) { 
# 173
break; }  
# 175
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 176
{ 
# 177
__An /= __big; 
# 178
__Bn /= __big; 
# 179
__Anm1 /= __big; 
# 180
__Bnm1 /= __big; 
# 181
__Anm2 /= __big; 
# 182
__Bnm2 /= __big; 
# 183
__Anm3 /= __big; 
# 184
__Bnm3 /= __big; 
# 185
} else { 
# 186
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 188
{ 
# 189
__An *= __big; 
# 190
__Bn *= __big; 
# 191
__Anm1 *= __big; 
# 192
__Bnm1 *= __big; 
# 193
__Anm2 *= __big; 
# 194
__Bnm2 *= __big; 
# 195
__Anm3 *= __big; 
# 196
__Bnm3 *= __big; 
# 197
}  }  
# 199
++__n; 
# 200
__Bnm3 = __Bnm2; 
# 201
__Bnm2 = __Bnm1; 
# 202
__Bnm1 = __Bn; 
# 203
__Anm3 = __Anm2; 
# 204
__Anm2 = __Anm1; 
# 205
__Anm1 = __An; 
# 206
}  
# 208
if (__n >= __nmax) { 
# 209
std::__throw_runtime_error("Iteration failed to converge in __conf_hyperg_luke."); }  
# 212
return __F; 
# 213
} 
# 227 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 229
__conf_hyperg(_Tp __a, _Tp __c, _Tp __x) 
# 230
{ 
# 232
const _Tp __c_nint = std::nearbyint(__c); 
# 236
if ((__isnan(__a) || __isnan(__c)) || __isnan(__x)) { 
# 237
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 238
if ((__c_nint == __c) && (__c_nint <= 0)) { 
# 239
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 240
if (__a == ((_Tp)0)) { 
# 241
return (_Tp)1; } else { 
# 242
if (__c == __a) { 
# 243
return std::exp(__x); } else { 
# 244
if (__x < ((_Tp)0)) { 
# 245
return __conf_hyperg_luke(__a, __c, __x); } else { 
# 247
return __conf_hyperg_series(__a, __c, __x); }  }  }  }  }  
# 248
} 
# 271 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 273
__hyperg_series(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 274
{ 
# 275
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 277
_Tp __term = ((_Tp)1); 
# 278
_Tp __Fabc = ((_Tp)1); 
# 279
const unsigned __max_iter = (100000); 
# 280
unsigned __i; 
# 281
for (__i = (0); __i < __max_iter; ++__i) 
# 282
{ 
# 283
__term *= ((((__a + ((_Tp)__i)) * (__b + ((_Tp)__i))) * __x) / ((__c + ((_Tp)__i)) * ((_Tp)((1) + __i)))); 
# 285
if (std::abs(__term) < __eps) 
# 286
{ 
# 287
break; 
# 288
}  
# 289
__Fabc += __term; 
# 290
}  
# 291
if (__i == __max_iter) { 
# 292
std::__throw_runtime_error("Series failed to converge in __hyperg_series."); }  
# 295
return __Fabc; 
# 296
} 
# 304
template< class _Tp> _Tp 
# 306
__hyperg_luke(_Tp __a, _Tp __b, _Tp __c, _Tp __xin) 
# 307
{ 
# 308
const _Tp __big = std::pow(std::template numeric_limits< _Tp> ::max(), (_Tp)(0.16L)); 
# 309
const int __nmax = 20000; 
# 310
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 311
const _Tp __x = (-__xin); 
# 312
const _Tp __x3 = (__x * __x) * __x; 
# 313
const _Tp __t0 = (__a * __b) / __c; 
# 314
const _Tp __t1 = ((__a + ((_Tp)1)) * (__b + ((_Tp)1))) / (((_Tp)2) * __c); 
# 315
const _Tp __t2 = ((__a + ((_Tp)2)) * (__b + ((_Tp)2))) / (((_Tp)2) * (__c + ((_Tp)1))); 
# 318
_Tp __F = ((_Tp)1); 
# 320
_Tp __Bnm3 = ((_Tp)1); 
# 321
_Tp __Bnm2 = ((_Tp)1) + (__t1 * __x); 
# 322
_Tp __Bnm1 = ((_Tp)1) + ((__t2 * __x) * (((_Tp)1) + ((__t1 / ((_Tp)3)) * __x))); 
# 324
_Tp __Anm3 = ((_Tp)1); 
# 325
_Tp __Anm2 = __Bnm2 - (__t0 * __x); 
# 326
_Tp __Anm1 = (__Bnm1 - ((__t0 * (((_Tp)1) + (__t2 * __x))) * __x)) + ((((__t0 * __t1) * (__c / (__c + ((_Tp)1)))) * __x) * __x); 
# 329
int __n = 3; 
# 330
while (1) 
# 331
{ 
# 332
const _Tp __npam1 = ((_Tp)(__n - 1)) + __a; 
# 333
const _Tp __npbm1 = ((_Tp)(__n - 1)) + __b; 
# 334
const _Tp __npcm1 = ((_Tp)(__n - 1)) + __c; 
# 335
const _Tp __npam2 = ((_Tp)(__n - 2)) + __a; 
# 336
const _Tp __npbm2 = ((_Tp)(__n - 2)) + __b; 
# 337
const _Tp __npcm2 = ((_Tp)(__n - 2)) + __c; 
# 338
const _Tp __tnm1 = (_Tp)((2 * __n) - 1); 
# 339
const _Tp __tnm3 = (_Tp)((2 * __n) - 3); 
# 340
const _Tp __tnm5 = (_Tp)((2 * __n) - 5); 
# 341
const _Tp __n2 = __n * __n; 
# 342
const _Tp __F1 = (((((((_Tp)3) * __n2) + (((__a + __b) - ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b)) - (((_Tp)2) * (__a + __b))) / ((((_Tp)2) * __tnm3) * __npcm1); 
# 345
const _Tp __F2 = (((-((((((_Tp)3) * __n2) - (((__a + __b) + ((_Tp)6)) * __n)) + ((_Tp)2)) - (__a * __b))) * __npam1) * __npbm1) / ((((((_Tp)4) * __tnm1) * __tnm3) * __npcm2) * __npcm1); 
# 348
const _Tp __F3 = (((((__npam2 * __npam1) * __npbm2) * __npbm1) * (((_Tp)(__n - 2)) - __a)) * (((_Tp)(__n - 2)) - __b)) / ((((((((_Tp)8) * __tnm3) * __tnm3) * __tnm5) * (((_Tp)(__n - 3)) + __c)) * __npcm2) * __npcm1); 
# 352
const _Tp __E = (((-__npam1) * __npbm1) * (((_Tp)(__n - 1)) - __c)) / (((((_Tp)2) * __tnm3) * __npcm2) * __npcm1); 
# 355
_Tp __An = (((((_Tp)1) + (__F1 * __x)) * __Anm1) + (((__E + (__F2 * __x)) * __x) * __Anm2)) + ((__F3 * __x3) * __Anm3); 
# 357
_Tp __Bn = (((((_Tp)1) + (__F1 * __x)) * __Bnm1) + (((__E + (__F2 * __x)) * __x) * __Bnm2)) + ((__F3 * __x3) * __Bnm3); 
# 359
const _Tp __r = __An / __Bn; 
# 361
const _Tp __prec = std::abs((__F - __r) / __F); 
# 362
__F = __r; 
# 364
if ((__prec < __eps) || (__n > __nmax)) { 
# 365
break; }  
# 367
if ((std::abs(__An) > __big) || (std::abs(__Bn) > __big)) 
# 368
{ 
# 369
__An /= __big; 
# 370
__Bn /= __big; 
# 371
__Anm1 /= __big; 
# 372
__Bnm1 /= __big; 
# 373
__Anm2 /= __big; 
# 374
__Bnm2 /= __big; 
# 375
__Anm3 /= __big; 
# 376
__Bnm3 /= __big; 
# 377
} else { 
# 378
if ((std::abs(__An) < (((_Tp)1) / __big)) || (std::abs(__Bn) < (((_Tp)1) / __big))) 
# 380
{ 
# 381
__An *= __big; 
# 382
__Bn *= __big; 
# 383
__Anm1 *= __big; 
# 384
__Bnm1 *= __big; 
# 385
__Anm2 *= __big; 
# 386
__Bnm2 *= __big; 
# 387
__Anm3 *= __big; 
# 388
__Bnm3 *= __big; 
# 389
}  }  
# 391
++__n; 
# 392
__Bnm3 = __Bnm2; 
# 393
__Bnm2 = __Bnm1; 
# 394
__Bnm1 = __Bn; 
# 395
__Anm3 = __Anm2; 
# 396
__Anm2 = __Anm1; 
# 397
__Anm1 = __An; 
# 398
}  
# 400
if (__n >= __nmax) { 
# 401
std::__throw_runtime_error("Iteration failed to converge in __hyperg_luke."); }  
# 404
return __F; 
# 405
} 
# 438 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 440
__hyperg_reflect(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 441
{ 
# 442
const _Tp __d = (__c - __a) - __b; 
# 443
const int __intd = std::floor(__d + ((_Tp)(0.5L))); 
# 444
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 445
const _Tp __toler = ((_Tp)1000) * __eps; 
# 446
const _Tp __log_max = std::log(std::template numeric_limits< _Tp> ::max()); 
# 447
const bool __d_integer = std::abs(__d - __intd) < __toler; 
# 449
if (__d_integer) 
# 450
{ 
# 451
const _Tp __ln_omx = std::log(((_Tp)1) - __x); 
# 452
const _Tp __ad = std::abs(__d); 
# 453
_Tp __F1, __F2; 
# 455
_Tp __d1, __d2; 
# 456
if (__d >= ((_Tp)0)) 
# 457
{ 
# 458
__d1 = __d; 
# 459
__d2 = ((_Tp)0); 
# 460
} else 
# 462
{ 
# 463
__d1 = ((_Tp)0); 
# 464
__d2 = __d; 
# 465
}  
# 467
const _Tp __lng_c = __log_gamma(__c); 
# 470
if (__ad < __eps) 
# 471
{ 
# 473
__F1 = ((_Tp)0); 
# 474
} else 
# 476
{ 
# 478
bool __ok_d1 = true; 
# 479
_Tp __lng_ad, __lng_ad1, __lng_bd1; 
# 480
try 
# 481
{ 
# 482
__lng_ad = __log_gamma(__ad); 
# 483
__lng_ad1 = __log_gamma(__a + __d1); 
# 484
__lng_bd1 = __log_gamma(__b + __d1); 
# 485
} 
# 486
catch (...) 
# 487
{ 
# 488
__ok_d1 = false; 
# 489
}  
# 491
if (__ok_d1) 
# 492
{ 
# 496
_Tp __sum1 = ((_Tp)1); 
# 497
_Tp __term = ((_Tp)1); 
# 498
_Tp __ln_pre1 = (((__lng_ad + __lng_c) + (__d2 * __ln_omx)) - __lng_ad1) - __lng_bd1; 
# 503
for (int __i = 1; __i < __ad; ++__i) 
# 504
{ 
# 505
const int __j = __i - 1; 
# 506
__term *= ((((((__a + __d2) + __j) * ((__b + __d2) + __j)) / ((((_Tp)1) + __d2) + __j)) / __i) * (((_Tp)1) - __x)); 
# 508
__sum1 += __term; 
# 509
}  
# 511
if (__ln_pre1 > __log_max) { 
# 512
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_luke."); } else { 
# 515
__F1 = (std::exp(__ln_pre1) * __sum1); }  
# 516
} else 
# 518
{ 
# 521
__F1 = ((_Tp)0); 
# 522
}  
# 523
}  
# 526
bool __ok_d2 = true; 
# 527
_Tp __lng_ad2, __lng_bd2; 
# 528
try 
# 529
{ 
# 530
__lng_ad2 = __log_gamma(__a + __d2); 
# 531
__lng_bd2 = __log_gamma(__b + __d2); 
# 532
} 
# 533
catch (...) 
# 534
{ 
# 535
__ok_d2 = false; 
# 536
}  
# 538
if (__ok_d2) 
# 539
{ 
# 542
const int __maxiter = 2000; 
# 543
const _Tp __psi_1 = (-__numeric_constants< _Tp> ::__gamma_e()); 
# 544
const _Tp __psi_1pd = __psi(((_Tp)1) + __ad); 
# 545
const _Tp __psi_apd1 = __psi(__a + __d1); 
# 546
const _Tp __psi_bpd1 = __psi(__b + __d1); 
# 548
_Tp __psi_term = (((__psi_1 + __psi_1pd) - __psi_apd1) - __psi_bpd1) - __ln_omx; 
# 550
_Tp __fact = ((_Tp)1); 
# 551
_Tp __sum2 = __psi_term; 
# 552
_Tp __ln_pre2 = ((__lng_c + (__d1 * __ln_omx)) - __lng_ad2) - __lng_bd2; 
# 556
int __j; 
# 557
for (__j = 1; __j < __maxiter; ++__j) 
# 558
{ 
# 561
const _Tp __term1 = (((_Tp)1) / ((_Tp)__j)) + (((_Tp)1) / (__ad + __j)); 
# 563
const _Tp __term2 = (((_Tp)1) / ((__a + __d1) + ((_Tp)(__j - 1)))) + (((_Tp)1) / ((__b + __d1) + ((_Tp)(__j - 1)))); 
# 565
__psi_term += (__term1 - __term2); 
# 566
__fact *= (((((__a + __d1) + ((_Tp)(__j - 1))) * ((__b + __d1) + ((_Tp)(__j - 1)))) / ((__ad + __j) * __j)) * (((_Tp)1) - __x)); 
# 569
const _Tp __delta = __fact * __psi_term; 
# 570
__sum2 += __delta; 
# 571
if (std::abs(__delta) < (__eps * std::abs(__sum2))) { 
# 572
break; }  
# 573
}  
# 574
if (__j == __maxiter) { 
# 575
std::__throw_runtime_error("Sum F2 failed to converge in __hyperg_reflect"); }  
# 578
if (__sum2 == ((_Tp)0)) { 
# 579
__F2 = ((_Tp)0); } else { 
# 581
__F2 = (std::exp(__ln_pre2) * __sum2); }  
# 582
} else 
# 584
{ 
# 587
__F2 = ((_Tp)0); 
# 588
}  
# 590
const _Tp __sgn_2 = (((__intd % 2) == 1) ? -((_Tp)1) : ((_Tp)1)); 
# 591
const _Tp __F = __F1 + (__sgn_2 * __F2); 
# 593
return __F; 
# 594
} else 
# 596
{ 
# 601
bool __ok1 = true; 
# 602
_Tp __sgn_g1ca = ((_Tp)0), __ln_g1ca = ((_Tp)0); 
# 603
_Tp __sgn_g1cb = ((_Tp)0), __ln_g1cb = ((_Tp)0); 
# 604
try 
# 605
{ 
# 606
__sgn_g1ca = __log_gamma_sign(__c - __a); 
# 607
__ln_g1ca = __log_gamma(__c - __a); 
# 608
__sgn_g1cb = __log_gamma_sign(__c - __b); 
# 609
__ln_g1cb = __log_gamma(__c - __b); 
# 610
} 
# 611
catch (...) 
# 612
{ 
# 613
__ok1 = false; 
# 614
}  
# 616
bool __ok2 = true; 
# 617
_Tp __sgn_g2a = ((_Tp)0), __ln_g2a = ((_Tp)0); 
# 618
_Tp __sgn_g2b = ((_Tp)0), __ln_g2b = ((_Tp)0); 
# 619
try 
# 620
{ 
# 621
__sgn_g2a = __log_gamma_sign(__a); 
# 622
__ln_g2a = __log_gamma(__a); 
# 623
__sgn_g2b = __log_gamma_sign(__b); 
# 624
__ln_g2b = __log_gamma(__b); 
# 625
} 
# 626
catch (...) 
# 627
{ 
# 628
__ok2 = false; 
# 629
}  
# 631
const _Tp __sgn_gc = __log_gamma_sign(__c); 
# 632
const _Tp __ln_gc = __log_gamma(__c); 
# 633
const _Tp __sgn_gd = __log_gamma_sign(__d); 
# 634
const _Tp __ln_gd = __log_gamma(__d); 
# 635
const _Tp __sgn_gmd = __log_gamma_sign(-__d); 
# 636
const _Tp __ln_gmd = __log_gamma(-__d); 
# 638
const _Tp __sgn1 = ((__sgn_gc * __sgn_gd) * __sgn_g1ca) * __sgn_g1cb; 
# 639
const _Tp __sgn2 = ((__sgn_gc * __sgn_gmd) * __sgn_g2a) * __sgn_g2b; 
# 641
_Tp __pre1, __pre2; 
# 642
if (__ok1 && __ok2) 
# 643
{ 
# 644
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 645
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 647
if ((__ln_pre1 < __log_max) && (__ln_pre2 < __log_max)) 
# 648
{ 
# 649
__pre1 = std::exp(__ln_pre1); 
# 650
__pre2 = std::exp(__ln_pre2); 
# 651
__pre1 *= __sgn1; 
# 652
__pre2 *= __sgn2; 
# 653
} else 
# 655
{ 
# 656
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 658
}  
# 659
} else { 
# 660
if (__ok1 && (!__ok2)) 
# 661
{ 
# 662
_Tp __ln_pre1 = ((__ln_gc + __ln_gd) - __ln_g1ca) - __ln_g1cb; 
# 663
if (__ln_pre1 < __log_max) 
# 664
{ 
# 665
__pre1 = std::exp(__ln_pre1); 
# 666
__pre1 *= __sgn1; 
# 667
__pre2 = ((_Tp)0); 
# 668
} else 
# 670
{ 
# 671
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 673
}  
# 674
} else { 
# 675
if ((!__ok1) && __ok2) 
# 676
{ 
# 677
_Tp __ln_pre2 = (((__ln_gc + __ln_gmd) - __ln_g2a) - __ln_g2b) + (__d * std::log(((_Tp)1) - __x)); 
# 679
if (__ln_pre2 < __log_max) 
# 680
{ 
# 681
__pre1 = ((_Tp)0); 
# 682
__pre2 = std::exp(__ln_pre2); 
# 683
__pre2 *= __sgn2; 
# 684
} else 
# 686
{ 
# 687
std::__throw_runtime_error("Overflow of gamma functions in __hyperg_reflect"); 
# 689
}  
# 690
} else 
# 692
{ 
# 693
__pre1 = ((_Tp)0); 
# 694
__pre2 = ((_Tp)0); 
# 695
std::__throw_runtime_error("Underflow of gamma functions in __hyperg_reflect"); 
# 697
}  }  }  
# 699
const _Tp __F1 = __hyperg_series(__a, __b, ((_Tp)1) - __d, ((_Tp)1) - __x); 
# 701
const _Tp __F2 = __hyperg_series(__c - __a, __c - __b, ((_Tp)1) + __d, ((_Tp)1) - __x); 
# 704
const _Tp __F = (__pre1 * __F1) + (__pre2 * __F2); 
# 706
return __F; 
# 707
}  
# 708
} 
# 728 "/usr/include/c++/11/tr1/hypergeometric.tcc" 3
template< class _Tp> _Tp 
# 730
__hyperg(_Tp __a, _Tp __b, _Tp __c, _Tp __x) 
# 731
{ 
# 733
const _Tp __a_nint = std::nearbyint(__a); 
# 734
const _Tp __b_nint = std::nearbyint(__b); 
# 735
const _Tp __c_nint = std::nearbyint(__c); 
# 741
const _Tp __toler = ((_Tp)1000) * std::template numeric_limits< _Tp> ::epsilon(); 
# 742
if (std::abs(__x) >= ((_Tp)1)) { 
# 743
std::__throw_domain_error("Argument outside unit circle in __hyperg."); } else { 
# 745
if (((__isnan(__a) || __isnan(__b)) || __isnan(__c)) || __isnan(__x)) { 
# 747
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 748
if ((__c_nint == __c) && (__c_nint <= ((_Tp)0))) { 
# 749
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 750
if ((std::abs(__c - __b) < __toler) || (std::abs(__c - __a) < __toler)) { 
# 751
return std::pow(((_Tp)1) - __x, (__c - __a) - __b); } else { 
# 752
if ((__a >= ((_Tp)0)) && (__b >= ((_Tp)0)) && (__c >= ((_Tp)0)) && (__x >= ((_Tp)0)) && (__x < ((_Tp)(0.995L)))) { 
# 754
return __hyperg_series(__a, __b, __c, __x); } else { 
# 755
if ((std::abs(__a) < ((_Tp)10)) && (std::abs(__b) < ((_Tp)10))) 
# 756
{ 
# 759
if ((__a < ((_Tp)0)) && (std::abs(__a - __a_nint) < __toler)) { 
# 760
return __hyperg_series(__a_nint, __b, __c, __x); } else { 
# 761
if ((__b < ((_Tp)0)) && (std::abs(__b - __b_nint) < __toler)) { 
# 762
return __hyperg_series(__a, __b_nint, __c, __x); } else { 
# 763
if (__x < (-((_Tp)(0.25L)))) { 
# 764
return __hyperg_luke(__a, __b, __c, __x); } else { 
# 765
if (__x < ((_Tp)(0.5L))) { 
# 766
return __hyperg_series(__a, __b, __c, __x); } else { 
# 768
if (std::abs(__c) > ((_Tp)10)) { 
# 769
return __hyperg_series(__a, __b, __c, __x); } else { 
# 771
return __hyperg_reflect(__a, __b, __c, __x); }  }  }  }  }  
# 772
} else { 
# 774
return __hyperg_luke(__a, __b, __c, __x); }  }  }  }  }  }  
# 775
} 
# 776
}
# 783
}
# 49 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
namespace __detail { 
# 80 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 82
__poly_legendre_p(unsigned __l, _Tp __x) 
# 83
{ 
# 85
if (__isnan(__x)) { 
# 86
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 87
if (__x == (+((_Tp)1))) { 
# 88
return +((_Tp)1); } else { 
# 89
if (__x == (-((_Tp)1))) { 
# 90
return (((__l % (2)) == (1)) ? -((_Tp)1) : (+((_Tp)1))); } else 
# 92
{ 
# 93
_Tp __p_lm2 = ((_Tp)1); 
# 94
if (__l == (0)) { 
# 95
return __p_lm2; }  
# 97
_Tp __p_lm1 = __x; 
# 98
if (__l == (1)) { 
# 99
return __p_lm1; }  
# 101
_Tp __p_l = (0); 
# 102
for (unsigned __ll = (2); __ll <= __l; ++__ll) 
# 103
{ 
# 106
__p_l = ((((((_Tp)2) * __x) * __p_lm1) - __p_lm2) - (((__x * __p_lm1) - __p_lm2) / ((_Tp)__ll))); 
# 108
__p_lm2 = __p_lm1; 
# 109
__p_lm1 = __p_l; 
# 110
}  
# 112
return __p_l; 
# 113
}  }  }  
# 114
} 
# 136 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 138
__assoc_legendre_p(unsigned __l, unsigned __m, _Tp __x, _Tp 
# 139
__phase = (_Tp)(+1)) 
# 140
{ 
# 142
if (__m > __l) { 
# 143
return (_Tp)0; } else { 
# 144
if (__isnan(__x)) { 
# 145
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 146
if (__m == (0)) { 
# 147
return __poly_legendre_p(__l, __x); } else 
# 149
{ 
# 150
_Tp __p_mm = ((_Tp)1); 
# 151
if (__m > (0)) 
# 152
{ 
# 155
_Tp __root = std::sqrt(((_Tp)1) - __x) * std::sqrt(((_Tp)1) + __x); 
# 156
_Tp __fact = ((_Tp)1); 
# 157
for (unsigned __i = (1); __i <= __m; ++__i) 
# 158
{ 
# 159
__p_mm *= ((__phase * __fact) * __root); 
# 160
__fact += ((_Tp)2); 
# 161
}  
# 162
}  
# 163
if (__l == __m) { 
# 164
return __p_mm; }  
# 166
_Tp __p_mp1m = (((_Tp)(((2) * __m) + (1))) * __x) * __p_mm; 
# 167
if (__l == (__m + (1))) { 
# 168
return __p_mp1m; }  
# 170
_Tp __p_lm2m = __p_mm; 
# 171
_Tp __P_lm1m = __p_mp1m; 
# 172
_Tp __p_lm = ((_Tp)0); 
# 173
for (unsigned __j = __m + (2); __j <= __l; ++__j) 
# 174
{ 
# 175
__p_lm = ((((((_Tp)(((2) * __j) - (1))) * __x) * __P_lm1m) - (((_Tp)((__j + __m) - (1))) * __p_lm2m)) / ((_Tp)(__j - __m))); 
# 177
__p_lm2m = __P_lm1m; 
# 178
__P_lm1m = __p_lm; 
# 179
}  
# 181
return __p_lm; 
# 182
}  }  }  
# 183
} 
# 214 "/usr/include/c++/11/tr1/legendre_function.tcc" 3
template< class _Tp> _Tp 
# 216
__sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 217
{ 
# 218
if (__isnan(__theta)) { 
# 219
return std::template numeric_limits< _Tp> ::quiet_NaN(); }  
# 221
const _Tp __x = std::cos(__theta); 
# 223
if (__m > __l) { 
# 224
return (_Tp)0; } else { 
# 225
if (__m == (0)) 
# 226
{ 
# 227
_Tp __P = __poly_legendre_p(__l, __x); 
# 228
_Tp __fact = std::sqrt(((_Tp)(((2) * __l) + (1))) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 230
__P *= __fact; 
# 231
return __P; 
# 232
} else { 
# 233
if ((__x == ((_Tp)1)) || (__x == (-((_Tp)1)))) 
# 234
{ 
# 236
return (_Tp)0; 
# 237
} else 
# 239
{ 
# 245
const _Tp __sgn = ((__m % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1); 
# 246
const _Tp __y_mp1m_factor = __x * std::sqrt((_Tp)(((2) * __m) + (3))); 
# 248
const _Tp __lncirc = std::log1p((-__x) * __x); 
# 254
const _Tp __lnpoch = std::lgamma((_Tp)(__m + ((_Tp)(0.5L)))) - std::lgamma((_Tp)__m); 
# 260
const _Tp __lnpre_val = ((-((_Tp)(0.25L))) * __numeric_constants< _Tp> ::__lnpi()) + (((_Tp)(0.5L)) * (__lnpoch + (__m * __lncirc))); 
# 263
const _Tp __sr = std::sqrt((((_Tp)2) + (((_Tp)1) / __m)) / (((_Tp)4) * __numeric_constants< _Tp> ::__pi())); 
# 265
_Tp __y_mm = (__sgn * __sr) * std::exp(__lnpre_val); 
# 266
_Tp __y_mp1m = __y_mp1m_factor * __y_mm; 
# 268
if (__l == __m) { 
# 269
return __y_mm; } else { 
# 270
if (__l == (__m + (1))) { 
# 271
return __y_mp1m; } else 
# 273
{ 
# 274
_Tp __y_lm = ((_Tp)0); 
# 277
for (unsigned __ll = __m + (2); __ll <= __l; ++__ll) 
# 278
{ 
# 279
const _Tp __rat1 = ((_Tp)(__ll - __m)) / ((_Tp)(__ll + __m)); 
# 280
const _Tp __rat2 = ((_Tp)((__ll - __m) - (1))) / ((_Tp)((__ll + __m) - (1))); 
# 281
const _Tp __fact1 = std::sqrt((__rat1 * ((_Tp)(((2) * __ll) + (1)))) * ((_Tp)(((2) * __ll) - (1)))); 
# 283
const _Tp __fact2 = std::sqrt(((__rat1 * __rat2) * ((_Tp)(((2) * __ll) + (1)))) / ((_Tp)(((2) * __ll) - (3)))); 
# 285
__y_lm = ((((__x * __y_mp1m) * __fact1) - ((((__ll + __m) - (1)) * __y_mm) * __fact2)) / ((_Tp)(__ll - __m))); 
# 287
__y_mm = __y_mp1m; 
# 288
__y_mp1m = __y_lm; 
# 289
}  
# 291
return __y_lm; 
# 292
}  }  
# 293
}  }  }  
# 294
} 
# 295
}
# 302
}
# 51 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
namespace __detail { 
# 83 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 85
__bessel_ik(_Tp __nu, _Tp __x, _Tp &
# 86
__Inu, _Tp &__Knu, _Tp &__Ipnu, _Tp &__Kpnu) 
# 87
{ 
# 88
if (__x == ((_Tp)0)) 
# 89
{ 
# 90
if (__nu == ((_Tp)0)) 
# 91
{ 
# 92
__Inu = ((_Tp)1); 
# 93
__Ipnu = ((_Tp)0); 
# 94
} else { 
# 95
if (__nu == ((_Tp)1)) 
# 96
{ 
# 97
__Inu = ((_Tp)0); 
# 98
__Ipnu = ((_Tp)(0.5L)); 
# 99
} else 
# 101
{ 
# 102
__Inu = ((_Tp)0); 
# 103
__Ipnu = ((_Tp)0); 
# 104
}  }  
# 105
__Knu = std::template numeric_limits< _Tp> ::infinity(); 
# 106
__Kpnu = (-std::template numeric_limits< _Tp> ::infinity()); 
# 107
return; 
# 108
}  
# 110
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 111
const _Tp __fp_min = ((_Tp)10) * std::template numeric_limits< _Tp> ::epsilon(); 
# 112
const int __max_iter = 15000; 
# 113
const _Tp __x_min = ((_Tp)2); 
# 115
const int __nl = static_cast< int>(__nu + ((_Tp)(0.5L))); 
# 117
const _Tp __mu = __nu - __nl; 
# 118
const _Tp __mu2 = __mu * __mu; 
# 119
const _Tp __xi = ((_Tp)1) / __x; 
# 120
const _Tp __xi2 = ((_Tp)2) * __xi; 
# 121
_Tp __h = __nu * __xi; 
# 122
if (__h < __fp_min) { 
# 123
__h = __fp_min; }  
# 124
_Tp __b = __xi2 * __nu; 
# 125
_Tp __d = ((_Tp)0); 
# 126
_Tp __c = __h; 
# 127
int __i; 
# 128
for (__i = 1; __i <= __max_iter; ++__i) 
# 129
{ 
# 130
__b += __xi2; 
# 131
__d = (((_Tp)1) / (__b + __d)); 
# 132
__c = (__b + (((_Tp)1) / __c)); 
# 133
const _Tp __del = __c * __d; 
# 134
__h *= __del; 
# 135
if (std::abs(__del - ((_Tp)1)) < __eps) { 
# 136
break; }  
# 137
}  
# 138
if (__i > __max_iter) { 
# 139
std::__throw_runtime_error("Argument x too large in __bessel_ik; try asymptotic expansion."); }  
# 142
_Tp __Inul = __fp_min; 
# 143
_Tp __Ipnul = __h * __Inul; 
# 144
_Tp __Inul1 = __Inul; 
# 145
_Tp __Ipnu1 = __Ipnul; 
# 146
_Tp __fact = __nu * __xi; 
# 147
for (int __l = __nl; __l >= 1; --__l) 
# 148
{ 
# 149
const _Tp __Inutemp = (__fact * __Inul) + __Ipnul; 
# 150
__fact -= __xi; 
# 151
__Ipnul = ((__fact * __Inutemp) + __Inul); 
# 152
__Inul = __Inutemp; 
# 153
}  
# 154
_Tp __f = __Ipnul / __Inul; 
# 155
_Tp __Kmu, __Knu1; 
# 156
if (__x < __x_min) 
# 157
{ 
# 158
const _Tp __x2 = __x / ((_Tp)2); 
# 159
const _Tp __pimu = __numeric_constants< _Tp> ::__pi() * __mu; 
# 160
const _Tp __fact = (std::abs(__pimu) < __eps) ? (_Tp)1 : (__pimu / std::sin(__pimu)); 
# 162
_Tp __d = (-std::log(__x2)); 
# 163
_Tp __e = __mu * __d; 
# 164
const _Tp __fact2 = (std::abs(__e) < __eps) ? (_Tp)1 : (std::sinh(__e) / __e); 
# 166
_Tp __gam1, __gam2, __gampl, __gammi; 
# 167
__gamma_temme(__mu, __gam1, __gam2, __gampl, __gammi); 
# 168
_Tp __ff = __fact * ((__gam1 * std::cosh(__e)) + ((__gam2 * __fact2) * __d)); 
# 170
_Tp __sum = __ff; 
# 171
__e = std::exp(__e); 
# 172
_Tp __p = __e / (((_Tp)2) * __gampl); 
# 173
_Tp __q = ((_Tp)1) / ((((_Tp)2) * __e) * __gammi); 
# 174
_Tp __c = ((_Tp)1); 
# 175
__d = (__x2 * __x2); 
# 176
_Tp __sum1 = __p; 
# 177
int __i; 
# 178
for (__i = 1; __i <= __max_iter; ++__i) 
# 179
{ 
# 180
__ff = ((((__i * __ff) + __p) + __q) / ((__i * __i) - __mu2)); 
# 181
__c *= (__d / __i); 
# 182
__p /= (__i - __mu); 
# 183
__q /= (__i + __mu); 
# 184
const _Tp __del = __c * __ff; 
# 185
__sum += __del; 
# 186
const _Tp __del1 = __c * (__p - (__i * __ff)); 
# 187
__sum1 += __del1; 
# 188
if (std::abs(__del) < (__eps * std::abs(__sum))) { 
# 189
break; }  
# 190
}  
# 191
if (__i > __max_iter) { 
# 192
std::__throw_runtime_error("Bessel k series failed to converge in __bessel_ik."); }  
# 194
__Kmu = __sum; 
# 195
__Knu1 = (__sum1 * __xi2); 
# 196
} else 
# 198
{ 
# 199
_Tp __b = ((_Tp)2) * (((_Tp)1) + __x); 
# 200
_Tp __d = ((_Tp)1) / __b; 
# 201
_Tp __delh = __d; 
# 202
_Tp __h = __delh; 
# 203
_Tp __q1 = ((_Tp)0); 
# 204
_Tp __q2 = ((_Tp)1); 
# 205
_Tp __a1 = ((_Tp)(0.25L)) - __mu2; 
# 206
_Tp __q = __c = __a1; 
# 207
_Tp __a = (-__a1); 
# 208
_Tp __s = ((_Tp)1) + (__q * __delh); 
# 209
int __i; 
# 210
for (__i = 2; __i <= __max_iter; ++__i) 
# 211
{ 
# 212
__a -= (2 * (__i - 1)); 
# 213
__c = (((-__a) * __c) / __i); 
# 214
const _Tp __qnew = (__q1 - (__b * __q2)) / __a; 
# 215
__q1 = __q2; 
# 216
__q2 = __qnew; 
# 217
__q += (__c * __qnew); 
# 218
__b += ((_Tp)2); 
# 219
__d = (((_Tp)1) / (__b + (__a * __d))); 
# 220
__delh = (((__b * __d) - ((_Tp)1)) * __delh); 
# 221
__h += __delh; 
# 222
const _Tp __dels = __q * __delh; 
# 223
__s += __dels; 
# 224
if (std::abs(__dels / __s) < __eps) { 
# 225
break; }  
# 226
}  
# 227
if (__i > __max_iter) { 
# 228
std::__throw_runtime_error("Steed\'s method failed in __bessel_ik."); }  
# 230
__h = (__a1 * __h); 
# 231
__Kmu = ((std::sqrt(__numeric_constants< _Tp> ::__pi() / (((_Tp)2) * __x)) * std::exp(-__x)) / __s); 
# 233
__Knu1 = ((__Kmu * (((__mu + __x) + ((_Tp)(0.5L))) - __h)) * __xi); 
# 234
}  
# 236
_Tp __Kpmu = ((__mu * __xi) * __Kmu) - __Knu1; 
# 237
_Tp __Inumu = __xi / ((__f * __Kmu) - __Kpmu); 
# 238
__Inu = ((__Inumu * __Inul1) / __Inul); 
# 239
__Ipnu = ((__Inumu * __Ipnu1) / __Inul); 
# 240
for (__i = 1; __i <= __nl; ++__i) 
# 241
{ 
# 242
const _Tp __Knutemp = (((__mu + __i) * __xi2) * __Knu1) + __Kmu; 
# 243
__Kmu = __Knu1; 
# 244
__Knu1 = __Knutemp; 
# 245
}  
# 246
__Knu = __Kmu; 
# 247
__Kpnu = (((__nu * __xi) * __Kmu) - __Knu1); 
# 250
} 
# 267 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 269
__cyl_bessel_i(_Tp __nu, _Tp __x) 
# 270
{ 
# 271
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 272
std::__throw_domain_error("Bad argument in __cyl_bessel_i."); } else { 
# 274
if (__isnan(__nu) || __isnan(__x)) { 
# 275
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 276
if ((__x * __x) < (((_Tp)10) * (__nu + ((_Tp)1)))) { 
# 277
return __cyl_bessel_ij_series(__nu, __x, +((_Tp)1), 200); } else 
# 279
{ 
# 280
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 281
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 282
return __I_nu; 
# 283
}  }  }  
# 284
} 
# 303 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> _Tp 
# 305
__cyl_bessel_k(_Tp __nu, _Tp __x) 
# 306
{ 
# 307
if ((__nu < ((_Tp)0)) || (__x < ((_Tp)0))) { 
# 308
std::__throw_domain_error("Bad argument in __cyl_bessel_k."); } else { 
# 310
if (__isnan(__nu) || __isnan(__x)) { 
# 311
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else 
# 313
{ 
# 314
_Tp __I_nu, __K_nu, __Ip_nu, __Kp_nu; 
# 315
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 316
return __K_nu; 
# 317
}  }  
# 318
} 
# 337 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 339
__sph_bessel_ik(unsigned __n, _Tp __x, _Tp &
# 340
__i_n, _Tp &__k_n, _Tp &__ip_n, _Tp &__kp_n) 
# 341
{ 
# 342
const _Tp __nu = ((_Tp)__n) + ((_Tp)(0.5L)); 
# 344
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 345
__bessel_ik(__nu, __x, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 347
const _Tp __factor = __numeric_constants< _Tp> ::__sqrtpio2() / std::sqrt(__x); 
# 350
__i_n = (__factor * __I_nu); 
# 351
__k_n = (__factor * __K_nu); 
# 352
__ip_n = ((__factor * __Ip_nu) - (__i_n / (((_Tp)2) * __x))); 
# 353
__kp_n = ((__factor * __Kp_nu) - (__k_n / (((_Tp)2) * __x))); 
# 356
} 
# 373 "/usr/include/c++/11/tr1/modified_bessel_func.tcc" 3
template< class _Tp> void 
# 375
__airy(_Tp __x, _Tp &__Ai, _Tp &__Bi, _Tp &__Aip, _Tp &__Bip) 
# 376
{ 
# 377
const _Tp __absx = std::abs(__x); 
# 378
const _Tp __rootx = std::sqrt(__absx); 
# 379
const _Tp __z = ((((_Tp)2) * __absx) * __rootx) / ((_Tp)3); 
# 380
const _Tp _S_inf = std::template numeric_limits< _Tp> ::infinity(); 
# 382
if (__isnan(__x)) { 
# 383
__Bip = (__Aip = (__Bi = (__Ai = std::template numeric_limits< _Tp> ::quiet_NaN()))); } else { 
# 384
if (__z == _S_inf) 
# 385
{ 
# 386
__Aip = (__Ai = ((_Tp)0)); 
# 387
__Bip = (__Bi = _S_inf); 
# 388
} else { 
# 389
if (__z == (-_S_inf)) { 
# 390
__Bip = (__Aip = (__Bi = (__Ai = ((_Tp)0)))); } else { 
# 391
if (__x > ((_Tp)0)) 
# 392
{ 
# 393
_Tp __I_nu, __Ip_nu, __K_nu, __Kp_nu; 
# 395
__bessel_ik(((_Tp)1) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 396
__Ai = ((__rootx * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 399
__Bi = (__rootx * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 402
__bessel_ik(((_Tp)2) / ((_Tp)3), __z, __I_nu, __K_nu, __Ip_nu, __Kp_nu); 
# 403
__Aip = (((-__x) * __K_nu) / (__numeric_constants< _Tp> ::__sqrt3() * __numeric_constants< _Tp> ::__pi())); 
# 406
__Bip = (__x * ((__K_nu / __numeric_constants< _Tp> ::__pi()) + ((((_Tp)2) * __I_nu) / __numeric_constants< _Tp> ::__sqrt3()))); 
# 409
} else { 
# 410
if (__x < ((_Tp)0)) 
# 411
{ 
# 412
_Tp __J_nu, __Jp_nu, __N_nu, __Np_nu; 
# 414
__bessel_jn(((_Tp)1) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 415
__Ai = ((__rootx * (__J_nu - (__N_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 417
__Bi = (((-__rootx) * (__N_nu + (__J_nu / __numeric_constants< _Tp> ::__sqrt3()))) / ((_Tp)2)); 
# 420
__bessel_jn(((_Tp)2) / ((_Tp)3), __z, __J_nu, __N_nu, __Jp_nu, __Np_nu); 
# 421
__Aip = ((__absx * ((__N_nu / __numeric_constants< _Tp> ::__sqrt3()) + __J_nu)) / ((_Tp)2)); 
# 423
__Bip = ((__absx * ((__J_nu / __numeric_constants< _Tp> ::__sqrt3()) - __N_nu)) / ((_Tp)2)); 
# 425
} else 
# 427
{ 
# 431
__Ai = ((_Tp)(0.35502805388781723926L)); 
# 432
__Bi = (__Ai * __numeric_constants< _Tp> ::__sqrt3()); 
# 437
__Aip = (-((_Tp)(0.2588194037928067984L))); 
# 438
__Bip = ((-__Aip) * __numeric_constants< _Tp> ::__sqrt3()); 
# 439
}  }  }  }  }  
# 442
} 
# 443
}
# 449
}
# 42 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 56 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
namespace __detail { 
# 72 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
template< class _Tp> _Tp 
# 74
__poly_hermite_recursion(unsigned __n, _Tp __x) 
# 75
{ 
# 77
_Tp __H_0 = (1); 
# 78
if (__n == (0)) { 
# 79
return __H_0; }  
# 82
_Tp __H_1 = 2 * __x; 
# 83
if (__n == (1)) { 
# 84
return __H_1; }  
# 87
_Tp __H_n, __H_nm1, __H_nm2; 
# 88
unsigned __i; 
# 89
for (((__H_nm2 = __H_0), (__H_nm1 = __H_1)), (__i = (2)); __i <= __n; ++__i) 
# 90
{ 
# 91
__H_n = (2 * ((__x * __H_nm1) - ((__i - (1)) * __H_nm2))); 
# 92
__H_nm2 = __H_nm1; 
# 93
__H_nm1 = __H_n; 
# 94
}  
# 96
return __H_n; 
# 97
} 
# 114 "/usr/include/c++/11/tr1/poly_hermite.tcc" 3
template< class _Tp> inline _Tp 
# 116
__poly_hermite(unsigned __n, _Tp __x) 
# 117
{ 
# 118
if (__isnan(__x)) { 
# 119
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 121
return __poly_hermite_recursion(__n, __x); }  
# 122
} 
# 123
}
# 129
}
# 44 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
namespace __detail { 
# 75 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 77
__poly_laguerre_large_n(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 78
{ 
# 79
const _Tp __a = (-((_Tp)__n)); 
# 80
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 81
const _Tp __eta = (((_Tp)2) * __b) - (((_Tp)4) * __a); 
# 82
const _Tp __cos2th = __x / __eta; 
# 83
const _Tp __sin2th = ((_Tp)1) - __cos2th; 
# 84
const _Tp __th = std::acos(std::sqrt(__cos2th)); 
# 85
const _Tp __pre_h = ((((__numeric_constants< _Tp> ::__pi_2() * __numeric_constants< _Tp> ::__pi_2()) * __eta) * __eta) * __cos2th) * __sin2th; 
# 90
const _Tp __lg_b = std::lgamma(((_Tp)__n) + __b); 
# 91
const _Tp __lnfact = std::lgamma((_Tp)(__n + (1))); 
# 97
_Tp __pre_term1 = (((_Tp)(0.5L)) * (((_Tp)1) - __b)) * std::log((((_Tp)(0.25L)) * __x) * __eta); 
# 99
_Tp __pre_term2 = ((_Tp)(0.25L)) * std::log(__pre_h); 
# 100
_Tp __lnpre = (((__lg_b - __lnfact) + (((_Tp)(0.5L)) * __x)) + __pre_term1) - __pre_term2; 
# 102
_Tp __ser_term1 = std::sin(__a * __numeric_constants< _Tp> ::__pi()); 
# 103
_Tp __ser_term2 = std::sin(((((_Tp)(0.25L)) * __eta) * ((((_Tp)2) * __th) - std::sin(((_Tp)2) * __th))) + __numeric_constants< _Tp> ::__pi_4()); 
# 107
_Tp __ser = __ser_term1 + __ser_term2; 
# 109
return std::exp(__lnpre) * __ser; 
# 110
} 
# 129 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 131
__poly_laguerre_hyperg(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 132
{ 
# 133
const _Tp __b = ((_Tp)__alpha1) + ((_Tp)1); 
# 134
const _Tp __mx = (-__x); 
# 135
const _Tp __tc_sgn = (__x < ((_Tp)0)) ? (_Tp)1 : (((__n % (2)) == (1)) ? -((_Tp)1) : ((_Tp)1)); 
# 138
_Tp __tc = ((_Tp)1); 
# 139
const _Tp __ax = std::abs(__x); 
# 140
for (unsigned __k = (1); __k <= __n; ++__k) { 
# 141
__tc *= (__ax / __k); }  
# 143
_Tp __term = __tc * __tc_sgn; 
# 144
_Tp __sum = __term; 
# 145
for (int __k = ((int)__n) - 1; __k >= 0; --__k) 
# 146
{ 
# 147
__term *= ((((__b + ((_Tp)__k)) / ((_Tp)(((int)__n) - __k))) * ((_Tp)(__k + 1))) / __mx); 
# 149
__sum += __term; 
# 150
}  
# 152
return __sum; 
# 153
} 
# 185 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 187
__poly_laguerre_recursion(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 188
{ 
# 190
_Tp __l_0 = ((_Tp)1); 
# 191
if (__n == (0)) { 
# 192
return __l_0; }  
# 195
_Tp __l_1 = (((-__x) + ((_Tp)1)) + ((_Tp)__alpha1)); 
# 196
if (__n == (1)) { 
# 197
return __l_1; }  
# 200
_Tp __l_n2 = __l_0; 
# 201
_Tp __l_n1 = __l_1; 
# 202
_Tp __l_n = ((_Tp)0); 
# 203
for (unsigned __nn = (2); __nn <= __n; ++__nn) 
# 204
{ 
# 205
__l_n = (((((((_Tp)(((2) * __nn) - (1))) + ((_Tp)__alpha1)) - __x) * __l_n1) / ((_Tp)__nn)) - (((((_Tp)(__nn - (1))) + ((_Tp)__alpha1)) * __l_n2) / ((_Tp)__nn))); 
# 208
__l_n2 = __l_n1; 
# 209
__l_n1 = __l_n; 
# 210
}  
# 212
return __l_n; 
# 213
} 
# 244 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tpa, class _Tp> _Tp 
# 246
__poly_laguerre(unsigned __n, _Tpa __alpha1, _Tp __x) 
# 247
{ 
# 248
if (__x < ((_Tp)0)) { 
# 249
std::__throw_domain_error("Negative argument in __poly_laguerre."); } else { 
# 252
if (__isnan(__x)) { 
# 253
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 254
if (__n == (0)) { 
# 255
return (_Tp)1; } else { 
# 256
if (__n == (1)) { 
# 257
return (((_Tp)1) + ((_Tp)__alpha1)) - __x; } else { 
# 258
if (__x == ((_Tp)0)) 
# 259
{ 
# 260
_Tp __prod = ((_Tp)__alpha1) + ((_Tp)1); 
# 261
for (unsigned __k = (2); __k <= __n; ++__k) { 
# 262
__prod *= ((((_Tp)__alpha1) + ((_Tp)__k)) / ((_Tp)__k)); }  
# 263
return __prod; 
# 264
} else { 
# 265
if ((__n > (10000000)) && (((_Tp)__alpha1) > (-((_Tp)1))) && (__x < ((((_Tp)2) * (((_Tp)__alpha1) + ((_Tp)1))) + ((_Tp)((4) * __n))))) { 
# 267
return __poly_laguerre_large_n(__n, __alpha1, __x); } else { 
# 268
if ((((_Tp)__alpha1) >= ((_Tp)0)) || ((__x > ((_Tp)0)) && (((_Tp)__alpha1) < (-((_Tp)(__n + (1))))))) { 
# 270
return __poly_laguerre_recursion(__n, __alpha1, __x); } else { 
# 272
return __poly_laguerre_hyperg(__n, __alpha1, __x); }  }  }  }  }  }  }  
# 273
} 
# 296 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 298
__assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 299
{ return __poly_laguerre< unsigned, _Tp> (__n, __m, __x); } 
# 316 "/usr/include/c++/11/tr1/poly_laguerre.tcc" 3
template< class _Tp> inline _Tp 
# 318
__laguerre(unsigned __n, _Tp __x) 
# 319
{ return __poly_laguerre< unsigned, _Tp> (__n, 0, __x); } 
# 320
}
# 327
}
# 47 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
namespace __detail { 
# 78 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 80
__riemann_zeta_sum(_Tp __s) 
# 81
{ 
# 83
if (__s < ((_Tp)1)) { 
# 84
std::__throw_domain_error("Bad argument in zeta sum."); }  
# 86
const unsigned max_iter = (10000); 
# 87
_Tp __zeta = ((_Tp)0); 
# 88
for (unsigned __k = (1); __k < max_iter; ++__k) 
# 89
{ 
# 90
_Tp __term = std::pow(static_cast< _Tp>(__k), -__s); 
# 91
if (__term < std::template numeric_limits< _Tp> ::epsilon()) 
# 92
{ 
# 93
break; 
# 94
}  
# 95
__zeta += __term; 
# 96
}  
# 98
return __zeta; 
# 99
} 
# 115 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 117
__riemann_zeta_alt(_Tp __s) 
# 118
{ 
# 119
_Tp __sgn = ((_Tp)1); 
# 120
_Tp __zeta = ((_Tp)0); 
# 121
for (unsigned __i = (1); __i < (10000000); ++__i) 
# 122
{ 
# 123
_Tp __term = __sgn / std::pow(__i, __s); 
# 124
if (std::abs(__term) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 125
break; }  
# 126
__zeta += __term; 
# 127
__sgn *= ((_Tp)(-1)); 
# 128
}  
# 129
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 131
return __zeta; 
# 132
} 
# 157 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 159
__riemann_zeta_glob(_Tp __s) 
# 160
{ 
# 161
_Tp __zeta = ((_Tp)0); 
# 163
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 165
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 170
if (__s < ((_Tp)0)) 
# 171
{ 
# 173
if (std::fmod(__s, (_Tp)2) == ((_Tp)0)) { 
# 174
return (_Tp)0; } else 
# 177
{ 
# 178
_Tp __zeta = __riemann_zeta_glob(((_Tp)1) - __s); 
# 179
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 188
return __zeta; 
# 189
}  
# 190
}  
# 192
_Tp __num = ((_Tp)(0.5L)); 
# 193
const unsigned __maxit = (10000); 
# 194
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 195
{ 
# 196
bool __punt = false; 
# 197
_Tp __sgn = ((_Tp)1); 
# 198
_Tp __term = ((_Tp)0); 
# 199
for (unsigned __j = (0); __j <= __i; ++__j) 
# 200
{ 
# 202
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 210
if (__bincoeff > __max_bincoeff) 
# 211
{ 
# 213
__punt = true; 
# 214
break; 
# 215
}  
# 216
__bincoeff = std::exp(__bincoeff); 
# 217
__term += ((__sgn * __bincoeff) * std::pow((_Tp)((1) + __j), -__s)); 
# 218
__sgn *= ((_Tp)(-1)); 
# 219
}  
# 220
if (__punt) { 
# 221
break; }  
# 222
__term *= __num; 
# 223
__zeta += __term; 
# 224
if (std::abs(__term / __zeta) < __eps) { 
# 225
break; }  
# 226
__num *= ((_Tp)(0.5L)); 
# 227
}  
# 229
__zeta /= (((_Tp)1) - std::pow((_Tp)2, ((_Tp)1) - __s)); 
# 231
return __zeta; 
# 232
} 
# 252 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 254
__riemann_zeta_product(_Tp __s) 
# 255
{ 
# 256
static const _Tp __prime[] = {((_Tp)2), ((_Tp)3), ((_Tp)5), ((_Tp)7), ((_Tp)11), ((_Tp)13), ((_Tp)17), ((_Tp)19), ((_Tp)23), ((_Tp)29), ((_Tp)31), ((_Tp)37), ((_Tp)41), ((_Tp)43), ((_Tp)47), ((_Tp)53), ((_Tp)59), ((_Tp)61), ((_Tp)67), ((_Tp)71), ((_Tp)73), ((_Tp)79), ((_Tp)83), ((_Tp)89), ((_Tp)97), ((_Tp)101), ((_Tp)103), ((_Tp)107), ((_Tp)109)}; 
# 262
static const unsigned __num_primes = (sizeof(__prime) / sizeof(_Tp)); 
# 264
_Tp __zeta = ((_Tp)1); 
# 265
for (unsigned __i = (0); __i < __num_primes; ++__i) 
# 266
{ 
# 267
const _Tp __fact = ((_Tp)1) - std::pow(__prime[__i], -__s); 
# 268
__zeta *= __fact; 
# 269
if ((((_Tp)1) - __fact) < std::template numeric_limits< _Tp> ::epsilon()) { 
# 270
break; }  
# 271
}  
# 273
__zeta = (((_Tp)1) / __zeta); 
# 275
return __zeta; 
# 276
} 
# 293 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 295
__riemann_zeta(_Tp __s) 
# 296
{ 
# 297
if (__isnan(__s)) { 
# 298
return std::template numeric_limits< _Tp> ::quiet_NaN(); } else { 
# 299
if (__s == ((_Tp)1)) { 
# 300
return std::template numeric_limits< _Tp> ::infinity(); } else { 
# 301
if (__s < (-((_Tp)19))) 
# 302
{ 
# 303
_Tp __zeta = __riemann_zeta_product(((_Tp)1) - __s); 
# 304
__zeta *= (((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::exp(std::lgamma(((_Tp)1) - __s))) / __numeric_constants< _Tp> ::__pi()); 
# 312
return __zeta; 
# 313
} else { 
# 314
if (__s < ((_Tp)20)) 
# 315
{ 
# 317
bool __glob = true; 
# 318
if (__glob) { 
# 319
return __riemann_zeta_glob(__s); } else 
# 321
{ 
# 322
if (__s > ((_Tp)1)) { 
# 323
return __riemann_zeta_sum(__s); } else 
# 325
{ 
# 326
_Tp __zeta = ((std::pow(((_Tp)2) * __numeric_constants< _Tp> ::__pi(), __s) * std::sin(__numeric_constants< _Tp> ::__pi_2() * __s)) * std::tgamma(((_Tp)1) - __s)) * __riemann_zeta_sum(((_Tp)1) - __s); 
# 335
return __zeta; 
# 336
}  
# 337
}  
# 338
} else { 
# 340
return __riemann_zeta_product(__s); }  }  }  }  
# 341
} 
# 365 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> _Tp 
# 367
__hurwitz_zeta_glob(_Tp __a, _Tp __s) 
# 368
{ 
# 369
_Tp __zeta = ((_Tp)0); 
# 371
const _Tp __eps = std::template numeric_limits< _Tp> ::epsilon(); 
# 373
const _Tp __max_bincoeff = (std::template numeric_limits< _Tp> ::max_exponent10 * std::log((_Tp)10)) - ((_Tp)1); 
# 376
const unsigned __maxit = (10000); 
# 377
for (unsigned __i = (0); __i < __maxit; ++__i) 
# 378
{ 
# 379
bool __punt = false; 
# 380
_Tp __sgn = ((_Tp)1); 
# 381
_Tp __term = ((_Tp)0); 
# 382
for (unsigned __j = (0); __j <= __i; ++__j) 
# 383
{ 
# 385
_Tp __bincoeff = (std::lgamma((_Tp)((1) + __i)) - std::lgamma((_Tp)((1) + __j))) - std::lgamma((_Tp)(((1) + __i) - __j)); 
# 393
if (__bincoeff > __max_bincoeff) 
# 394
{ 
# 396
__punt = true; 
# 397
break; 
# 398
}  
# 399
__bincoeff = std::exp(__bincoeff); 
# 400
__term += ((__sgn * __bincoeff) * std::pow((_Tp)(__a + __j), -__s)); 
# 401
__sgn *= ((_Tp)(-1)); 
# 402
}  
# 403
if (__punt) { 
# 404
break; }  
# 405
__term /= ((_Tp)(__i + (1))); 
# 406
if (std::abs(__term / __zeta) < __eps) { 
# 407
break; }  
# 408
__zeta += __term; 
# 409
}  
# 411
__zeta /= (__s - ((_Tp)1)); 
# 413
return __zeta; 
# 414
} 
# 430 "/usr/include/c++/11/tr1/riemann_zeta.tcc" 3
template< class _Tp> inline _Tp 
# 432
__hurwitz_zeta(_Tp __a, _Tp __s) 
# 433
{ return __hurwitz_zeta_glob(__a, __s); } 
# 434
}
# 441
}
# 61 "/usr/include/c++/11/bits/specfun.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 206 "/usr/include/c++/11/bits/specfun.h" 3
inline float assoc_laguerref(unsigned __n, unsigned __m, float __x) 
# 207
{ return __detail::__assoc_laguerre< float> (__n, __m, __x); } 
# 216
inline long double assoc_laguerrel(unsigned __n, unsigned __m, long double __x) 
# 217
{ return __detail::__assoc_laguerre< long double> (__n, __m, __x); } 
# 250 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 252
assoc_laguerre(unsigned __n, unsigned __m, _Tp __x) 
# 253
{ 
# 254
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 255
return __detail::__assoc_laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __m, __x); 
# 256
} 
# 267 "/usr/include/c++/11/bits/specfun.h" 3
inline float assoc_legendref(unsigned __l, unsigned __m, float __x) 
# 268
{ return __detail::__assoc_legendre_p< float> (__l, __m, __x); } 
# 276
inline long double assoc_legendrel(unsigned __l, unsigned __m, long double __x) 
# 277
{ return __detail::__assoc_legendre_p< long double> (__l, __m, __x); } 
# 296 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 298
assoc_legendre(unsigned __l, unsigned __m, _Tp __x) 
# 299
{ 
# 300
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 301
return __detail::__assoc_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __x); 
# 302
} 
# 312 "/usr/include/c++/11/bits/specfun.h" 3
inline float betaf(float __a, float __b) 
# 313
{ return __detail::__beta< float> (__a, __b); } 
# 322
inline long double betal(long double __a, long double __b) 
# 323
{ return __detail::__beta< long double> (__a, __b); } 
# 341 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpa, class _Tpb> inline typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type 
# 343
beta(_Tpa __a, _Tpb __b) 
# 344
{ 
# 345
typedef typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type __type; 
# 346
return __detail::__beta< typename __gnu_cxx::__promote_2< _Tpa, _Tpb> ::__type> (__a, __b); 
# 347
} 
# 358 "/usr/include/c++/11/bits/specfun.h" 3
inline float comp_ellint_1f(float __k) 
# 359
{ return __detail::__comp_ellint_1< float> (__k); } 
# 368
inline long double comp_ellint_1l(long double __k) 
# 369
{ return __detail::__comp_ellint_1< long double> (__k); } 
# 389 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 391
comp_ellint_1(_Tp __k) 
# 392
{ 
# 393
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 394
return __detail::__comp_ellint_1< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 395
} 
# 406 "/usr/include/c++/11/bits/specfun.h" 3
inline float comp_ellint_2f(float __k) 
# 407
{ return __detail::__comp_ellint_2< float> (__k); } 
# 416
inline long double comp_ellint_2l(long double __k) 
# 417
{ return __detail::__comp_ellint_2< long double> (__k); } 
# 436 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 438
comp_ellint_2(_Tp __k) 
# 439
{ 
# 440
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 441
return __detail::__comp_ellint_2< typename __gnu_cxx::__promote< _Tp> ::__type> (__k); 
# 442
} 
# 453 "/usr/include/c++/11/bits/specfun.h" 3
inline float comp_ellint_3f(float __k, float __nu) 
# 454
{ return __detail::__comp_ellint_3< float> (__k, __nu); } 
# 463
inline long double comp_ellint_3l(long double __k, long double __nu) 
# 464
{ return __detail::__comp_ellint_3< long double> (__k, __nu); } 
# 487 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpn> inline typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type 
# 489
comp_ellint_3(_Tp __k, _Tpn __nu) 
# 490
{ 
# 491
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type __type; 
# 492
return __detail::__comp_ellint_3< typename __gnu_cxx::__promote_2< _Tp, _Tpn> ::__type> (__k, __nu); 
# 493
} 
# 504 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_bessel_if(float __nu, float __x) 
# 505
{ return __detail::__cyl_bessel_i< float> (__nu, __x); } 
# 514
inline long double cyl_bessel_il(long double __nu, long double __x) 
# 515
{ return __detail::__cyl_bessel_i< long double> (__nu, __x); } 
# 533 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 535
cyl_bessel_i(_Tpnu __nu, _Tp __x) 
# 536
{ 
# 537
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 538
return __detail::__cyl_bessel_i< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 539
} 
# 550 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_bessel_jf(float __nu, float __x) 
# 551
{ return __detail::__cyl_bessel_j< float> (__nu, __x); } 
# 560
inline long double cyl_bessel_jl(long double __nu, long double __x) 
# 561
{ return __detail::__cyl_bessel_j< long double> (__nu, __x); } 
# 579 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 581
cyl_bessel_j(_Tpnu __nu, _Tp __x) 
# 582
{ 
# 583
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 584
return __detail::__cyl_bessel_j< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 585
} 
# 596 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_bessel_kf(float __nu, float __x) 
# 597
{ return __detail::__cyl_bessel_k< float> (__nu, __x); } 
# 606
inline long double cyl_bessel_kl(long double __nu, long double __x) 
# 607
{ return __detail::__cyl_bessel_k< long double> (__nu, __x); } 
# 631 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 633
cyl_bessel_k(_Tpnu __nu, _Tp __x) 
# 634
{ 
# 635
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 636
return __detail::__cyl_bessel_k< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 637
} 
# 648 "/usr/include/c++/11/bits/specfun.h" 3
inline float cyl_neumannf(float __nu, float __x) 
# 649
{ return __detail::__cyl_neumann_n< float> (__nu, __x); } 
# 658
inline long double cyl_neumannl(long double __nu, long double __x) 
# 659
{ return __detail::__cyl_neumann_n< long double> (__nu, __x); } 
# 679 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpnu, class _Tp> inline typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type 
# 681
cyl_neumann(_Tpnu __nu, _Tp __x) 
# 682
{ 
# 683
typedef typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type __type; 
# 684
return __detail::__cyl_neumann_n< typename __gnu_cxx::__promote_2< _Tpnu, _Tp> ::__type> (__nu, __x); 
# 685
} 
# 696 "/usr/include/c++/11/bits/specfun.h" 3
inline float ellint_1f(float __k, float __phi) 
# 697
{ return __detail::__ellint_1< float> (__k, __phi); } 
# 706
inline long double ellint_1l(long double __k, long double __phi) 
# 707
{ return __detail::__ellint_1< long double> (__k, __phi); } 
# 727 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 729
ellint_1(_Tp __k, _Tpp __phi) 
# 730
{ 
# 731
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 732
return __detail::__ellint_1< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 733
} 
# 744 "/usr/include/c++/11/bits/specfun.h" 3
inline float ellint_2f(float __k, float __phi) 
# 745
{ return __detail::__ellint_2< float> (__k, __phi); } 
# 754
inline long double ellint_2l(long double __k, long double __phi) 
# 755
{ return __detail::__ellint_2< long double> (__k, __phi); } 
# 775 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpp> inline typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type 
# 777
ellint_2(_Tp __k, _Tpp __phi) 
# 778
{ 
# 779
typedef typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type __type; 
# 780
return __detail::__ellint_2< typename __gnu_cxx::__promote_2< _Tp, _Tpp> ::__type> (__k, __phi); 
# 781
} 
# 792 "/usr/include/c++/11/bits/specfun.h" 3
inline float ellint_3f(float __k, float __nu, float __phi) 
# 793
{ return __detail::__ellint_3< float> (__k, __nu, __phi); } 
# 802
inline long double ellint_3l(long double __k, long double __nu, long double __phi) 
# 803
{ return __detail::__ellint_3< long double> (__k, __nu, __phi); } 
# 828 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp, class _Tpn, class _Tpp> inline typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type 
# 830
ellint_3(_Tp __k, _Tpn __nu, _Tpp __phi) 
# 831
{ 
# 832
typedef typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type __type; 
# 833
return __detail::__ellint_3< typename __gnu_cxx::__promote_3< _Tp, _Tpn, _Tpp> ::__type> (__k, __nu, __phi); 
# 834
} 
# 844 "/usr/include/c++/11/bits/specfun.h" 3
inline float expintf(float __x) 
# 845
{ return __detail::__expint< float> (__x); } 
# 854
inline long double expintl(long double __x) 
# 855
{ return __detail::__expint< long double> (__x); } 
# 868 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 870
expint(_Tp __x) 
# 871
{ 
# 872
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 873
return __detail::__expint< typename __gnu_cxx::__promote< _Tp> ::__type> (__x); 
# 874
} 
# 885 "/usr/include/c++/11/bits/specfun.h" 3
inline float hermitef(unsigned __n, float __x) 
# 886
{ return __detail::__poly_hermite< float> (__n, __x); } 
# 895
inline long double hermitel(unsigned __n, long double __x) 
# 896
{ return __detail::__poly_hermite< long double> (__n, __x); } 
# 916 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 918
hermite(unsigned __n, _Tp __x) 
# 919
{ 
# 920
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 921
return __detail::__poly_hermite< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 922
} 
# 933 "/usr/include/c++/11/bits/specfun.h" 3
inline float laguerref(unsigned __n, float __x) 
# 934
{ return __detail::__laguerre< float> (__n, __x); } 
# 943
inline long double laguerrel(unsigned __n, long double __x) 
# 944
{ return __detail::__laguerre< long double> (__n, __x); } 
# 960 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 962
laguerre(unsigned __n, _Tp __x) 
# 963
{ 
# 964
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 965
return __detail::__laguerre< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 966
} 
# 977 "/usr/include/c++/11/bits/specfun.h" 3
inline float legendref(unsigned __l, float __x) 
# 978
{ return __detail::__poly_legendre_p< float> (__l, __x); } 
# 987
inline long double legendrel(unsigned __l, long double __x) 
# 988
{ return __detail::__poly_legendre_p< long double> (__l, __x); } 
# 1005 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1007
legendre(unsigned __l, _Tp __x) 
# 1008
{ 
# 1009
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1010
return __detail::__poly_legendre_p< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __x); 
# 1011
} 
# 1022 "/usr/include/c++/11/bits/specfun.h" 3
inline float riemann_zetaf(float __s) 
# 1023
{ return __detail::__riemann_zeta< float> (__s); } 
# 1032
inline long double riemann_zetal(long double __s) 
# 1033
{ return __detail::__riemann_zeta< long double> (__s); } 
# 1056 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1058
riemann_zeta(_Tp __s) 
# 1059
{ 
# 1060
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1061
return __detail::__riemann_zeta< typename __gnu_cxx::__promote< _Tp> ::__type> (__s); 
# 1062
} 
# 1073 "/usr/include/c++/11/bits/specfun.h" 3
inline float sph_besself(unsigned __n, float __x) 
# 1074
{ return __detail::__sph_bessel< float> (__n, __x); } 
# 1083
inline long double sph_bessell(unsigned __n, long double __x) 
# 1084
{ return __detail::__sph_bessel< long double> (__n, __x); } 
# 1100 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1102
sph_bessel(unsigned __n, _Tp __x) 
# 1103
{ 
# 1104
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1105
return __detail::__sph_bessel< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1106
} 
# 1117 "/usr/include/c++/11/bits/specfun.h" 3
inline float sph_legendref(unsigned __l, unsigned __m, float __theta) 
# 1118
{ return __detail::__sph_legendre< float> (__l, __m, __theta); } 
# 1128 "/usr/include/c++/11/bits/specfun.h" 3
inline long double sph_legendrel(unsigned __l, unsigned __m, long double __theta) 
# 1129
{ return __detail::__sph_legendre< long double> (__l, __m, __theta); } 
# 1147 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1149
sph_legendre(unsigned __l, unsigned __m, _Tp __theta) 
# 1150
{ 
# 1151
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1152
return __detail::__sph_legendre< typename __gnu_cxx::__promote< _Tp> ::__type> (__l, __m, __theta); 
# 1153
} 
# 1164 "/usr/include/c++/11/bits/specfun.h" 3
inline float sph_neumannf(unsigned __n, float __x) 
# 1165
{ return __detail::__sph_neumann< float> (__n, __x); } 
# 1174
inline long double sph_neumannl(unsigned __n, long double __x) 
# 1175
{ return __detail::__sph_neumann< long double> (__n, __x); } 
# 1191 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tp> inline typename __gnu_cxx::__promote< _Tp> ::__type 
# 1193
sph_neumann(unsigned __n, _Tp __x) 
# 1194
{ 
# 1195
typedef typename __gnu_cxx::__promote< _Tp> ::__type __type; 
# 1196
return __detail::__sph_neumann< typename __gnu_cxx::__promote< _Tp> ::__type> (__n, __x); 
# 1197
} 
# 1202
}
# 1205
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 1219 "/usr/include/c++/11/bits/specfun.h" 3
inline float airy_aif(float __x) 
# 1220
{ 
# 1221
float __Ai, __Bi, __Aip, __Bip; 
# 1222
std::__detail::__airy< float> (__x, __Ai, __Bi, __Aip, __Bip); 
# 1223
return __Ai; 
# 1224
} 
# 1230
inline long double airy_ail(long double __x) 
# 1231
{ 
# 1232
long double __Ai, __Bi, __Aip, __Bip; 
# 1233
std::__detail::__airy< long double> (__x, __Ai, __Bi, __Aip, __Bip); 
# 1234
return __Ai; 
# 1235
} 
# 1240
template< class _Tp> inline typename __promote< _Tp> ::__type 
# 1242
airy_ai(_Tp __x) 
# 1243
{ 
# 1244
typedef typename __promote< _Tp> ::__type __type; 
# 1245
__type __Ai, __Bi, __Aip, __Bip; 
# 1246
std::__detail::__airy< typename __promote< _Tp> ::__type> (__x, __Ai, __Bi, __Aip, __Bip); 
# 1247
return __Ai; 
# 1248
} 
# 1254
inline float airy_bif(float __x) 
# 1255
{ 
# 1256
float __Ai, __Bi, __Aip, __Bip; 
# 1257
std::__detail::__airy< float> (__x, __Ai, __Bi, __Aip, __Bip); 
# 1258
return __Bi; 
# 1259
} 
# 1265
inline long double airy_bil(long double __x) 
# 1266
{ 
# 1267
long double __Ai, __Bi, __Aip, __Bip; 
# 1268
std::__detail::__airy< long double> (__x, __Ai, __Bi, __Aip, __Bip); 
# 1269
return __Bi; 
# 1270
} 
# 1275
template< class _Tp> inline typename __promote< _Tp> ::__type 
# 1277
airy_bi(_Tp __x) 
# 1278
{ 
# 1279
typedef typename __promote< _Tp> ::__type __type; 
# 1280
__type __Ai, __Bi, __Aip, __Bip; 
# 1281
std::__detail::__airy< typename __promote< _Tp> ::__type> (__x, __Ai, __Bi, __Aip, __Bip); 
# 1282
return __Bi; 
# 1283
} 
# 1295 "/usr/include/c++/11/bits/specfun.h" 3
inline float conf_hypergf(float __a, float __c, float __x) 
# 1296
{ return std::__detail::__conf_hyperg< float> (__a, __c, __x); } 
# 1306 "/usr/include/c++/11/bits/specfun.h" 3
inline long double conf_hypergl(long double __a, long double __c, long double __x) 
# 1307
{ return std::__detail::__conf_hyperg< long double> (__a, __c, __x); } 
# 1325 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpa, class _Tpc, class _Tp> inline typename __promote_3< _Tpa, _Tpc, _Tp> ::__type 
# 1327
conf_hyperg(_Tpa __a, _Tpc __c, _Tp __x) 
# 1328
{ 
# 1329
typedef typename __promote_3< _Tpa, _Tpc, _Tp> ::__type __type; 
# 1330
return std::__detail::__conf_hyperg< typename __promote_3< _Tpa, _Tpc, _Tp> ::__type> (__a, __c, __x); 
# 1331
} 
# 1343 "/usr/include/c++/11/bits/specfun.h" 3
inline float hypergf(float __a, float __b, float __c, float __x) 
# 1344
{ return std::__detail::__hyperg< float> (__a, __b, __c, __x); } 
# 1354 "/usr/include/c++/11/bits/specfun.h" 3
inline long double hypergl(long double __a, long double __b, long double __c, long double __x) 
# 1355
{ return std::__detail::__hyperg< long double> (__a, __b, __c, __x); } 
# 1374 "/usr/include/c++/11/bits/specfun.h" 3
template< class _Tpa, class _Tpb, class _Tpc, class _Tp> inline typename __promote_4< _Tpa, _Tpb, _Tpc, _Tp> ::__type 
# 1376
hyperg(_Tpa __a, _Tpb __b, _Tpc __c, _Tp __x) 
# 1377
{ 
# 1379
typedef typename __promote_4< _Tpa, _Tpb, _Tpc, _Tp> ::__type __type; 
# 1380
return std::__detail::__hyperg< typename __promote_4< _Tpa, _Tpb, _Tpc, _Tp> ::__type> (__a, __b, __c, __x); 
# 1381
} 
# 1385
}
# 1388
#pragma GCC visibility pop
# 1938 "/usr/include/c++/11/cmath" 3
}
# 38 "/usr/include/c++/11/math.h" 3
using std::abs;
# 39
using std::acos;
# 40
using std::asin;
# 41
using std::atan;
# 42
using std::atan2;
# 43
using std::cos;
# 44
using std::sin;
# 45
using std::tan;
# 46
using std::cosh;
# 47
using std::sinh;
# 48
using std::tanh;
# 49
using std::exp;
# 50
using std::frexp;
# 51
using std::ldexp;
# 52
using std::log;
# 53
using std::log10;
# 54
using std::modf;
# 55
using std::pow;
# 56
using std::sqrt;
# 57
using std::ceil;
# 58
using std::fabs;
# 59
using std::floor;
# 60
using std::fmod;
# 63
using std::fpclassify;
# 64
using std::isfinite;
# 65
using std::isinf;
# 66
using std::isnan;
# 67
using std::isnormal;
# 68
using std::signbit;
# 69
using std::isgreater;
# 70
using std::isgreaterequal;
# 71
using std::isless;
# 72
using std::islessequal;
# 73
using std::islessgreater;
# 74
using std::isunordered;
# 78
using std::acosh;
# 79
using std::asinh;
# 80
using std::atanh;
# 81
using std::cbrt;
# 82
using std::copysign;
# 83
using std::erf;
# 84
using std::erfc;
# 85
using std::exp2;
# 86
using std::expm1;
# 87
using std::fdim;
# 88
using std::fma;
# 89
using std::fmax;
# 90
using std::fmin;
# 91
using std::hypot;
# 92
using std::ilogb;
# 93
using std::lgamma;
# 94
using std::llrint;
# 95
using std::llround;
# 96
using std::log1p;
# 97
using std::log2;
# 98
using std::logb;
# 99
using std::lrint;
# 100
using std::lround;
# 101
using std::nearbyint;
# 102
using std::nextafter;
# 103
using std::nexttoward;
# 104
using std::remainder;
# 105
using std::remquo;
# 106
using std::rint;
# 107
using std::round;
# 108
using std::scalbln;
# 109
using std::scalbn;
# 110
using std::tgamma;
# 111
using std::trunc;
# 10623 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 10624
constexpr bool signbit(float x); 
# 10625
constexpr bool signbit(double x); 
# 10626
constexpr bool signbit(long double x); 
# 10627
constexpr bool isfinite(float x); 
# 10628
constexpr bool isfinite(double x); 
# 10629
constexpr bool isfinite(long double x); 
# 10630
constexpr bool isnan(float x); 
# 10635
constexpr bool isnan(double x); 
# 10637
constexpr bool isnan(long double x); 
# 10638
constexpr bool isinf(float x); 
# 10643
constexpr bool isinf(double x); 
# 10645
constexpr bool isinf(long double x); 
# 10646
}
# 10802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 10804
template< class T> extern T __pow_helper(T, int); 
# 10805
template< class T> extern T __cmath_power(T, unsigned); 
# 10806
}
# 10808
using std::abs;
# 10809
using std::fabs;
# 10810
using std::ceil;
# 10811
using std::floor;
# 10812
using std::sqrt;
# 10814
using std::pow;
# 10816
using std::log;
# 10817
using std::log10;
# 10818
using std::fmod;
# 10819
using std::modf;
# 10820
using std::exp;
# 10821
using std::frexp;
# 10822
using std::ldexp;
# 10823
using std::asin;
# 10824
using std::sin;
# 10825
using std::sinh;
# 10826
using std::acos;
# 10827
using std::cos;
# 10828
using std::cosh;
# 10829
using std::atan;
# 10830
using std::atan2;
# 10831
using std::tan;
# 10832
using std::tanh;
# 11203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 11212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline long long abs(long long); 
# 11222 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern inline long abs(long); 
# 11223
extern constexpr float abs(float); 
# 11224
extern constexpr double abs(double); 
# 11225
extern constexpr float fabs(float); 
# 11226
extern constexpr float ceil(float); 
# 11227
extern constexpr float floor(float); 
# 11228
extern constexpr float sqrt(float); 
# 11229
extern constexpr float pow(float, float); 
# 11234
template< class _Tp, class _Up> extern constexpr typename __gnu_cxx::__promote_2< _Tp, _Up> ::__type pow(_Tp, _Up); 
# 11244
extern constexpr float log(float); 
# 11245
extern constexpr float log10(float); 
# 11246
extern constexpr float fmod(float, float); 
# 11247
extern inline float modf(float, float *); 
# 11248
extern constexpr float exp(float); 
# 11249
extern inline float frexp(float, int *); 
# 11250
extern constexpr float ldexp(float, int); 
# 11251
extern constexpr float asin(float); 
# 11252
extern constexpr float sin(float); 
# 11253
extern constexpr float sinh(float); 
# 11254
extern constexpr float acos(float); 
# 11255
extern constexpr float cos(float); 
# 11256
extern constexpr float cosh(float); 
# 11257
extern constexpr float atan(float); 
# 11258
extern constexpr float atan2(float, float); 
# 11259
extern constexpr float tan(float); 
# 11260
extern constexpr float tanh(float); 
# 11343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 11449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
namespace std { 
# 11450
constexpr float logb(float a); 
# 11451
constexpr int ilogb(float a); 
# 11452
constexpr float scalbn(float a, int b); 
# 11453
constexpr float scalbln(float a, long b); 
# 11454
constexpr float exp2(float a); 
# 11455
constexpr float expm1(float a); 
# 11456
constexpr float log2(float a); 
# 11457
constexpr float log1p(float a); 
# 11458
constexpr float acosh(float a); 
# 11459
constexpr float asinh(float a); 
# 11460
constexpr float atanh(float a); 
# 11461
constexpr float hypot(float a, float b); 
# 11462
constexpr float cbrt(float a); 
# 11463
constexpr float erf(float a); 
# 11464
constexpr float erfc(float a); 
# 11465
constexpr float lgamma(float a); 
# 11466
constexpr float tgamma(float a); 
# 11467
constexpr float copysign(float a, float b); 
# 11468
constexpr float nextafter(float a, float b); 
# 11469
constexpr float remainder(float a, float b); 
# 11470
inline float remquo(float a, float b, int * quo); 
# 11471
constexpr float round(float a); 
# 11472
constexpr long lround(float a); 
# 11473
constexpr long long llround(float a); 
# 11474
constexpr float trunc(float a); 
# 11475
constexpr float rint(float a); 
# 11476
constexpr long lrint(float a); 
# 11477
constexpr long long llrint(float a); 
# 11478
constexpr float nearbyint(float a); 
# 11479
constexpr float fdim(float a, float b); 
# 11480
constexpr float fma(float a, float b, float c); 
# 11481
constexpr float fmax(float a, float b); 
# 11482
constexpr float fmin(float a, float b); 
# 11483
}
# 11588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float exp10(const float a); 
# 11590
static inline float rsqrt(const float a); 
# 11592
static inline float rcbrt(const float a); 
# 11594
static inline float sinpi(const float a); 
# 11596
static inline float cospi(const float a); 
# 11598
static inline void sincospi(const float a, float *const sptr, float *const cptr); 
# 11600
static inline void sincos(const float a, float *const sptr, float *const cptr); 
# 11602
static inline float j0(const float a); 
# 11604
static inline float j1(const float a); 
# 11606
static inline float jn(const int n, const float a); 
# 11608
static inline float y0(const float a); 
# 11610
static inline float y1(const float a); 
# 11612
static inline float yn(const int n, const float a); 
# 11614
__attribute__((unused)) static inline float cyl_bessel_i0(const float a); 
# 11616
__attribute__((unused)) static inline float cyl_bessel_i1(const float a); 
# 11618
static inline float erfinv(const float a); 
# 11620
static inline float erfcinv(const float a); 
# 11622
static inline float normcdfinv(const float a); 
# 11624
static inline float normcdf(const float a); 
# 11626
static inline float erfcx(const float a); 
# 11628
static inline double copysign(const double a, const float b); 
# 11630
static inline double copysign(const float a, const double b); 
# 11638
static inline unsigned min(const unsigned a, const unsigned b); 
# 11646
static inline unsigned min(const int a, const unsigned b); 
# 11654
static inline unsigned min(const unsigned a, const int b); 
# 11662
static inline long min(const long a, const long b); 
# 11670
static inline unsigned long min(const unsigned long a, const unsigned long b); 
# 11678
static inline unsigned long min(const long a, const unsigned long b); 
# 11686
static inline unsigned long min(const unsigned long a, const long b); 
# 11694
static inline long long min(const long long a, const long long b); 
# 11702
static inline unsigned long long min(const unsigned long long a, const unsigned long long b); 
# 11710
static inline unsigned long long min(const long long a, const unsigned long long b); 
# 11718
static inline unsigned long long min(const unsigned long long a, const long long b); 
# 11729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float min(const float a, const float b); 
# 11740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const double a, const double b); 
# 11750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const float a, const double b); 
# 11760 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double min(const double a, const float b); 
# 11768
static inline unsigned max(const unsigned a, const unsigned b); 
# 11776
static inline unsigned max(const int a, const unsigned b); 
# 11784
static inline unsigned max(const unsigned a, const int b); 
# 11792
static inline long max(const long a, const long b); 
# 11800
static inline unsigned long max(const unsigned long a, const unsigned long b); 
# 11808
static inline unsigned long max(const long a, const unsigned long b); 
# 11816
static inline unsigned long max(const unsigned long a, const long b); 
# 11824
static inline long long max(const long long a, const long long b); 
# 11832
static inline unsigned long long max(const unsigned long long a, const unsigned long long b); 
# 11840
static inline unsigned long long max(const long long a, const unsigned long long b); 
# 11848
static inline unsigned long long max(const unsigned long long a, const long long b); 
# 11859 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline float max(const float a, const float b); 
# 11870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const double a, const double b); 
# 11880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const float a, const double b); 
# 11890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
static inline double max(const double a, const float b); 
# 11901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
extern "C" {
# 11902
__attribute__((unused)) inline void *__nv_aligned_device_malloc(size_t size, size_t align) 
# 11903
{int volatile ___ = 1;(void)size;(void)align;
# 11906
::exit(___);}
#if 0
# 11903
{ 
# 11904
__attribute__((unused)) void *__nv_aligned_device_malloc_impl(size_t, size_t); 
# 11905
return __nv_aligned_device_malloc_impl(size, align); 
# 11906
} 
#endif
# 11907 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.h"
}
# 758 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
static inline float exp10(const float a) 
# 759
{ 
# 760
return exp10f(a); 
# 761
} 
# 763
static inline float rsqrt(const float a) 
# 764
{ 
# 765
return rsqrtf(a); 
# 766
} 
# 768
static inline float rcbrt(const float a) 
# 769
{ 
# 770
return rcbrtf(a); 
# 771
} 
# 773
static inline float sinpi(const float a) 
# 774
{ 
# 775
return sinpif(a); 
# 776
} 
# 778
static inline float cospi(const float a) 
# 779
{ 
# 780
return cospif(a); 
# 781
} 
# 783
static inline void sincospi(const float a, float *const sptr, float *const cptr) 
# 784
{ 
# 785
sincospif(a, sptr, cptr); 
# 786
} 
# 788
static inline void sincos(const float a, float *const sptr, float *const cptr) 
# 789
{ 
# 790
sincosf(a, sptr, cptr); 
# 791
} 
# 793
static inline float j0(const float a) 
# 794
{ 
# 795
return j0f(a); 
# 796
} 
# 798
static inline float j1(const float a) 
# 799
{ 
# 800
return j1f(a); 
# 801
} 
# 803
static inline float jn(const int n, const float a) 
# 804
{ 
# 805
return jnf(n, a); 
# 806
} 
# 808
static inline float y0(const float a) 
# 809
{ 
# 810
return y0f(a); 
# 811
} 
# 813
static inline float y1(const float a) 
# 814
{ 
# 815
return y1f(a); 
# 816
} 
# 818
static inline float yn(const int n, const float a) 
# 819
{ 
# 820
return ynf(n, a); 
# 821
} 
# 823
__attribute__((unused)) static inline float cyl_bessel_i0(const float a) 
# 824
{int volatile ___ = 1;(void)a;
# 826
::exit(___);}
#if 0
# 824
{ 
# 825
return cyl_bessel_i0f(a); 
# 826
} 
#endif
# 828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
__attribute__((unused)) static inline float cyl_bessel_i1(const float a) 
# 829
{int volatile ___ = 1;(void)a;
# 831
::exit(___);}
#if 0
# 829
{ 
# 830
return cyl_bessel_i1f(a); 
# 831
} 
#endif
# 833 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
static inline float erfinv(const float a) 
# 834
{ 
# 835
return erfinvf(a); 
# 836
} 
# 838
static inline float erfcinv(const float a) 
# 839
{ 
# 840
return erfcinvf(a); 
# 841
} 
# 843
static inline float normcdfinv(const float a) 
# 844
{ 
# 845
return normcdfinvf(a); 
# 846
} 
# 848
static inline float normcdf(const float a) 
# 849
{ 
# 850
return normcdff(a); 
# 851
} 
# 853
static inline float erfcx(const float a) 
# 854
{ 
# 855
return erfcxf(a); 
# 856
} 
# 858
static inline double copysign(const double a, const float b) 
# 859
{ 
# 860
return copysign(a, static_cast< double>(b)); 
# 861
} 
# 863
static inline double copysign(const float a, const double b) 
# 864
{ 
# 865
return copysign(static_cast< double>(a), b); 
# 866
} 
# 868
static inline unsigned min(const unsigned a, const unsigned b) 
# 869
{ 
# 870
return umin(a, b); 
# 871
} 
# 873
static inline unsigned min(const int a, const unsigned b) 
# 874
{ 
# 875
return umin(static_cast< unsigned>(a), b); 
# 876
} 
# 878
static inline unsigned min(const unsigned a, const int b) 
# 879
{ 
# 880
return umin(a, static_cast< unsigned>(b)); 
# 881
} 
# 883
static inline long min(const long a, const long b) 
# 884
{ 
# 885
long retval; 
# 891
if (sizeof(long) == sizeof(int)) { 
# 895
retval = (static_cast< long>(min(static_cast< int>(a), static_cast< int>(b)))); 
# 896
} else { 
# 897
retval = (static_cast< long>(llmin(static_cast< long long>(a), static_cast< long long>(b)))); 
# 898
}  
# 899
return retval; 
# 900
} 
# 902
static inline unsigned long min(const unsigned long a, const unsigned long b) 
# 903
{ 
# 904
unsigned long retval; 
# 908
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 912
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 913
} else { 
# 914
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 915
}  
# 916
return retval; 
# 917
} 
# 919
static inline unsigned long min(const long a, const unsigned long b) 
# 920
{ 
# 921
unsigned long retval; 
# 925
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 929
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 930
} else { 
# 931
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 932
}  
# 933
return retval; 
# 934
} 
# 936
static inline unsigned long min(const unsigned long a, const long b) 
# 937
{ 
# 938
unsigned long retval; 
# 942
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 946
retval = (static_cast< unsigned long>(umin(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 947
} else { 
# 948
retval = (static_cast< unsigned long>(ullmin(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 949
}  
# 950
return retval; 
# 951
} 
# 953
static inline long long min(const long long a, const long long b) 
# 954
{ 
# 955
return llmin(a, b); 
# 956
} 
# 958
static inline unsigned long long min(const unsigned long long a, const unsigned long long b) 
# 959
{ 
# 960
return ullmin(a, b); 
# 961
} 
# 963
static inline unsigned long long min(const long long a, const unsigned long long b) 
# 964
{ 
# 965
return ullmin(static_cast< unsigned long long>(a), b); 
# 966
} 
# 968
static inline unsigned long long min(const unsigned long long a, const long long b) 
# 969
{ 
# 970
return ullmin(a, static_cast< unsigned long long>(b)); 
# 971
} 
# 973
static inline float min(const float a, const float b) 
# 974
{ 
# 975
return fminf(a, b); 
# 976
} 
# 978
static inline double min(const double a, const double b) 
# 979
{ 
# 980
return fmin(a, b); 
# 981
} 
# 983
static inline double min(const float a, const double b) 
# 984
{ 
# 985
return fmin(static_cast< double>(a), b); 
# 986
} 
# 988
static inline double min(const double a, const float b) 
# 989
{ 
# 990
return fmin(a, static_cast< double>(b)); 
# 991
} 
# 993
static inline unsigned max(const unsigned a, const unsigned b) 
# 994
{ 
# 995
return umax(a, b); 
# 996
} 
# 998
static inline unsigned max(const int a, const unsigned b) 
# 999
{ 
# 1000
return umax(static_cast< unsigned>(a), b); 
# 1001
} 
# 1003
static inline unsigned max(const unsigned a, const int b) 
# 1004
{ 
# 1005
return umax(a, static_cast< unsigned>(b)); 
# 1006
} 
# 1008
static inline long max(const long a, const long b) 
# 1009
{ 
# 1010
long retval; 
# 1015
if (sizeof(long) == sizeof(int)) { 
# 1019
retval = (static_cast< long>(max(static_cast< int>(a), static_cast< int>(b)))); 
# 1020
} else { 
# 1021
retval = (static_cast< long>(llmax(static_cast< long long>(a), static_cast< long long>(b)))); 
# 1022
}  
# 1023
return retval; 
# 1024
} 
# 1026
static inline unsigned long max(const unsigned long a, const unsigned long b) 
# 1027
{ 
# 1028
unsigned long retval; 
# 1032
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1036
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1037
} else { 
# 1038
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1039
}  
# 1040
return retval; 
# 1041
} 
# 1043
static inline unsigned long max(const long a, const unsigned long b) 
# 1044
{ 
# 1045
unsigned long retval; 
# 1049
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1053
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1054
} else { 
# 1055
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1056
}  
# 1057
return retval; 
# 1058
} 
# 1060
static inline unsigned long max(const unsigned long a, const long b) 
# 1061
{ 
# 1062
unsigned long retval; 
# 1066
if (sizeof(unsigned long) == sizeof(unsigned)) { 
# 1070
retval = (static_cast< unsigned long>(umax(static_cast< unsigned>(a), static_cast< unsigned>(b)))); 
# 1071
} else { 
# 1072
retval = (static_cast< unsigned long>(ullmax(static_cast< unsigned long long>(a), static_cast< unsigned long long>(b)))); 
# 1073
}  
# 1074
return retval; 
# 1075
} 
# 1077
static inline long long max(const long long a, const long long b) 
# 1078
{ 
# 1079
return llmax(a, b); 
# 1080
} 
# 1082
static inline unsigned long long max(const unsigned long long a, const unsigned long long b) 
# 1083
{ 
# 1084
return ullmax(a, b); 
# 1085
} 
# 1087
static inline unsigned long long max(const long long a, const unsigned long long b) 
# 1088
{ 
# 1089
return ullmax(static_cast< unsigned long long>(a), b); 
# 1090
} 
# 1092
static inline unsigned long long max(const unsigned long long a, const long long b) 
# 1093
{ 
# 1094
return ullmax(a, static_cast< unsigned long long>(b)); 
# 1095
} 
# 1097
static inline float max(const float a, const float b) 
# 1098
{ 
# 1099
return fmaxf(a, b); 
# 1100
} 
# 1102
static inline double max(const double a, const double b) 
# 1103
{ 
# 1104
return fmax(a, b); 
# 1105
} 
# 1107
static inline double max(const float a, const double b) 
# 1108
{ 
# 1109
return fmax(static_cast< double>(a), b); 
# 1110
} 
# 1112
static inline double max(const double a, const float b) 
# 1113
{ 
# 1114
return fmax(a, static_cast< double>(b)); 
# 1115
} 
# 1126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/math_functions.hpp"
inline int min(const int a, const int b) 
# 1127
{ 
# 1128
return (a < b) ? a : b; 
# 1129
} 
# 1131
inline unsigned umin(const unsigned a, const unsigned b) 
# 1132
{ 
# 1133
return (a < b) ? a : b; 
# 1134
} 
# 1136
inline long long llmin(const long long a, const long long b) 
# 1137
{ 
# 1138
return (a < b) ? a : b; 
# 1139
} 
# 1141
inline unsigned long long ullmin(const unsigned long long a, const unsigned long long 
# 1142
b) 
# 1143
{ 
# 1144
return (a < b) ? a : b; 
# 1145
} 
# 1147
inline int max(const int a, const int b) 
# 1148
{ 
# 1149
return (a > b) ? a : b; 
# 1150
} 
# 1152
inline unsigned umax(const unsigned a, const unsigned b) 
# 1153
{ 
# 1154
return (a > b) ? a : b; 
# 1155
} 
# 1157
inline long long llmax(const long long a, const long long b) 
# 1158
{ 
# 1159
return (a > b) ? a : b; 
# 1160
} 
# 1162
inline unsigned long long ullmax(const unsigned long long a, const unsigned long long 
# 1163
b) 
# 1164
{ 
# 1165
return (a > b) ? a : b; 
# 1166
} 
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
extern "C" {
# 3211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimax_s32_relu(const int a, const int b); 
# 3223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b); 
# 3232 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimin_s32_relu(const int a, const int b); 
# 3244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b); 
# 3253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimax3_s32(const int a, const int b, const int c); 
# 3265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimin3_s32(const int a, const int b, const int c); 
# 3307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimax3_s32_relu(const int a, const int b, const int c); 
# 3349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vimin3_s32_relu(const int a, const int b, const int c); 
# 3370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmax_s32(const int a, const int b, const int c); 
# 3391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmin_s32(const int a, const int b, const int c); 
# 3433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c); 
# 3454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c); 
# 3464 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmax_s32_relu(const int a, const int b, const int c); 
# 3476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3486 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __viaddmin_s32_relu(const int a, const int b, const int c); 
# 3498 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c); 
# 3507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vibmax_s32(const int a, const int b, bool *const pred); 
# 3516 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred); 
# 3525 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline int __vibmin_s32(const int a, const int b, bool *const pred); 
# 3534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred); 
# 3548 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3576 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo); 
# 3597
}
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
static inline int __vimax_s32_relu(const int a, const int b) { 
# 109
int ans = max(a, b); 
# 111
return (ans > 0) ? ans : 0; 
# 113
} 
# 115
static inline unsigned __vimax_s16x2_relu(const unsigned a, const unsigned b) { 
# 123
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 124
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 126
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 127
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 130
short aS_lo = *((short *)(&aU_lo)); 
# 131
short aS_hi = *((short *)(&aU_hi)); 
# 133
short bS_lo = *((short *)(&bU_lo)); 
# 134
short bS_hi = *((short *)(&bU_hi)); 
# 137
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 138
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 141
if (ansS_lo < 0) { ansS_lo = (0); }  
# 142
if (ansS_hi < 0) { ansS_hi = (0); }  
# 145
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 146
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 149
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 151
return ans; 
# 153
} 
# 155
static inline int __vimin_s32_relu(const int a, const int b) { 
# 162
int ans = min(a, b); 
# 164
return (ans > 0) ? ans : 0; 
# 166
} 
# 168
static inline unsigned __vimin_s16x2_relu(const unsigned a, const unsigned b) { 
# 176
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 177
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 179
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 180
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 183
short aS_lo = *((short *)(&aU_lo)); 
# 184
short aS_hi = *((short *)(&aU_hi)); 
# 186
short bS_lo = *((short *)(&bU_lo)); 
# 187
short bS_hi = *((short *)(&bU_hi)); 
# 190
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 191
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 194
if (ansS_lo < 0) { ansS_lo = (0); }  
# 195
if (ansS_hi < 0) { ansS_hi = (0); }  
# 198
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 199
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 202
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 204
return ans; 
# 206
} 
# 208
static inline int __vimax3_s32(const int a, const int b, const int c) { 
# 218 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(max(a, b), c); 
# 220
} 
# 222
static inline unsigned __vimax3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 235
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 237
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 238
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 240
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 241
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 244
short aS_lo = *((short *)(&aU_lo)); 
# 245
short aS_hi = *((short *)(&aU_hi)); 
# 247
short bS_lo = *((short *)(&bU_lo)); 
# 248
short bS_hi = *((short *)(&bU_hi)); 
# 250
short cS_lo = *((short *)(&cU_lo)); 
# 251
short cS_hi = *((short *)(&cU_hi)); 
# 254
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 255
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 258
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 259
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 262
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 264
return ans; 
# 266
} 
# 268
static inline unsigned __vimax3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(max(a, b), c); 
# 280
} 
# 282
static inline unsigned __vimax3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 293 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 294
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 296
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 297
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 299
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 300
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 303
unsigned short ansU_lo = (unsigned short)max(max(aU_lo, bU_lo), cU_lo); 
# 304
unsigned short ansU_hi = (unsigned short)max(max(aU_hi, bU_hi), cU_hi); 
# 307
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 309
return ans; 
# 311
} 
# 313
static inline int __vimin3_s32(const int a, const int b, const int c) { 
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(min(a, b), c); 
# 325
} 
# 327
static inline unsigned __vimin3_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 339
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 341
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 342
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 344
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 345
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 348
short aS_lo = *((short *)(&aU_lo)); 
# 349
short aS_hi = *((short *)(&aU_hi)); 
# 351
short bS_lo = *((short *)(&bU_lo)); 
# 352
short bS_hi = *((short *)(&bU_hi)); 
# 354
short cS_lo = *((short *)(&cU_lo)); 
# 355
short cS_hi = *((short *)(&cU_hi)); 
# 358
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 359
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 362
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 363
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 366
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 368
return ans; 
# 370
} 
# 372
static inline unsigned __vimin3_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(min(a, b), c); 
# 384
} 
# 386
static inline unsigned __vimin3_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 398
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 400
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 401
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 403
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 404
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 407
unsigned short ansU_lo = (unsigned short)min(min(aU_lo, bU_lo), cU_lo); 
# 408
unsigned short ansU_hi = (unsigned short)min(min(aU_hi, bU_hi), cU_hi); 
# 411
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 413
return ans; 
# 415
} 
# 417
static inline int __vimax3_s32_relu(const int a, const int b, const int c) { 
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = max(max(a, b), c); 
# 429
return (ans > 0) ? ans : 0; 
# 431
} 
# 433
static inline unsigned __vimax3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 445
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 447
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 448
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 450
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 451
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 454
short aS_lo = *((short *)(&aU_lo)); 
# 455
short aS_hi = *((short *)(&aU_hi)); 
# 457
short bS_lo = *((short *)(&bU_lo)); 
# 458
short bS_hi = *((short *)(&bU_hi)); 
# 460
short cS_lo = *((short *)(&cU_lo)); 
# 461
short cS_hi = *((short *)(&cU_hi)); 
# 464
short ansS_lo = (short)max(max(aS_lo, bS_lo), cS_lo); 
# 465
short ansS_hi = (short)max(max(aS_hi, bS_hi), cS_hi); 
# 468
if (ansS_lo < 0) { ansS_lo = (0); }  
# 469
if (ansS_hi < 0) { ansS_hi = (0); }  
# 472
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 473
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 476
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 478
return ans; 
# 480
} 
# 482
static inline int __vimin3_s32_relu(const int a, const int b, const int c) { 
# 492 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = min(min(a, b), c); 
# 494
return (ans > 0) ? ans : 0; 
# 496
} 
# 498
static inline unsigned __vimin3_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 510
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 512
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 513
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 515
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 516
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 519
short aS_lo = *((short *)(&aU_lo)); 
# 520
short aS_hi = *((short *)(&aU_hi)); 
# 522
short bS_lo = *((short *)(&bU_lo)); 
# 523
short bS_hi = *((short *)(&bU_hi)); 
# 525
short cS_lo = *((short *)(&cU_lo)); 
# 526
short cS_hi = *((short *)(&cU_hi)); 
# 529
short ansS_lo = (short)min(min(aS_lo, bS_lo), cS_lo); 
# 530
short ansS_hi = (short)min(min(aS_hi, bS_hi), cS_hi); 
# 533
if (ansS_lo < 0) { ansS_lo = (0); }  
# 534
if (ansS_hi < 0) { ansS_hi = (0); }  
# 537
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 538
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 541
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 543
return ans; 
# 545
} 
# 547
static inline int __viaddmax_s32(const int a, const int b, const int c) { 
# 557 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(a + b, c); 
# 559
} 
# 561
static inline unsigned __viaddmax_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 573
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 575
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 576
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 578
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 579
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 582
short aS_lo = *((short *)(&aU_lo)); 
# 583
short aS_hi = *((short *)(&aU_hi)); 
# 585
short bS_lo = *((short *)(&bU_lo)); 
# 586
short bS_hi = *((short *)(&bU_hi)); 
# 588
short cS_lo = *((short *)(&cU_lo)); 
# 589
short cS_hi = *((short *)(&cU_hi)); 
# 592
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 593
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 596
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 597
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 600
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 602
return ans; 
# 604
} 
# 606
static inline unsigned __viaddmax_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 616 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return max(a + b, c); 
# 618
} 
# 620
static inline unsigned __viaddmax_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 631 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 632
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 634
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 635
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 637
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 638
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 641
unsigned short ansU_lo = (unsigned short)max((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 642
unsigned short ansU_hi = (unsigned short)max((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 645
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 647
return ans; 
# 649
} 
# 651
static inline int __viaddmin_s32(const int a, const int b, const int c) { 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(a + b, c); 
# 663
} 
# 665
static inline unsigned __viaddmin_s16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 677
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 679
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 680
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 682
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 683
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 686
short aS_lo = *((short *)(&aU_lo)); 
# 687
short aS_hi = *((short *)(&aU_hi)); 
# 689
short bS_lo = *((short *)(&bU_lo)); 
# 690
short bS_hi = *((short *)(&bU_hi)); 
# 692
short cS_lo = *((short *)(&cU_lo)); 
# 693
short cS_hi = *((short *)(&cU_hi)); 
# 696
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 697
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 700
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 701
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 704
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 706
return ans; 
# 708
} 
# 710
static inline unsigned __viaddmin_u32(const unsigned a, const unsigned b, const unsigned c) { 
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
return min(a + b, c); 
# 722
} 
# 724
static inline unsigned __viaddmin_u16x2(const unsigned a, const unsigned b, const unsigned c) { 
# 735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 736
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 738
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 739
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 741
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 742
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 745
unsigned short ansU_lo = (unsigned short)min((unsigned short)(aU_lo + bU_lo), cU_lo); 
# 746
unsigned short ansU_hi = (unsigned short)min((unsigned short)(aU_hi + bU_hi), cU_hi); 
# 749
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 751
return ans; 
# 753
} 
# 755
static inline int __viaddmax_s32_relu(const int a, const int b, const int c) { 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = max(a + b, c); 
# 767
return (ans > 0) ? ans : 0; 
# 769
} 
# 771
static inline unsigned __viaddmax_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 783
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 785
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 786
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 788
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 789
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 792
short aS_lo = *((short *)(&aU_lo)); 
# 793
short aS_hi = *((short *)(&aU_hi)); 
# 795
short bS_lo = *((short *)(&bU_lo)); 
# 796
short bS_hi = *((short *)(&bU_hi)); 
# 798
short cS_lo = *((short *)(&cU_lo)); 
# 799
short cS_hi = *((short *)(&cU_hi)); 
# 802
short ansS_lo = (short)max((short)(aS_lo + bS_lo), cS_lo); 
# 803
short ansS_hi = (short)max((short)(aS_hi + bS_hi), cS_hi); 
# 805
if (ansS_lo < 0) { ansS_lo = (0); }  
# 806
if (ansS_hi < 0) { ansS_hi = (0); }  
# 809
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 810
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 813
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 815
return ans; 
# 817
} 
# 819
static inline int __viaddmin_s32_relu(const int a, const int b, const int c) { 
# 829 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = min(a + b, c); 
# 831
return (ans > 0) ? ans : 0; 
# 833
} 
# 835
static inline unsigned __viaddmin_s16x2_relu(const unsigned a, const unsigned b, const unsigned c) { 
# 846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 847
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 849
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 850
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 852
unsigned short cU_lo = (unsigned short)(c & 65535U); 
# 853
unsigned short cU_hi = (unsigned short)(c >> 16); 
# 856
short aS_lo = *((short *)(&aU_lo)); 
# 857
short aS_hi = *((short *)(&aU_hi)); 
# 859
short bS_lo = *((short *)(&bU_lo)); 
# 860
short bS_hi = *((short *)(&bU_hi)); 
# 862
short cS_lo = *((short *)(&cU_lo)); 
# 863
short cS_hi = *((short *)(&cU_hi)); 
# 866
short ansS_lo = (short)min((short)(aS_lo + bS_lo), cS_lo); 
# 867
short ansS_hi = (short)min((short)(aS_hi + bS_hi), cS_hi); 
# 869
if (ansS_lo < 0) { ansS_lo = (0); }  
# 870
if (ansS_hi < 0) { ansS_hi = (0); }  
# 873
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 874
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 877
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 879
return ans; 
# 881
} 
# 885
static inline int __vibmax_s32(const int a, const int b, bool *const pred) { 
# 899 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = max(a, b); 
# 901
(*pred) = (a >= b); 
# 902
return ans; 
# 904
} 
# 906
static inline unsigned __vibmax_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned ans = max(a, b); 
# 922
(*pred) = (a >= b); 
# 923
return ans; 
# 925
} 
# 928
static inline int __vibmin_s32(const int a, const int b, bool *const pred) { 
# 942 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
int ans = min(a, b); 
# 944
(*pred) = (a <= b); 
# 945
return ans; 
# 947
} 
# 950
static inline unsigned __vibmin_u32(const unsigned a, const unsigned b, bool *const pred) { 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned ans = min(a, b); 
# 966
(*pred) = (a <= b); 
# 967
return ans; 
# 969
} 
# 971
static inline unsigned __vibmax_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 993 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 994
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 996
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 997
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1000
short aS_lo = *((short *)(&aU_lo)); 
# 1001
short aS_hi = *((short *)(&aU_hi)); 
# 1003
short bS_lo = *((short *)(&bU_lo)); 
# 1004
short bS_hi = *((short *)(&bU_hi)); 
# 1007
short ansS_lo = (short)max(aS_lo, bS_lo); 
# 1008
short ansS_hi = (short)max(aS_hi, bS_hi); 
# 1010
(*pred_hi) = (aS_hi >= bS_hi); 
# 1011
(*pred_lo) = (aS_lo >= bS_lo); 
# 1014
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1015
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1018
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1020
return ans; 
# 1022
} 
# 1024
static inline unsigned __vibmax_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1046 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1047
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1049
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1050
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1053
unsigned short ansU_lo = (unsigned short)max(aU_lo, bU_lo); 
# 1054
unsigned short ansU_hi = (unsigned short)max(aU_hi, bU_hi); 
# 1056
(*pred_hi) = (aU_hi >= bU_hi); 
# 1057
(*pred_lo) = (aU_lo >= bU_lo); 
# 1060
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1062
return ans; 
# 1064
} 
# 1066
static inline unsigned __vibmin_s16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1088 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1089
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1091
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1092
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1095
short aS_lo = *((short *)(&aU_lo)); 
# 1096
short aS_hi = *((short *)(&aU_hi)); 
# 1098
short bS_lo = *((short *)(&bU_lo)); 
# 1099
short bS_hi = *((short *)(&bU_hi)); 
# 1102
short ansS_lo = (short)min(aS_lo, bS_lo); 
# 1103
short ansS_hi = (short)min(aS_hi, bS_hi); 
# 1105
(*pred_hi) = (aS_hi <= bS_hi); 
# 1106
(*pred_lo) = (aS_lo <= bS_lo); 
# 1109
unsigned short ansU_lo = *((unsigned short *)(&ansS_lo)); 
# 1110
unsigned short ansU_hi = *((unsigned short *)(&ansS_hi)); 
# 1113
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1115
return ans; 
# 1117
} 
# 1119
static inline unsigned __vibmin_u16x2(const unsigned a, const unsigned b, bool *const pred_hi, bool *const pred_lo) { 
# 1141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.hpp"
unsigned short aU_lo = (unsigned short)(a & 65535U); 
# 1142
unsigned short aU_hi = (unsigned short)(a >> 16); 
# 1144
unsigned short bU_lo = (unsigned short)(b & 65535U); 
# 1145
unsigned short bU_hi = (unsigned short)(b >> 16); 
# 1148
unsigned short ansU_lo = (unsigned short)min(aU_lo, bU_lo); 
# 1149
unsigned short ansU_hi = (unsigned short)min(aU_hi, bU_hi); 
# 1151
(*pred_hi) = (aU_hi <= bU_hi); 
# 1152
(*pred_lo) = (aU_lo <= bU_lo); 
# 1155
unsigned ans = ((unsigned)ansU_lo) | (((unsigned)ansU_hi) << 16); 
# 1157
return ans; 
# 1159
} 
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 130
{ } 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 132
{ } 
#endif
# 134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 134
{ } 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 136
{ } 
#endif
# 138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 138
{ } 
#endif
# 140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 140
{ } 
#endif
# 142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 142
{ } 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 144
{ } 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 146
{ } 
#endif
# 148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 148
{ } 
#endif
# 150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 150
{ } 
#endif
# 177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
extern "C" {
# 186
}
# 195 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 195
{ } 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 197
{ } 
#endif
# 199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS(unsigned long long *address, unsigned long long compare, unsigned long long val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 199
{ } 
#endif
# 201 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute((deprecated("__any() is deprecated in favor of __any_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool any(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 201
{ } 
#endif
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_atomic_functions.h"
__attribute((deprecated("__all() is deprecated in favor of __all_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to suppr" "ess this warning)."))) __attribute__((unused)) static inline bool all(bool cond) {int volatile ___ = 1;(void)cond;::exit(___);}
#if 0
# 203
{ } 
#endif
# 87 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.h"
extern "C" {
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.h"
}
# 1147
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode); 
# 1149
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1151
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1153
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
# 1155
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
# 1157
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
# 1159
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
# 1161
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
# 1163
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1165
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode = cudaRoundNearest); 
# 1167
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
# 1169
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
# 1171
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double fma(double a, double b, double c, cudaRoundMode mode) 
# 94
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
# 99
::exit(___);}
#if 0
# 94
{ 
# 95
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
# 99
} 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dmul(double a, double b, cudaRoundMode mode) 
# 102
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 107
::exit(___);}
#if 0
# 102
{ 
# 103
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
# 107
} 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dadd(double a, double b, cudaRoundMode mode) 
# 110
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 115
::exit(___);}
#if 0
# 110
{ 
# 111
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
# 115
} 
#endif
# 117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double dsub(double a, double b, cudaRoundMode mode) 
# 118
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
# 123
::exit(___);}
#if 0
# 118
{ 
# 119
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
# 123
} 
#endif
# 125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline int double2int(double a, cudaRoundMode mode) 
# 126
{int volatile ___ = 1;(void)a;(void)mode;
# 131
::exit(___);}
#if 0
# 126
{ 
# 127
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
# 131
} 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned double2uint(double a, cudaRoundMode mode) 
# 134
{int volatile ___ = 1;(void)a;(void)mode;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
# 139
} 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline long long double2ll(double a, cudaRoundMode mode) 
# 142
{int volatile ___ = 1;(void)a;(void)mode;
# 147
::exit(___);}
#if 0
# 142
{ 
# 143
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
# 147
} 
#endif
# 149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline unsigned long long double2ull(double a, cudaRoundMode mode) 
# 150
{int volatile ___ = 1;(void)a;(void)mode;
# 155
::exit(___);}
#if 0
# 150
{ 
# 151
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
# 155
} 
#endif
# 157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ll2double(long long a, cudaRoundMode mode) 
# 158
{int volatile ___ = 1;(void)a;(void)mode;
# 163
::exit(___);}
#if 0
# 158
{ 
# 159
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
# 163
} 
#endif
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double ull2double(unsigned long long a, cudaRoundMode mode) 
# 166
{int volatile ___ = 1;(void)a;(void)mode;
# 171
::exit(___);}
#if 0
# 166
{ 
# 167
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
# 171
} 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double int2double(int a, cudaRoundMode mode) 
# 174
{int volatile ___ = 1;(void)a;(void)mode;
# 176
::exit(___);}
#if 0
# 174
{ 
# 175
return (double)a; 
# 176
} 
#endif
# 178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double uint2double(unsigned a, cudaRoundMode mode) 
# 179
{int volatile ___ = 1;(void)a;(void)mode;
# 181
::exit(___);}
#if 0
# 179
{ 
# 180
return (double)a; 
# 181
} 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_double_functions.hpp"
__attribute__((unused)) static inline double float2double(float a, cudaRoundMode mode) 
# 184
{int volatile ___ = 1;(void)a;(void)mode;
# 186
::exit(___);}
#if 0
# 184
{ 
# 185
return (double)a; 
# 186
} 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 103
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 112
{ } 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 114
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 116
{ } 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 118
{ } 
#endif
# 120 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 120
{ } 
#endif
# 122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 122
{ } 
#endif
# 124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 126
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 128
{ } 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 307
{ } 
#endif
# 310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 310
{ } 
#endif
# 313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAdd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 313
{ } 
#endif
# 316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 316
{ } 
#endif
# 319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAdd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 319
{ } 
#endif
# 322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 322
{ } 
#endif
# 325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAdd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 325
{ } 
#endif
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 328
{ } 
#endif
# 331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicAdd_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 331
{ } 
#endif
# 334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_block(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 334
{ } 
#endif
# 337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline double atomicAdd_system(double *address, double val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 337
{ } 
#endif
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 340
{ } 
#endif
# 343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicSub_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 343
{ } 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 346
{ } 
#endif
# 349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicSub_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 349
{ } 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 352
{ } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicExch_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 355
{ } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 358
{ } 
#endif
# 361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicExch_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 361
{ } 
#endif
# 364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 364
{ } 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicExch_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 367
{ } 
#endif
# 370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_block(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 370
{ } 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline float atomicExch_system(float *address, float val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 373
{ } 
#endif
# 376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 376
{ } 
#endif
# 379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMin_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 379
{ } 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 382
{ } 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMin_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 385
{ } 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 388
{ } 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMin_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 391
{ } 
#endif
# 394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 394
{ } 
#endif
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMin_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 397
{ } 
#endif
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 400
{ } 
#endif
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicMax_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 403
{ } 
#endif
# 406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 406
{ } 
#endif
# 409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicMax_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 409
{ } 
#endif
# 412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 412
{ } 
#endif
# 415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicMax_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 415
{ } 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 418
{ } 
#endif
# 421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicMax_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 421
{ } 
#endif
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 424
{ } 
#endif
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicInc_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 427
{ } 
#endif
# 430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 430
{ } 
#endif
# 433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicDec_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 433
{ } 
#endif
# 436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_block(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 436
{ } 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicCAS_system(int *address, int compare, int val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 439
{ } 
#endif
# 442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_block(unsigned *address, unsigned compare, unsigned 
# 443
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 443
{ } 
#endif
# 446 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicCAS_system(unsigned *address, unsigned compare, unsigned 
# 447
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 447
{ } 
#endif
# 450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_block(unsigned long long *address, unsigned long long 
# 451
compare, unsigned long long 
# 452
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 452
{ } 
#endif
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicCAS_system(unsigned long long *address, unsigned long long 
# 456
compare, unsigned long long 
# 457
val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 457
{ } 
#endif
# 460 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 460
{ } 
#endif
# 463 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicAnd_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 463
{ } 
#endif
# 466 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 466
{ } 
#endif
# 469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicAnd_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 469
{ } 
#endif
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 472
{ } 
#endif
# 475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicAnd_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 475
{ } 
#endif
# 478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 478
{ } 
#endif
# 481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicAnd_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 481
{ } 
#endif
# 484 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 484
{ } 
#endif
# 487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicOr_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 487
{ } 
#endif
# 490 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 490
{ } 
#endif
# 493 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicOr_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 493
{ } 
#endif
# 496 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 496
{ } 
#endif
# 499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicOr_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 499
{ } 
#endif
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 502
{ } 
#endif
# 505 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicOr_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 505
{ } 
#endif
# 508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_block(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 508
{ } 
#endif
# 511 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline int atomicXor_system(int *address, int val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 511
{ } 
#endif
# 514 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_block(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 514
{ } 
#endif
# 517 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline long long atomicXor_system(long long *address, long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 517
{ } 
#endif
# 520 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_block(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 520
{ } 
#endif
# 523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned atomicXor_system(unsigned *address, unsigned val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 523
{ } 
#endif
# 526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_block(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 526
{ } 
#endif
# 529 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_60_atomic_functions.h"
__attribute__((unused)) static inline unsigned long long atomicXor_system(unsigned long long *address, unsigned long long val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 529
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
extern "C" {
# 1510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
}
# 1522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute((deprecated("__ballot() is deprecated in favor of __ballot_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to" " suppress this warning)."))) __attribute__((unused)) static inline unsigned ballot(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1522
{ } 
#endif
# 1524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline int syncthreads_count(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1524
{ } 
#endif
# 1526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_and(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1526
{ } 
#endif
# 1528 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline bool syncthreads_or(bool pred) {int volatile ___ = 1;(void)pred;::exit(___);}
#if 0
# 1528
{ } 
#endif
# 1533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGlobal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1533
{ } 
#endif
# 1534 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1534
{ } 
#endif
# 1535 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1535
{ } 
#endif
# 1536 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isLocal(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1536
{ } 
#endif
# 1538 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline unsigned __isGridConstant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1538
{ } 
#endif
# 1540 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_global(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1540
{ } 
#endif
# 1541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_shared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1541
{ } 
#endif
# 1542 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1542
{ } 
#endif
# 1543 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_local(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1543
{ } 
#endif
# 1545 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline size_t __cvta_generic_to_grid_constant(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 1545
{ } 
#endif
# 1548 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_global_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1548
{ } 
#endif
# 1549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_shared_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1549
{ } 
#endif
# 1550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1550
{ } 
#endif
# 1551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_local_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1551
{ } 
#endif
# 1553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_20_intrinsics.h"
__attribute__((unused)) static inline void *__cvta_grid_constant_to_generic(size_t rawbits) {int volatile ___ = 1;(void)rawbits;::exit(___);}
#if 0
# 1553
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __fns(unsigned mask, unsigned base, int offset) {int volatile ___ = 1;(void)mask;(void)base;(void)offset;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync(unsigned id) {int volatile ___ = 1;(void)id;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __barrier_sync_count(unsigned id, unsigned cnt) {int volatile ___ = 1;(void)id;(void)cnt;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline void __syncwarp(unsigned mask = 4294967295U) {int volatile ___ = 1;(void)mask;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __all_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __any_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 113
{ } 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __uni_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 114
{ } 
#endif
# 115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __ballot_sync(unsigned mask, int pred) {int volatile ___ = 1;(void)mask;(void)pred;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __activemask() {int volatile ___ = 1;::exit(___);}
#if 0
# 116
{ } 
#endif
# 125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline int __shfl(int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 125
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned __shfl(unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_up(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_down(int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline int __shfl_xor(int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline float __shfl(float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_up(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_down(float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline float __shfl_xor(float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 136
{ } 
#endif
# 139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_sync(unsigned mask, int var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_sync(unsigned mask, unsigned var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_up_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_up_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_down_sync(unsigned mask, int var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_down_sync(unsigned mask, unsigned var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline int __shfl_xor_sync(unsigned mask, int var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned __shfl_xor_sync(unsigned mask, unsigned var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_sync(unsigned mask, float var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_up_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_down_sync(unsigned mask, float var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 149
{ } 
#endif
# 150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline float __shfl_xor_sync(unsigned mask, float var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 150
{ } 
#endif
# 154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl(unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long long __shfl(long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 155
{ } 
#endif
# 156 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_up(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 156
{ } 
#endif
# 157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_up(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 157
{ } 
#endif
# 158 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_down(long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 158
{ } 
#endif
# 159 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_down(unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long long __shfl_xor(long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 160
{ } 
#endif
# 161 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long long __shfl_xor(unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 161
{ } 
#endif
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline double __shfl(double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_up(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_down(double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline double __shfl_xor(double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 165
{ } 
#endif
# 168 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_sync(unsigned mask, long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_sync(unsigned mask, unsigned long long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_up_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_up_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_down_sync(unsigned mask, long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_down_sync(unsigned mask, unsigned long long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 173
{ } 
#endif
# 174 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long long __shfl_xor_sync(unsigned mask, long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 174
{ } 
#endif
# 175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __shfl_xor_sync(unsigned mask, unsigned long long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_sync(unsigned mask, double var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_up_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_down_sync(unsigned mask, double var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline double __shfl_xor_sync(unsigned mask, double var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 179
{ } 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline long __shfl(long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_up(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 185
{ } 
#endif
# 186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 186
{ } 
#endif
# 187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_down(long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline long __shfl_xor(long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 190
{ } 
#endif
# 193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_sync(unsigned mask, long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 193
{ } 
#endif
# 194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_sync(unsigned mask, unsigned long var, int srcLane, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)srcLane;(void)width;::exit(___);}
#if 0
# 194
{ } 
#endif
# 195 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_up_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_up_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 196
{ } 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_down_sync(unsigned mask, long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 197
{ } 
#endif
# 198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_down_sync(unsigned mask, unsigned long var, unsigned delta, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline long __shfl_xor_sync(unsigned mask, long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_30_intrinsics.h"
__attribute__((unused)) static inline unsigned long __shfl_xor_sync(unsigned mask, unsigned long var, int laneMask, int width = 32) {int volatile ___ = 1;(void)mask;(void)var;(void)laneMask;(void)width;::exit(___);}
#if 0
# 200
{ } 
#endif
# 87 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 87
{ } 
#endif
# 88 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 88
{ } 
#endif
# 90 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 101
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 111
{ } 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 112
{ } 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 113
{ } 
#endif
# 115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 115
{ } 
#endif
# 116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 116
{ } 
#endif
# 117 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 117
{ } 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 118
{ } 
#endif
# 119 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 119
{ } 
#endif
# 123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 123
{ } 
#endif
# 124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 124
{ } 
#endif
# 126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 126
{ } 
#endif
# 127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcg(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 127
{ } 
#endif
# 128 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 128
{ } 
#endif
# 129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 129
{ } 
#endif
# 130 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcg(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 130
{ } 
#endif
# 131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 131
{ } 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 132
{ } 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 133
{ } 
#endif
# 134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 134
{ } 
#endif
# 135 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 135
{ } 
#endif
# 136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 136
{ } 
#endif
# 137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 137
{ } 
#endif
# 139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 139
{ } 
#endif
# 140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 140
{ } 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 141
{ } 
#endif
# 142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcg(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 142
{ } 
#endif
# 143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 143
{ } 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 144
{ } 
#endif
# 145 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 145
{ } 
#endif
# 146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 146
{ } 
#endif
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 147
{ } 
#endif
# 148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 148
{ } 
#endif
# 149 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 149
{ } 
#endif
# 151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 151
{ } 
#endif
# 152 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 152
{ } 
#endif
# 153 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 153
{ } 
#endif
# 154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 154
{ } 
#endif
# 155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 155
{ } 
#endif
# 159 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldca(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 159
{ } 
#endif
# 160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldca(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 160
{ } 
#endif
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldca(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 162
{ } 
#endif
# 163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldca(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 163
{ } 
#endif
# 164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldca(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 164
{ } 
#endif
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldca(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 165
{ } 
#endif
# 166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldca(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 166
{ } 
#endif
# 167 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldca(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 167
{ } 
#endif
# 168 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldca(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 168
{ } 
#endif
# 169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldca(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 169
{ } 
#endif
# 170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldca(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 170
{ } 
#endif
# 171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldca(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 171
{ } 
#endif
# 172 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldca(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 172
{ } 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldca(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 173
{ } 
#endif
# 175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldca(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 175
{ } 
#endif
# 176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldca(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 176
{ } 
#endif
# 177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldca(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 177
{ } 
#endif
# 178 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldca(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 178
{ } 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldca(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 179
{ } 
#endif
# 180 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldca(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 180
{ } 
#endif
# 181 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldca(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 181
{ } 
#endif
# 182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldca(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 182
{ } 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldca(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 183
{ } 
#endif
# 184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldca(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 184
{ } 
#endif
# 185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldca(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 185
{ } 
#endif
# 187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldca(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 187
{ } 
#endif
# 188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldca(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 188
{ } 
#endif
# 189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldca(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 189
{ } 
#endif
# 190 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldca(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 190
{ } 
#endif
# 191 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldca(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 191
{ } 
#endif
# 195 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcs(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 195
{ } 
#endif
# 196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcs(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 196
{ } 
#endif
# 198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcs(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 198
{ } 
#endif
# 199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcs(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 199
{ } 
#endif
# 200 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcs(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 200
{ } 
#endif
# 201 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcs(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 201
{ } 
#endif
# 202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcs(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 202
{ } 
#endif
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcs(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 203
{ } 
#endif
# 204 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcs(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 204
{ } 
#endif
# 205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcs(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 205
{ } 
#endif
# 206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcs(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 206
{ } 
#endif
# 207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcs(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 207
{ } 
#endif
# 208 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcs(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 208
{ } 
#endif
# 209 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcs(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 209
{ } 
#endif
# 211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcs(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 211
{ } 
#endif
# 212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcs(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 212
{ } 
#endif
# 213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcs(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 213
{ } 
#endif
# 214 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcs(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 214
{ } 
#endif
# 215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcs(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 215
{ } 
#endif
# 216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcs(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 216
{ } 
#endif
# 217 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcs(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 217
{ } 
#endif
# 218 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcs(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 218
{ } 
#endif
# 219 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcs(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 219
{ } 
#endif
# 220 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcs(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 220
{ } 
#endif
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcs(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 221
{ } 
#endif
# 223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcs(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 223
{ } 
#endif
# 224 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcs(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 224
{ } 
#endif
# 225 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcs(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 225
{ } 
#endif
# 226 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcs(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 226
{ } 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcs(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 227
{ } 
#endif
# 231 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldlu(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 231
{ } 
#endif
# 232 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldlu(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 232
{ } 
#endif
# 234 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldlu(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 234
{ } 
#endif
# 235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldlu(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 235
{ } 
#endif
# 236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldlu(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 236
{ } 
#endif
# 237 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldlu(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 237
{ } 
#endif
# 238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldlu(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 238
{ } 
#endif
# 239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldlu(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 239
{ } 
#endif
# 240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldlu(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 240
{ } 
#endif
# 241 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldlu(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 241
{ } 
#endif
# 242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldlu(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 242
{ } 
#endif
# 243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldlu(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 243
{ } 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldlu(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 244
{ } 
#endif
# 245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldlu(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 245
{ } 
#endif
# 247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldlu(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 247
{ } 
#endif
# 248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldlu(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 248
{ } 
#endif
# 249 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldlu(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 249
{ } 
#endif
# 250 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldlu(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 250
{ } 
#endif
# 251 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldlu(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 251
{ } 
#endif
# 252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldlu(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 252
{ } 
#endif
# 253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldlu(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 253
{ } 
#endif
# 254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldlu(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 254
{ } 
#endif
# 255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldlu(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 255
{ } 
#endif
# 256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldlu(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 256
{ } 
#endif
# 257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldlu(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 257
{ } 
#endif
# 259 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldlu(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 259
{ } 
#endif
# 260 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldlu(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 260
{ } 
#endif
# 261 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldlu(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 261
{ } 
#endif
# 262 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldlu(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 262
{ } 
#endif
# 263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldlu(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 263
{ } 
#endif
# 267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long __ldcv(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 267
{ } 
#endif
# 268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long __ldcv(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 268
{ } 
#endif
# 270 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char __ldcv(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 270
{ } 
#endif
# 271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline signed char __ldcv(const signed char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 271
{ } 
#endif
# 272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short __ldcv(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 272
{ } 
#endif
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int __ldcv(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 273
{ } 
#endif
# 274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline long long __ldcv(const long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 274
{ } 
#endif
# 275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char2 __ldcv(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 275
{ } 
#endif
# 276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline char4 __ldcv(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 276
{ } 
#endif
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short2 __ldcv(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 277
{ } 
#endif
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline short4 __ldcv(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 278
{ } 
#endif
# 279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int2 __ldcv(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 279
{ } 
#endif
# 280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline int4 __ldcv(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 280
{ } 
#endif
# 281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline longlong2 __ldcv(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 281
{ } 
#endif
# 283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned char __ldcv(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 283
{ } 
#endif
# 284 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned short __ldcv(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 284
{ } 
#endif
# 285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __ldcv(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 285
{ } 
#endif
# 286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned long long __ldcv(const unsigned long long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 286
{ } 
#endif
# 287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar2 __ldcv(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 287
{ } 
#endif
# 288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uchar4 __ldcv(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 288
{ } 
#endif
# 289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort2 __ldcv(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 289
{ } 
#endif
# 290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ushort4 __ldcv(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 290
{ } 
#endif
# 291 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint2 __ldcv(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 291
{ } 
#endif
# 292 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline uint4 __ldcv(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 292
{ } 
#endif
# 293 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline ulonglong2 __ldcv(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 293
{ } 
#endif
# 295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float __ldcv(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 295
{ } 
#endif
# 296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double __ldcv(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 296
{ } 
#endif
# 297 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float2 __ldcv(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 297
{ } 
#endif
# 298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline float4 __ldcv(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 298
{ } 
#endif
# 299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline double2 __ldcv(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 299
{ } 
#endif
# 303 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 303
{ } 
#endif
# 304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 304
{ } 
#endif
# 306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 306
{ } 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 307
{ } 
#endif
# 308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 308
{ } 
#endif
# 309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 309
{ } 
#endif
# 310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 310
{ } 
#endif
# 311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 311
{ } 
#endif
# 312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 312
{ } 
#endif
# 313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 313
{ } 
#endif
# 314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 314
{ } 
#endif
# 315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 315
{ } 
#endif
# 316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 316
{ } 
#endif
# 317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 317
{ } 
#endif
# 319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 319
{ } 
#endif
# 320 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 320
{ } 
#endif
# 321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 321
{ } 
#endif
# 322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 322
{ } 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 323
{ } 
#endif
# 324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 324
{ } 
#endif
# 325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 325
{ } 
#endif
# 326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 326
{ } 
#endif
# 327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 327
{ } 
#endif
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 328
{ } 
#endif
# 329 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 329
{ } 
#endif
# 331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 331
{ } 
#endif
# 332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 332
{ } 
#endif
# 333 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 333
{ } 
#endif
# 334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 334
{ } 
#endif
# 335 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwb(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 335
{ } 
#endif
# 339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 339
{ } 
#endif
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 340
{ } 
#endif
# 342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 342
{ } 
#endif
# 343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 343
{ } 
#endif
# 344 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 344
{ } 
#endif
# 345 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 345
{ } 
#endif
# 346 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 346
{ } 
#endif
# 347 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 347
{ } 
#endif
# 348 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 348
{ } 
#endif
# 349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 349
{ } 
#endif
# 350 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 350
{ } 
#endif
# 351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 351
{ } 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 352
{ } 
#endif
# 353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 353
{ } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 355
{ } 
#endif
# 356 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 356
{ } 
#endif
# 357 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 357
{ } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 358
{ } 
#endif
# 359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 359
{ } 
#endif
# 360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 360
{ } 
#endif
# 361 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 361
{ } 
#endif
# 362 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 362
{ } 
#endif
# 363 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 363
{ } 
#endif
# 364 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 364
{ } 
#endif
# 365 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 365
{ } 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 367
{ } 
#endif
# 368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 368
{ } 
#endif
# 369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 369
{ } 
#endif
# 370 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 370
{ } 
#endif
# 371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcg(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 371
{ } 
#endif
# 375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 375
{ } 
#endif
# 376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 376
{ } 
#endif
# 378 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 378
{ } 
#endif
# 379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 379
{ } 
#endif
# 380 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 380
{ } 
#endif
# 381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 381
{ } 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 382
{ } 
#endif
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 383
{ } 
#endif
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 384
{ } 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 385
{ } 
#endif
# 386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 386
{ } 
#endif
# 387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 387
{ } 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 388
{ } 
#endif
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 389
{ } 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 391
{ } 
#endif
# 392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 392
{ } 
#endif
# 393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 393
{ } 
#endif
# 394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 394
{ } 
#endif
# 395 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 395
{ } 
#endif
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 396
{ } 
#endif
# 397 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 397
{ } 
#endif
# 398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 398
{ } 
#endif
# 399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 399
{ } 
#endif
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 400
{ } 
#endif
# 401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 401
{ } 
#endif
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 403
{ } 
#endif
# 404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 404
{ } 
#endif
# 405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 405
{ } 
#endif
# 406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 406
{ } 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stcs(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 407
{ } 
#endif
# 411 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long *ptr, long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 411
{ } 
#endif
# 412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long *ptr, unsigned long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 412
{ } 
#endif
# 414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char *ptr, char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 414
{ } 
#endif
# 415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(signed char *ptr, signed char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 415
{ } 
#endif
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short *ptr, short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 416
{ } 
#endif
# 417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int *ptr, int value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 417
{ } 
#endif
# 418 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(long long *ptr, long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 418
{ } 
#endif
# 419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char2 *ptr, char2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 419
{ } 
#endif
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(char4 *ptr, char4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 420
{ } 
#endif
# 421 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short2 *ptr, short2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 421
{ } 
#endif
# 422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(short4 *ptr, short4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 422
{ } 
#endif
# 423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int2 *ptr, int2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 423
{ } 
#endif
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(int4 *ptr, int4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 424
{ } 
#endif
# 425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(longlong2 *ptr, longlong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 425
{ } 
#endif
# 427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned char *ptr, unsigned char value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 427
{ } 
#endif
# 428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned short *ptr, unsigned short value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 428
{ } 
#endif
# 429 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned *ptr, unsigned value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 429
{ } 
#endif
# 430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(unsigned long long *ptr, unsigned long long value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 430
{ } 
#endif
# 431 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar2 *ptr, uchar2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 431
{ } 
#endif
# 432 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uchar4 *ptr, uchar4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 432
{ } 
#endif
# 433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort2 *ptr, ushort2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 433
{ } 
#endif
# 434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ushort4 *ptr, ushort4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 434
{ } 
#endif
# 435 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint2 *ptr, uint2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 435
{ } 
#endif
# 436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(uint4 *ptr, uint4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 436
{ } 
#endif
# 437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(ulonglong2 *ptr, ulonglong2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 437
{ } 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float *ptr, float value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 439
{ } 
#endif
# 440 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double *ptr, double value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 440
{ } 
#endif
# 441 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float2 *ptr, float2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 441
{ } 
#endif
# 442 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(float4 *ptr, float4 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 442
{ } 
#endif
# 443 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline void __stwt(double2 *ptr, double2 value) {int volatile ___ = 1;(void)ptr;(void)value;::exit(___);}
#if 0
# 443
{ } 
#endif
# 460 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 460
{ } 
#endif
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 472
{ } 
#endif
# 485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 485
{ } 
#endif
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_32_intrinsics.h"
__attribute__((unused)) static inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) {int volatile ___ = 1;(void)lo;(void)hi;(void)shift;::exit(___);}
#if 0
# 497
{ } 
#endif
# 89 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 90
{ } 
#endif
# 92 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_lo(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_lo(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 93
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 96
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp2a_hi(short2 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp2a_hi(ushort2 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 99
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(int srcA, int srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(unsigned srcA, unsigned srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 107
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline int __dp4a(char4 srcA, char4 srcB, int c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/sm_61_intrinsics.h"
__attribute__((unused)) static inline unsigned __dp4a(uchar4 srcA, uchar4 srcB, unsigned c) {int volatile ___ = 1;(void)srcA;(void)srcB;(void)c;::exit(___);}
#if 0
# 110
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, unsigned long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, long long value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, float value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_any_sync(unsigned mask, double value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 100
{ } 
#endif
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, int value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 104
{ } 
#endif
# 105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 105
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, unsigned long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, long long value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, float value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned __match_all_sync(unsigned mask, double value, int *pred) {int volatile ___ = 1;(void)mask;(void)value;(void)pred;::exit(___);}
#if 0
# 109
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline void __nanosleep(unsigned ns) {int volatile ___ = 1;(void)ns;::exit(___);}
#if 0
# 111
{ } 
#endif
# 113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_70_rt.h"
__attribute__((unused)) static inline unsigned short atomicCAS(unsigned short *address, unsigned short compare, unsigned short val) {int volatile ___ = 1;(void)address;(void)compare;(void)val;::exit(___);}
#if 0
# 113
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_add_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_min_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_max_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 95
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_add_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_min_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline int __reduce_max_sync(unsigned mask, int value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 99
{ } 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_and_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_or_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) static inline unsigned __reduce_xor_sync(unsigned mask, unsigned value) {int volatile ___ = 1;(void)mask;(void)value;::exit(___);}
#if 0
# 103
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
extern "C" {
# 107
__attribute__((unused)) inline void *__nv_associate_access_property(const void *ptr, unsigned long long 
# 108
property) {int volatile ___ = 1;(void)ptr;(void)property;
# 112
::exit(___);}
#if 0
# 108
{ 
# 109
__attribute__((unused)) extern void *__nv_associate_access_property_impl(const void *, unsigned long long); 
# 111
return __nv_associate_access_property_impl(ptr, property); 
# 112
} 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_4(void *dst, const void *
# 115
src, unsigned 
# 116
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 121
::exit(___);}
#if 0
# 116
{ 
# 117
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_4_impl(void *, const void *, unsigned); 
# 120
__nv_memcpy_async_shared_global_4_impl(dst, src, src_size); 
# 121
} 
#endif
# 123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_8(void *dst, const void *
# 124
src, unsigned 
# 125
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 130
::exit(___);}
#if 0
# 125
{ 
# 126
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_8_impl(void *, const void *, unsigned); 
# 129
__nv_memcpy_async_shared_global_8_impl(dst, src, src_size); 
# 130
} 
#endif
# 132 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
__attribute__((unused)) inline void __nv_memcpy_async_shared_global_16(void *dst, const void *
# 133
src, unsigned 
# 134
src_size) {int volatile ___ = 1;(void)dst;(void)src;(void)src_size;
# 139
::exit(___);}
#if 0
# 134
{ 
# 135
__attribute__((unused)) extern void __nv_memcpy_async_shared_global_16_impl(void *, const void *, unsigned); 
# 138
__nv_memcpy_async_shared_global_16_impl(dst, src, src_size); 
# 139
} 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_80_rt.h"
}
# 89 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __isCtaShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 89
{ } 
#endif
# 90 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __isClusterShared(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 90
{ } 
#endif
# 91 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void *__cluster_map_shared_rank(const void *ptr, unsigned target_block_rank) {int volatile ___ = 1;(void)ptr;(void)target_block_rank;::exit(___);}
#if 0
# 91
{ } 
#endif
# 92 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __cluster_query_shared_rank(const void *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
# 92
{ } 
#endif
# 93 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline uint2 __cluster_map_shared_multicast(const void *ptr, unsigned cluster_cta_mask) {int volatile ___ = 1;(void)ptr;(void)cluster_cta_mask;::exit(___);}
#if 0
# 93
{ } 
#endif
# 94 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterDimIsSpecified() {int volatile ___ = 1;::exit(___);}
#if 0
# 94
{ } 
#endif
# 95 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterDim() {int volatile ___ = 1;::exit(___);}
#if 0
# 95
{ } 
#endif
# 96 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterRelativeBlockIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 96
{ } 
#endif
# 97 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterGridDimInClusters() {int volatile ___ = 1;::exit(___);}
#if 0
# 97
{ } 
#endif
# 98 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline dim3 __clusterIdx() {int volatile ___ = 1;::exit(___);}
#if 0
# 98
{ } 
#endif
# 99 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterRelativeBlockRank() {int volatile ___ = 1;::exit(___);}
#if 0
# 99
{ } 
#endif
# 100 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline unsigned __clusterSizeInBlocks() {int volatile ___ = 1;::exit(___);}
#if 0
# 100
{ } 
#endif
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_arrive() {int volatile ___ = 1;::exit(___);}
#if 0
# 101
{ } 
#endif
# 102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_arrive_relaxed() {int volatile ___ = 1;::exit(___);}
#if 0
# 102
{ } 
#endif
# 103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __cluster_barrier_wait() {int volatile ___ = 1;::exit(___);}
#if 0
# 103
{ } 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline void __threadfence_cluster() {int volatile ___ = 1;::exit(___);}
#if 0
# 104
{ } 
#endif
# 106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 106
{ } 
#endif
# 107 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd_block(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 107
{ } 
#endif
# 108 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float2 atomicAdd_system(float2 *address, float2 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 108
{ } 
#endif
# 109 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 109
{ } 
#endif
# 110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd_block(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 110
{ } 
#endif
# 111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/sm_90_rt.h"
__attribute__((unused)) static inline float4 atomicAdd_system(float4 *address, float4 val) {int volatile ___ = 1;(void)address;(void)val;::exit(___);}
#if 0
# 111
{ } 
#endif
# 65 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> struct __nv_itex_trait { }; 
# 66
template<> struct __nv_itex_trait< char>  { typedef void type; }; 
# 67
template<> struct __nv_itex_trait< signed char>  { typedef void type; }; 
# 68
template<> struct __nv_itex_trait< char1>  { typedef void type; }; 
# 69
template<> struct __nv_itex_trait< char2>  { typedef void type; }; 
# 70
template<> struct __nv_itex_trait< char4>  { typedef void type; }; 
# 71
template<> struct __nv_itex_trait< unsigned char>  { typedef void type; }; 
# 72
template<> struct __nv_itex_trait< uchar1>  { typedef void type; }; 
# 73
template<> struct __nv_itex_trait< uchar2>  { typedef void type; }; 
# 74
template<> struct __nv_itex_trait< uchar4>  { typedef void type; }; 
# 75
template<> struct __nv_itex_trait< short>  { typedef void type; }; 
# 76
template<> struct __nv_itex_trait< short1>  { typedef void type; }; 
# 77
template<> struct __nv_itex_trait< short2>  { typedef void type; }; 
# 78
template<> struct __nv_itex_trait< short4>  { typedef void type; }; 
# 79
template<> struct __nv_itex_trait< unsigned short>  { typedef void type; }; 
# 80
template<> struct __nv_itex_trait< ushort1>  { typedef void type; }; 
# 81
template<> struct __nv_itex_trait< ushort2>  { typedef void type; }; 
# 82
template<> struct __nv_itex_trait< ushort4>  { typedef void type; }; 
# 83
template<> struct __nv_itex_trait< int>  { typedef void type; }; 
# 84
template<> struct __nv_itex_trait< int1>  { typedef void type; }; 
# 85
template<> struct __nv_itex_trait< int2>  { typedef void type; }; 
# 86
template<> struct __nv_itex_trait< int4>  { typedef void type; }; 
# 87
template<> struct __nv_itex_trait< unsigned>  { typedef void type; }; 
# 88
template<> struct __nv_itex_trait< uint1>  { typedef void type; }; 
# 89
template<> struct __nv_itex_trait< uint2>  { typedef void type; }; 
# 90
template<> struct __nv_itex_trait< uint4>  { typedef void type; }; 
# 101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template<> struct __nv_itex_trait< float>  { typedef void type; }; 
# 102
template<> struct __nv_itex_trait< float1>  { typedef void type; }; 
# 103
template<> struct __nv_itex_trait< float2>  { typedef void type; }; 
# 104
template<> struct __nv_itex_trait< float4>  { typedef void type; }; 
# 108
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 109
tex1Dfetch(T *ptr, cudaTextureObject_t obj, int x) 
# 110
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 112
::exit(___);}
#if 0
# 110
{ 
# 111
__nv_tex_surf_handler("__itex1Dfetch", ptr, obj, x); 
# 112
} 
#endif
# 114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 115
tex1Dfetch(cudaTextureObject_t texObject, int x) 
# 116
{int volatile ___ = 1;(void)texObject;(void)x;
# 120
::exit(___);}
#if 0
# 116
{ 
# 117
T ret; 
# 118
tex1Dfetch(&ret, texObject, x); 
# 119
return ret; 
# 120
} 
#endif
# 122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 123
tex1D(T *ptr, cudaTextureObject_t obj, float x) 
# 124
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;
# 126
::exit(___);}
#if 0
# 124
{ 
# 125
__nv_tex_surf_handler("__itex1D", ptr, obj, x); 
# 126
} 
#endif
# 129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 130
tex1D(cudaTextureObject_t texObject, float x) 
# 131
{int volatile ___ = 1;(void)texObject;(void)x;
# 135
::exit(___);}
#if 0
# 131
{ 
# 132
T ret; 
# 133
tex1D(&ret, texObject, x); 
# 134
return ret; 
# 135
} 
#endif
# 138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 139
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y) 
# 140
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;
# 142
::exit(___);}
#if 0
# 140
{ 
# 141
__nv_tex_surf_handler("__itex2D", ptr, obj, x, y); 
# 142
} 
#endif
# 144 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 145
tex2D(cudaTextureObject_t texObject, float x, float y) 
# 146
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
# 150
::exit(___);}
#if 0
# 146
{ 
# 147
T ret; 
# 148
tex2D(&ret, texObject, x, y); 
# 149
return ret; 
# 150
} 
#endif
# 153 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 154
tex2D(T *ptr, cudaTextureObject_t obj, float x, float y, bool *
# 155
isResident) 
# 156
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;
# 160
::exit(___);}
#if 0
# 156
{ 
# 157
unsigned char res; 
# 158
__nv_tex_surf_handler("__itex2D_sparse", ptr, obj, x, y, &res); 
# 159
(*isResident) = (res != 0); 
# 160
} 
#endif
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 163
tex2D(cudaTextureObject_t texObject, float x, float y, bool *isResident) 
# 164
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)isResident;
# 168
::exit(___);}
#if 0
# 164
{ 
# 165
T ret; 
# 166
tex2D(&ret, texObject, x, y, isResident); 
# 167
return ret; 
# 168
} 
#endif
# 173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 174
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 175
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 177
::exit(___);}
#if 0
# 175
{ 
# 176
__nv_tex_surf_handler("__itex3D", ptr, obj, x, y, z); 
# 177
} 
#endif
# 179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 180
tex3D(cudaTextureObject_t texObject, float x, float y, float z) 
# 181
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 185
::exit(___);}
#if 0
# 181
{ 
# 182
T ret; 
# 183
tex3D(&ret, texObject, x, y, z); 
# 184
return ret; 
# 185
} 
#endif
# 188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 189
tex3D(T *ptr, cudaTextureObject_t obj, float x, float y, float z, bool *
# 190
isResident) 
# 191
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)isResident;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
unsigned char res; 
# 193
__nv_tex_surf_handler("__itex3D_sparse", ptr, obj, x, y, z, &res); 
# 194
(*isResident) = (res != 0); 
# 195
} 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 198
tex3D(cudaTextureObject_t texObject, float x, float y, float z, bool *isResident) 
# 199
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)isResident;
# 203
::exit(___);}
#if 0
# 199
{ 
# 200
T ret; 
# 201
tex3D(&ret, texObject, x, y, z, isResident); 
# 202
return ret; 
# 203
} 
#endif
# 207 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 208
tex1DLayered(T *ptr, cudaTextureObject_t obj, float x, int layer) 
# 209
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;
# 211
::exit(___);}
#if 0
# 209
{ 
# 210
__nv_tex_surf_handler("__itex1DLayered", ptr, obj, x, layer); 
# 211
} 
#endif
# 213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 214
tex1DLayered(cudaTextureObject_t texObject, float x, int layer) 
# 215
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
# 219
::exit(___);}
#if 0
# 215
{ 
# 216
T ret; 
# 217
tex1DLayered(&ret, texObject, x, layer); 
# 218
return ret; 
# 219
} 
#endif
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 222
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer) 
# 223
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__itex2DLayered", ptr, obj, x, y, layer); 
# 225
} 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 228
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer) 
# 229
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
# 233
::exit(___);}
#if 0
# 229
{ 
# 230
T ret; 
# 231
tex2DLayered(&ret, texObject, x, y, layer); 
# 232
return ret; 
# 233
} 
#endif
# 236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 237
tex2DLayered(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, bool *isResident) 
# 238
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)isResident;
# 242
::exit(___);}
#if 0
# 238
{ 
# 239
unsigned char res; 
# 240
__nv_tex_surf_handler("__itex2DLayered_sparse", ptr, obj, x, y, layer, &res); 
# 241
(*isResident) = (res != 0); 
# 242
} 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 245
tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer, bool *isResident) 
# 246
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)isResident;
# 250
::exit(___);}
#if 0
# 246
{ 
# 247
T ret; 
# 248
tex2DLayered(&ret, texObject, x, y, layer, isResident); 
# 249
return ret; 
# 250
} 
#endif
# 254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 255
texCubemap(T *ptr, cudaTextureObject_t obj, float x, float y, float z) 
# 256
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;
# 258
::exit(___);}
#if 0
# 256
{ 
# 257
__nv_tex_surf_handler("__itexCubemap", ptr, obj, x, y, z); 
# 258
} 
#endif
# 261 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 262
texCubemap(cudaTextureObject_t texObject, float x, float y, float z) 
# 263
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
# 267
::exit(___);}
#if 0
# 263
{ 
# 264
T ret; 
# 265
texCubemap(&ret, texObject, x, y, z); 
# 266
return ret; 
# 267
} 
#endif
# 270 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 271
texCubemapLayered(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer) 
# 272
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;
# 274
::exit(___);}
#if 0
# 272
{ 
# 273
__nv_tex_surf_handler("__itexCubemapLayered", ptr, obj, x, y, z, layer); 
# 274
} 
#endif
# 276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 277
texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer) 
# 278
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
# 282
::exit(___);}
#if 0
# 278
{ 
# 279
T ret; 
# 280
texCubemapLayered(&ret, texObject, x, y, z, layer); 
# 281
return ret; 
# 282
} 
#endif
# 284 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 285
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, int comp = 0) 
# 286
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)comp;
# 288
::exit(___);}
#if 0
# 286
{ 
# 287
__nv_tex_surf_handler("__itex2Dgather", ptr, obj, x, y, comp); 
# 288
} 
#endif
# 290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 291
tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0) 
# 292
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
# 296
::exit(___);}
#if 0
# 292
{ 
# 293
T ret; 
# 294
tex2Dgather(&ret, to, x, y, comp); 
# 295
return ret; 
# 296
} 
#endif
# 299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 300
tex2Dgather(T *ptr, cudaTextureObject_t obj, float x, float y, bool *isResident, int comp = 0) 
# 301
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)isResident;(void)comp;
# 305
::exit(___);}
#if 0
# 301
{ 
# 302
unsigned char res; 
# 303
__nv_tex_surf_handler("__itex2Dgather_sparse", ptr, obj, x, y, comp, &res); 
# 304
(*isResident) = (res != 0); 
# 305
} 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 308
tex2Dgather(cudaTextureObject_t to, float x, float y, bool *isResident, int comp = 0) 
# 309
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)isResident;(void)comp;
# 313
::exit(___);}
#if 0
# 309
{ 
# 310
T ret; 
# 311
tex2Dgather(&ret, to, x, y, isResident, comp); 
# 312
return ret; 
# 313
} 
#endif
# 317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 318
tex1DLod(T *ptr, cudaTextureObject_t obj, float x, float level) 
# 319
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)level;
# 321
::exit(___);}
#if 0
# 319
{ 
# 320
__nv_tex_surf_handler("__itex1DLod", ptr, obj, x, level); 
# 321
} 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 324
tex1DLod(cudaTextureObject_t texObject, float x, float level) 
# 325
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
# 329
::exit(___);}
#if 0
# 325
{ 
# 326
T ret; 
# 327
tex1DLod(&ret, texObject, x, level); 
# 328
return ret; 
# 329
} 
#endif
# 332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 333
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level) 
# 334
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;
# 336
::exit(___);}
#if 0
# 334
{ 
# 335
__nv_tex_surf_handler("__itex2DLod", ptr, obj, x, y, level); 
# 336
} 
#endif
# 338 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 339
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level) 
# 340
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
# 344
::exit(___);}
#if 0
# 340
{ 
# 341
T ret; 
# 342
tex2DLod(&ret, texObject, x, y, level); 
# 343
return ret; 
# 344
} 
#endif
# 348 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 349
tex2DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float level, bool *isResident) 
# 350
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)level;(void)isResident;
# 354
::exit(___);}
#if 0
# 350
{ 
# 351
unsigned char res; 
# 352
__nv_tex_surf_handler("__itex2DLod_sparse", ptr, obj, x, y, level, &res); 
# 353
(*isResident) = (res != 0); 
# 354
} 
#endif
# 356 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 357
tex2DLod(cudaTextureObject_t texObject, float x, float y, float level, bool *isResident) 
# 358
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;(void)isResident;
# 362
::exit(___);}
#if 0
# 358
{ 
# 359
T ret; 
# 360
tex2DLod(&ret, texObject, x, y, level, isResident); 
# 361
return ret; 
# 362
} 
#endif
# 367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 368
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 369
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 371
::exit(___);}
#if 0
# 369
{ 
# 370
__nv_tex_surf_handler("__itex3DLod", ptr, obj, x, y, z, level); 
# 371
} 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 374
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 375
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 379
::exit(___);}
#if 0
# 375
{ 
# 376
T ret; 
# 377
tex3DLod(&ret, texObject, x, y, z, level); 
# 378
return ret; 
# 379
} 
#endif
# 382 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 383
tex3DLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level, bool *isResident) 
# 384
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 388
::exit(___);}
#if 0
# 384
{ 
# 385
unsigned char res; 
# 386
__nv_tex_surf_handler("__itex3DLod_sparse", ptr, obj, x, y, z, level, &res); 
# 387
(*isResident) = (res != 0); 
# 388
} 
#endif
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 391
tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level, bool *isResident) 
# 392
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;(void)isResident;
# 396
::exit(___);}
#if 0
# 392
{ 
# 393
T ret; 
# 394
tex3DLod(&ret, texObject, x, y, z, level, isResident); 
# 395
return ret; 
# 396
} 
#endif
# 401 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 402
tex1DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, int layer, float level) 
# 403
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)level;
# 405
::exit(___);}
#if 0
# 403
{ 
# 404
__nv_tex_surf_handler("__itex1DLayeredLod", ptr, obj, x, layer, level); 
# 405
} 
#endif
# 407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 408
tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level) 
# 409
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
# 413
::exit(___);}
#if 0
# 409
{ 
# 410
T ret; 
# 411
tex1DLayeredLod(&ret, texObject, x, layer, level); 
# 412
return ret; 
# 413
} 
#endif
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 417
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level) 
# 418
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;
# 420
::exit(___);}
#if 0
# 418
{ 
# 419
__nv_tex_surf_handler("__itex2DLayeredLod", ptr, obj, x, y, layer, level); 
# 420
} 
#endif
# 422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 423
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level) 
# 424
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
# 428
::exit(___);}
#if 0
# 424
{ 
# 425
T ret; 
# 426
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
# 427
return ret; 
# 428
} 
#endif
# 431 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 432
tex2DLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float level, bool *isResident) 
# 433
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 437
::exit(___);}
#if 0
# 433
{ 
# 434
unsigned char res; 
# 435
__nv_tex_surf_handler("__itex2DLayeredLod_sparse", ptr, obj, x, y, layer, level, &res); 
# 436
(*isResident) = (res != 0); 
# 437
} 
#endif
# 439 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 440
tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level, bool *isResident) 
# 441
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;(void)isResident;
# 445
::exit(___);}
#if 0
# 441
{ 
# 442
T ret; 
# 443
tex2DLayeredLod(&ret, texObject, x, y, layer, level, isResident); 
# 444
return ret; 
# 445
} 
#endif
# 448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 449
texCubemapLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float level) 
# 450
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)level;
# 452
::exit(___);}
#if 0
# 450
{ 
# 451
__nv_tex_surf_handler("__itexCubemapLod", ptr, obj, x, y, z, level); 
# 452
} 
#endif
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 455
texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level) 
# 456
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
# 460
::exit(___);}
#if 0
# 456
{ 
# 457
T ret; 
# 458
texCubemapLod(&ret, texObject, x, y, z, level); 
# 459
return ret; 
# 460
} 
#endif
# 463 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 464
texCubemapGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 465
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 467
::exit(___);}
#if 0
# 465
{ 
# 466
__nv_tex_surf_handler("__itexCubemapGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 467
} 
#endif
# 469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 470
texCubemapGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 475
::exit(___);}
#if 0
# 471
{ 
# 472
T ret; 
# 473
texCubemapGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 474
return ret; 
# 475
} 
#endif
# 477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 478
texCubemapLayeredLod(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float level) 
# 479
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 481
::exit(___);}
#if 0
# 479
{ 
# 480
__nv_tex_surf_handler("__itexCubemapLayeredLod", ptr, obj, x, y, z, layer, level); 
# 481
} 
#endif
# 483 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 484
texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
# 485
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
# 489
::exit(___);}
#if 0
# 485
{ 
# 486
T ret; 
# 487
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
# 488
return ret; 
# 489
} 
#endif
# 491 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 492
tex1DGrad(T *ptr, cudaTextureObject_t obj, float x, float dPdx, float dPdy) 
# 493
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)dPdx;(void)dPdy;
# 495
::exit(___);}
#if 0
# 493
{ 
# 494
__nv_tex_surf_handler("__itex1DGrad", ptr, obj, x, dPdx, dPdy); 
# 495
} 
#endif
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 498
tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
# 499
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
# 503
::exit(___);}
#if 0
# 499
{ 
# 500
T ret; 
# 501
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
# 502
return ret; 
# 503
} 
#endif
# 506 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 507
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy) 
# 508
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 510
::exit(___);}
#if 0
# 508
{ 
# 509
__nv_tex_surf_handler("__itex2DGrad_v2", ptr, obj, x, y, &dPdx, &dPdy); 
# 510
} 
#endif
# 512 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 513
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
# 514
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
# 518
::exit(___);}
#if 0
# 514
{ 
# 515
T ret; 
# 516
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
# 517
return ret; 
# 518
} 
#endif
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 522
tex2DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 523
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 527
::exit(___);}
#if 0
# 523
{ 
# 524
unsigned char res; 
# 525
__nv_tex_surf_handler("__itex2DGrad_sparse", ptr, obj, x, y, &dPdx, &dPdy, &res); 
# 526
(*isResident) = (res != 0); 
# 527
} 
#endif
# 529 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 530
tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy, bool *isResident) 
# 531
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;(void)isResident;
# 535
::exit(___);}
#if 0
# 531
{ 
# 532
T ret; 
# 533
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy, isResident); 
# 534
return ret; 
# 535
} 
#endif
# 539 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 540
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 541
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 543
::exit(___);}
#if 0
# 541
{ 
# 542
__nv_tex_surf_handler("__itex3DGrad_v2", ptr, obj, x, y, z, &dPdx, &dPdy); 
# 543
} 
#endif
# 545 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 546
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
# 547
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
# 551
::exit(___);}
#if 0
# 547
{ 
# 548
T ret; 
# 549
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
# 550
return ret; 
# 551
} 
#endif
# 554 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 555
tex3DGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 556
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 560
::exit(___);}
#if 0
# 556
{ 
# 557
unsigned char res; 
# 558
__nv_tex_surf_handler("__itex3DGrad_sparse", ptr, obj, x, y, z, &dPdx, &dPdy, &res); 
# 559
(*isResident) = (res != 0); 
# 560
} 
#endif
# 562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 563
tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy, bool *isResident) 
# 564
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;(void)isResident;
# 568
::exit(___);}
#if 0
# 564
{ 
# 565
T ret; 
# 566
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy, isResident); 
# 567
return ret; 
# 568
} 
#endif
# 573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 574
tex1DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, int layer, float dPdx, float dPdy) 
# 575
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 577
::exit(___);}
#if 0
# 575
{ 
# 576
__nv_tex_surf_handler("__itex1DLayeredGrad", ptr, obj, x, layer, dPdx, dPdy); 
# 577
} 
#endif
# 579 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 580
tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
# 581
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
# 585
::exit(___);}
#if 0
# 581
{ 
# 582
T ret; 
# 583
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
# 584
return ret; 
# 585
} 
#endif
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 589
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 590
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 592
::exit(___);}
#if 0
# 590
{ 
# 591
__nv_tex_surf_handler("__itex2DLayeredGrad_v2", ptr, obj, x, y, layer, &dPdx, &dPdy); 
# 592
} 
#endif
# 594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 595
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
# 596
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
# 600
::exit(___);}
#if 0
# 596
{ 
# 597
T ret; 
# 598
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
# 599
return ret; 
# 600
} 
#endif
# 603 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 604
tex2DLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 605
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 609
::exit(___);}
#if 0
# 605
{ 
# 606
unsigned char res; 
# 607
__nv_tex_surf_handler("__itex2DLayeredGrad_sparse", ptr, obj, x, y, layer, &dPdx, &dPdy, &res); 
# 608
(*isResident) = (res != 0); 
# 609
} 
#endif
# 611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 612
tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy, bool *isResident) 
# 613
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;(void)isResident;
# 617
::exit(___);}
#if 0
# 613
{ 
# 614
T ret; 
# 615
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy, isResident); 
# 616
return ret; 
# 617
} 
#endif
# 621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_itex_trait< T> ::type 
# 622
texCubemapLayeredGrad(T *ptr, cudaTextureObject_t obj, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 623
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 625
::exit(___);}
#if 0
# 623
{ 
# 624
__nv_tex_surf_handler("__itexCubemapLayeredGrad_v2", ptr, obj, x, y, z, layer, &dPdx, &dPdy); 
# 625
} 
#endif
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/texture_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 628
texCubemapLayeredGrad(cudaTextureObject_t texObject, float x, float y, float z, int layer, float4 dPdx, float4 dPdy) 
# 629
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)dPdx;(void)dPdy;
# 633
::exit(___);}
#if 0
# 629
{ 
# 630
T ret; 
# 631
texCubemapLayeredGrad(&ret, texObject, x, y, z, layer, dPdx, dPdy); 
# 632
return ret; 
# 633
} 
#endif
# 58 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> struct __nv_isurf_trait { }; 
# 59
template<> struct __nv_isurf_trait< char>  { typedef void type; }; 
# 60
template<> struct __nv_isurf_trait< signed char>  { typedef void type; }; 
# 61
template<> struct __nv_isurf_trait< char1>  { typedef void type; }; 
# 62
template<> struct __nv_isurf_trait< unsigned char>  { typedef void type; }; 
# 63
template<> struct __nv_isurf_trait< uchar1>  { typedef void type; }; 
# 64
template<> struct __nv_isurf_trait< short>  { typedef void type; }; 
# 65
template<> struct __nv_isurf_trait< short1>  { typedef void type; }; 
# 66
template<> struct __nv_isurf_trait< unsigned short>  { typedef void type; }; 
# 67
template<> struct __nv_isurf_trait< ushort1>  { typedef void type; }; 
# 68
template<> struct __nv_isurf_trait< int>  { typedef void type; }; 
# 69
template<> struct __nv_isurf_trait< int1>  { typedef void type; }; 
# 70
template<> struct __nv_isurf_trait< unsigned>  { typedef void type; }; 
# 71
template<> struct __nv_isurf_trait< uint1>  { typedef void type; }; 
# 72
template<> struct __nv_isurf_trait< long long>  { typedef void type; }; 
# 73
template<> struct __nv_isurf_trait< longlong1>  { typedef void type; }; 
# 74
template<> struct __nv_isurf_trait< unsigned long long>  { typedef void type; }; 
# 75
template<> struct __nv_isurf_trait< ulonglong1>  { typedef void type; }; 
# 76
template<> struct __nv_isurf_trait< float>  { typedef void type; }; 
# 77
template<> struct __nv_isurf_trait< float1>  { typedef void type; }; 
# 79
template<> struct __nv_isurf_trait< char2>  { typedef void type; }; 
# 80
template<> struct __nv_isurf_trait< uchar2>  { typedef void type; }; 
# 81
template<> struct __nv_isurf_trait< short2>  { typedef void type; }; 
# 82
template<> struct __nv_isurf_trait< ushort2>  { typedef void type; }; 
# 83
template<> struct __nv_isurf_trait< int2>  { typedef void type; }; 
# 84
template<> struct __nv_isurf_trait< uint2>  { typedef void type; }; 
# 85
template<> struct __nv_isurf_trait< longlong2>  { typedef void type; }; 
# 86
template<> struct __nv_isurf_trait< ulonglong2>  { typedef void type; }; 
# 87
template<> struct __nv_isurf_trait< float2>  { typedef void type; }; 
# 89
template<> struct __nv_isurf_trait< char4>  { typedef void type; }; 
# 90
template<> struct __nv_isurf_trait< uchar4>  { typedef void type; }; 
# 91
template<> struct __nv_isurf_trait< short4>  { typedef void type; }; 
# 92
template<> struct __nv_isurf_trait< ushort4>  { typedef void type; }; 
# 93
template<> struct __nv_isurf_trait< int4>  { typedef void type; }; 
# 94
template<> struct __nv_isurf_trait< uint4>  { typedef void type; }; 
# 95
template<> struct __nv_isurf_trait< float4>  { typedef void type; }; 
# 98
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 99
surf1Dread(T *ptr, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 100
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)mode;
# 102
::exit(___);}
#if 0
# 100
{ 
# 101
__nv_tex_surf_handler("__isurf1Dread", ptr, obj, x, mode); 
# 102
} 
#endif
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 105
surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 106
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
# 110
::exit(___);}
#if 0
# 106
{ 
# 107
T ret; 
# 108
surf1Dread(&ret, surfObject, x, boundaryMode); 
# 109
return ret; 
# 110
} 
#endif
# 112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 113
surf2Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 114
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)mode;
# 116
::exit(___);}
#if 0
# 114
{ 
# 115
__nv_tex_surf_handler("__isurf2Dread", ptr, obj, x, y, mode); 
# 116
} 
#endif
# 118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 119
surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 120
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
# 124
::exit(___);}
#if 0
# 120
{ 
# 121
T ret; 
# 122
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
# 123
return ret; 
# 124
} 
#endif
# 127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 128
surf3Dread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 129
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 131
::exit(___);}
#if 0
# 129
{ 
# 130
__nv_tex_surf_handler("__isurf3Dread", ptr, obj, x, y, z, mode); 
# 131
} 
#endif
# 133 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 134
surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 135
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
# 139
::exit(___);}
#if 0
# 135
{ 
# 136
T ret; 
# 137
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
# 138
return ret; 
# 139
} 
#endif
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 142
surf1DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 143
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)layer;(void)mode;
# 145
::exit(___);}
#if 0
# 143
{ 
# 144
__nv_tex_surf_handler("__isurf1DLayeredread", ptr, obj, x, layer, mode); 
# 145
} 
#endif
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 148
surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 149
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
# 153
::exit(___);}
#if 0
# 149
{ 
# 150
T ret; 
# 151
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
# 152
return ret; 
# 153
} 
#endif
# 155 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 156
surf2DLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 157
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 159
::exit(___);}
#if 0
# 157
{ 
# 158
__nv_tex_surf_handler("__isurf2DLayeredread", ptr, obj, x, y, layer, mode); 
# 159
} 
#endif
# 161 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 162
surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 163
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
# 167
::exit(___);}
#if 0
# 163
{ 
# 164
T ret; 
# 165
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
# 166
return ret; 
# 167
} 
#endif
# 169 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 170
surfCubemapread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 171
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 173
::exit(___);}
#if 0
# 171
{ 
# 172
__nv_tex_surf_handler("__isurfCubemapread", ptr, obj, x, y, face, mode); 
# 173
} 
#endif
# 175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 176
surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 177
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
# 181
::exit(___);}
#if 0
# 177
{ 
# 178
T ret; 
# 179
surfCubemapread(&ret, surfObject, x, y, face, boundaryMode); 
# 180
return ret; 
# 181
} 
#endif
# 183 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 184
surfCubemapLayeredread(T *ptr, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 185
{int volatile ___ = 1;(void)ptr;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 187
::exit(___);}
#if 0
# 185
{ 
# 186
__nv_tex_surf_handler("__isurfCubemapLayeredread", ptr, obj, x, y, layerface, mode); 
# 187
} 
#endif
# 189 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static T 
# 190
surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
# 191
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layerface;(void)boundaryMode;
# 195
::exit(___);}
#if 0
# 191
{ 
# 192
T ret; 
# 193
surfCubemapLayeredread(&ret, surfObject, x, y, layerface, boundaryMode); 
# 194
return ret; 
# 195
} 
#endif
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 198
surf1Dwrite(T val, cudaSurfaceObject_t obj, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 199
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)mode;
# 201
::exit(___);}
#if 0
# 199
{ 
# 200
__nv_tex_surf_handler("__isurf1Dwrite_v2", &val, obj, x, mode); 
# 201
} 
#endif
# 203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 204
surf2Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 205
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)mode;
# 207
::exit(___);}
#if 0
# 205
{ 
# 206
__nv_tex_surf_handler("__isurf2Dwrite_v2", &val, obj, x, y, mode); 
# 207
} 
#endif
# 209 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 210
surf3Dwrite(T val, cudaSurfaceObject_t obj, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 211
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)z;(void)mode;
# 213
::exit(___);}
#if 0
# 211
{ 
# 212
__nv_tex_surf_handler("__isurf3Dwrite_v2", &val, obj, x, y, z, mode); 
# 213
} 
#endif
# 215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 216
surf1DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 217
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)layer;(void)mode;
# 219
::exit(___);}
#if 0
# 217
{ 
# 218
__nv_tex_surf_handler("__isurf1DLayeredwrite_v2", &val, obj, x, layer, mode); 
# 219
} 
#endif
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 222
surf2DLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 223
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layer;(void)mode;
# 225
::exit(___);}
#if 0
# 223
{ 
# 224
__nv_tex_surf_handler("__isurf2DLayeredwrite_v2", &val, obj, x, y, layer, mode); 
# 225
} 
#endif
# 227 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 228
surfCubemapwrite(T val, cudaSurfaceObject_t obj, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 229
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)face;(void)mode;
# 231
::exit(___);}
#if 0
# 229
{ 
# 230
__nv_tex_surf_handler("__isurfCubemapwrite_v2", &val, obj, x, y, face, mode); 
# 231
} 
#endif
# 233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/surface_indirect_functions.h"
template< class T> __attribute__((unused)) static typename __nv_isurf_trait< T> ::type 
# 234
surfCubemapLayeredwrite(T val, cudaSurfaceObject_t obj, int x, int y, int layerface, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
# 235
{int volatile ___ = 1;(void)val;(void)obj;(void)x;(void)y;(void)layerface;(void)mode;
# 237
::exit(___);}
#if 0
# 235
{ 
# 236
__nv_tex_surf_handler("__isurfCubemapLayeredwrite_v2", &val, obj, x, y, layerface, mode); 
# 237
} 
#endif
# 3634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/crt/device_functions.h"
extern "C" unsigned __cudaPushCallConfiguration(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, CUstream_st * stream = 0); 
# 68 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/device_launch_parameters.h"
extern "C" {
# 71
extern const uint3 __device_builtin_variable_threadIdx; 
# 72
extern const uint3 __device_builtin_variable_blockIdx; 
# 73
extern const dim3 __device_builtin_variable_blockDim; 
# 74
extern const dim3 __device_builtin_variable_gridDim; 
# 75
extern const int __device_builtin_variable_warpSize; 
# 80
}
# 67 "/usr/include/c++/11/bits/stl_relops.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 71
namespace rel_ops { 
# 85 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 87
operator!=(const _Tp &__x, const _Tp &__y) 
# 88
{ return !(__x == __y); } 
# 98 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 100
operator>(const _Tp &__x, const _Tp &__y) 
# 101
{ return __y < __x; } 
# 111 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 113
operator<=(const _Tp &__x, const _Tp &__y) 
# 114
{ return !(__y < __x); } 
# 124 "/usr/include/c++/11/bits/stl_relops.h" 3
template< class _Tp> inline bool 
# 126
operator>=(const _Tp &__x, const _Tp &__y) 
# 127
{ return !(__x < __y); } 
# 128
}
# 131
}
# 39 "/usr/include/c++/11/initializer_list" 3
#pragma GCC visibility push ( default )
# 43
namespace std { 
# 46
template< class _E> 
# 47
class initializer_list { 
# 50
public: typedef _E value_type; 
# 51
typedef const _E &reference; 
# 52
typedef const _E &const_reference; 
# 53
typedef size_t size_type; 
# 54
typedef const _E *iterator; 
# 55
typedef const _E *const_iterator; 
# 58
private: iterator _M_array; 
# 59
size_type _M_len; 
# 62
constexpr initializer_list(const_iterator __a, size_type __l) : _M_array(__a), _M_len(__l) 
# 63
{ } 
# 66
public: constexpr initializer_list() noexcept : _M_array((0)), _M_len((0)) 
# 67
{ } 
# 71
constexpr size_type size() const noexcept { return _M_len; } 
# 75
constexpr const_iterator begin() const noexcept { return _M_array; } 
# 79
constexpr const_iterator end() const noexcept { return begin() + size(); } 
# 80
}; 
# 88
template< class _Tp> constexpr const _Tp *
# 90
begin(initializer_list< _Tp>  __ils) noexcept 
# 91
{ return __ils.begin(); } 
# 99
template< class _Tp> constexpr const _Tp *
# 101
end(initializer_list< _Tp>  __ils) noexcept 
# 102
{ return __ils.end(); } 
# 103
}
# 105
#pragma GCC visibility pop
# 82 "/usr/include/c++/11/utility" 3
namespace std __attribute((__visibility__("default"))) { 
# 87
template< class _Tp> struct tuple_size; 
# 94
template< class _Tp, class 
# 95
_Up = typename remove_cv< _Tp> ::type, class 
# 96
 = typename enable_if< is_same< _Tp, _Up> ::value> ::type, size_t 
# 97
 = tuple_size< _Tp> ::value> using __enable_if_has_tuple_size = _Tp; 
# 100
template< class _Tp> 
# 101
struct tuple_size< const __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 102
}; 
# 104
template< class _Tp> 
# 105
struct tuple_size< volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 106
}; 
# 108
template< class _Tp> 
# 109
struct tuple_size< const volatile __enable_if_has_tuple_size< _Tp> >  : public std::tuple_size< _Tp>  { 
# 110
}; 
# 113
template< size_t __i, class _Tp> struct tuple_element; 
# 117
template< size_t __i, class _Tp> using __tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 120
template< size_t __i, class _Tp> 
# 121
struct tuple_element< __i, const _Tp>  { 
# 123
typedef typename add_const< __tuple_element_t< __i, _Tp> > ::type type; 
# 124
}; 
# 126
template< size_t __i, class _Tp> 
# 127
struct tuple_element< __i, volatile _Tp>  { 
# 129
typedef typename add_volatile< __tuple_element_t< __i, _Tp> > ::type type; 
# 130
}; 
# 132
template< size_t __i, class _Tp> 
# 133
struct tuple_element< __i, const volatile _Tp>  { 
# 135
typedef typename add_cv< __tuple_element_t< __i, _Tp> > ::type type; 
# 136
}; 
# 144
template< size_t __i, class _Tp> using tuple_element_t = typename tuple_element< __i, _Tp> ::type; 
# 151
template< class _T1, class _T2> 
# 152
struct __is_tuple_like_impl< pair< _T1, _T2> >  : public true_type { 
# 153
}; 
# 156
template< class _Tp1, class _Tp2> 
# 157
struct tuple_size< pair< _Tp1, _Tp2> >  : public integral_constant< unsigned long, 2UL>  { 
# 158
}; 
# 161
template< class _Tp1, class _Tp2> 
# 162
struct tuple_element< 0, pair< _Tp1, _Tp2> >  { 
# 163
typedef _Tp1 type; }; 
# 166
template< class _Tp1, class _Tp2> 
# 167
struct tuple_element< 1, pair< _Tp1, _Tp2> >  { 
# 168
typedef _Tp2 type; }; 
# 170
template< size_t _Int> struct __pair_get; 
# 174
template<> struct __pair_get< 0UL>  { 
# 176
template< class _Tp1, class _Tp2> static constexpr _Tp1 &
# 178
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 179
{ return __pair.first; } 
# 181
template< class _Tp1, class _Tp2> static constexpr _Tp1 &&
# 183
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 184
{ return std::forward< _Tp1> ((__pair.first)); } 
# 186
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &
# 188
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 189
{ return __pair.first; } 
# 191
template< class _Tp1, class _Tp2> static constexpr const _Tp1 &&
# 193
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 194
{ return std::forward< const _Tp1> ((__pair.first)); } 
# 195
}; 
# 198
template<> struct __pair_get< 1UL>  { 
# 200
template< class _Tp1, class _Tp2> static constexpr _Tp2 &
# 202
__get(pair< _Tp1, _Tp2>  &__pair) noexcept 
# 203
{ return __pair.second; } 
# 205
template< class _Tp1, class _Tp2> static constexpr _Tp2 &&
# 207
__move_get(pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 208
{ return std::forward< _Tp2> ((__pair.second)); } 
# 210
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &
# 212
__const_get(const pair< _Tp1, _Tp2>  &__pair) noexcept 
# 213
{ return __pair.second; } 
# 215
template< class _Tp1, class _Tp2> static constexpr const _Tp2 &&
# 217
__const_move_get(const pair< _Tp1, _Tp2>  &&__pair) noexcept 
# 218
{ return std::forward< const _Tp2> ((__pair.second)); } 
# 219
}; 
# 221
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 223
get(pair< _Tp1, _Tp2>  &__in) noexcept 
# 224
{ return __pair_get< _Int> ::__get(__in); } 
# 226
template< size_t _Int, class _Tp1, class _Tp2> constexpr typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 228
get(pair< _Tp1, _Tp2>  &&__in) noexcept 
# 229
{ return __pair_get< _Int> ::__move_get(std::move(__in)); } 
# 231
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &
# 233
get(const pair< _Tp1, _Tp2>  &__in) noexcept 
# 234
{ return __pair_get< _Int> ::__const_get(__in); } 
# 236
template< size_t _Int, class _Tp1, class _Tp2> constexpr const typename tuple_element< _Int, pair< _Tp1, _Tp2> > ::type &&
# 238
get(const pair< _Tp1, _Tp2>  &&__in) noexcept 
# 239
{ return __pair_get< _Int> ::__const_move_get(std::move(__in)); } 
# 245
template< class _Tp, class _Up> constexpr _Tp &
# 247
get(pair< _Tp, _Up>  &__p) noexcept 
# 248
{ return __p.first; } 
# 250
template< class _Tp, class _Up> constexpr const _Tp &
# 252
get(const pair< _Tp, _Up>  &__p) noexcept 
# 253
{ return __p.first; } 
# 255
template< class _Tp, class _Up> constexpr _Tp &&
# 257
get(pair< _Tp, _Up>  &&__p) noexcept 
# 258
{ return std::move((__p.first)); } 
# 260
template< class _Tp, class _Up> constexpr const _Tp &&
# 262
get(const pair< _Tp, _Up>  &&__p) noexcept 
# 263
{ return std::move((__p.first)); } 
# 265
template< class _Tp, class _Up> constexpr _Tp &
# 267
get(pair< _Up, _Tp>  &__p) noexcept 
# 268
{ return __p.second; } 
# 270
template< class _Tp, class _Up> constexpr const _Tp &
# 272
get(const pair< _Up, _Tp>  &__p) noexcept 
# 273
{ return __p.second; } 
# 275
template< class _Tp, class _Up> constexpr _Tp &&
# 277
get(pair< _Up, _Tp>  &&__p) noexcept 
# 278
{ return std::move((__p.second)); } 
# 280
template< class _Tp, class _Up> constexpr const _Tp &&
# 282
get(const pair< _Up, _Tp>  &&__p) noexcept 
# 283
{ return std::move((__p.second)); } 
# 288
template< class _Tp, class _Up = _Tp> inline _Tp 
# 291
exchange(_Tp &__obj, _Up &&__new_val) 
# 292
{ return std::__exchange(__obj, std::forward< _Up> (__new_val)); } 
# 298
template< size_t ..._Indexes> struct _Index_tuple { }; 
# 301
template< size_t _Num> 
# 302
struct _Build_index_tuple { 
# 312 "/usr/include/c++/11/utility" 3
using __type = _Index_tuple< __integer_pack(_Num)...> ; 
# 314
}; 
# 321
template< class _Tp, _Tp ..._Idx> 
# 322
struct integer_sequence { 
# 324
typedef _Tp value_type; 
# 325
static constexpr size_t size() noexcept { return sizeof...(_Idx); } 
# 326
}; 
# 329
template< class _Tp, _Tp _Num> using make_integer_sequence = integer_sequence< _Tp, __integer_pack(_Num)...> ; 
# 338
template< size_t ..._Idx> using index_sequence = integer_sequence< unsigned long, _Idx...> ; 
# 342
template< size_t _Num> using make_index_sequence = make_integer_sequence< unsigned long, _Num> ; 
# 346
template< class ..._Types> using index_sequence_for = make_index_sequence< sizeof...(_Types)> ; 
# 352
struct in_place_t { 
# 353
explicit in_place_t() = default;
# 354
}; 
# 356
constexpr inline in_place_t in_place{}; 
# 358
template< class _Tp> struct in_place_type_t { 
# 360
explicit in_place_type_t() = default;
# 361
}; 
# 363
template< class _Tp> constexpr in_place_type_t< _Tp>  
# 364
in_place_type{}; 
# 366
template< size_t _Idx> struct in_place_index_t { 
# 368
explicit in_place_index_t() = default;
# 369
}; 
# 371
template< size_t _Idx> constexpr in_place_index_t< _Idx>  
# 372
in_place_index{}; 
# 374
template< class > constexpr bool 
# 375
__is_in_place_type_v = false; 
# 377
template< class _Tp> constexpr bool 
# 378
__is_in_place_type_v< in_place_type_t< _Tp> >  = true; 
# 380
template< class _Tp> using __is_in_place_type = bool_constant< __is_in_place_type_v< _Tp> > ; 
# 384
template< class _Tp> 
# 385
[[nodiscard]] constexpr add_const_t< _Tp>  &
# 387
as_const(_Tp &__t) noexcept 
# 388
{ return __t; } 
# 390
template < typename _Tp >
    void as_const ( const _Tp && ) = delete;
# 477 "/usr/include/c++/11/utility" 3
}
# 206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 207
cudaLaunchKernel(const T *
# 208
func, dim3 
# 209
gridDim, dim3 
# 210
blockDim, void **
# 211
args, size_t 
# 212
sharedMem = 0, cudaStream_t 
# 213
stream = 0) 
# 215
{ 
# 216
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 217
} 
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class ...ExpTypes, class ...ActTypes> static inline cudaError_t 
# 278
cudaLaunchKernelEx(const cudaLaunchConfig_t *
# 279
config, void (*
# 280
kernel)(ExpTypes ...), ActTypes &&...
# 281
args) 
# 283
{ 
# 284
return [&](ExpTypes ...coercedArgs) { 
# 285
void *pArgs[] = {(&coercedArgs)...}; 
# 286
return ::cudaLaunchKernelExC(config, (const void *)(kernel), pArgs); 
# 287
} (std::forward< ActTypes> (args)...); 
# 288
} 
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 341
cudaLaunchCooperativeKernel(const T *
# 342
func, dim3 
# 343
gridDim, dim3 
# 344
blockDim, void **
# 345
args, size_t 
# 346
sharedMem = 0, cudaStream_t 
# 347
stream = 0) 
# 349
{ 
# 350
return ::cudaLaunchCooperativeKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
# 351
} 
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaEventCreate(cudaEvent_t *
# 385
event, unsigned 
# 386
flags) 
# 388
{ 
# 389
return ::cudaEventCreateWithFlags(event, flags); 
# 390
} 
# 428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaGraphInstantiate(cudaGraphExec_t *
# 429
pGraphExec, cudaGraph_t 
# 430
graph, cudaGraphNode_t *
# 431
pErrorNode, char *
# 432
pLogBuffer, size_t 
# 433
bufferSize) 
# 435
{ 
# 436
(void)pErrorNode; 
# 437
(void)pLogBuffer; 
# 438
(void)bufferSize; 
# 439
return ::cudaGraphInstantiate(pGraphExec, graph, 0); 
# 440
} 
# 499 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaMallocHost(void **
# 500
ptr, size_t 
# 501
size, unsigned 
# 502
flags) 
# 504
{ 
# 505
return ::cudaHostAlloc(ptr, size, flags); 
# 506
} 
# 508
template< class T> static inline cudaError_t 
# 509
cudaHostAlloc(T **
# 510
ptr, size_t 
# 511
size, unsigned 
# 512
flags) 
# 514
{ 
# 515
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
# 516
} 
# 518
template< class T> static inline cudaError_t 
# 519
cudaHostGetDevicePointer(T **
# 520
pDevice, void *
# 521
pHost, unsigned 
# 522
flags) 
# 524
{ 
# 525
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
# 526
} 
# 628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 629
cudaMallocManaged(T **
# 630
devPtr, size_t 
# 631
size, unsigned 
# 632
flags = 1) 
# 634
{ 
# 635
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
# 636
} 
# 718 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 719
cudaStreamAttachMemAsync(cudaStream_t 
# 720
stream, T *
# 721
devPtr, size_t 
# 722
length = 0, unsigned 
# 723
flags = 4) 
# 725
{ 
# 726
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
# 727
} 
# 729
template< class T> inline cudaError_t 
# 730
cudaMalloc(T **
# 731
devPtr, size_t 
# 732
size) 
# 734
{ 
# 735
return ::cudaMalloc((void **)((void *)devPtr), size); 
# 736
} 
# 738
template< class T> static inline cudaError_t 
# 739
cudaMallocHost(T **
# 740
ptr, size_t 
# 741
size, unsigned 
# 742
flags = 0) 
# 744
{ 
# 745
return cudaMallocHost((void **)((void *)ptr), size, flags); 
# 746
} 
# 748
template< class T> static inline cudaError_t 
# 749
cudaMallocPitch(T **
# 750
devPtr, size_t *
# 751
pitch, size_t 
# 752
width, size_t 
# 753
height) 
# 755
{ 
# 756
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
# 757
} 
# 768 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
static inline cudaError_t cudaMallocAsync(void **
# 769
ptr, size_t 
# 770
size, cudaMemPool_t 
# 771
memPool, cudaStream_t 
# 772
stream) 
# 774
{ 
# 775
return ::cudaMallocFromPoolAsync(ptr, size, memPool, stream); 
# 776
} 
# 778
template< class T> static inline cudaError_t 
# 779
cudaMallocAsync(T **
# 780
ptr, size_t 
# 781
size, cudaMemPool_t 
# 782
memPool, cudaStream_t 
# 783
stream) 
# 785
{ 
# 786
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 787
} 
# 789
template< class T> static inline cudaError_t 
# 790
cudaMallocAsync(T **
# 791
ptr, size_t 
# 792
size, cudaStream_t 
# 793
stream) 
# 795
{ 
# 796
return ::cudaMallocAsync((void **)((void *)ptr), size, stream); 
# 797
} 
# 799
template< class T> static inline cudaError_t 
# 800
cudaMallocFromPoolAsync(T **
# 801
ptr, size_t 
# 802
size, cudaMemPool_t 
# 803
memPool, cudaStream_t 
# 804
stream) 
# 806
{ 
# 807
return ::cudaMallocFromPoolAsync((void **)((void *)ptr), size, memPool, stream); 
# 808
} 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 848
cudaMemcpyToSymbol(const T &
# 849
symbol, const void *
# 850
src, size_t 
# 851
count, size_t 
# 852
offset = 0, cudaMemcpyKind 
# 853
kind = cudaMemcpyHostToDevice) 
# 855
{ 
# 856
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
# 857
} 
# 901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 902
cudaMemcpyToSymbolAsync(const T &
# 903
symbol, const void *
# 904
src, size_t 
# 905
count, size_t 
# 906
offset = 0, cudaMemcpyKind 
# 907
kind = cudaMemcpyHostToDevice, cudaStream_t 
# 908
stream = 0) 
# 910
{ 
# 911
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
# 912
} 
# 949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 950
cudaMemcpyFromSymbol(void *
# 951
dst, const T &
# 952
symbol, size_t 
# 953
count, size_t 
# 954
offset = 0, cudaMemcpyKind 
# 955
kind = cudaMemcpyDeviceToHost) 
# 957
{ 
# 958
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
# 959
} 
# 1003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1004
cudaMemcpyFromSymbolAsync(void *
# 1005
dst, const T &
# 1006
symbol, size_t 
# 1007
count, size_t 
# 1008
offset = 0, cudaMemcpyKind 
# 1009
kind = cudaMemcpyDeviceToHost, cudaStream_t 
# 1010
stream = 0) 
# 1012
{ 
# 1013
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
# 1014
} 
# 1072 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1073
cudaGraphAddMemcpyNodeToSymbol(cudaGraphNode_t *
# 1074
pGraphNode, cudaGraph_t 
# 1075
graph, const cudaGraphNode_t *
# 1076
pDependencies, size_t 
# 1077
numDependencies, const T &
# 1078
symbol, const void *
# 1079
src, size_t 
# 1080
count, size_t 
# 1081
offset, cudaMemcpyKind 
# 1082
kind) 
# 1083
{ 
# 1084
return ::cudaGraphAddMemcpyNodeToSymbol(pGraphNode, graph, pDependencies, numDependencies, (const void *)(&symbol), src, count, offset, kind); 
# 1085
} 
# 1143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1144
cudaGraphAddMemcpyNodeFromSymbol(cudaGraphNode_t *
# 1145
pGraphNode, cudaGraph_t 
# 1146
graph, const cudaGraphNode_t *
# 1147
pDependencies, size_t 
# 1148
numDependencies, void *
# 1149
dst, const T &
# 1150
symbol, size_t 
# 1151
count, size_t 
# 1152
offset, cudaMemcpyKind 
# 1153
kind) 
# 1154
{ 
# 1155
return ::cudaGraphAddMemcpyNodeFromSymbol(pGraphNode, graph, pDependencies, numDependencies, dst, (const void *)(&symbol), count, offset, kind); 
# 1156
} 
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1195
cudaGraphMemcpyNodeSetParamsToSymbol(cudaGraphNode_t 
# 1196
node, const T &
# 1197
symbol, const void *
# 1198
src, size_t 
# 1199
count, size_t 
# 1200
offset, cudaMemcpyKind 
# 1201
kind) 
# 1202
{ 
# 1203
return ::cudaGraphMemcpyNodeSetParamsToSymbol(node, (const void *)(&symbol), src, count, offset, kind); 
# 1204
} 
# 1242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1243
cudaGraphMemcpyNodeSetParamsFromSymbol(cudaGraphNode_t 
# 1244
node, void *
# 1245
dst, const T &
# 1246
symbol, size_t 
# 1247
count, size_t 
# 1248
offset, cudaMemcpyKind 
# 1249
kind) 
# 1250
{ 
# 1251
return ::cudaGraphMemcpyNodeSetParamsFromSymbol(node, dst, (const void *)(&symbol), count, offset, kind); 
# 1252
} 
# 1300 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1301
cudaGraphExecMemcpyNodeSetParamsToSymbol(cudaGraphExec_t 
# 1302
hGraphExec, cudaGraphNode_t 
# 1303
node, const T &
# 1304
symbol, const void *
# 1305
src, size_t 
# 1306
count, size_t 
# 1307
offset, cudaMemcpyKind 
# 1308
kind) 
# 1309
{ 
# 1310
return ::cudaGraphExecMemcpyNodeSetParamsToSymbol(hGraphExec, node, (const void *)(&symbol), src, count, offset, kind); 
# 1311
} 
# 1359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1360
cudaGraphExecMemcpyNodeSetParamsFromSymbol(cudaGraphExec_t 
# 1361
hGraphExec, cudaGraphNode_t 
# 1362
node, void *
# 1363
dst, const T &
# 1364
symbol, size_t 
# 1365
count, size_t 
# 1366
offset, cudaMemcpyKind 
# 1367
kind) 
# 1368
{ 
# 1369
return ::cudaGraphExecMemcpyNodeSetParamsFromSymbol(hGraphExec, node, dst, (const void *)(&symbol), count, offset, kind); 
# 1370
} 
# 1373
static inline cudaError_t cudaGraphExecUpdate(cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphNode_t *hErrorNode_out, cudaGraphExecUpdateResult *updateResult_out) 
# 1374
{ 
# 1375
cudaGraphExecUpdateResultInfo resultInfo; 
# 1376
cudaError_t status = cudaGraphExecUpdate(hGraphExec, hGraph, &resultInfo); 
# 1377
if (hErrorNode_out) { 
# 1378
(*hErrorNode_out) = (resultInfo.errorNode); 
# 1379
}  
# 1380
if (updateResult_out) { 
# 1381
(*updateResult_out) = (resultInfo.result); 
# 1382
}  
# 1383
return status; 
# 1384
} 
# 1412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1413
cudaUserObjectCreate(cudaUserObject_t *
# 1414
object_out, T *
# 1415
objectToWrap, unsigned 
# 1416
initialRefcount, unsigned 
# 1417
flags) 
# 1418
{ 
# 1419
return ::cudaUserObjectCreate(object_out, objectToWrap, [](void *
# 1422
vpObj) { delete (reinterpret_cast< T *>(vpObj)); } , initialRefcount, flags); 
# 1425
} 
# 1427
template< class T> static inline cudaError_t 
# 1428
cudaUserObjectCreate(cudaUserObject_t *
# 1429
object_out, T *
# 1430
objectToWrap, unsigned 
# 1431
initialRefcount, cudaUserObjectFlags 
# 1432
flags) 
# 1433
{ 
# 1434
return cudaUserObjectCreate(object_out, objectToWrap, initialRefcount, (unsigned)flags); 
# 1435
} 
# 1462 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1463
cudaGetSymbolAddress(void **
# 1464
devPtr, const T &
# 1465
symbol) 
# 1467
{ 
# 1468
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
# 1469
} 
# 1494 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1495
cudaGetSymbolSize(size_t *
# 1496
size, const T &
# 1497
symbol) 
# 1499
{ 
# 1500
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
# 1501
} 
# 1546 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1547
cudaFuncSetCacheConfig(T *
# 1548
func, cudaFuncCache 
# 1549
cacheConfig) 
# 1551
{ 
# 1552
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
# 1553
} 
# 1555
template< class T> static inline cudaError_t 
# 1556
cudaFuncSetSharedMemConfig(T *
# 1557
func, cudaSharedMemConfig 
# 1558
config) 
# 1560
{ 
# 1561
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
# 1562
} 
# 1594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1595
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
# 1596
numBlocks, T 
# 1597
func, int 
# 1598
blockSize, size_t 
# 1599
dynamicSMemSize) 
# 1600
{ 
# 1601
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
# 1602
} 
# 1646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 1647
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
# 1648
numBlocks, T 
# 1649
func, int 
# 1650
blockSize, size_t 
# 1651
dynamicSMemSize, unsigned 
# 1652
flags) 
# 1653
{ 
# 1654
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
# 1655
} 
# 1660
class __cudaOccupancyB2DHelper { 
# 1661
size_t n; 
# 1663
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
# 1664
size_t operator()(int) 
# 1665
{ 
# 1666
return n; 
# 1667
} 
# 1668
}; 
# 1716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1717
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
# 1718
minGridSize, int *
# 1719
blockSize, T 
# 1720
func, UnaryFunction 
# 1721
blockSizeToDynamicSMemSize, int 
# 1722
blockSizeLimit = 0, unsigned 
# 1723
flags = 0) 
# 1724
{ 
# 1725
cudaError_t status; 
# 1728
int device; 
# 1729
cudaFuncAttributes attr; 
# 1732
int maxThreadsPerMultiProcessor; 
# 1733
int warpSize; 
# 1734
int devMaxThreadsPerBlock; 
# 1735
int multiProcessorCount; 
# 1736
int funcMaxThreadsPerBlock; 
# 1737
int occupancyLimit; 
# 1738
int granularity; 
# 1741
int maxBlockSize = 0; 
# 1742
int numBlocks = 0; 
# 1743
int maxOccupancy = 0; 
# 1746
int blockSizeToTryAligned; 
# 1747
int blockSizeToTry; 
# 1748
int blockSizeLimitAligned; 
# 1749
int occupancyInBlocks; 
# 1750
int occupancyInThreads; 
# 1751
size_t dynamicSMemSize; 
# 1757
if (((!minGridSize) || (!blockSize)) || (!func)) { 
# 1758
return cudaErrorInvalidValue; 
# 1759
}  
# 1765
status = ::cudaGetDevice(&device); 
# 1766
if (status != (cudaSuccess)) { 
# 1767
return status; 
# 1768
}  
# 1770
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
# 1774
if (status != (cudaSuccess)) { 
# 1775
return status; 
# 1776
}  
# 1778
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
# 1782
if (status != (cudaSuccess)) { 
# 1783
return status; 
# 1784
}  
# 1786
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
# 1790
if (status != (cudaSuccess)) { 
# 1791
return status; 
# 1792
}  
# 1794
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
# 1798
if (status != (cudaSuccess)) { 
# 1799
return status; 
# 1800
}  
# 1802
status = cudaFuncGetAttributes(&attr, func); 
# 1803
if (status != (cudaSuccess)) { 
# 1804
return status; 
# 1805
}  
# 1807
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
# 1813
occupancyLimit = maxThreadsPerMultiProcessor; 
# 1814
granularity = warpSize; 
# 1816
if (blockSizeLimit == 0) { 
# 1817
blockSizeLimit = devMaxThreadsPerBlock; 
# 1818
}  
# 1820
if (devMaxThreadsPerBlock < blockSizeLimit) { 
# 1821
blockSizeLimit = devMaxThreadsPerBlock; 
# 1822
}  
# 1824
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
# 1825
blockSizeLimit = funcMaxThreadsPerBlock; 
# 1826
}  
# 1828
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
# 1830
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
# 1834
if (blockSizeLimit < blockSizeToTryAligned) { 
# 1835
blockSizeToTry = blockSizeLimit; 
# 1836
} else { 
# 1837
blockSizeToTry = blockSizeToTryAligned; 
# 1838
}  
# 1840
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
# 1842
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
# 1849
if (status != (cudaSuccess)) { 
# 1850
return status; 
# 1851
}  
# 1853
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
# 1855
if (occupancyInThreads > maxOccupancy) { 
# 1856
maxBlockSize = blockSizeToTry; 
# 1857
numBlocks = occupancyInBlocks; 
# 1858
maxOccupancy = occupancyInThreads; 
# 1859
}  
# 1863
if (occupancyLimit == maxOccupancy) { 
# 1864
break; 
# 1865
}  
# 1866
}  
# 1874
(*minGridSize) = (numBlocks * multiProcessorCount); 
# 1875
(*blockSize) = maxBlockSize; 
# 1877
return status; 
# 1878
} 
# 1912 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class UnaryFunction, class T> static inline cudaError_t 
# 1913
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
# 1914
minGridSize, int *
# 1915
blockSize, T 
# 1916
func, UnaryFunction 
# 1917
blockSizeToDynamicSMemSize, int 
# 1918
blockSizeLimit = 0) 
# 1919
{ 
# 1920
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
# 1921
} 
# 1958 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1959
cudaOccupancyMaxPotentialBlockSize(int *
# 1960
minGridSize, int *
# 1961
blockSize, T 
# 1962
func, size_t 
# 1963
dynamicSMemSize = 0, int 
# 1964
blockSizeLimit = 0) 
# 1965
{ 
# 1966
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
# 1967
} 
# 1996 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 1997
cudaOccupancyAvailableDynamicSMemPerBlock(size_t *
# 1998
dynamicSmemSize, T 
# 1999
func, int 
# 2000
numBlocks, int 
# 2001
blockSize) 
# 2002
{ 
# 2003
return ::cudaOccupancyAvailableDynamicSMemPerBlock(dynamicSmemSize, (const void *)func, numBlocks, blockSize); 
# 2004
} 
# 2055 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2056
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
# 2057
minGridSize, int *
# 2058
blockSize, T 
# 2059
func, size_t 
# 2060
dynamicSMemSize = 0, int 
# 2061
blockSizeLimit = 0, unsigned 
# 2062
flags = 0) 
# 2063
{ 
# 2064
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
# 2065
} 
# 2099 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2100
cudaOccupancyMaxPotentialClusterSize(int *
# 2101
clusterSize, T *
# 2102
func, const cudaLaunchConfig_t *
# 2103
config) 
# 2104
{ 
# 2105
return ::cudaOccupancyMaxPotentialClusterSize(clusterSize, (const void *)func, config); 
# 2106
} 
# 2142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2143
cudaOccupancyMaxActiveClusters(int *
# 2144
numClusters, T *
# 2145
func, const cudaLaunchConfig_t *
# 2146
config) 
# 2147
{ 
# 2148
return ::cudaOccupancyMaxActiveClusters(numClusters, (const void *)func, config); 
# 2149
} 
# 2182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> inline cudaError_t 
# 2183
cudaFuncGetAttributes(cudaFuncAttributes *
# 2184
attr, T *
# 2185
entry) 
# 2187
{ 
# 2188
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
# 2189
} 
# 2244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2245
cudaFuncSetAttribute(T *
# 2246
entry, cudaFuncAttribute 
# 2247
attr, int 
# 2248
value) 
# 2250
{ 
# 2251
return ::cudaFuncSetAttribute((const void *)entry, attr, value); 
# 2252
} 
# 2268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
template< class T> static inline cudaError_t 
# 2269
cudaGetKernel(cudaKernel_t *
# 2270
kernelPtr, const T *
# 2271
entryFuncAddr) 
# 2273
{ 
# 2274
return ::cudaGetKernel(kernelPtr, (const void *)entryFuncAddr); 
# 2275
} 
# 2286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_runtime.h"
#pragma GCC diagnostic pop
# 29 "/usr/include/stdio.h" 3
extern "C" {
# 40 "/usr/lib/gcc/x86_64-linux-gnu/11/include/stdarg.h" 3
typedef __builtin_va_list __gnuc_va_list; 
# 21 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3
typedef 
# 14
struct { 
# 15
int __count; 
# 17
union { 
# 18
unsigned __wch; 
# 19
char __wchb[4]; 
# 20
} __value; 
# 21
} __mbstate_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 3
typedef 
# 10
struct _G_fpos_t { 
# 12
__off_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos_t; 
# 14 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3
typedef 
# 10
struct _G_fpos64_t { 
# 12
__off64_t __pos; 
# 13
__mbstate_t __state; 
# 14
} __fpos64_t; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 3
struct _IO_FILE; 
# 5
typedef _IO_FILE __FILE; 
# 4 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 3
struct _IO_FILE; 
# 7
typedef _IO_FILE FILE; 
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3
struct _IO_FILE; 
# 36
struct _IO_marker; 
# 37
struct _IO_codecvt; 
# 38
struct _IO_wide_data; 
# 43
typedef void _IO_lock_t; 
# 49
struct _IO_FILE { 
# 51
int _flags; 
# 54
char *_IO_read_ptr; 
# 55
char *_IO_read_end; 
# 56
char *_IO_read_base; 
# 57
char *_IO_write_base; 
# 58
char *_IO_write_ptr; 
# 59
char *_IO_write_end; 
# 60
char *_IO_buf_base; 
# 61
char *_IO_buf_end; 
# 64
char *_IO_save_base; 
# 65
char *_IO_backup_base; 
# 66
char *_IO_save_end; 
# 68
_IO_marker *_markers; 
# 70
_IO_FILE *_chain; 
# 72
int _fileno; 
# 73
int _flags2; 
# 74
__off_t _old_offset; 
# 77
unsigned short _cur_column; 
# 78
signed char _vtable_offset; 
# 79
char _shortbuf[1]; 
# 81
_IO_lock_t *_lock; 
# 89
__off64_t _offset; 
# 91
_IO_codecvt *_codecvt; 
# 92
_IO_wide_data *_wide_data; 
# 93
_IO_FILE *_freeres_list; 
# 94
void *_freeres_buf; 
# 95
size_t __pad5; 
# 96
int _mode; 
# 98
char _unused2[(((15) * sizeof(int)) - ((4) * sizeof(void *))) - sizeof(size_t)]; 
# 99
}; 
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3
typedef __ssize_t cookie_read_function_t(void * __cookie, char * __buf, size_t __nbytes); 
# 36
typedef __ssize_t cookie_write_function_t(void * __cookie, const char * __buf, size_t __nbytes); 
# 45
typedef int cookie_seek_function_t(void * __cookie, __off64_t * __pos, int __w); 
# 48
typedef int cookie_close_function_t(void * __cookie); 
# 61
typedef 
# 55
struct _IO_cookie_io_functions_t { 
# 57
cookie_read_function_t *read; 
# 58
cookie_write_function_t *write; 
# 59
cookie_seek_function_t *seek; 
# 60
cookie_close_function_t *close; 
# 61
} cookie_io_functions_t; 
# 52 "/usr/include/stdio.h" 3
typedef __gnuc_va_list va_list; 
# 84 "/usr/include/stdio.h" 3
typedef __fpos_t fpos_t; 
# 89
typedef __fpos64_t fpos64_t; 
# 143 "/usr/include/stdio.h" 3
extern FILE *stdin; 
# 144
extern FILE *stdout; 
# 145
extern FILE *stderr; 
# 152
extern int remove(const char * __filename) noexcept(true); 
# 154
extern int rename(const char * __old, const char * __new) noexcept(true); 
# 158
extern int renameat(int __oldfd, const char * __old, int __newfd, const char * __new) noexcept(true); 
# 170 "/usr/include/stdio.h" 3
extern int renameat2(int __oldfd, const char * __old, int __newfd, const char * __new, unsigned __flags) noexcept(true); 
# 178
extern int fclose(FILE * __stream); 
# 188 "/usr/include/stdio.h" 3
extern FILE *tmpfile()
# 189
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 200 "/usr/include/stdio.h" 3
extern FILE *tmpfile64()
# 201
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 205
extern char *tmpnam(char [20]) noexcept(true); 
# 210
extern char *tmpnam_r(char  __s[20]) noexcept(true); 
# 222 "/usr/include/stdio.h" 3
extern char *tempnam(const char * __dir, const char * __pfx) noexcept(true)
# 223
 __attribute((__malloc__)) __attribute((__malloc__(__builtin_free, 1))); 
# 230
extern int fflush(FILE * __stream); 
# 239 "/usr/include/stdio.h" 3
extern int fflush_unlocked(FILE * __stream); 
# 249 "/usr/include/stdio.h" 3
extern int fcloseall(); 
# 258 "/usr/include/stdio.h" 3
extern FILE *fopen(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 260
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 265
extern FILE *freopen(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 283 "/usr/include/stdio.h" 3
extern FILE *fopen64(const char *__restrict__ __filename, const char *__restrict__ __modes)
# 285
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 286
extern FILE *freopen64(const char *__restrict__ __filename, const char *__restrict__ __modes, FILE *__restrict__ __stream); 
# 293
extern FILE *fdopen(int __fd, const char * __modes) noexcept(true)
# 294
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 300
extern FILE *fopencookie(void *__restrict__ __magic_cookie, const char *__restrict__ __modes, cookie_io_functions_t __io_funcs) noexcept(true)
# 303
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 308
extern FILE *fmemopen(void * __s, size_t __len, const char * __modes) noexcept(true)
# 309
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 314
extern FILE *open_memstream(char ** __bufloc, size_t * __sizeloc) noexcept(true)
# 315
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 328 "/usr/include/stdio.h" 3
extern void setbuf(FILE *__restrict__ __stream, char *__restrict__ __buf) noexcept(true); 
# 332
extern int setvbuf(FILE *__restrict__ __stream, char *__restrict__ __buf, int __modes, size_t __n) noexcept(true); 
# 338
extern void setbuffer(FILE *__restrict__ __stream, char *__restrict__ __buf, size_t __size) noexcept(true); 
# 342
extern void setlinebuf(FILE * __stream) noexcept(true); 
# 350
extern int fprintf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...); 
# 356
extern int printf(const char *__restrict__ __format, ...); 
# 358
extern int sprintf(char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true); 
# 365
extern int vfprintf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg); 
# 371
extern int vprintf(const char *__restrict__ __format, __gnuc_va_list __arg); 
# 373
extern int vsprintf(char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true); 
# 378
extern int snprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, ...) noexcept(true)
# 380
 __attribute((__format__(__printf__, 3, 4))); 
# 382
extern int vsnprintf(char *__restrict__ __s, size_t __maxlen, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true)
# 384
 __attribute((__format__(__printf__, 3, 0))); 
# 390
extern int vasprintf(char **__restrict__ __ptr, const char *__restrict__ __f, __gnuc_va_list __arg) noexcept(true)
# 392
 __attribute((__format__(__printf__, 2, 0))); 
# 393
extern int __asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) noexcept(true)
# 395
 __attribute((__format__(__printf__, 2, 3))); 
# 396
extern int asprintf(char **__restrict__ __ptr, const char *__restrict__ __fmt, ...) noexcept(true)
# 398
 __attribute((__format__(__printf__, 2, 3))); 
# 403
extern int vdprintf(int __fd, const char *__restrict__ __fmt, __gnuc_va_list __arg)
# 405
 __attribute((__format__(__printf__, 2, 0))); 
# 406
extern int dprintf(int __fd, const char *__restrict__ __fmt, ...)
# 407
 __attribute((__format__(__printf__, 2, 3))); 
# 415
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 421
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 423
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_sscanf"); 
# 434 "/usr/include/stdio.h" 3
extern int fscanf(FILE *__restrict__ __stream, const char *__restrict__ __format, ...) __asm__("__isoc99_fscanf"); 
# 437
extern int scanf(const char *__restrict__ __format, ...) __asm__("__isoc99_scanf"); 
# 439
extern int sscanf(const char *__restrict__ __s, const char *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_sscanf"); 
# 459 "/usr/include/stdio.h" 3
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 461
 __attribute((__format__(__scanf__, 2, 0))); 
# 467
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 468
 __attribute((__format__(__scanf__, 1, 0))); 
# 471
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vsscanf")
# 473
 __attribute((__format__(__scanf__, 2, 0))); 
# 479
extern int vfscanf(FILE *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfscanf")
# 483
 __attribute((__format__(__scanf__, 2, 0))); 
# 484
extern int vscanf(const char *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vscanf")
# 486
 __attribute((__format__(__scanf__, 1, 0))); 
# 487
extern int vsscanf(const char *__restrict__ __s, const char *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vsscanf")
# 491
 __attribute((__format__(__scanf__, 2, 0))); 
# 513 "/usr/include/stdio.h" 3
extern int fgetc(FILE * __stream); 
# 514
extern int getc(FILE * __stream); 
# 520
extern int getchar(); 
# 527
extern int getc_unlocked(FILE * __stream); 
# 528
extern int getchar_unlocked(); 
# 538 "/usr/include/stdio.h" 3
extern int fgetc_unlocked(FILE * __stream); 
# 549 "/usr/include/stdio.h" 3
extern int fputc(int __c, FILE * __stream); 
# 550
extern int putc(int __c, FILE * __stream); 
# 556
extern int putchar(int __c); 
# 565 "/usr/include/stdio.h" 3
extern int fputc_unlocked(int __c, FILE * __stream); 
# 573
extern int putc_unlocked(int __c, FILE * __stream); 
# 574
extern int putchar_unlocked(int __c); 
# 581
extern int getw(FILE * __stream); 
# 584
extern int putw(int __w, FILE * __stream); 
# 592
extern char *fgets(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 593
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 615 "/usr/include/stdio.h" 3
extern char *fgets_unlocked(char *__restrict__ __s, int __n, FILE *__restrict__ __stream)
# 617
 __attribute((__access__(__write_only__ , 1 , 2 ))); 
# 632 "/usr/include/stdio.h" 3
extern __ssize_t __getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 635
extern __ssize_t getdelim(char **__restrict__ __lineptr, size_t *__restrict__ __n, int __delimiter, FILE *__restrict__ __stream); 
# 645
extern __ssize_t getline(char **__restrict__ __lineptr, size_t *__restrict__ __n, FILE *__restrict__ __stream); 
# 655
extern int fputs(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 661
extern int puts(const char * __s); 
# 668
extern int ungetc(int __c, FILE * __stream); 
# 675
extern size_t fread(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 681
extern size_t fwrite(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __s); 
# 691 "/usr/include/stdio.h" 3
extern int fputs_unlocked(const char *__restrict__ __s, FILE *__restrict__ __stream); 
# 702 "/usr/include/stdio.h" 3
extern size_t fread_unlocked(void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 704
extern size_t fwrite_unlocked(const void *__restrict__ __ptr, size_t __size, size_t __n, FILE *__restrict__ __stream); 
# 713
extern int fseek(FILE * __stream, long __off, int __whence); 
# 718
extern long ftell(FILE * __stream); 
# 723
extern void rewind(FILE * __stream); 
# 736 "/usr/include/stdio.h" 3
extern int fseeko(FILE * __stream, __off_t __off, int __whence); 
# 741
extern __off_t ftello(FILE * __stream); 
# 760 "/usr/include/stdio.h" 3
extern int fgetpos(FILE *__restrict__ __stream, fpos_t *__restrict__ __pos); 
# 765
extern int fsetpos(FILE * __stream, const fpos_t * __pos); 
# 779 "/usr/include/stdio.h" 3
extern int fseeko64(FILE * __stream, __off64_t __off, int __whence); 
# 780
extern __off64_t ftello64(FILE * __stream); 
# 781
extern int fgetpos64(FILE *__restrict__ __stream, fpos64_t *__restrict__ __pos); 
# 782
extern int fsetpos64(FILE * __stream, const fpos64_t * __pos); 
# 786
extern void clearerr(FILE * __stream) noexcept(true); 
# 788
extern int feof(FILE * __stream) noexcept(true); 
# 790
extern int ferror(FILE * __stream) noexcept(true); 
# 794
extern void clearerr_unlocked(FILE * __stream) noexcept(true); 
# 795
extern int feof_unlocked(FILE * __stream) noexcept(true); 
# 796
extern int ferror_unlocked(FILE * __stream) noexcept(true); 
# 804
extern void perror(const char * __s); 
# 809
extern int fileno(FILE * __stream) noexcept(true); 
# 814
extern int fileno_unlocked(FILE * __stream) noexcept(true); 
# 823 "/usr/include/stdio.h" 3
extern int pclose(FILE * __stream); 
# 829
extern FILE *popen(const char * __command, const char * __modes)
# 830
 __attribute((__malloc__)) __attribute((__malloc__(pclose, 1))); 
# 837
extern char *ctermid(char * __s) noexcept(true)
# 838
 __attribute((__access__(__write_only__ , 1 ))); 
# 844
extern char *cuserid(char * __s)
# 845
 __attribute((__access__(__write_only__ , 1 ))); 
# 850
struct obstack; 
# 853
extern int obstack_printf(obstack *__restrict__ __obstack, const char *__restrict__ __format, ...) noexcept(true)
# 855
 __attribute((__format__(__printf__, 2, 3))); 
# 856
extern int obstack_vprintf(obstack *__restrict__ __obstack, const char *__restrict__ __format, __gnuc_va_list __args) noexcept(true)
# 859
 __attribute((__format__(__printf__, 2, 0))); 
# 867
extern void flockfile(FILE * __stream) noexcept(true); 
# 871
extern int ftrylockfile(FILE * __stream) noexcept(true); 
# 874
extern void funlockfile(FILE * __stream) noexcept(true); 
# 885 "/usr/include/stdio.h" 3
extern int __uflow(FILE *); 
# 886
extern int __overflow(FILE *, int); 
# 902 "/usr/include/stdio.h" 3
}
# 96 "/usr/include/c++/11/cstdio" 3
namespace std { 
# 98
using ::FILE;
# 99
using ::fpos_t;
# 101
using ::clearerr;
# 102
using ::fclose;
# 103
using ::feof;
# 104
using ::ferror;
# 105
using ::fflush;
# 106
using ::fgetc;
# 107
using ::fgetpos;
# 108
using ::fgets;
# 109
using ::fopen;
# 110
using ::fprintf;
# 111
using ::fputc;
# 112
using ::fputs;
# 113
using ::fread;
# 114
using ::freopen;
# 115
using ::fscanf;
# 116
using ::fseek;
# 117
using ::fsetpos;
# 118
using ::ftell;
# 119
using ::fwrite;
# 120
using ::getc;
# 121
using ::getchar;
# 126
using ::perror;
# 127
using ::printf;
# 128
using ::putc;
# 129
using ::putchar;
# 130
using ::puts;
# 131
using ::remove;
# 132
using ::rename;
# 133
using ::rewind;
# 134
using ::scanf;
# 135
using ::setbuf;
# 136
using ::setvbuf;
# 137
using ::sprintf;
# 138
using ::sscanf;
# 139
using ::tmpfile;
# 141
using ::tmpnam;
# 143
using ::ungetc;
# 144
using ::vfprintf;
# 145
using ::vprintf;
# 146
using ::vsprintf;
# 147
}
# 157 "/usr/include/c++/11/cstdio" 3
namespace __gnu_cxx { 
# 175 "/usr/include/c++/11/cstdio" 3
using ::snprintf;
# 176
using ::vfscanf;
# 177
using ::vscanf;
# 178
using ::vsnprintf;
# 179
using ::vsscanf;
# 181
}
# 183
namespace std { 
# 185
using __gnu_cxx::snprintf;
# 186
using __gnu_cxx::vfscanf;
# 187
using __gnu_cxx::vscanf;
# 188
using __gnu_cxx::vsnprintf;
# 189
using __gnu_cxx::vsscanf;
# 190
}
# 71 "/usr/include/c++/11/cstring" 3
extern "C++" {
# 73
namespace std __attribute((__visibility__("default"))) { 
# 77
using ::memchr;
# 78
using ::memcmp;
# 79
using ::memcpy;
# 80
using ::memmove;
# 81
using ::memset;
# 82
using ::strcat;
# 83
using ::strcmp;
# 84
using ::strcoll;
# 85
using ::strcpy;
# 86
using ::strcspn;
# 87
using ::strerror;
# 88
using ::strlen;
# 89
using ::strncat;
# 90
using ::strncmp;
# 91
using ::strncpy;
# 92
using ::strspn;
# 93
using ::strtok;
# 94
using ::strxfrm;
# 95
using ::strchr;
# 96
using ::strpbrk;
# 97
using ::strrchr;
# 98
using ::strstr;
# 123 "/usr/include/c++/11/cstring" 3
}
# 124
}
# 19 "../Common.cuh"
void vecAdd(float *A, float *B, float *C) ;
#if 0
# 19
{ 
# 20
int idx = __device_builtin_variable_threadIdx.x; 
# 21
(C[idx]) = ((A[idx]) + (B[idx])); 
# 22
} 
#endif
# 24 "../Common.cuh"
void warmup() { 
# 25
printf("warmup begin\n"); 
# 26
constexpr size_t nBytes = ((32) * sizeof(float)); 
# 27
float *h_A = (float *)malloc(nBytes); 
# 28
float *h_B = (float *)malloc(nBytes); 
# 29
memset(h_A, 0, nBytes); 
# 30
memset(h_B, 0, nBytes); 
# 31
float *d_A, *d_B, *d_C; 
# 32
{ const cudaError_t error = cudaMalloc(&d_A, nBytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 32); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 33
{ const cudaError_t error = cudaMalloc(&d_B, nBytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 33); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 34
{ const cudaError_t error = cudaMalloc(&d_C, nBytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 34); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 35
{ const cudaError_t error = cudaMemcpy(d_A, h_A, nBytes, cudaMemcpyHostToDevice); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 35); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 36
{ const cudaError_t error = cudaMemcpy(d_B, h_B, nBytes, cudaMemcpyHostToDevice); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 36); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 38
(__cudaPushCallConfiguration(1, 32)) ? (void)0 : vecAdd(d_A, d_B, d_C); 
# 39
cudaDeviceSynchronize(); 
# 41
{ const cudaError_t error = cudaFree(d_A); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 41); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 42
{ const cudaError_t error = cudaFree(d_B); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 42); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 43
{ const cudaError_t error = cudaFree(d_C); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "../Common.cuh", 43); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 44
free(h_A); 
# 45
free(h_B); 
# 46
printf("warmup end\n"); 
# 47
} 
# 50 "/usr/include/c++/11/bits/memoryfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 63 "/usr/include/c++/11/bits/memoryfwd.h" 3
template< class > class allocator; 
# 67
template<> class allocator< void> ; 
# 71
template< class , class > struct uses_allocator; 
# 74
template< class > struct allocator_traits; 
# 81
}
# 42 "/usr/include/c++/11/bits/stringfwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT> struct char_traits; 
# 55
template<> struct char_traits< char> ; 
# 58
template<> struct char_traits< wchar_t> ; 
# 66
template<> struct char_traits< char16_t> ; 
# 67
template<> struct char_traits< char32_t> ; 
# 70
inline namespace __cxx11 { 
# 72
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 73
_Alloc = allocator< _CharT> > class basic_string; 
# 76
}
# 79
typedef __cxx11::basic_string< char>  string; 
# 83
typedef __cxx11::basic_string< wchar_t>  wstring; 
# 93 "/usr/include/c++/11/bits/stringfwd.h" 3
typedef __cxx11::basic_string< char16_t>  u16string; 
# 96
typedef __cxx11::basic_string< char32_t>  u32string; 
# 102
}
# 20 "/usr/include/x86_64-linux-gnu/bits/types/wint_t.h" 3
typedef unsigned wint_t; 
# 6 "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h" 3
typedef __mbstate_t mbstate_t; 
# 79 "/usr/include/wchar.h" 3
extern "C" {
# 83
struct tm; 
# 87
extern wchar_t *wcscpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) noexcept(true)
# 89
 __attribute((__nonnull__(1, 2))); 
# 92
extern wchar_t *wcsncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) noexcept(true)
# 94
 __attribute((__nonnull__(1, 2))); 
# 97
extern wchar_t *wcscat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) noexcept(true)
# 99
 __attribute((__nonnull__(1, 2))); 
# 101
extern wchar_t *wcsncat(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) noexcept(true)
# 103
 __attribute((__nonnull__(1, 2))); 
# 106
extern int wcscmp(const wchar_t * __s1, const wchar_t * __s2) noexcept(true)
# 107
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 109
extern int wcsncmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) noexcept(true)
# 110
 __attribute((__pure__)) __attribute((__nonnull__(1, 2))); 
# 114
extern int wcscasecmp(const wchar_t * __s1, const wchar_t * __s2) noexcept(true); 
# 117
extern int wcsncasecmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) noexcept(true); 
# 122
extern int wcscasecmp_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) noexcept(true); 
# 125
extern int wcsncasecmp_l(const wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) noexcept(true); 
# 131
extern int wcscoll(const wchar_t * __s1, const wchar_t * __s2) noexcept(true); 
# 135
extern size_t wcsxfrm(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) noexcept(true); 
# 144
extern int wcscoll_l(const wchar_t * __s1, const wchar_t * __s2, locale_t __loc) noexcept(true); 
# 150
extern size_t wcsxfrm_l(wchar_t * __s1, const wchar_t * __s2, size_t __n, locale_t __loc) noexcept(true); 
# 154
extern wchar_t *wcsdup(const wchar_t * __s) noexcept(true)
# 155
 __attribute((__malloc__)) __attribute((__malloc__(__builtin_free, 1))); 
# 160
extern "C++" wchar_t *wcschr(wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcschr")
# 161
 __attribute((__pure__)); 
# 162
extern "C++" const wchar_t *wcschr(const wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcschr")
# 163
 __attribute((__pure__)); 
# 170
extern "C++" wchar_t *wcsrchr(wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcsrchr")
# 171
 __attribute((__pure__)); 
# 172
extern "C++" const wchar_t *wcsrchr(const wchar_t * __wcs, wchar_t __wc) noexcept(true) __asm__("wcsrchr")
# 173
 __attribute((__pure__)); 
# 182 "/usr/include/wchar.h" 3
extern wchar_t *wcschrnul(const wchar_t * __s, wchar_t __wc) noexcept(true)
# 183
 __attribute((__pure__)); 
# 188
extern size_t wcscspn(const wchar_t * __wcs, const wchar_t * __reject) noexcept(true)
# 189
 __attribute((__pure__)); 
# 192
extern size_t wcsspn(const wchar_t * __wcs, const wchar_t * __accept) noexcept(true)
# 193
 __attribute((__pure__)); 
# 196
extern "C++" wchar_t *wcspbrk(wchar_t * __wcs, const wchar_t * __accept) noexcept(true) __asm__("wcspbrk")
# 197
 __attribute((__pure__)); 
# 198
extern "C++" const wchar_t *wcspbrk(const wchar_t * __wcs, const wchar_t * __accept) noexcept(true) __asm__("wcspbrk")
# 200
 __attribute((__pure__)); 
# 207
extern "C++" wchar_t *wcsstr(wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcsstr")
# 208
 __attribute((__pure__)); 
# 209
extern "C++" const wchar_t *wcsstr(const wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcsstr")
# 211
 __attribute((__pure__)); 
# 218
extern wchar_t *wcstok(wchar_t *__restrict__ __s, const wchar_t *__restrict__ __delim, wchar_t **__restrict__ __ptr) noexcept(true); 
# 223
extern size_t wcslen(const wchar_t * __s) noexcept(true) __attribute((__pure__)); 
# 228
extern "C++" wchar_t *wcswcs(wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcswcs")
# 229
 __attribute((__pure__)); 
# 230
extern "C++" const wchar_t *wcswcs(const wchar_t * __haystack, const wchar_t * __needle) noexcept(true) __asm__("wcswcs")
# 232
 __attribute((__pure__)); 
# 241 "/usr/include/wchar.h" 3
extern size_t wcsnlen(const wchar_t * __s, size_t __maxlen) noexcept(true)
# 242
 __attribute((__pure__)); 
# 248
extern "C++" wchar_t *wmemchr(wchar_t * __s, wchar_t __c, size_t __n) noexcept(true) __asm__("wmemchr")
# 249
 __attribute((__pure__)); 
# 250
extern "C++" const wchar_t *wmemchr(const wchar_t * __s, wchar_t __c, size_t __n) noexcept(true) __asm__("wmemchr")
# 252
 __attribute((__pure__)); 
# 259
extern int wmemcmp(const wchar_t * __s1, const wchar_t * __s2, size_t __n) noexcept(true)
# 260
 __attribute((__pure__)); 
# 263
extern wchar_t *wmemcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) noexcept(true); 
# 268
extern wchar_t *wmemmove(wchar_t * __s1, const wchar_t * __s2, size_t __n) noexcept(true); 
# 272
extern wchar_t *wmemset(wchar_t * __s, wchar_t __c, size_t __n) noexcept(true); 
# 277
extern wchar_t *wmempcpy(wchar_t *__restrict__ __s1, const wchar_t *__restrict__ __s2, size_t __n) noexcept(true); 
# 285
extern wint_t btowc(int __c) noexcept(true); 
# 289
extern int wctob(wint_t __c) noexcept(true); 
# 293
extern int mbsinit(const mbstate_t * __ps) noexcept(true) __attribute((__pure__)); 
# 297
extern size_t mbrtowc(wchar_t *__restrict__ __pwc, const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __p) noexcept(true); 
# 302
extern size_t wcrtomb(char *__restrict__ __s, wchar_t __wc, mbstate_t *__restrict__ __ps) noexcept(true); 
# 306
extern size_t __mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) noexcept(true); 
# 308
extern size_t mbrlen(const char *__restrict__ __s, size_t __n, mbstate_t *__restrict__ __ps) noexcept(true); 
# 338 "/usr/include/wchar.h" 3
extern size_t mbsrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 344
extern size_t wcsrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 352
extern size_t mbsnrtowcs(wchar_t *__restrict__ __dst, const char **__restrict__ __src, size_t __nmc, size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 358
extern size_t wcsnrtombs(char *__restrict__ __dst, const wchar_t **__restrict__ __src, size_t __nwc, size_t __len, mbstate_t *__restrict__ __ps) noexcept(true); 
# 368
extern int wcwidth(wchar_t __c) noexcept(true); 
# 372
extern int wcswidth(const wchar_t * __s, size_t __n) noexcept(true); 
# 378
extern double wcstod(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 383
extern float wcstof(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 385
extern long double wcstold(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 397 "/usr/include/wchar.h" 3
extern _Float32 wcstof32(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 402
extern _Float64 wcstof64(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 407
extern _Float128 wcstof128(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 412
extern _Float32x wcstof32x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 417
extern _Float64x wcstof64x(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr) noexcept(true); 
# 429 "/usr/include/wchar.h" 3
extern long wcstol(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 434
extern unsigned long wcstoul(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 442
__extension__ extern long long wcstoll(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 449
__extension__ extern unsigned long long wcstoull(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 458
__extension__ extern long long wcstoq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 465
__extension__ extern unsigned long long wcstouq(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base) noexcept(true); 
# 474
extern long wcstol_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 478
extern unsigned long wcstoul_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 483
__extension__ extern long long wcstoll_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 488
__extension__ extern unsigned long long wcstoull_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, int __base, locale_t __loc) noexcept(true); 
# 493
extern double wcstod_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 497
extern float wcstof_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 501
extern long double wcstold_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 512 "/usr/include/wchar.h" 3
extern _Float32 wcstof32_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 518
extern _Float64 wcstof64_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 524
extern _Float128 wcstof128_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 530
extern _Float32x wcstof32x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 536
extern _Float64x wcstof64x_l(const wchar_t *__restrict__ __nptr, wchar_t **__restrict__ __endptr, locale_t __loc) noexcept(true); 
# 552 "/usr/include/wchar.h" 3
extern wchar_t *wcpcpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src) noexcept(true); 
# 557
extern wchar_t *wcpncpy(wchar_t *__restrict__ __dest, const wchar_t *__restrict__ __src, size_t __n) noexcept(true); 
# 581 "/usr/include/wchar.h" 3
extern __FILE *open_wmemstream(wchar_t ** __bufloc, size_t * __sizeloc) noexcept(true)
# 582
 __attribute((__malloc__)) __attribute((__malloc__(fclose, 1))); 
# 588
extern int fwide(__FILE * __fp, int __mode) noexcept(true); 
# 595
extern int fwprintf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...); 
# 602
extern int wprintf(const wchar_t *__restrict__ __format, ...); 
# 605
extern int swprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, ...) noexcept(true); 
# 613
extern int vfwprintf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 621
extern int vwprintf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg); 
# 626
extern int vswprintf(wchar_t *__restrict__ __s, size_t __n, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) noexcept(true); 
# 636
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 643
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 646
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_swscanf"); 
# 657 "/usr/include/wchar.h" 3
extern int fwscanf(__FILE *__restrict__ __stream, const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_fwscanf"); 
# 661
extern int wscanf(const wchar_t *__restrict__ __format, ...) __asm__("__isoc99_wscanf"); 
# 664
extern int swscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, ...) noexcept(true) __asm__("__isoc99_swscanf"); 
# 688 "/usr/include/wchar.h" 3
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 696
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 700
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vswscanf"); 
# 711
extern int vfwscanf(__FILE *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vfwscanf"); 
# 715
extern int vwscanf(const wchar_t *__restrict__ __format, __gnuc_va_list __arg) __asm__("__isoc99_vwscanf"); 
# 718
extern int vswscanf(const wchar_t *__restrict__ __s, const wchar_t *__restrict__ __format, __gnuc_va_list __arg) noexcept(true) __asm__("__isoc99_vswscanf"); 
# 744 "/usr/include/wchar.h" 3
extern wint_t fgetwc(__FILE * __stream); 
# 745
extern wint_t getwc(__FILE * __stream); 
# 751
extern wint_t getwchar(); 
# 758
extern wint_t fputwc(wchar_t __wc, __FILE * __stream); 
# 759
extern wint_t putwc(wchar_t __wc, __FILE * __stream); 
# 765
extern wint_t putwchar(wchar_t __wc); 
# 773
extern wchar_t *fgetws(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 780
extern int fputws(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 788
extern wint_t ungetwc(wint_t __wc, __FILE * __stream); 
# 799 "/usr/include/wchar.h" 3
extern wint_t getwc_unlocked(__FILE * __stream); 
# 800
extern wint_t getwchar_unlocked(); 
# 808
extern wint_t fgetwc_unlocked(__FILE * __stream); 
# 816
extern wint_t fputwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 825 "/usr/include/wchar.h" 3
extern wint_t putwc_unlocked(wchar_t __wc, __FILE * __stream); 
# 826
extern wint_t putwchar_unlocked(wchar_t __wc); 
# 835 "/usr/include/wchar.h" 3
extern wchar_t *fgetws_unlocked(wchar_t *__restrict__ __ws, int __n, __FILE *__restrict__ __stream); 
# 844
extern int fputws_unlocked(const wchar_t *__restrict__ __ws, __FILE *__restrict__ __stream); 
# 852
extern size_t wcsftime(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp) noexcept(true); 
# 859
extern size_t wcsftime_l(wchar_t *__restrict__ __s, size_t __maxsize, const wchar_t *__restrict__ __format, const tm *__restrict__ __tp, locale_t __loc) noexcept(true); 
# 875 "/usr/include/wchar.h" 3
}
# 62 "/usr/include/c++/11/cwchar" 3
namespace std { 
# 64
using ::mbstate_t;
# 65
}
# 135 "/usr/include/c++/11/cwchar" 3
extern "C++" {
# 137
namespace std __attribute((__visibility__("default"))) { 
# 141
using ::wint_t;
# 143
using ::btowc;
# 144
using ::fgetwc;
# 145
using ::fgetws;
# 146
using ::fputwc;
# 147
using ::fputws;
# 148
using ::fwide;
# 149
using ::fwprintf;
# 150
using ::fwscanf;
# 151
using ::getwc;
# 152
using ::getwchar;
# 153
using ::mbrlen;
# 154
using ::mbrtowc;
# 155
using ::mbsinit;
# 156
using ::mbsrtowcs;
# 157
using ::putwc;
# 158
using ::putwchar;
# 160
using ::swprintf;
# 162
using ::swscanf;
# 163
using ::ungetwc;
# 164
using ::vfwprintf;
# 166
using ::vfwscanf;
# 169
using ::vswprintf;
# 172
using ::vswscanf;
# 174
using ::vwprintf;
# 176
using ::vwscanf;
# 178
using ::wcrtomb;
# 179
using ::wcscat;
# 180
using ::wcscmp;
# 181
using ::wcscoll;
# 182
using ::wcscpy;
# 183
using ::wcscspn;
# 184
using ::wcsftime;
# 185
using ::wcslen;
# 186
using ::wcsncat;
# 187
using ::wcsncmp;
# 188
using ::wcsncpy;
# 189
using ::wcsrtombs;
# 190
using ::wcsspn;
# 191
using ::wcstod;
# 193
using ::wcstof;
# 195
using ::wcstok;
# 196
using ::wcstol;
# 197
using ::wcstoul;
# 198
using ::wcsxfrm;
# 199
using ::wctob;
# 200
using ::wmemcmp;
# 201
using ::wmemcpy;
# 202
using ::wmemmove;
# 203
using ::wmemset;
# 204
using ::wprintf;
# 205
using ::wscanf;
# 206
using ::wcschr;
# 207
using ::wcspbrk;
# 208
using ::wcsrchr;
# 209
using ::wcsstr;
# 210
using ::wmemchr;
# 235 "/usr/include/c++/11/cwchar" 3
}
# 236
}
# 244
namespace __gnu_cxx { 
# 251
using ::wcstold;
# 260 "/usr/include/c++/11/cwchar" 3
using ::wcstoll;
# 261
using ::wcstoull;
# 263
}
# 265
namespace std { 
# 267
using __gnu_cxx::wcstold;
# 268
using __gnu_cxx::wcstoll;
# 269
using __gnu_cxx::wcstoull;
# 270
}
# 280 "/usr/include/c++/11/cwchar" 3
namespace std { 
# 300
}
# 68 "/usr/include/c++/11/bits/postypes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 88 "/usr/include/c++/11/bits/postypes.h" 3
typedef long streamoff; 
# 98 "/usr/include/c++/11/bits/postypes.h" 3
typedef ptrdiff_t streamsize; 
# 111 "/usr/include/c++/11/bits/postypes.h" 3
template< class _StateT> 
# 112
class fpos { 
# 115
streamoff _M_off; 
# 116
_StateT _M_state; 
# 123
public: fpos() : _M_off((0)), _M_state() 
# 124
{ } 
# 133 "/usr/include/c++/11/bits/postypes.h" 3
fpos(streamoff __off) : _M_off(__off), _M_state() 
# 134
{ } 
# 137
fpos(const fpos &) = default;
# 138
fpos &operator=(const fpos &) = default;
# 139
~fpos() = default;
# 143
operator streamoff() const { return _M_off; } 
# 147
void state(_StateT __st) 
# 148
{ (_M_state) = __st; } 
# 152
_StateT state() const 
# 153
{ return _M_state; } 
# 160
fpos &operator+=(streamoff __off) 
# 161
{ 
# 162
(_M_off) += __off; 
# 163
return *this; 
# 164
} 
# 171
fpos &operator-=(streamoff __off) 
# 172
{ 
# 173
(_M_off) -= __off; 
# 174
return *this; 
# 175
} 
# 184
fpos operator+(streamoff __off) const 
# 185
{ 
# 186
fpos __pos(*this); 
# 187
__pos += __off; 
# 188
return __pos; 
# 189
} 
# 198
fpos operator-(streamoff __off) const 
# 199
{ 
# 200
fpos __pos(*this); 
# 201
__pos -= __off; 
# 202
return __pos; 
# 203
} 
# 211
streamoff operator-(const fpos &__other) const 
# 212
{ return (_M_off) - (__other._M_off); } 
# 213
}; 
# 220
template< class _StateT> inline bool 
# 222
operator==(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 223
{ return ((streamoff)__lhs) == ((streamoff)__rhs); } 
# 225
template< class _StateT> inline bool 
# 227
operator!=(const fpos< _StateT>  &__lhs, const fpos< _StateT>  &__rhs) 
# 228
{ return ((streamoff)__lhs) != ((streamoff)__rhs); } 
# 234
typedef fpos< __mbstate_t>  streampos; 
# 236
typedef fpos< __mbstate_t>  wstreampos; 
# 245 "/usr/include/c++/11/bits/postypes.h" 3
typedef fpos< __mbstate_t>  u16streampos; 
# 247
typedef fpos< __mbstate_t>  u32streampos; 
# 251
}
# 42 "/usr/include/c++/11/iosfwd" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/11/iosfwd" 3
class ios_base; 
# 76
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ios; 
# 79
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_streambuf; 
# 82
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_istream; 
# 85
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ostream; 
# 88
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_iostream; 
# 92
inline namespace __cxx11 { 
# 94
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 95
_Alloc = allocator< _CharT> > class basic_stringbuf; 
# 98
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 99
_Alloc = allocator< _CharT> > class basic_istringstream; 
# 102
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 103
_Alloc = allocator< _CharT> > class basic_ostringstream; 
# 106
template< class _CharT, class _Traits = char_traits< _CharT> , class 
# 107
_Alloc = allocator< _CharT> > class basic_stringstream; 
# 110
}
# 112
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_filebuf; 
# 115
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ifstream; 
# 118
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_ofstream; 
# 121
template< class _CharT, class _Traits = char_traits< _CharT> > class basic_fstream; 
# 124
template< class _CharT, class _Traits = char_traits< _CharT> > class istreambuf_iterator; 
# 127
template< class _CharT, class _Traits = char_traits< _CharT> > class ostreambuf_iterator; 
# 132
typedef basic_ios< char>  ios; 
# 135
typedef basic_streambuf< char>  streambuf; 
# 138
typedef basic_istream< char>  istream; 
# 141
typedef basic_ostream< char>  ostream; 
# 144
typedef basic_iostream< char>  iostream; 
# 147
typedef __cxx11::basic_stringbuf< char>  stringbuf; 
# 150
typedef __cxx11::basic_istringstream< char>  istringstream; 
# 153
typedef __cxx11::basic_ostringstream< char>  ostringstream; 
# 156
typedef __cxx11::basic_stringstream< char>  stringstream; 
# 159
typedef basic_filebuf< char>  filebuf; 
# 162
typedef basic_ifstream< char>  ifstream; 
# 165
typedef basic_ofstream< char>  ofstream; 
# 168
typedef basic_fstream< char>  fstream; 
# 172
typedef basic_ios< wchar_t>  wios; 
# 175
typedef basic_streambuf< wchar_t>  wstreambuf; 
# 178
typedef basic_istream< wchar_t>  wistream; 
# 181
typedef basic_ostream< wchar_t>  wostream; 
# 184
typedef basic_iostream< wchar_t>  wiostream; 
# 187
typedef __cxx11::basic_stringbuf< wchar_t>  wstringbuf; 
# 190
typedef __cxx11::basic_istringstream< wchar_t>  wistringstream; 
# 193
typedef __cxx11::basic_ostringstream< wchar_t>  wostringstream; 
# 196
typedef __cxx11::basic_stringstream< wchar_t>  wstringstream; 
# 199
typedef basic_filebuf< wchar_t>  wfilebuf; 
# 202
typedef basic_ifstream< wchar_t>  wifstream; 
# 205
typedef basic_ofstream< wchar_t>  wofstream; 
# 208
typedef basic_fstream< wchar_t>  wfstream; 
# 231 "/usr/include/c++/11/iosfwd" 3
}
# 35 "/usr/include/c++/11/exception" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/11/bits/exception.h" 3
#pragma GCC visibility push ( default )
# 40
extern "C++" {
# 42
namespace std { 
# 61 "/usr/include/c++/11/bits/exception.h" 3
class exception { 
# 64
public: exception() noexcept { } 
# 65
virtual ~exception() noexcept; 
# 67
exception(const exception &) = default;
# 68
exception &operator=(const exception &) = default;
# 69
exception(exception &&) = default;
# 70
exception &operator=(exception &&) = default;
# 76
virtual const char *what() const noexcept; 
# 77
}; 
# 81
}
# 83
}
# 85
#pragma GCC visibility pop
# 40 "/usr/include/c++/11/exception" 3
extern "C++" {
# 42
namespace std { 
# 53 "/usr/include/c++/11/exception" 3
class bad_exception : public exception { 
# 56
public: bad_exception() noexcept { } 
# 60
virtual ~bad_exception() noexcept; 
# 64
virtual const char *what() const noexcept; 
# 65
}; 
# 68
typedef void (*terminate_handler)(void); 
# 71
typedef void (*unexpected_handler)(void); 
# 74
terminate_handler set_terminate(terminate_handler) noexcept; 
# 78
terminate_handler get_terminate() noexcept; 
# 83
void terminate() noexcept __attribute((__noreturn__)); 
# 86
unexpected_handler set_unexpected(unexpected_handler) noexcept; 
# 90
unexpected_handler get_unexpected() noexcept; 
# 95
void unexpected() __attribute((__noreturn__)); 
# 108 "/usr/include/c++/11/exception" 3
__attribute((__deprecated__("use \'std::uncaught_exceptions()\' instead"))) bool 
# 109
uncaught_exception() noexcept __attribute((__pure__)); 
# 117
int uncaught_exceptions() noexcept __attribute((__pure__)); 
# 121
}
# 123
namespace __gnu_cxx { 
# 143 "/usr/include/c++/11/exception" 3
void __verbose_terminate_handler(); 
# 146
}
# 148
}
# 150
#pragma GCC visibility pop
# 34 "/usr/include/c++/11/bits/exception_ptr.h" 3
#pragma GCC visibility push ( default )
# 36 "/usr/include/c++/11/bits/cxxabi_init_exception.h" 3
#pragma GCC visibility push ( default )
# 50 "/usr/include/c++/11/bits/cxxabi_init_exception.h" 3
namespace std { 
# 52
class type_info; 
# 53
}
# 55
namespace __cxxabiv1 { 
# 57
struct __cxa_refcounted_exception; 
# 59
extern "C" {
# 63
void *__cxa_allocate_exception(size_t) noexcept; 
# 66
void __cxa_free_exception(void *) noexcept; 
# 70
__cxa_refcounted_exception *__cxa_init_primary_exception(void * object, std::type_info * tinfo, void (* dest)(void *)) noexcept; 
# 73
}
# 74
}
# 78
#pragma GCC visibility pop
# 37 "/usr/include/c++/11/bits/hash_bytes.h" 3
namespace std { 
# 47
size_t _Hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 54
size_t _Fnv_hash_bytes(const void * __ptr, size_t __len, size_t __seed); 
# 57
}
# 39 "/usr/include/c++/11/typeinfo" 3
#pragma GCC visibility push ( default )
# 41
extern "C++" {
# 43
namespace __cxxabiv1 { 
# 45
class __class_type_info; 
# 46
}
# 80 "/usr/include/c++/11/typeinfo" 3
namespace std { 
# 88
class type_info { 
# 95
public: virtual ~type_info(); 
# 99
const char *name() const noexcept 
# 100
{ return (((__name)[0]) == ('*')) ? (__name) + 1 : (__name); } 
# 115 "/usr/include/c++/11/typeinfo" 3
bool before(const type_info &__arg) const noexcept 
# 116
{ return ((((__name)[0]) == ('*')) && (((__arg.__name)[0]) == ('*'))) ? (__name) < (__arg.__name) : (__builtin_strcmp(__name, __arg.__name) < 0); 
# 118
} 
# 120
bool operator==(const type_info &__arg) const noexcept 
# 121
{ 
# 122
return (((__name) == (__arg.__name)) || ((((__name)[0]) != ('*')) && (__builtin_strcmp(__name, __arg.__name) == 0))); 
# 125
} 
# 138 "/usr/include/c++/11/typeinfo" 3
bool operator!=(const type_info &__arg) const noexcept 
# 139
{ return !this->operator==(__arg); } 
# 143
size_t hash_code() const noexcept 
# 144
{ 
# 146
return _Hash_bytes(this->name(), __builtin_strlen(this->name()), static_cast< size_t>(3339675911UL)); 
# 151
} 
# 155
virtual bool __is_pointer_p() const; 
# 158
virtual bool __is_function_p() const; 
# 166
virtual bool __do_catch(const type_info * __thr_type, void ** __thr_obj, unsigned __outer) const; 
# 170
virtual bool __do_upcast(const __cxxabiv1::__class_type_info * __target, void ** __obj_ptr) const; 
# 174
protected: const char *__name; 
# 176
explicit type_info(const char *__n) : __name(__n) { } 
# 180
private: type_info &operator=(const type_info &); 
# 181
type_info(const type_info &); 
# 182
}; 
# 190
class bad_cast : public exception { 
# 193
public: bad_cast() noexcept { } 
# 197
virtual ~bad_cast() noexcept; 
# 200
virtual const char *what() const noexcept; 
# 201
}; 
# 207
class bad_typeid : public exception { 
# 210
public: bad_typeid() noexcept { } 
# 214
virtual ~bad_typeid() noexcept; 
# 217
virtual const char *what() const noexcept; 
# 218
}; 
# 219
}
# 221
}
# 223
#pragma GCC visibility pop
# 43 "/usr/include/c++/11/new" 3
#pragma GCC visibility push ( default )
# 45
extern "C++" {
# 47
namespace std { 
# 55
class bad_alloc : public exception { 
# 58
public: bad_alloc() throw() { } 
# 61
bad_alloc(const bad_alloc &) = default;
# 62
bad_alloc &operator=(const bad_alloc &) = default;
# 67
virtual ~bad_alloc() throw(); 
# 70
virtual const char *what() const throw(); 
# 71
}; 
# 74
class bad_array_new_length : public bad_alloc { 
# 77
public: bad_array_new_length() throw() { } 
# 81
virtual ~bad_array_new_length() throw(); 
# 84
virtual const char *what() const throw(); 
# 85
}; 
# 89
enum class align_val_t: size_t { }; 
# 92
struct nothrow_t { 
# 95
explicit nothrow_t() = default;
# 97
}; 
# 99
extern const nothrow_t nothrow; 
# 103
typedef void (*new_handler)(void); 
# 107
new_handler set_new_handler(new_handler) throw(); 
# 111
new_handler get_new_handler() noexcept; 
# 113
}
# 126 "/usr/include/c++/11/new" 3
[[__nodiscard__]] void *operator new(std::size_t)
# 127
 __attribute((__externally_visible__)); 
# 128
[[__nodiscard__]] void *operator new[](std::size_t)
# 129
 __attribute((__externally_visible__)); 
# 130
void operator delete(void *) noexcept
# 131
 __attribute((__externally_visible__)); 
# 132
void operator delete[](void *) noexcept
# 133
 __attribute((__externally_visible__)); 
# 135
void operator delete(void *, std::size_t) noexcept
# 136
 __attribute((__externally_visible__)); 
# 137
void operator delete[](void *, std::size_t) noexcept
# 138
 __attribute((__externally_visible__)); 
# 140
[[__nodiscard__]] void *operator new(std::size_t, const std::nothrow_t &) noexcept
# 141
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 142
[[__nodiscard__]] void *operator new[](std::size_t, const std::nothrow_t &) noexcept
# 143
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 144
void operator delete(void *, const std::nothrow_t &) noexcept
# 145
 __attribute((__externally_visible__)); 
# 146
void operator delete[](void *, const std::nothrow_t &) noexcept
# 147
 __attribute((__externally_visible__)); 
# 149
[[__nodiscard__]] void *operator new(std::size_t, std::align_val_t)
# 150
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 151
[[__nodiscard__]] void *operator new(std::size_t, std::align_val_t, const std::nothrow_t &) noexcept
# 152
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 153
void operator delete(void *, std::align_val_t) noexcept
# 154
 __attribute((__externally_visible__)); 
# 155
void operator delete(void *, std::align_val_t, const std::nothrow_t &) noexcept
# 156
 __attribute((__externally_visible__)); 
# 157
[[__nodiscard__]] void *operator new[](std::size_t, std::align_val_t)
# 158
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 159
[[__nodiscard__]] void *operator new[](std::size_t, std::align_val_t, const std::nothrow_t &) noexcept
# 160
 __attribute((__externally_visible__, __alloc_size__(1), __malloc__)); 
# 161
void operator delete[](void *, std::align_val_t) noexcept
# 162
 __attribute((__externally_visible__)); 
# 163
void operator delete[](void *, std::align_val_t, const std::nothrow_t &) noexcept
# 164
 __attribute((__externally_visible__)); 
# 166
void operator delete(void *, std::size_t, std::align_val_t) noexcept
# 167
 __attribute((__externally_visible__)); 
# 168
void operator delete[](void *, std::size_t, std::align_val_t) noexcept
# 169
 __attribute((__externally_visible__)); 
# 174
[[__nodiscard__]] inline void *operator new(std::size_t, void *__p) noexcept 
# 175
{ return __p; } 
# 176
[[__nodiscard__]] inline void *operator new[](std::size_t, void *__p) noexcept 
# 177
{ return __p; } 
# 180
inline void operator delete(void *, void *) noexcept { } 
# 181
inline void operator delete[](void *, void *) noexcept { } 
# 183
}
# 187
namespace std { 
# 191
template< class _Tp> 
# 192
[[nodiscard]] constexpr _Tp *
# 193
launder(_Tp *__p) noexcept 
# 194
{ return __builtin_launder(__p); } 
# 199
template < typename _Ret, typename ... _Args, bool _NE >
    void launder ( _Ret ( * ) ( _Args ... ) noexcept ( _NE ) ) = delete;
# 201
template < typename _Ret, typename ... _Args, bool _NE >
    void launder ( _Ret ( * ) ( _Args ... ... ) noexcept ( _NE ) ) = delete;
# 204
inline void launder(void *) = delete;
# 205
inline void launder(const void *) = delete;
# 206
inline void launder(volatile void *) = delete;
# 207
inline void launder(const volatile void *) = delete;
# 208
}
# 230 "/usr/include/c++/11/new" 3
#pragma GCC visibility pop
# 52 "/usr/include/c++/11/bits/exception_ptr.h" 3
extern "C++" {
# 54
namespace std { 
# 56
class type_info; 
# 63
namespace __exception_ptr { 
# 65
class exception_ptr; 
# 66
}
# 68
using __exception_ptr::exception_ptr;
# 74
__exception_ptr::exception_ptr current_exception() noexcept; 
# 76
template< class _Ex> __exception_ptr::exception_ptr make_exception_ptr(_Ex) noexcept; 
# 80
void rethrow_exception(__exception_ptr::exception_ptr) __attribute((__noreturn__)); 
# 82
namespace __exception_ptr { 
# 84
using std::rethrow_exception;
# 90
class exception_ptr { 
# 92
void *_M_exception_object; 
# 94
explicit exception_ptr(void * __e) noexcept; 
# 96
void _M_addref() noexcept; 
# 97
void _M_release() noexcept; 
# 99
void *_M_get() const noexcept __attribute((__pure__)); 
# 101
friend exception_ptr std::current_exception() noexcept; 
# 102
friend void std::rethrow_exception(exception_ptr); 
# 103
template< class _Ex> friend exception_ptr std::make_exception_ptr(_Ex) noexcept; 
# 107
public: inline exception_ptr() noexcept; 
# 109
inline exception_ptr(const exception_ptr &) noexcept; 
# 112
exception_ptr(nullptr_t) noexcept : _M_exception_object((nullptr)) 
# 114
{ } 
# 116
exception_ptr(exception_ptr &&__o) noexcept : _M_exception_object(__o._M_exception_object) 
# 118
{ (__o._M_exception_object) = (nullptr); } 
# 129 "/usr/include/c++/11/bits/exception_ptr.h" 3
inline exception_ptr &operator=(const exception_ptr &) noexcept; 
# 133
exception_ptr &operator=(exception_ptr &&__o) noexcept 
# 134
{ 
# 135
((exception_ptr)(static_cast< exception_ptr &&>(__o))).swap(*this); 
# 136
return *this; 
# 137
} 
# 140
inline ~exception_ptr() noexcept; 
# 143
inline void swap(exception_ptr &) noexcept; 
# 155 "/usr/include/c++/11/bits/exception_ptr.h" 3
explicit operator bool() const noexcept 
# 156
{ return _M_exception_object; } 
# 165
friend inline bool operator==(const exception_ptr &__x, const exception_ptr &__y) noexcept 
# 167
{ return (__x._M_exception_object) == (__y._M_exception_object); } 
# 170
friend inline bool operator!=(const exception_ptr &__x, const exception_ptr &__y) noexcept 
# 172
{ return (__x._M_exception_object) != (__y._M_exception_object); } 
# 176
const type_info *__cxa_exception_type() const noexcept
# 177
 __attribute((__pure__)); 
# 178
}; 
# 182
inline exception_ptr::exception_ptr() noexcept : _M_exception_object((0)) 
# 184
{ } 
# 188
inline exception_ptr::exception_ptr(const exception_ptr &__other) noexcept : _M_exception_object(__other._M_exception_object) 
# 191
{ 
# 192
if (_M_exception_object) { 
# 193
this->_M_addref(); }  
# 194
} 
# 198
inline exception_ptr::~exception_ptr() noexcept 
# 199
{ 
# 200
if (_M_exception_object) { 
# 201
this->_M_release(); }  
# 202
} 
# 206
inline exception_ptr &exception_ptr::operator=(const exception_ptr &__other) noexcept 
# 207
{ 
# 208
((exception_ptr)(__other)).swap(*this); 
# 209
return *this; 
# 210
} 
# 214
inline void exception_ptr::swap(exception_ptr &__other) noexcept 
# 215
{ 
# 216
void *__tmp = _M_exception_object; 
# 217
(_M_exception_object) = (__other._M_exception_object); 
# 218
(__other._M_exception_object) = __tmp; 
# 219
} 
# 223
inline void swap(exception_ptr &__lhs, exception_ptr &__rhs) 
# 224
{ __lhs.swap(__rhs); } 
# 227
template< class _Ex> inline void 
# 229
__dest_thunk(void *__x) 
# 230
{ (static_cast< _Ex *>(__x))->~_Ex(); } 
# 233
}
# 236
template< class _Ex> __exception_ptr::exception_ptr 
# 238
make_exception_ptr(_Ex __ex) noexcept 
# 239
{ 
# 242
using _Ex2 = typename remove_reference< _Ex> ::type; 
# 243
void *__e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex)); 
# 244
(void)__cxxabiv1::__cxa_init_primary_exception(__e, const_cast< type_info *>(&typeid(_Ex)), __exception_ptr::__dest_thunk< typename remove_reference< _Ex> ::type> ); 
# 247
try 
# 248
{ 
# 249
::new (__e) _Ex2(std::forward< _Ex> (__ex)); 
# 250
return ((__exception_ptr::exception_ptr)(__e)); 
# 251
} 
# 252
catch (...) 
# 253
{ 
# 254
__cxxabiv1::__cxa_free_exception(__e); 
# 255
return current_exception(); 
# 256
}  
# 269 "/usr/include/c++/11/bits/exception_ptr.h" 3
} 
# 274
}
# 276
}
# 278
#pragma GCC visibility pop
# 33 "/usr/include/c++/11/bits/nested_exception.h" 3
#pragma GCC visibility push ( default )
# 42 "/usr/include/c++/11/bits/nested_exception.h" 3
extern "C++" {
# 44
namespace std { 
# 52
class nested_exception { 
# 54
__exception_ptr::exception_ptr _M_ptr; 
# 57
public: nested_exception() noexcept : _M_ptr(current_exception()) { } 
# 59
nested_exception(const nested_exception &) noexcept = default;
# 61
nested_exception &operator=(const nested_exception &) noexcept = default;
# 63
virtual ~nested_exception() noexcept; 
# 65
[[noreturn]] void 
# 67
rethrow_nested() const 
# 68
{ 
# 69
if ((_M_ptr)) { 
# 70
rethrow_exception(_M_ptr); }  
# 71
std::terminate(); 
# 72
} 
# 75
__exception_ptr::exception_ptr nested_ptr() const noexcept 
# 76
{ return _M_ptr; } 
# 77
}; 
# 81
template< class _Except> 
# 82
struct _Nested_exception : public _Except, public nested_exception { 
# 84
explicit _Nested_exception(const _Except &__ex) : _Except(__ex) 
# 86
{ } 
# 88
explicit _Nested_exception(_Except &&__ex) : _Except(static_cast< _Except &&>(__ex)) 
# 90
{ } 
# 91
}; 
# 96
template< class _Tp> 
# 97
[[noreturn]] inline void 
# 99
__throw_with_nested_impl(_Tp &&__t, true_type) 
# 100
{ 
# 101
using _Up = typename remove_reference< _Tp> ::type; 
# 102
throw _Nested_exception< typename remove_reference< _Tp> ::type> {std::forward< _Tp> (__t)}; 
# 103
} 
# 105
template< class _Tp> 
# 106
[[noreturn]] inline void 
# 108
__throw_with_nested_impl(_Tp &&__t, false_type) 
# 109
{ throw std::forward< _Tp> (__t); } 
# 115
template< class _Tp> 
# 116
[[noreturn]] inline void 
# 118
throw_with_nested(_Tp &&__t) 
# 119
{ 
# 120
using _Up = typename decay< _Tp> ::type; 
# 121
using _CopyConstructible = __and_< is_copy_constructible< typename decay< _Tp> ::type> , is_move_constructible< typename decay< _Tp> ::type> > ; 
# 123
static_assert((_CopyConstructible::value), "throw_with_nested argument must be CopyConstructible");
# 125
using __nest = __and_< is_class< typename decay< _Tp> ::type> , __bool_constant< !__is_final(_Up)> , __not_< is_base_of< nested_exception, typename decay< _Tp> ::type> > > ; 
# 127
std::__throw_with_nested_impl(std::forward< _Tp> (__t), __nest{}); 
# 128
} 
# 133
template< class _Tp> using __rethrow_if_nested_cond = typename enable_if< __and_< is_polymorphic< _Tp> , __or_< __not_< is_base_of< nested_exception, _Tp> > , is_convertible< _Tp *, nested_exception *> > > ::value> ::type; 
# 141
template< class _Ex> inline __rethrow_if_nested_cond< _Ex>  
# 143
__rethrow_if_nested_impl(const _Ex *__ptr) 
# 144
{ 
# 145
if (auto __ne_ptr = dynamic_cast< const nested_exception *>(__ptr)) { 
# 146
__ne_ptr->rethrow_nested(); }  
# 147
} 
# 151
inline void __rethrow_if_nested_impl(const void *) 
# 152
{ } 
# 157
template< class _Ex> inline void 
# 159
rethrow_if_nested(const _Ex &__ex) 
# 160
{ std::__rethrow_if_nested_impl(std::__addressof(__ex)); } 
# 163
}
# 165
}
# 169
#pragma GCC visibility pop
# 50 "/usr/include/c++/11/bits/char_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 64 "/usr/include/c++/11/bits/char_traits.h" 3
template< class _CharT> 
# 65
struct _Char_types { 
# 67
typedef unsigned long int_type; 
# 68
typedef std::streampos pos_type; 
# 69
typedef std::streamoff off_type; 
# 70
typedef mbstate_t state_type; 
# 71
}; 
# 89 "/usr/include/c++/11/bits/char_traits.h" 3
template< class _CharT> 
# 90
struct char_traits { 
# 92
typedef _CharT char_type; 
# 93
typedef typename _Char_types< _CharT> ::int_type int_type; 
# 94
typedef typename _Char_types< _CharT> ::pos_type pos_type; 
# 95
typedef typename _Char_types< _CharT> ::off_type off_type; 
# 96
typedef typename _Char_types< _CharT> ::state_type state_type; 
# 102
static constexpr void assign(char_type &__c1, const char_type &__c2) 
# 103
{ __c1 = __c2; } 
# 106
static constexpr bool eq(const char_type &__c1, const char_type &__c2) 
# 107
{ return __c1 == __c2; } 
# 110
static constexpr bool lt(const char_type &__c1, const char_type &__c2) 
# 111
{ return __c1 < __c2; } 
# 114
static constexpr int compare(const char_type * __s1, const char_type * __s2, std::size_t __n); 
# 117
static constexpr std::size_t length(const char_type * __s); 
# 120
static constexpr const char_type *find(const char_type * __s, std::size_t __n, const char_type & __a); 
# 123
static char_type *move(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 126
static char_type *copy(char_type * __s1, const char_type * __s2, std::size_t __n); 
# 129
static char_type *assign(char_type * __s, std::size_t __n, char_type __a); 
# 132
static constexpr char_type to_char_type(const int_type &__c) 
# 133
{ return static_cast< char_type>(__c); } 
# 136
static constexpr int_type to_int_type(const char_type &__c) 
# 137
{ return static_cast< int_type>(__c); } 
# 140
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) 
# 141
{ return __c1 == __c2; } 
# 144
static constexpr int_type eof() 
# 145
{ return static_cast< int_type>(-1); } 
# 148
static constexpr int_type not_eof(const int_type &__c) 
# 149
{ return (!(eq_int_type)(__c, (eof)())) ? __c : (to_int_type)(char_type()); } 
# 150
}; 
# 152
template< class _CharT> constexpr int 
# 155
char_traits< _CharT> ::compare(const char_type *__s1, const char_type *__s2, std::size_t __n) 
# 156
{ 
# 157
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 158
if ((lt)(__s1[__i], __s2[__i])) { 
# 159
return -1; } else { 
# 160
if ((lt)(__s2[__i], __s1[__i])) { 
# 161
return 1; }  }  }  
# 162
return 0; 
# 163
} 
# 165
template< class _CharT> constexpr std::size_t 
# 168
char_traits< _CharT> ::length(const char_type *__p) 
# 169
{ 
# 170
std::size_t __i = (0); 
# 171
while (!(eq)(__p[__i], char_type())) { 
# 172
++__i; }  
# 173
return __i; 
# 174
} 
# 176
template< class _CharT> constexpr const typename char_traits< _CharT> ::char_type *
# 179
char_traits< _CharT> ::find(const char_type *__s, std::size_t __n, const char_type &__a) 
# 180
{ 
# 181
for (std::size_t __i = (0); __i < __n; ++__i) { 
# 182
if ((eq)(__s[__i], __a)) { 
# 183
return __s + __i; }  }  
# 184
return 0; 
# 185
} 
# 187
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 191
char_traits< _CharT> ::move(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 192
{ 
# 193
if (__n == (0)) { 
# 194
return __s1; }  
# 233 "/usr/include/c++/11/bits/char_traits.h" 3
__builtin_memmove(__s1, __s2, __n * sizeof(char_type)); 
# 234
return __s1; 
# 235
} 
# 237
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 241
char_traits< _CharT> ::copy(char_type *__s1, const char_type *__s2, std::size_t __n) 
# 242
{ 
# 244
std::copy(__s2, __s2 + __n, __s1); 
# 245
return __s1; 
# 246
} 
# 248
template< class _CharT> typename char_traits< _CharT> ::char_type *
# 252
char_traits< _CharT> ::assign(char_type *__s, std::size_t __n, char_type __a) 
# 253
{ 
# 255
std::fill_n(__s, __n, __a); 
# 256
return __s; 
# 257
} 
# 260
}
# 262
namespace std __attribute((__visibility__("default"))) { 
# 283 "/usr/include/c++/11/bits/char_traits.h" 3
template< class _CharT> 
# 284
__attribute((__always_inline__)) constexpr bool 
# 285
__constant_string_p(const _CharT *__s) 
# 286
{ 
# 288
(void)__s; 
# 290
return __builtin_is_constant_evaluated(); 
# 296
} 
# 306 "/usr/include/c++/11/bits/char_traits.h" 3
template< class _CharT> 
# 307
__attribute((__always_inline__)) constexpr bool 
# 308
__constant_char_array_p(const _CharT *__a, size_t __n) 
# 309
{ 
# 311
(void)__a; 
# 312
(void)__n; 
# 314
return __builtin_is_constant_evaluated(); 
# 321
} 
# 337 "/usr/include/c++/11/bits/char_traits.h" 3
template< class _CharT> 
# 338
struct char_traits : public __gnu_cxx::char_traits< _CharT>  { 
# 339
}; 
# 344
template<> struct char_traits< char>  { 
# 346
typedef char char_type; 
# 347
typedef int int_type; 
# 348
typedef streampos pos_type; 
# 349
typedef streamoff off_type; 
# 350
typedef mbstate_t state_type; 
# 356
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 357
{ __c1 = __c2; } 
# 360
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 361
{ return __c1 == __c2; } 
# 364
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 365
{ 
# 367
return ((static_cast< unsigned char>(__c1)) < (static_cast< unsigned char>(__c2))); 
# 369
} 
# 372
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 373
{ 
# 374
if (__n == (0)) { 
# 375
return 0; }  
# 377
if ((__builtin_constant_p(__n)) && __constant_char_array_p(__s1, __n) && __constant_char_array_p(__s2, __n)) 
# 380
{ 
# 381
for (size_t __i = (0); __i < __n; ++__i) { 
# 382
if (lt(__s1[__i], __s2[__i])) { 
# 383
return -1; } else { 
# 384
if (lt(__s2[__i], __s1[__i])) { 
# 385
return 1; }  }  }  
# 386
return 0; 
# 387
}  
# 389
return __builtin_memcmp(__s1, __s2, __n); 
# 390
} 
# 393
static constexpr size_t length(const char_type *__s) 
# 394
{ 
# 396
if (__constant_string_p(__s)) { 
# 397
return __gnu_cxx::char_traits< char> ::length(__s); }  
# 399
return __builtin_strlen(__s); 
# 400
} 
# 403
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 404
{ 
# 405
if (__n == (0)) { 
# 406
return 0; }  
# 408
if ((__builtin_constant_p(__n)) && (__builtin_constant_p(__a)) && __constant_char_array_p(__s, __n)) { 
# 411
return __gnu_cxx::char_traits< char> ::find(__s, __n, __a); }  
# 413
return static_cast< const char_type *>(__builtin_memchr(__s, __a, __n)); 
# 414
} 
# 417
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 418
{ 
# 419
if (__n == (0)) { 
# 420
return __s1; }  
# 425
return static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n)); 
# 426
} 
# 429
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 430
{ 
# 431
if (__n == (0)) { 
# 432
return __s1; }  
# 437
return static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n)); 
# 438
} 
# 441
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 442
{ 
# 443
if (__n == (0)) { 
# 444
return __s; }  
# 449
return static_cast< char_type *>(__builtin_memset(__s, __a, __n)); 
# 450
} 
# 453
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 454
{ return static_cast< char_type>(__c); } 
# 459
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 460
{ return static_cast< int_type>(static_cast< unsigned char>(__c)); } 
# 463
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 464
{ return __c1 == __c2; } 
# 467
static constexpr int_type eof() noexcept 
# 468
{ return static_cast< int_type>(-1); } 
# 471
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 472
{ return (__c == eof()) ? 0 : __c; } 
# 473
}; 
# 479
template<> struct char_traits< wchar_t>  { 
# 481
typedef wchar_t char_type; 
# 482
typedef wint_t int_type; 
# 483
typedef streamoff off_type; 
# 484
typedef wstreampos pos_type; 
# 485
typedef mbstate_t state_type; 
# 491
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 492
{ __c1 = __c2; } 
# 495
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 496
{ return __c1 == __c2; } 
# 499
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 500
{ return __c1 < __c2; } 
# 503
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 504
{ 
# 505
if (__n == (0)) { 
# 506
return 0; }  
# 508
if ((__builtin_constant_p(__n)) && __constant_char_array_p(__s1, __n) && __constant_char_array_p(__s2, __n)) { 
# 511
return __gnu_cxx::char_traits< wchar_t> ::compare(__s1, __s2, __n); }  
# 513
return wmemcmp(__s1, __s2, __n); 
# 514
} 
# 517
static constexpr size_t length(const char_type *__s) 
# 518
{ 
# 520
if (__constant_string_p(__s)) { 
# 521
return __gnu_cxx::char_traits< wchar_t> ::length(__s); }  
# 523
return wcslen(__s); 
# 524
} 
# 527
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 528
{ 
# 529
if (__n == (0)) { 
# 530
return 0; }  
# 532
if ((__builtin_constant_p(__n)) && (__builtin_constant_p(__a)) && __constant_char_array_p(__s, __n)) { 
# 535
return __gnu_cxx::char_traits< wchar_t> ::find(__s, __n, __a); }  
# 537
return wmemchr(__s, __a, __n); 
# 538
} 
# 541
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 542
{ 
# 543
if (__n == (0)) { 
# 544
return __s1; }  
# 549
return wmemmove(__s1, __s2, __n); 
# 550
} 
# 553
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 554
{ 
# 555
if (__n == (0)) { 
# 556
return __s1; }  
# 561
return wmemcpy(__s1, __s2, __n); 
# 562
} 
# 565
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 566
{ 
# 567
if (__n == (0)) { 
# 568
return __s; }  
# 573
return wmemset(__s, __a, __n); 
# 574
} 
# 577
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 578
{ return (char_type)__c; } 
# 581
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 582
{ return (int_type)__c; } 
# 585
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 586
{ return __c1 == __c2; } 
# 589
static constexpr int_type eof() noexcept 
# 590
{ return static_cast< int_type>(4294967295U); } 
# 593
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 594
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 595
}; 
# 723 "/usr/include/c++/11/bits/char_traits.h" 3
}
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3
typedef __uint8_t uint8_t; 
# 25
typedef __uint16_t uint16_t; 
# 26
typedef __uint32_t uint32_t; 
# 27
typedef __uint64_t uint64_t; 
# 43 "/usr/include/stdint.h" 3
typedef __int_least8_t int_least8_t; 
# 44
typedef __int_least16_t int_least16_t; 
# 45
typedef __int_least32_t int_least32_t; 
# 46
typedef __int_least64_t int_least64_t; 
# 49
typedef __uint_least8_t uint_least8_t; 
# 50
typedef __uint_least16_t uint_least16_t; 
# 51
typedef __uint_least32_t uint_least32_t; 
# 52
typedef __uint_least64_t uint_least64_t; 
# 58
typedef signed char int_fast8_t; 
# 60
typedef long int_fast16_t; 
# 61
typedef long int_fast32_t; 
# 62
typedef long int_fast64_t; 
# 71 "/usr/include/stdint.h" 3
typedef unsigned char uint_fast8_t; 
# 73
typedef unsigned long uint_fast16_t; 
# 74
typedef unsigned long uint_fast32_t; 
# 75
typedef unsigned long uint_fast64_t; 
# 87 "/usr/include/stdint.h" 3
typedef long intptr_t; 
# 90
typedef unsigned long uintptr_t; 
# 101 "/usr/include/stdint.h" 3
typedef __intmax_t intmax_t; 
# 102
typedef __uintmax_t uintmax_t; 
# 44 "/usr/include/c++/11/cstdint" 3
namespace std { 
# 47
using ::int8_t;
# 48
using ::int16_t;
# 49
using ::int32_t;
# 50
using ::int64_t;
# 52
using ::int_fast8_t;
# 53
using ::int_fast16_t;
# 54
using ::int_fast32_t;
# 55
using ::int_fast64_t;
# 57
using ::int_least8_t;
# 58
using ::int_least16_t;
# 59
using ::int_least32_t;
# 60
using ::int_least64_t;
# 62
using ::intmax_t;
# 63
using ::intptr_t;
# 65
using ::uint8_t;
# 66
using ::uint16_t;
# 67
using ::uint32_t;
# 68
using ::uint64_t;
# 70
using ::uint_fast8_t;
# 71
using ::uint_fast16_t;
# 72
using ::uint_fast32_t;
# 73
using ::uint_fast64_t;
# 75
using ::uint_least8_t;
# 76
using ::uint_least16_t;
# 77
using ::uint_least32_t;
# 78
using ::uint_least64_t;
# 80
using ::uintmax_t;
# 81
using ::uintptr_t;
# 87
}
# 729 "/usr/include/c++/11/bits/char_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 734
template<> struct char_traits< char16_t>  { 
# 736
typedef char16_t char_type; 
# 738
typedef uint_least16_t int_type; 
# 744
typedef streamoff off_type; 
# 745
typedef u16streampos pos_type; 
# 746
typedef mbstate_t state_type; 
# 752
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 753
{ __c1 = __c2; } 
# 756
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 757
{ return __c1 == __c2; } 
# 760
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 761
{ return __c1 < __c2; } 
# 764
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 765
{ 
# 766
for (size_t __i = (0); __i < __n; ++__i) { 
# 767
if (lt(__s1[__i], __s2[__i])) { 
# 768
return -1; } else { 
# 769
if (lt(__s2[__i], __s1[__i])) { 
# 770
return 1; }  }  }  
# 771
return 0; 
# 772
} 
# 775
static constexpr size_t length(const char_type *__s) 
# 776
{ 
# 777
size_t __i = (0); 
# 778
while (!eq(__s[__i], char_type())) { 
# 779
++__i; }  
# 780
return __i; 
# 781
} 
# 784
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 785
{ 
# 786
for (size_t __i = (0); __i < __n; ++__i) { 
# 787
if (eq(__s[__i], __a)) { 
# 788
return __s + __i; }  }  
# 789
return 0; 
# 790
} 
# 793
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 794
{ 
# 795
if (__n == (0)) { 
# 796
return __s1; }  
# 801
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 803
} 
# 806
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 807
{ 
# 808
if (__n == (0)) { 
# 809
return __s1; }  
# 814
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 816
} 
# 819
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 820
{ 
# 821
for (size_t __i = (0); __i < __n; ++__i) { 
# 822
assign(__s[__i], __a); }  
# 823
return __s; 
# 824
} 
# 827
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 828
{ return (char_type)__c; } 
# 831
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 832
{ return (__c == (eof())) ? (int_type)65533 : ((int_type)__c); } 
# 835
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 836
{ return __c1 == __c2; } 
# 839
static constexpr int_type eof() noexcept 
# 840
{ return static_cast< int_type>(-1); } 
# 843
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 844
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 845
}; 
# 848
template<> struct char_traits< char32_t>  { 
# 850
typedef char32_t char_type; 
# 852
typedef uint_least32_t int_type; 
# 858
typedef streamoff off_type; 
# 859
typedef u32streampos pos_type; 
# 860
typedef mbstate_t state_type; 
# 866
static constexpr void assign(char_type &__c1, const char_type &__c2) noexcept 
# 867
{ __c1 = __c2; } 
# 870
static constexpr bool eq(const char_type &__c1, const char_type &__c2) noexcept 
# 871
{ return __c1 == __c2; } 
# 874
static constexpr bool lt(const char_type &__c1, const char_type &__c2) noexcept 
# 875
{ return __c1 < __c2; } 
# 878
static constexpr int compare(const char_type *__s1, const char_type *__s2, size_t __n) 
# 879
{ 
# 880
for (size_t __i = (0); __i < __n; ++__i) { 
# 881
if (lt(__s1[__i], __s2[__i])) { 
# 882
return -1; } else { 
# 883
if (lt(__s2[__i], __s1[__i])) { 
# 884
return 1; }  }  }  
# 885
return 0; 
# 886
} 
# 889
static constexpr size_t length(const char_type *__s) 
# 890
{ 
# 891
size_t __i = (0); 
# 892
while (!eq(__s[__i], char_type())) { 
# 893
++__i; }  
# 894
return __i; 
# 895
} 
# 898
static constexpr const char_type *find(const char_type *__s, size_t __n, const char_type &__a) 
# 899
{ 
# 900
for (size_t __i = (0); __i < __n; ++__i) { 
# 901
if (eq(__s[__i], __a)) { 
# 902
return __s + __i; }  }  
# 903
return 0; 
# 904
} 
# 907
static char_type *move(char_type *__s1, const char_type *__s2, size_t __n) 
# 908
{ 
# 909
if (__n == (0)) { 
# 910
return __s1; }  
# 915
return (static_cast< char_type *>(__builtin_memmove(__s1, __s2, __n * sizeof(char_type)))); 
# 917
} 
# 920
static char_type *copy(char_type *__s1, const char_type *__s2, size_t __n) 
# 921
{ 
# 922
if (__n == (0)) { 
# 923
return __s1; }  
# 928
return (static_cast< char_type *>(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type)))); 
# 930
} 
# 933
static char_type *assign(char_type *__s, size_t __n, char_type __a) 
# 934
{ 
# 935
for (size_t __i = (0); __i < __n; ++__i) { 
# 936
assign(__s[__i], __a); }  
# 937
return __s; 
# 938
} 
# 941
static constexpr char_type to_char_type(const int_type &__c) noexcept 
# 942
{ return (char_type)__c; } 
# 945
static constexpr int_type to_int_type(const char_type &__c) noexcept 
# 946
{ return (int_type)__c; } 
# 949
static constexpr bool eq_int_type(const int_type &__c1, const int_type &__c2) noexcept 
# 950
{ return __c1 == __c2; } 
# 953
static constexpr int_type eof() noexcept 
# 954
{ return static_cast< int_type>(-1); } 
# 957
static constexpr int_type not_eof(const int_type &__c) noexcept 
# 958
{ return eq_int_type(__c, eof()) ? 0 : __c; } 
# 959
}; 
# 981 "/usr/include/c++/11/bits/char_traits.h" 3
}
# 31 "/usr/include/locale.h" 3
extern "C" {
# 51 "/usr/include/locale.h" 3
struct lconv { 
# 55
char *decimal_point; 
# 56
char *thousands_sep; 
# 62
char *grouping; 
# 68
char *int_curr_symbol; 
# 69
char *currency_symbol; 
# 70
char *mon_decimal_point; 
# 71
char *mon_thousands_sep; 
# 72
char *mon_grouping; 
# 73
char *positive_sign; 
# 74
char *negative_sign; 
# 75
char int_frac_digits; 
# 76
char frac_digits; 
# 78
char p_cs_precedes; 
# 80
char p_sep_by_space; 
# 82
char n_cs_precedes; 
# 84
char n_sep_by_space; 
# 91
char p_sign_posn; 
# 92
char n_sign_posn; 
# 95
char int_p_cs_precedes; 
# 97
char int_p_sep_by_space; 
# 99
char int_n_cs_precedes; 
# 101
char int_n_sep_by_space; 
# 108
char int_p_sign_posn; 
# 109
char int_n_sign_posn; 
# 118 "/usr/include/locale.h" 3
}; 
# 122
extern char *setlocale(int __category, const char * __locale) noexcept(true); 
# 125
extern lconv *localeconv() noexcept(true); 
# 141 "/usr/include/locale.h" 3
extern locale_t newlocale(int __category_mask, const char * __locale, locale_t __base) noexcept(true); 
# 176 "/usr/include/locale.h" 3
extern locale_t duplocale(locale_t __dataset) noexcept(true); 
# 180
extern void freelocale(locale_t __dataset) noexcept(true); 
# 187
extern locale_t uselocale(locale_t __dataset) noexcept(true); 
# 195
}
# 51 "/usr/include/c++/11/clocale" 3
namespace std { 
# 53
using ::lconv;
# 54
using ::setlocale;
# 55
using ::localeconv;
# 56
}
# 48 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++locale.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 52
extern "C" __typeof__(uselocale) __uselocale; 
# 55
}
# 58
namespace std __attribute((__visibility__("default"))) { 
# 62
typedef __locale_t __c_locale; 
# 69
inline int __convert_from_v(const __c_locale &__cloc __attribute((__unused__)), char *
# 70
__out, const int 
# 71
__size __attribute((__unused__)), const char *
# 72
__fmt, ...) 
# 73
{ 
# 75
__c_locale __old = __gnu_cxx::__uselocale(__cloc); 
# 88 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++locale.h" 3
__builtin_va_list __args; 
# 89
__builtin_va_start((__args),__fmt); 
# 92
const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args); 
# 97
__builtin_va_end(__args); 
# 100
__gnu_cxx::__uselocale(__old); 
# 108
return __ret; 
# 109
} 
# 112
}
# 28 "/usr/include/ctype.h" 3
extern "C" {
# 47 "/usr/include/ctype.h" 3
enum { 
# 48
_ISupper = ((0 < 8) ? (1 << 0) << 8 : ((1 << 0) >> 8)), 
# 49
_ISlower = ((1 < 8) ? (1 << 1) << 8 : ((1 << 1) >> 8)), 
# 50
_ISalpha = ((2 < 8) ? (1 << 2) << 8 : ((1 << 2) >> 8)), 
# 51
_ISdigit = ((3 < 8) ? (1 << 3) << 8 : ((1 << 3) >> 8)), 
# 52
_ISxdigit = ((4 < 8) ? (1 << 4) << 8 : ((1 << 4) >> 8)), 
# 53
_ISspace = ((5 < 8) ? (1 << 5) << 8 : ((1 << 5) >> 8)), 
# 54
_ISprint = ((6 < 8) ? (1 << 6) << 8 : ((1 << 6) >> 8)), 
# 55
_ISgraph = ((7 < 8) ? (1 << 7) << 8 : ((1 << 7) >> 8)), 
# 56
_ISblank = ((8 < 8) ? (1 << 8) << 8 : ((1 << 8) >> 8)), 
# 57
_IScntrl, 
# 58
_ISpunct = ((10 < 8) ? (1 << 10) << 8 : ((1 << 10) >> 8)), 
# 59
_ISalnum = ((11 < 8) ? (1 << 11) << 8 : ((1 << 11) >> 8))
# 60
}; 
# 79 "/usr/include/ctype.h" 3
extern const unsigned short **__ctype_b_loc() noexcept(true)
# 80
 __attribute((const)); 
# 81
extern const __int32_t **__ctype_tolower_loc() noexcept(true)
# 82
 __attribute((const)); 
# 83
extern const __int32_t **__ctype_toupper_loc() noexcept(true)
# 84
 __attribute((const)); 
# 108 "/usr/include/ctype.h" 3
extern int isalnum(int) noexcept(true); 
# 109
extern int isalpha(int) noexcept(true); 
# 110
extern int iscntrl(int) noexcept(true); 
# 111
extern int isdigit(int) noexcept(true); 
# 112
extern int islower(int) noexcept(true); 
# 113
extern int isgraph(int) noexcept(true); 
# 114
extern int isprint(int) noexcept(true); 
# 115
extern int ispunct(int) noexcept(true); 
# 116
extern int isspace(int) noexcept(true); 
# 117
extern int isupper(int) noexcept(true); 
# 118
extern int isxdigit(int) noexcept(true); 
# 122
extern int tolower(int __c) noexcept(true); 
# 125
extern int toupper(int __c) noexcept(true); 
# 130
extern int isblank(int) noexcept(true); 
# 135
extern int isctype(int __c, int __mask) noexcept(true); 
# 142
extern int isascii(int __c) noexcept(true); 
# 146
extern int toascii(int __c) noexcept(true); 
# 150
extern int _toupper(int) noexcept(true); 
# 151
extern int _tolower(int) noexcept(true); 
# 251 "/usr/include/ctype.h" 3
extern int isalnum_l(int, locale_t) noexcept(true); 
# 252
extern int isalpha_l(int, locale_t) noexcept(true); 
# 253
extern int iscntrl_l(int, locale_t) noexcept(true); 
# 254
extern int isdigit_l(int, locale_t) noexcept(true); 
# 255
extern int islower_l(int, locale_t) noexcept(true); 
# 256
extern int isgraph_l(int, locale_t) noexcept(true); 
# 257
extern int isprint_l(int, locale_t) noexcept(true); 
# 258
extern int ispunct_l(int, locale_t) noexcept(true); 
# 259
extern int isspace_l(int, locale_t) noexcept(true); 
# 260
extern int isupper_l(int, locale_t) noexcept(true); 
# 261
extern int isxdigit_l(int, locale_t) noexcept(true); 
# 263
extern int isblank_l(int, locale_t) noexcept(true); 
# 267
extern int __tolower_l(int __c, locale_t __l) noexcept(true); 
# 268
extern int tolower_l(int __c, locale_t __l) noexcept(true); 
# 271
extern int __toupper_l(int __c, locale_t __l) noexcept(true); 
# 272
extern int toupper_l(int __c, locale_t __l) noexcept(true); 
# 327 "/usr/include/ctype.h" 3
}
# 62 "/usr/include/c++/11/cctype" 3
namespace std { 
# 64
using ::isalnum;
# 65
using ::isalpha;
# 66
using ::iscntrl;
# 67
using ::isdigit;
# 68
using ::isgraph;
# 69
using ::islower;
# 70
using ::isprint;
# 71
using ::ispunct;
# 72
using ::isspace;
# 73
using ::isupper;
# 74
using ::isxdigit;
# 75
using ::tolower;
# 76
using ::toupper;
# 77
}
# 85
namespace std { 
# 87
using ::isblank;
# 88
}
# 44 "/usr/include/c++/11/bits/localefwd.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 55 "/usr/include/c++/11/bits/localefwd.h" 3
class locale; 
# 57
template< class _Facet> bool has_facet(const locale &) throw(); 
# 61
template< class _Facet> const _Facet &use_facet(const locale &); 
# 66
template< class _CharT> inline bool isspace(_CharT, const locale &); 
# 70
template< class _CharT> inline bool isprint(_CharT, const locale &); 
# 74
template< class _CharT> inline bool iscntrl(_CharT, const locale &); 
# 78
template< class _CharT> inline bool isupper(_CharT, const locale &); 
# 82
template< class _CharT> inline bool islower(_CharT, const locale &); 
# 86
template< class _CharT> inline bool isalpha(_CharT, const locale &); 
# 90
template< class _CharT> inline bool isdigit(_CharT, const locale &); 
# 94
template< class _CharT> inline bool ispunct(_CharT, const locale &); 
# 98
template< class _CharT> inline bool isxdigit(_CharT, const locale &); 
# 102
template< class _CharT> inline bool isalnum(_CharT, const locale &); 
# 106
template< class _CharT> inline bool isgraph(_CharT, const locale &); 
# 111
template< class _CharT> inline bool isblank(_CharT, const locale &); 
# 116
template< class _CharT> inline _CharT toupper(_CharT, const locale &); 
# 120
template< class _CharT> inline _CharT tolower(_CharT, const locale &); 
# 125
struct ctype_base; 
# 126
template< class _CharT> class ctype; 
# 128
template<> class ctype< char> ; 
# 130
template<> class ctype< wchar_t> ; 
# 132
template< class _CharT> class ctype_byname; 
# 136
class codecvt_base; 
# 137
template< class _InternT, class _ExternT, class _StateT> class codecvt; 
# 139
template<> class codecvt< char, char, __mbstate_t> ; 
# 141
template<> class codecvt< wchar_t, char, __mbstate_t> ; 
# 144
template<> class codecvt< char16_t, char, __mbstate_t> ; 
# 145
template<> class codecvt< char32_t, char, __mbstate_t> ; 
# 151
template< class _InternT, class _ExternT, class _StateT> class codecvt_byname; 
# 156
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class num_get; 
# 158
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class num_put; 
# 161
inline namespace __cxx11 { 
# 162
template< class _CharT> class numpunct; 
# 163
template< class _CharT> class numpunct_byname; 
# 164
}
# 166
inline namespace __cxx11 { 
# 168
template< class _CharT> class collate; 
# 170
template< class _CharT> class collate_byname; 
# 172
}
# 175
class time_base; 
# 176
inline namespace __cxx11 { 
# 177
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get; 
# 179
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class time_get_byname; 
# 181
}
# 182
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put; 
# 184
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class time_put_byname; 
# 188
class money_base; 
# 189
inline namespace __cxx11 { 
# 190
template< class _CharT, class _InIter = istreambuf_iterator< _CharT> > class money_get; 
# 192
template< class _CharT, class _OutIter = ostreambuf_iterator< _CharT> > class money_put; 
# 194
}
# 195
inline namespace __cxx11 { 
# 196
template< class _CharT, bool _Intl = false> class moneypunct; 
# 198
template< class _CharT, bool _Intl = false> class moneypunct_byname; 
# 200
}
# 203
struct messages_base; 
# 204
inline namespace __cxx11 { 
# 205
template< class _CharT> class messages; 
# 207
template< class _CharT> class messages_byname; 
# 209
}
# 212
}
# 30 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr.h" 3
#pragma GCC visibility push ( default )
# 23 "/usr/include/x86_64-linux-gnu/bits/types/struct_sched_param.h" 3
struct sched_param { 
# 25
int sched_priority; 
# 26
}; 
# 78 "/usr/include/x86_64-linux-gnu/bits/sched.h" 3
extern "C" {
# 82
extern int clone(int (* __fn)(void * __arg), void * __child_stack, int __flags, void * __arg, ...) noexcept(true); 
# 86
extern int unshare(int __flags) noexcept(true); 
# 89
extern int sched_getcpu() noexcept(true); 
# 92
extern int getcpu(unsigned *, unsigned *) noexcept(true); 
# 95
extern int setns(int __fd, int __nstype) noexcept(true); 
# 98
}
# 32 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
typedef unsigned long __cpu_mask; 
# 42
typedef 
# 40
struct { 
# 41
__cpu_mask __bits[(1024) / ((8) * sizeof(__cpu_mask))]; 
# 42
} cpu_set_t; 
# 115 "/usr/include/x86_64-linux-gnu/bits/cpu-set.h" 3
extern "C" {
# 117
extern int __sched_cpucount(size_t __setsize, const cpu_set_t * __setp) noexcept(true); 
# 119
extern cpu_set_t *__sched_cpualloc(size_t __count) noexcept(true); 
# 120
extern void __sched_cpufree(cpu_set_t * __set) noexcept(true); 
# 122
}
# 51 "/usr/include/sched.h" 3
extern "C" {
# 54
extern int sched_setparam(__pid_t __pid, const sched_param * __param) noexcept(true); 
# 58
extern int sched_getparam(__pid_t __pid, sched_param * __param) noexcept(true); 
# 61
extern int sched_setscheduler(__pid_t __pid, int __policy, const sched_param * __param) noexcept(true); 
# 65
extern int sched_getscheduler(__pid_t __pid) noexcept(true); 
# 68
extern int sched_yield() noexcept(true); 
# 71
extern int sched_get_priority_max(int __algorithm) noexcept(true); 
# 74
extern int sched_get_priority_min(int __algorithm) noexcept(true); 
# 78
extern int sched_rr_get_interval(__pid_t __pid, timespec * __t) noexcept(true); 
# 130 "/usr/include/sched.h" 3
extern int sched_setaffinity(__pid_t __pid, size_t __cpusetsize, const cpu_set_t * __cpuset) noexcept(true); 
# 134
extern int sched_getaffinity(__pid_t __pid, size_t __cpusetsize, cpu_set_t * __cpuset) noexcept(true); 
# 138
}
# 31 "/usr/include/x86_64-linux-gnu/bits/setjmp.h" 3
typedef long __jmp_buf[8]; 
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct___jmp_buf_tag.h" 3
struct __jmp_buf_tag { 
# 32
__jmp_buf __jmpbuf; 
# 33
int __mask_was_saved; 
# 34
__sigset_t __saved_mask; 
# 35
}; 
# 38 "/usr/include/pthread.h" 3
enum { 
# 39
PTHREAD_CREATE_JOINABLE, 
# 41
PTHREAD_CREATE_DETACHED
# 43
}; 
# 48
enum { 
# 49
PTHREAD_MUTEX_TIMED_NP, 
# 50
PTHREAD_MUTEX_RECURSIVE_NP, 
# 51
PTHREAD_MUTEX_ERRORCHECK_NP, 
# 52
PTHREAD_MUTEX_ADAPTIVE_NP, 
# 55
PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP, 
# 56
PTHREAD_MUTEX_RECURSIVE, 
# 57
PTHREAD_MUTEX_ERRORCHECK, 
# 58
PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL, 
# 62
PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP
# 64
}; 
# 70
enum { 
# 71
PTHREAD_MUTEX_STALLED, 
# 72
PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED, 
# 73
PTHREAD_MUTEX_ROBUST, 
# 74
PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
# 75
}; 
# 82
enum { 
# 83
PTHREAD_PRIO_NONE, 
# 84
PTHREAD_PRIO_INHERIT, 
# 85
PTHREAD_PRIO_PROTECT
# 86
}; 
# 105 "/usr/include/pthread.h" 3
enum { 
# 106
PTHREAD_RWLOCK_PREFER_READER_NP, 
# 107
PTHREAD_RWLOCK_PREFER_WRITER_NP, 
# 108
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP, 
# 109
PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
# 110
}; 
# 125 "/usr/include/pthread.h" 3
enum { 
# 126
PTHREAD_INHERIT_SCHED, 
# 128
PTHREAD_EXPLICIT_SCHED
# 130
}; 
# 135
enum { 
# 136
PTHREAD_SCOPE_SYSTEM, 
# 138
PTHREAD_SCOPE_PROCESS
# 140
}; 
# 145
enum { 
# 146
PTHREAD_PROCESS_PRIVATE, 
# 148
PTHREAD_PROCESS_SHARED
# 150
}; 
# 159 "/usr/include/pthread.h" 3
struct _pthread_cleanup_buffer { 
# 161
void (*__routine)(void *); 
# 162
void *__arg; 
# 163
int __canceltype; 
# 164
_pthread_cleanup_buffer *__prev; 
# 165
}; 
# 169
enum { 
# 170
PTHREAD_CANCEL_ENABLE, 
# 172
PTHREAD_CANCEL_DISABLE
# 174
}; 
# 176
enum { 
# 177
PTHREAD_CANCEL_DEFERRED, 
# 179
PTHREAD_CANCEL_ASYNCHRONOUS
# 181
}; 
# 197 "/usr/include/pthread.h" 3
extern "C" {
# 202
extern int pthread_create(pthread_t *__restrict__ __newthread, const pthread_attr_t *__restrict__ __attr, void *(* __start_routine)(void *), void *__restrict__ __arg) noexcept(true)
# 205
 __attribute((__nonnull__(1, 3))); 
# 211
extern void pthread_exit(void * __retval) __attribute((__noreturn__)); 
# 219
extern int pthread_join(pthread_t __th, void ** __thread_return); 
# 224
extern int pthread_tryjoin_np(pthread_t __th, void ** __thread_return) noexcept(true); 
# 233 "/usr/include/pthread.h" 3
extern int pthread_timedjoin_np(pthread_t __th, void ** __thread_return, const timespec * __abstime); 
# 243 "/usr/include/pthread.h" 3
extern int pthread_clockjoin_np(pthread_t __th, void ** __thread_return, clockid_t __clockid, const timespec * __abstime); 
# 269 "/usr/include/pthread.h" 3
extern int pthread_detach(pthread_t __th) noexcept(true); 
# 273
extern pthread_t pthread_self() noexcept(true) __attribute((const)); 
# 276
extern int pthread_equal(pthread_t __thread1, pthread_t __thread2) noexcept(true)
# 277
 __attribute((const)); 
# 285
extern int pthread_attr_init(pthread_attr_t * __attr) noexcept(true) __attribute((__nonnull__(1))); 
# 288
extern int pthread_attr_destroy(pthread_attr_t * __attr) noexcept(true)
# 289
 __attribute((__nonnull__(1))); 
# 292
extern int pthread_attr_getdetachstate(const pthread_attr_t * __attr, int * __detachstate) noexcept(true)
# 294
 __attribute((__nonnull__(1, 2))); 
# 297
extern int pthread_attr_setdetachstate(pthread_attr_t * __attr, int __detachstate) noexcept(true)
# 299
 __attribute((__nonnull__(1))); 
# 303
extern int pthread_attr_getguardsize(const pthread_attr_t * __attr, size_t * __guardsize) noexcept(true)
# 305
 __attribute((__nonnull__(1, 2))); 
# 308
extern int pthread_attr_setguardsize(pthread_attr_t * __attr, size_t __guardsize) noexcept(true)
# 310
 __attribute((__nonnull__(1))); 
# 314
extern int pthread_attr_getschedparam(const pthread_attr_t *__restrict__ __attr, sched_param *__restrict__ __param) noexcept(true)
# 316
 __attribute((__nonnull__(1, 2))); 
# 319
extern int pthread_attr_setschedparam(pthread_attr_t *__restrict__ __attr, const sched_param *__restrict__ __param) noexcept(true)
# 321
 __attribute((__nonnull__(1, 2))); 
# 324
extern int pthread_attr_getschedpolicy(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __policy) noexcept(true)
# 326
 __attribute((__nonnull__(1, 2))); 
# 329
extern int pthread_attr_setschedpolicy(pthread_attr_t * __attr, int __policy) noexcept(true)
# 330
 __attribute((__nonnull__(1))); 
# 333
extern int pthread_attr_getinheritsched(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __inherit) noexcept(true)
# 335
 __attribute((__nonnull__(1, 2))); 
# 338
extern int pthread_attr_setinheritsched(pthread_attr_t * __attr, int __inherit) noexcept(true)
# 340
 __attribute((__nonnull__(1))); 
# 344
extern int pthread_attr_getscope(const pthread_attr_t *__restrict__ __attr, int *__restrict__ __scope) noexcept(true)
# 346
 __attribute((__nonnull__(1, 2))); 
# 349
extern int pthread_attr_setscope(pthread_attr_t * __attr, int __scope) noexcept(true)
# 350
 __attribute((__nonnull__(1))); 
# 353
extern int pthread_attr_getstackaddr(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr) noexcept(true)
# 355
 __attribute((__nonnull__(1, 2))) __attribute((__deprecated__)); 
# 361
extern int pthread_attr_setstackaddr(pthread_attr_t * __attr, void * __stackaddr) noexcept(true)
# 363
 __attribute((__nonnull__(1))) __attribute((__deprecated__)); 
# 366
extern int pthread_attr_getstacksize(const pthread_attr_t *__restrict__ __attr, size_t *__restrict__ __stacksize) noexcept(true)
# 368
 __attribute((__nonnull__(1, 2))); 
# 373
extern int pthread_attr_setstacksize(pthread_attr_t * __attr, size_t __stacksize) noexcept(true)
# 375
 __attribute((__nonnull__(1))); 
# 379
extern int pthread_attr_getstack(const pthread_attr_t *__restrict__ __attr, void **__restrict__ __stackaddr, size_t *__restrict__ __stacksize) noexcept(true)
# 382
 __attribute((__nonnull__(1, 2, 3))); 
# 387
extern int pthread_attr_setstack(pthread_attr_t * __attr, void * __stackaddr, size_t __stacksize) noexcept(true)
# 388
 __attribute((__nonnull__(1))); 
# 394
extern int pthread_attr_setaffinity_np(pthread_attr_t * __attr, size_t __cpusetsize, const cpu_set_t * __cpuset) noexcept(true)
# 397
 __attribute((__nonnull__(1, 3))); 
# 401
extern int pthread_attr_getaffinity_np(const pthread_attr_t * __attr, size_t __cpusetsize, cpu_set_t * __cpuset) noexcept(true)
# 404
 __attribute((__nonnull__(1, 3))); 
# 407
extern int pthread_getattr_default_np(pthread_attr_t * __attr) noexcept(true)
# 408
 __attribute((__nonnull__(1))); 
# 411
extern int pthread_attr_setsigmask_np(pthread_attr_t * __attr, const __sigset_t * sigmask); 
# 417
extern int pthread_attr_getsigmask_np(const pthread_attr_t * __attr, __sigset_t * sigmask); 
# 426
extern int pthread_setattr_default_np(const pthread_attr_t * __attr) noexcept(true)
# 427
 __attribute((__nonnull__(1))); 
# 432
extern int pthread_getattr_np(pthread_t __th, pthread_attr_t * __attr) noexcept(true)
# 433
 __attribute((__nonnull__(2))); 
# 441
extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const sched_param * __param) noexcept(true)
# 443
 __attribute((__nonnull__(3))); 
# 446
extern int pthread_getschedparam(pthread_t __target_thread, int *__restrict__ __policy, sched_param *__restrict__ __param) noexcept(true)
# 449
 __attribute((__nonnull__(2, 3))); 
# 452
extern int pthread_setschedprio(pthread_t __target_thread, int __prio) noexcept(true); 
# 458
extern int pthread_getname_np(pthread_t __target_thread, char * __buf, size_t __buflen) noexcept(true)
# 460
 __attribute((__nonnull__(2))); 
# 463
extern int pthread_setname_np(pthread_t __target_thread, const char * __name) noexcept(true)
# 464
 __attribute((__nonnull__(2))); 
# 470
extern int pthread_getconcurrency() noexcept(true); 
# 473
extern int pthread_setconcurrency(int __level) noexcept(true); 
# 477
extern int pthread_yield() noexcept(true) __asm__("sched_yield"); 
# 479
extern int pthread_yield() noexcept(true) __asm__("sched_yield")
# 480
 __attribute((__deprecated__("pthread_yield is deprecated, use sched_yield instead"))); 
# 489
extern int pthread_setaffinity_np(pthread_t __th, size_t __cpusetsize, const cpu_set_t * __cpuset) noexcept(true)
# 491
 __attribute((__nonnull__(3))); 
# 494
extern int pthread_getaffinity_np(pthread_t __th, size_t __cpusetsize, cpu_set_t * __cpuset) noexcept(true)
# 496
 __attribute((__nonnull__(3))); 
# 509 "/usr/include/pthread.h" 3
extern int pthread_once(pthread_once_t * __once_control, void (* __init_routine)(void))
# 510
 __attribute((__nonnull__(1, 2))); 
# 521 "/usr/include/pthread.h" 3
extern int pthread_setcancelstate(int __state, int * __oldstate); 
# 525
extern int pthread_setcanceltype(int __type, int * __oldtype); 
# 528
extern int pthread_cancel(pthread_t __th); 
# 533
extern void pthread_testcancel(); 
# 538
struct __cancel_jmp_buf_tag { 
# 540
__jmp_buf __cancel_jmp_buf; 
# 541
int __mask_was_saved; 
# 542
}; 
# 548
typedef 
# 545
struct { 
# 546
__cancel_jmp_buf_tag __cancel_jmp_buf[1]; 
# 547
void *__pad[4]; 
# 548
} __pthread_unwind_buf_t __attribute((__aligned__)); 
# 557 "/usr/include/pthread.h" 3
struct __pthread_cleanup_frame { 
# 559
void (*__cancel_routine)(void *); 
# 560
void *__cancel_arg; 
# 561
int __do_it; 
# 562
int __cancel_type; 
# 563
}; 
# 568
class __pthread_cleanup_class { 
# 570
void (*__cancel_routine)(void *); 
# 571
void *__cancel_arg; 
# 572
int __do_it; 
# 573
int __cancel_type; 
# 576
public: __pthread_cleanup_class(void (*__fct)(void *), void *__arg) : __cancel_routine(__fct), __cancel_arg(__arg), __do_it(1) 
# 577
{ } 
# 578
~__pthread_cleanup_class() { if (__do_it) { (__cancel_routine)(__cancel_arg); }  } 
# 579
void __setdoit(int __newval) { (__do_it) = __newval; } 
# 580
void __defer() { pthread_setcanceltype(PTHREAD_CANCEL_DEFERRED, &(__cancel_type)); 
# 581
} 
# 582
void __restore() const { pthread_setcanceltype(__cancel_type, 0); } 
# 583
}; 
# 766 "/usr/include/pthread.h" 3
extern int __sigsetjmp_cancel(__cancel_jmp_buf_tag  __env[1], int __savemask) noexcept(true) __asm__("__sigsetjmp")
# 769
 __attribute((__returns_twice__)); 
# 781 "/usr/include/pthread.h" 3
extern int pthread_mutex_init(pthread_mutex_t * __mutex, const pthread_mutexattr_t * __mutexattr) noexcept(true)
# 783
 __attribute((__nonnull__(1))); 
# 786
extern int pthread_mutex_destroy(pthread_mutex_t * __mutex) noexcept(true)
# 787
 __attribute((__nonnull__(1))); 
# 790
extern int pthread_mutex_trylock(pthread_mutex_t * __mutex) noexcept(true)
# 791
 __attribute((__nonnull__(1))); 
# 794
extern int pthread_mutex_lock(pthread_mutex_t * __mutex) noexcept(true)
# 795
 __attribute((__nonnull__(1))); 
# 800
extern int pthread_mutex_timedlock(pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime) noexcept(true)
# 802
 __attribute((__nonnull__(1, 2))); 
# 817 "/usr/include/pthread.h" 3
extern int pthread_mutex_clocklock(pthread_mutex_t *__restrict__ __mutex, clockid_t __clockid, const timespec *__restrict__ __abstime) noexcept(true)
# 820
 __attribute((__nonnull__(1, 3))); 
# 835 "/usr/include/pthread.h" 3
extern int pthread_mutex_unlock(pthread_mutex_t * __mutex) noexcept(true)
# 836
 __attribute((__nonnull__(1))); 
# 840
extern int pthread_mutex_getprioceiling(const pthread_mutex_t *__restrict__ __mutex, int *__restrict__ __prioceiling) noexcept(true)
# 843
 __attribute((__nonnull__(1, 2))); 
# 847
extern int pthread_mutex_setprioceiling(pthread_mutex_t *__restrict__ __mutex, int __prioceiling, int *__restrict__ __old_ceiling) noexcept(true)
# 850
 __attribute((__nonnull__(1, 3))); 
# 855
extern int pthread_mutex_consistent(pthread_mutex_t * __mutex) noexcept(true)
# 856
 __attribute((__nonnull__(1))); 
# 859
extern int pthread_mutex_consistent_np(pthread_mutex_t *) noexcept(true) __asm__("pthread_mutex_consistent")
# 860
 __attribute((__nonnull__(1)))
# 861
 __attribute((__deprecated__("pthread_mutex_consistent_np is deprecated, use pthread_mutex_consistent"))); 
# 874 "/usr/include/pthread.h" 3
extern int pthread_mutexattr_init(pthread_mutexattr_t * __attr) noexcept(true)
# 875
 __attribute((__nonnull__(1))); 
# 878
extern int pthread_mutexattr_destroy(pthread_mutexattr_t * __attr) noexcept(true)
# 879
 __attribute((__nonnull__(1))); 
# 882
extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 885
 __attribute((__nonnull__(1, 2))); 
# 888
extern int pthread_mutexattr_setpshared(pthread_mutexattr_t * __attr, int __pshared) noexcept(true)
# 890
 __attribute((__nonnull__(1))); 
# 894
extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __kind) noexcept(true)
# 896
 __attribute((__nonnull__(1, 2))); 
# 901
extern int pthread_mutexattr_settype(pthread_mutexattr_t * __attr, int __kind) noexcept(true)
# 902
 __attribute((__nonnull__(1))); 
# 906
extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __protocol) noexcept(true)
# 909
 __attribute((__nonnull__(1, 2))); 
# 913
extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t * __attr, int __protocol) noexcept(true)
# 915
 __attribute((__nonnull__(1))); 
# 918
extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *__restrict__ __attr, int *__restrict__ __prioceiling) noexcept(true)
# 921
 __attribute((__nonnull__(1, 2))); 
# 924
extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t * __attr, int __prioceiling) noexcept(true)
# 926
 __attribute((__nonnull__(1))); 
# 930
extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t * __attr, int * __robustness) noexcept(true)
# 932
 __attribute((__nonnull__(1, 2))); 
# 935
extern int pthread_mutexattr_getrobust_np(pthread_mutexattr_t *, int *) noexcept(true) __asm__("pthread_mutexattr_getrobust")
# 937
 __attribute((__nonnull__(1)))
# 938
 __attribute((__deprecated__("pthread_mutexattr_getrobust_np is deprecated, use pthread_mutexattr_getrobust"))); 
# 946
extern int pthread_mutexattr_setrobust(pthread_mutexattr_t * __attr, int __robustness) noexcept(true)
# 948
 __attribute((__nonnull__(1))); 
# 951
extern int pthread_mutexattr_setrobust_np(pthread_mutexattr_t *, int) noexcept(true) __asm__("pthread_mutexattr_setrobust")
# 953
 __attribute((__nonnull__(1)))
# 954
 __attribute((__deprecated__("pthread_mutexattr_setrobust_np is deprecated, use pthread_mutexattr_setrobust"))); 
# 967 "/usr/include/pthread.h" 3
extern int pthread_rwlock_init(pthread_rwlock_t *__restrict__ __rwlock, const pthread_rwlockattr_t *__restrict__ __attr) noexcept(true)
# 969
 __attribute((__nonnull__(1))); 
# 972
extern int pthread_rwlock_destroy(pthread_rwlock_t * __rwlock) noexcept(true)
# 973
 __attribute((__nonnull__(1))); 
# 976
extern int pthread_rwlock_rdlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 977
 __attribute((__nonnull__(1))); 
# 980
extern int pthread_rwlock_tryrdlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 981
 __attribute((__nonnull__(1))); 
# 986
extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) noexcept(true)
# 988
 __attribute((__nonnull__(1, 2))); 
# 1004 "/usr/include/pthread.h" 3
extern int pthread_rwlock_clockrdlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) noexcept(true)
# 1007
 __attribute((__nonnull__(1, 3))); 
# 1023 "/usr/include/pthread.h" 3
extern int pthread_rwlock_wrlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 1024
 __attribute((__nonnull__(1))); 
# 1027
extern int pthread_rwlock_trywrlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 1028
 __attribute((__nonnull__(1))); 
# 1033
extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *__restrict__ __rwlock, const timespec *__restrict__ __abstime) noexcept(true)
# 1035
 __attribute((__nonnull__(1, 2))); 
# 1051 "/usr/include/pthread.h" 3
extern int pthread_rwlock_clockwrlock(pthread_rwlock_t *__restrict__ __rwlock, clockid_t __clockid, const timespec *__restrict__ __abstime) noexcept(true)
# 1054
 __attribute((__nonnull__(1, 3))); 
# 1071 "/usr/include/pthread.h" 3
extern int pthread_rwlock_unlock(pthread_rwlock_t * __rwlock) noexcept(true)
# 1072
 __attribute((__nonnull__(1))); 
# 1078
extern int pthread_rwlockattr_init(pthread_rwlockattr_t * __attr) noexcept(true)
# 1079
 __attribute((__nonnull__(1))); 
# 1082
extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t * __attr) noexcept(true)
# 1083
 __attribute((__nonnull__(1))); 
# 1086
extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 1089
 __attribute((__nonnull__(1, 2))); 
# 1092
extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t * __attr, int __pshared) noexcept(true)
# 1094
 __attribute((__nonnull__(1))); 
# 1097
extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *__restrict__ __attr, int *__restrict__ __pref) noexcept(true)
# 1100
 __attribute((__nonnull__(1, 2))); 
# 1103
extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t * __attr, int __pref) noexcept(true)
# 1104
 __attribute((__nonnull__(1))); 
# 1112
extern int pthread_cond_init(pthread_cond_t *__restrict__ __cond, const pthread_condattr_t *__restrict__ __cond_attr) noexcept(true)
# 1114
 __attribute((__nonnull__(1))); 
# 1117
extern int pthread_cond_destroy(pthread_cond_t * __cond) noexcept(true)
# 1118
 __attribute((__nonnull__(1))); 
# 1121
extern int pthread_cond_signal(pthread_cond_t * __cond) noexcept(true)
# 1122
 __attribute((__nonnull__(1))); 
# 1125
extern int pthread_cond_broadcast(pthread_cond_t * __cond) noexcept(true)
# 1126
 __attribute((__nonnull__(1))); 
# 1133
extern int pthread_cond_wait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex)
# 1135
 __attribute((__nonnull__(1, 2))); 
# 1145 "/usr/include/pthread.h" 3
extern int pthread_cond_timedwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, const timespec *__restrict__ __abstime)
# 1148
 __attribute((__nonnull__(1, 2, 3))); 
# 1171 "/usr/include/pthread.h" 3
extern int pthread_cond_clockwait(pthread_cond_t *__restrict__ __cond, pthread_mutex_t *__restrict__ __mutex, __clockid_t __clock_id, const timespec *__restrict__ __abstime)
# 1175
 __attribute((__nonnull__(1, 2, 4))); 
# 1194 "/usr/include/pthread.h" 3
extern int pthread_condattr_init(pthread_condattr_t * __attr) noexcept(true)
# 1195
 __attribute((__nonnull__(1))); 
# 1198
extern int pthread_condattr_destroy(pthread_condattr_t * __attr) noexcept(true)
# 1199
 __attribute((__nonnull__(1))); 
# 1202
extern int pthread_condattr_getpshared(const pthread_condattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 1205
 __attribute((__nonnull__(1, 2))); 
# 1208
extern int pthread_condattr_setpshared(pthread_condattr_t * __attr, int __pshared) noexcept(true)
# 1209
 __attribute((__nonnull__(1))); 
# 1213
extern int pthread_condattr_getclock(const pthread_condattr_t *__restrict__ __attr, __clockid_t *__restrict__ __clock_id) noexcept(true)
# 1216
 __attribute((__nonnull__(1, 2))); 
# 1219
extern int pthread_condattr_setclock(pthread_condattr_t * __attr, __clockid_t __clock_id) noexcept(true)
# 1221
 __attribute((__nonnull__(1))); 
# 1230 "/usr/include/pthread.h" 3
extern int pthread_spin_init(pthread_spinlock_t * __lock, int __pshared) noexcept(true)
# 1231
 __attribute((__nonnull__(1))); 
# 1234
extern int pthread_spin_destroy(pthread_spinlock_t * __lock) noexcept(true)
# 1235
 __attribute((__nonnull__(1))); 
# 1238
extern int pthread_spin_lock(pthread_spinlock_t * __lock) noexcept(true)
# 1239
 __attribute((__nonnull__(1))); 
# 1242
extern int pthread_spin_trylock(pthread_spinlock_t * __lock) noexcept(true)
# 1243
 __attribute((__nonnull__(1))); 
# 1246
extern int pthread_spin_unlock(pthread_spinlock_t * __lock) noexcept(true)
# 1247
 __attribute((__nonnull__(1))); 
# 1254
extern int pthread_barrier_init(pthread_barrier_t *__restrict__ __barrier, const pthread_barrierattr_t *__restrict__ __attr, unsigned __count) noexcept(true)
# 1257
 __attribute((__nonnull__(1))); 
# 1260
extern int pthread_barrier_destroy(pthread_barrier_t * __barrier) noexcept(true)
# 1261
 __attribute((__nonnull__(1))); 
# 1264
extern int pthread_barrier_wait(pthread_barrier_t * __barrier) noexcept(true)
# 1265
 __attribute((__nonnull__(1))); 
# 1269
extern int pthread_barrierattr_init(pthread_barrierattr_t * __attr) noexcept(true)
# 1270
 __attribute((__nonnull__(1))); 
# 1273
extern int pthread_barrierattr_destroy(pthread_barrierattr_t * __attr) noexcept(true)
# 1274
 __attribute((__nonnull__(1))); 
# 1277
extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *__restrict__ __attr, int *__restrict__ __pshared) noexcept(true)
# 1280
 __attribute((__nonnull__(1, 2))); 
# 1283
extern int pthread_barrierattr_setpshared(pthread_barrierattr_t * __attr, int __pshared) noexcept(true)
# 1285
 __attribute((__nonnull__(1))); 
# 1297 "/usr/include/pthread.h" 3
extern int pthread_key_create(pthread_key_t * __key, void (* __destr_function)(void *)) noexcept(true)
# 1299
 __attribute((__nonnull__(1))); 
# 1302
extern int pthread_key_delete(pthread_key_t __key) noexcept(true); 
# 1305
extern void *pthread_getspecific(pthread_key_t __key) noexcept(true); 
# 1308
extern int pthread_setspecific(pthread_key_t __key, const void * __pointer) noexcept(true)
# 1310
 __attribute((__access__(__none__ , 2 ))); 
# 1315
extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t * __clock_id) noexcept(true)
# 1317
 __attribute((__nonnull__(2))); 
# 1332 "/usr/include/pthread.h" 3
extern int pthread_atfork(void (* __prepare)(void), void (* __parent)(void), void (* __child)(void)) noexcept(true); 
# 1346 "/usr/include/pthread.h" 3
}
# 47 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h" 3
typedef pthread_t __gthread_t; 
# 48
typedef pthread_key_t __gthread_key_t; 
# 49
typedef pthread_once_t __gthread_once_t; 
# 50
typedef pthread_mutex_t __gthread_mutex_t; 
# 51
typedef pthread_mutex_t __gthread_recursive_mutex_t; 
# 52
typedef pthread_cond_t __gthread_cond_t; 
# 53
typedef timespec __gthread_time_t; 
# 300 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h" 3
static inline int __gthread_active_p() 
# 301
{ 
# 302
return 1; 
# 303
} 
# 660 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h" 3
static inline int __gthread_create(__gthread_t *__threadid, void *(*__func)(void *), void *
# 661
__args) 
# 662
{ 
# 663
return pthread_create(__threadid, __null, __func, __args); 
# 664
} 
# 667
static inline int __gthread_join(__gthread_t __threadid, void **__value_ptr) 
# 668
{ 
# 669
return pthread_join(__threadid, __value_ptr); 
# 670
} 
# 673
static inline int __gthread_detach(__gthread_t __threadid) 
# 674
{ 
# 675
return pthread_detach(__threadid); 
# 676
} 
# 679
static inline int __gthread_equal(__gthread_t __t1, __gthread_t __t2) 
# 680
{ 
# 681
return pthread_equal(__t1, __t2); 
# 682
} 
# 685
static inline __gthread_t __gthread_self() 
# 686
{ 
# 687
return pthread_self(); 
# 688
} 
# 691
static inline int __gthread_yield() 
# 692
{ 
# 693
return sched_yield(); 
# 694
} 
# 697
static inline int __gthread_once(__gthread_once_t *__once, void (*__func)(void)) 
# 698
{ 
# 699
if (__gthread_active_p()) { 
# 700
return pthread_once(__once, __func); } else { 
# 702
return -1; }  
# 703
} 
# 706
static inline int __gthread_key_create(__gthread_key_t *__key, void (*__dtor)(void *)) 
# 707
{ 
# 708
return pthread_key_create(__key, __dtor); 
# 709
} 
# 712
static inline int __gthread_key_delete(__gthread_key_t __key) 
# 713
{ 
# 714
return pthread_key_delete(__key); 
# 715
} 
# 718
static inline void *__gthread_getspecific(__gthread_key_t __key) 
# 719
{ 
# 720
return pthread_getspecific(__key); 
# 721
} 
# 724
static inline int __gthread_setspecific(__gthread_key_t __key, const void *__ptr) 
# 725
{ 
# 726
return pthread_setspecific(__key, __ptr); 
# 727
} 
# 730
static inline void __gthread_mutex_init_function(__gthread_mutex_t *__mutex) 
# 731
{ 
# 732
if (__gthread_active_p()) { 
# 733
pthread_mutex_init(__mutex, __null); }  
# 734
} 
# 737
static inline int __gthread_mutex_destroy(__gthread_mutex_t *__mutex) 
# 738
{ 
# 739
if (__gthread_active_p()) { 
# 740
return pthread_mutex_destroy(__mutex); } else { 
# 742
return 0; }  
# 743
} 
# 746
static inline int __gthread_mutex_lock(__gthread_mutex_t *__mutex) 
# 747
{ 
# 748
if (__gthread_active_p()) { 
# 749
return pthread_mutex_lock(__mutex); } else { 
# 751
return 0; }  
# 752
} 
# 755
static inline int __gthread_mutex_trylock(__gthread_mutex_t *__mutex) 
# 756
{ 
# 757
if (__gthread_active_p()) { 
# 758
return pthread_mutex_trylock(__mutex); } else { 
# 760
return 0; }  
# 761
} 
# 765
static inline int __gthread_mutex_timedlock(__gthread_mutex_t *__mutex, const __gthread_time_t *
# 766
__abs_timeout) 
# 767
{ 
# 768
if (__gthread_active_p()) { 
# 769
return pthread_mutex_timedlock(__mutex, __abs_timeout); } else { 
# 771
return 0; }  
# 772
} 
# 776
static inline int __gthread_mutex_unlock(__gthread_mutex_t *__mutex) 
# 777
{ 
# 778
if (__gthread_active_p()) { 
# 779
return pthread_mutex_unlock(__mutex); } else { 
# 781
return 0; }  
# 782
} 
# 809 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h" 3
static inline int __gthread_recursive_mutex_lock(__gthread_recursive_mutex_t *__mutex) 
# 810
{ 
# 811
return __gthread_mutex_lock(__mutex); 
# 812
} 
# 815
static inline int __gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t *__mutex) 
# 816
{ 
# 817
return __gthread_mutex_trylock(__mutex); 
# 818
} 
# 822
static inline int __gthread_recursive_mutex_timedlock(__gthread_recursive_mutex_t *__mutex, const __gthread_time_t *
# 823
__abs_timeout) 
# 824
{ 
# 825
return __gthread_mutex_timedlock(__mutex, __abs_timeout); 
# 826
} 
# 830
static inline int __gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t *__mutex) 
# 831
{ 
# 832
return __gthread_mutex_unlock(__mutex); 
# 833
} 
# 836
static inline int __gthread_recursive_mutex_destroy(__gthread_recursive_mutex_t *__mutex) 
# 837
{ 
# 838
return __gthread_mutex_destroy(__mutex); 
# 839
} 
# 851 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr-default.h" 3
static inline int __gthread_cond_broadcast(__gthread_cond_t *__cond) 
# 852
{ 
# 853
return pthread_cond_broadcast(__cond); 
# 854
} 
# 857
static inline int __gthread_cond_signal(__gthread_cond_t *__cond) 
# 858
{ 
# 859
return pthread_cond_signal(__cond); 
# 860
} 
# 863
static inline int __gthread_cond_wait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex) 
# 864
{ 
# 865
return pthread_cond_wait(__cond, __mutex); 
# 866
} 
# 869
static inline int __gthread_cond_timedwait(__gthread_cond_t *__cond, __gthread_mutex_t *__mutex, const __gthread_time_t *
# 870
__abs_timeout) 
# 871
{ 
# 872
return pthread_cond_timedwait(__cond, __mutex, __abs_timeout); 
# 873
} 
# 876
static inline int __gthread_cond_wait_recursive(__gthread_cond_t *__cond, __gthread_recursive_mutex_t *
# 877
__mutex) 
# 878
{ 
# 879
return __gthread_cond_wait(__cond, __mutex); 
# 880
} 
# 883
static inline int __gthread_cond_destroy(__gthread_cond_t *__cond) 
# 884
{ 
# 885
return pthread_cond_destroy(__cond); 
# 886
} 
# 151 "/usr/include/x86_64-linux-gnu/c++/11/bits/gthr.h" 3
#pragma GCC visibility pop
# 32 "/usr/include/x86_64-linux-gnu/c++/11/bits/atomic_word.h" 3
typedef int _Atomic_word; 
# 24 "/usr/include/x86_64-linux-gnu/sys/single_threaded.h" 3
extern "C" {
# 29
extern char __libc_single_threaded; 
# 31
}
# 41 "/usr/include/c++/11/ext/atomicity.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 45
__attribute((__always_inline__)) inline bool 
# 47
__is_single_threaded() noexcept 
# 48
{ 
# 52
return ::__libc_single_threaded; 
# 56
} 
# 64
__attribute((__always_inline__)) inline _Atomic_word 
# 65
__exchange_and_add(volatile _Atomic_word *__mem, int __val) 
# 66
{ return __atomic_fetch_add(__mem, __val, 4); } 
# 69
__attribute((__always_inline__)) inline void 
# 70
__atomic_add(volatile _Atomic_word *__mem, int __val) 
# 71
{ __atomic_fetch_add(__mem, __val, 4); } 
# 81 "/usr/include/c++/11/ext/atomicity.h" 3
__attribute((__always_inline__)) inline _Atomic_word 
# 82
__exchange_and_add_single(_Atomic_word *__mem, int __val) 
# 83
{ 
# 84
_Atomic_word __result = *__mem; 
# 85
(*__mem) += __val; 
# 86
return __result; 
# 87
} 
# 90
__attribute((__always_inline__)) inline void 
# 91
__atomic_add_single(_Atomic_word *__mem, int __val) 
# 92
{ (*__mem) += __val; } 
# 95
__attribute((__always_inline__)) inline _Atomic_word 
# 96
__exchange_and_add_dispatch(_Atomic_word *__mem, int __val) 
# 97
{ 
# 98
if (__is_single_threaded()) { 
# 99
return __exchange_and_add_single(__mem, __val); } else { 
# 101
return __exchange_and_add(__mem, __val); }  
# 102
} 
# 105
__attribute((__always_inline__)) inline void 
# 106
__atomic_add_dispatch(_Atomic_word *__mem, int __val) 
# 107
{ 
# 108
if (__is_single_threaded()) { 
# 109
__atomic_add_single(__mem, __val); } else { 
# 111
__atomic_add(__mem, __val); }  
# 112
} 
# 115
}
# 40 "/usr/include/c++/11/ext/new_allocator.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 54 "/usr/include/c++/11/ext/new_allocator.h" 3
template< class _Tp> 
# 55
class new_allocator { 
# 58
public: typedef _Tp value_type; 
# 59
typedef std::size_t size_type; 
# 60
typedef std::ptrdiff_t difference_type; 
# 62
typedef _Tp *pointer; 
# 63
typedef const _Tp *const_pointer; 
# 64
typedef _Tp &reference; 
# 65
typedef const _Tp &const_reference; 
# 67
template< class _Tp1> 
# 68
struct rebind { 
# 69
typedef new_allocator< _Tp1>  other; }; 
# 75
typedef std::true_type propagate_on_container_move_assignment; 
# 79
new_allocator() noexcept { } 
# 82
new_allocator(const new_allocator &) noexcept { } 
# 84
template< class _Tp1> 
# 86
new_allocator(const new_allocator< _Tp1>  &) noexcept { } 
# 89
~new_allocator() noexcept { } 
# 92
pointer address(reference __x) const noexcept 
# 93
{ return std::__addressof(__x); } 
# 96
const_pointer address(const_reference __x) const noexcept 
# 97
{ return std::__addressof(__x); } 
# 102
[[__nodiscard__]] _Tp *
# 103
allocate(size_type __n, const void * = 0) 
# 104
{ 
# 108
static_assert((sizeof(_Tp) != (0)), "cannot allocate incomplete types");
# 111
if (__builtin_expect(__n > _M_max_size(), false)) 
# 112
{ 
# 115
if (__n > (((std::size_t)(-1)) / sizeof(_Tp))) { 
# 116
std::__throw_bad_array_new_length(); }  
# 117
std::__throw_bad_alloc(); 
# 118
}  
# 121
if (__alignof__(_Tp) > (16)) 
# 122
{ 
# 123
std::align_val_t __al = ((std::align_val_t)__alignof__(_Tp)); 
# 124
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp), __al)); 
# 125
}  
# 127
return static_cast< _Tp *>(::operator new(__n * sizeof(_Tp))); 
# 128
} 
# 132
void deallocate(_Tp *__p, size_type __t __attribute((__unused__))) 
# 133
{ 
# 135
if (__alignof__(_Tp) > (16)) 
# 136
{ 
# 137
::operator delete(__p, __t * sizeof(_Tp), (std::align_val_t)__alignof__(_Tp)); 
# 142
return; 
# 143
}  
# 145
::operator delete(__p, __t * sizeof(_Tp)); 
# 150
} 
# 154
size_type max_size() const noexcept 
# 155
{ return _M_max_size(); } 
# 158
template< class _Up, class ..._Args> void 
# 160
construct(_Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 162
{ ::new ((void *)__p) _Up(std::forward< _Args> (__args)...); } 
# 164
template< class _Up> void 
# 166
destroy(_Up *__p) noexcept(std::template is_nothrow_destructible< _Up> ::value) 
# 168
{ __p->~_Up(); } 
# 181 "/usr/include/c++/11/ext/new_allocator.h" 3
template< class _Up> friend inline bool 
# 183
operator==(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 185
{ return true; } 
# 188
template< class _Up> friend inline bool 
# 190
operator!=(const new_allocator< _Tp>  &, const __gnu_cxx::new_allocator< _Up>  &) noexcept 
# 192
{ return false; } 
# 197
private: constexpr size_type _M_max_size() const noexcept 
# 198
{ 
# 200
return ((std::size_t)9223372036854775807L) / sizeof(_Tp); 
# 204
} 
# 205
}; 
# 208
}
# 36 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h" 3
namespace std { 
# 47 "/usr/include/x86_64-linux-gnu/c++/11/bits/c++allocator.h" 3
template< class _Tp> using __allocator_base = __gnu_cxx::new_allocator< _Tp> ; 
# 49
}
# 54 "/usr/include/c++/11/bits/allocator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 72 "/usr/include/c++/11/bits/allocator.h" 3
template<> class allocator< void>  { 
# 75
public: typedef void value_type; 
# 76
typedef size_t size_type; 
# 77
typedef ptrdiff_t difference_type; 
# 81
typedef void *pointer; 
# 82
typedef const void *const_pointer; 
# 84
template< class _Tp1> 
# 85
struct rebind { 
# 86
typedef std::allocator< _Tp1>  other; }; 
# 92
using propagate_on_container_move_assignment = true_type; 
# 94
using is_always_equal = true_type; 
# 113 "/usr/include/c++/11/bits/allocator.h" 3
}; 
# 123 "/usr/include/c++/11/bits/allocator.h" 3
template< class _Tp> 
# 124
class allocator : public __allocator_base< _Tp>  { 
# 127
public: typedef _Tp value_type; 
# 128
typedef std::size_t size_type; 
# 129
typedef std::ptrdiff_t difference_type; 
# 133
typedef _Tp *pointer; 
# 134
typedef const _Tp *const_pointer; 
# 135
typedef _Tp &reference; 
# 136
typedef const _Tp &const_reference; 
# 138
template< class _Tp1> 
# 139
struct rebind { 
# 140
typedef allocator< _Tp1>  other; }; 
# 146
using propagate_on_container_move_assignment = std::true_type; 
# 148
using is_always_equal = std::true_type; 
# 156
allocator() noexcept { } 
# 159
allocator(const allocator &__a) noexcept : std::__allocator_base< _Tp> (__a) 
# 160
{ } 
# 164
allocator &operator=(const allocator &) = default;
# 167
template< class _Tp1> 
# 169
allocator(const allocator< _Tp1>  &) noexcept { } 
# 174
~allocator() noexcept { } 
# 204 "/usr/include/c++/11/bits/allocator.h" 3
friend inline bool operator==(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 205
{ return true; } 
# 209
friend inline bool operator!=(const allocator< _Tp>  &, const allocator< _Tp>  &) noexcept 
# 210
{ return false; } 
# 214
}; 
# 216
template< class _T1, class _T2> inline bool 
# 218
operator==(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 220
{ return true; } 
# 223
template< class _T1, class _T2> inline bool 
# 225
operator!=(const allocator< _T1>  &, const allocator< _T2>  &) noexcept 
# 227
{ return false; } 
# 232
template< class _Tp> 
# 233
class allocator< const _Tp>  { 
# 236
public: typedef _Tp value_type; 
# 237
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 238
}; 
# 240
template< class _Tp> 
# 241
class allocator< volatile _Tp>  { 
# 244
public: typedef _Tp value_type; 
# 245
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 246
}; 
# 248
template< class _Tp> 
# 249
class allocator< const volatile _Tp>  { 
# 252
public: typedef _Tp value_type; 
# 253
template< class _Up> allocator(const std::allocator< _Up>  &) { } 
# 254
}; 
# 261
extern template class allocator< char> ;
# 262
extern template class allocator< wchar_t> ;
# 269
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 270
struct __alloc_swap { 
# 271
static void _S_do_it(_Alloc &, _Alloc &) noexcept { } }; 
# 273
template< class _Alloc> 
# 274
struct __alloc_swap< _Alloc, false>  { 
# 277
static void _S_do_it(_Alloc &__one, _Alloc &__two) noexcept 
# 278
{ 
# 280
if (__one != __two) { 
# 281
swap(__one, __two); }  
# 282
} 
# 283
}; 
# 286
template< class _Alloc, bool  = __is_empty(_Alloc)> 
# 287
struct __alloc_neq { 
# 290
static bool _S_do_it(const _Alloc &, const _Alloc &) 
# 291
{ return false; } 
# 292
}; 
# 294
template< class _Alloc> 
# 295
struct __alloc_neq< _Alloc, false>  { 
# 298
static bool _S_do_it(const _Alloc &__one, const _Alloc &__two) 
# 299
{ return __one != __two; } 
# 300
}; 
# 303
template< class _Tp, bool 
# 304
 = __or_< is_copy_constructible< typename _Tp::value_type> , is_nothrow_move_constructible< typename _Tp::value_type> > ::value> 
# 306
struct __shrink_to_fit_aux { 
# 307
static bool _S_do_it(_Tp &) noexcept { return false; } }; 
# 309
template< class _Tp> 
# 310
struct __shrink_to_fit_aux< _Tp, true>  { 
# 313
static bool _S_do_it(_Tp &__c) noexcept 
# 314
{ 
# 316
try 
# 317
{ 
# 318
_Tp(__make_move_if_noexcept_iterator(__c.begin()), __make_move_if_noexcept_iterator(__c.end()), __c.get_allocator()).swap(__c); 
# 321
return true; 
# 322
} 
# 323
catch (...) 
# 324
{ return false; }  
# 328
} 
# 329
}; 
# 333
}
# 36 "/usr/include/c++/11/bits/cxxabi_forced.h" 3
#pragma GCC visibility push ( default )
# 39
namespace __cxxabiv1 { 
# 48
class __forced_unwind { 
# 50
virtual ~__forced_unwind() throw(); 
# 53
virtual void __pure_dummy() = 0; 
# 54
}; 
# 55
}
# 58
#pragma GCC visibility pop
# 39 "/usr/include/c++/11/bits/ostream_insert.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> inline void 
# 45
__ostream_write(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 46
__s, streamsize __n) 
# 47
{ 
# 48
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 49
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 51
const streamsize __put = __out.rdbuf()->sputn(__s, __n); 
# 52
if (__put != __n) { 
# 53
__out.setstate(__ios_base::badbit); }  
# 54
} 
# 56
template< class _CharT, class _Traits> inline void 
# 58
__ostream_fill(basic_ostream< _CharT, _Traits>  &__out, streamsize __n) 
# 59
{ 
# 60
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 61
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 63
const _CharT __c = __out.fill(); 
# 64
for (; __n > (0); --__n) 
# 65
{ 
# 66
const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c); 
# 67
if (_Traits::eq_int_type(__put, _Traits::eof())) 
# 68
{ 
# 69
__out.setstate(__ios_base::badbit); 
# 70
break; 
# 71
}  
# 72
}  
# 73
} 
# 75
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 77
__ostream_insert(basic_ostream< _CharT, _Traits>  &__out, const _CharT *
# 78
__s, streamsize __n) 
# 79
{ 
# 80
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 81
typedef typename basic_ostream< _CharT, _Traits> ::ios_base __ios_base; 
# 83
typename basic_ostream< _CharT, _Traits> ::sentry __cerb(__out); 
# 84
if (__cerb) 
# 85
{ 
# 86
try 
# 87
{ 
# 88
const streamsize __w = __out.width(); 
# 89
if (__w > __n) 
# 90
{ 
# 91
const bool __left = (__out.flags() & __ios_base::adjustfield) == __ios_base::left; 
# 94
if (!__left) { 
# 95
__ostream_fill(__out, __w - __n); }  
# 96
if (__out.good()) { 
# 97
__ostream_write(__out, __s, __n); }  
# 98
if (__left && __out.good()) { 
# 99
__ostream_fill(__out, __w - __n); }  
# 100
} else { 
# 102
__ostream_write(__out, __s, __n); }  
# 103
__out.width(0); 
# 104
} 
# 105
catch (__cxxabiv1::__forced_unwind &) 
# 106
{ 
# 107
__out._M_setstate(__ios_base::badbit); 
# 108
throw; 
# 109
} 
# 110
catch (...) 
# 111
{ __out._M_setstate(__ios_base::badbit); }  
# 112
}  
# 113
return __out; 
# 114
} 
# 119
extern template basic_ostream< char>  &__ostream_insert(basic_ostream< char>  & __out, const char * __s, streamsize __n);
# 122
extern template basic_ostream< wchar_t>  &__ostream_insert(basic_ostream< wchar_t>  & __out, const wchar_t * __s, streamsize __n);
# 128
}
# 63 "/usr/include/c++/11/bits/stl_function.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 116 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 117
struct unary_function { 
# 120
typedef _Arg argument_type; 
# 123
typedef _Result result_type; 
# 124
}; 
# 130
template< class _Arg1, class _Arg2, class _Result> 
# 131
struct binary_function { 
# 134
typedef _Arg1 first_argument_type; 
# 137
typedef _Arg2 second_argument_type; 
# 140
typedef _Result result_type; 
# 141
}; 
# 157 "/usr/include/c++/11/bits/stl_function.h" 3
struct __is_transparent; 
# 159
template< class _Tp = void> struct plus; 
# 162
template< class _Tp = void> struct minus; 
# 165
template< class _Tp = void> struct multiplies; 
# 168
template< class _Tp = void> struct divides; 
# 171
template< class _Tp = void> struct modulus; 
# 174
template< class _Tp = void> struct negate; 
# 179
template< class _Tp> 
# 180
struct plus : public binary_function< _Tp, _Tp, _Tp>  { 
# 185
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 186
{ return __x + __y; } 
# 187
}; 
# 190
template< class _Tp> 
# 191
struct minus : public binary_function< _Tp, _Tp, _Tp>  { 
# 195
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 196
{ return __x - __y; } 
# 197
}; 
# 200
template< class _Tp> 
# 201
struct multiplies : public binary_function< _Tp, _Tp, _Tp>  { 
# 205
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 206
{ return __x * __y; } 
# 207
}; 
# 210
template< class _Tp> 
# 211
struct divides : public binary_function< _Tp, _Tp, _Tp>  { 
# 215
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 216
{ return __x / __y; } 
# 217
}; 
# 220
template< class _Tp> 
# 221
struct modulus : public binary_function< _Tp, _Tp, _Tp>  { 
# 225
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 226
{ return __x % __y; } 
# 227
}; 
# 230
template< class _Tp> 
# 231
struct negate : public unary_function< _Tp, _Tp>  { 
# 235
constexpr _Tp operator()(const _Tp &__x) const 
# 236
{ return -__x; } 
# 237
}; 
# 244
template<> struct plus<>  { 
# 246
template< class _Tp, class _Up> constexpr auto 
# 249
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) + std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) + std::forward< _Up> (__u))) 
# 252
{ return std::forward< _Tp> (__t) + std::forward< _Up> (__u); } 
# 254
typedef __is_transparent is_transparent; 
# 255
}; 
# 259
template<> struct minus< void>  { 
# 261
template< class _Tp, class _Up> constexpr auto 
# 264
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) - std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) - std::forward< _Up> (__u))) 
# 267
{ return std::forward< _Tp> (__t) - std::forward< _Up> (__u); } 
# 269
typedef __is_transparent is_transparent; 
# 270
}; 
# 274
template<> struct multiplies<>  { 
# 276
template< class _Tp, class _Up> constexpr auto 
# 279
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) * std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) * std::forward< _Up> (__u))) 
# 282
{ return std::forward< _Tp> (__t) * std::forward< _Up> (__u); } 
# 284
typedef __is_transparent is_transparent; 
# 285
}; 
# 289
template<> struct divides< void>  { 
# 291
template< class _Tp, class _Up> constexpr auto 
# 294
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) / std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) / std::forward< _Up> (__u))) 
# 297
{ return std::forward< _Tp> (__t) / std::forward< _Up> (__u); } 
# 299
typedef __is_transparent is_transparent; 
# 300
}; 
# 304
template<> struct modulus< void>  { 
# 306
template< class _Tp, class _Up> constexpr auto 
# 309
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) % std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) % std::forward< _Up> (__u))) 
# 312
{ return std::forward< _Tp> (__t) % std::forward< _Up> (__u); } 
# 314
typedef __is_transparent is_transparent; 
# 315
}; 
# 319
template<> struct negate< void>  { 
# 321
template< class _Tp> constexpr auto 
# 324
operator()(_Tp &&__t) const noexcept(noexcept((-std::forward< _Tp> (__t))))->__decltype((-std::forward< _Tp> (__t))) 
# 327
{ return -std::forward< _Tp> (__t); } 
# 329
typedef __is_transparent is_transparent; 
# 330
}; 
# 344 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Tp = void> struct equal_to; 
# 347
template< class _Tp = void> struct not_equal_to; 
# 350
template< class _Tp = void> struct greater; 
# 353
template< class _Tp = void> struct less; 
# 356
template< class _Tp = void> struct greater_equal; 
# 359
template< class _Tp = void> struct less_equal; 
# 364
template< class _Tp> 
# 365
struct equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 369
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 370
{ return __x == __y; } 
# 371
}; 
# 374
template< class _Tp> 
# 375
struct not_equal_to : public binary_function< _Tp, _Tp, bool>  { 
# 379
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 380
{ return __x != __y; } 
# 381
}; 
# 384
template< class _Tp> 
# 385
struct greater : public binary_function< _Tp, _Tp, bool>  { 
# 389
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 390
{ return __x > __y; } 
# 391
}; 
# 394
template< class _Tp> 
# 395
struct less : public binary_function< _Tp, _Tp, bool>  { 
# 399
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 400
{ return __x < __y; } 
# 401
}; 
# 404
template< class _Tp> 
# 405
struct greater_equal : public binary_function< _Tp, _Tp, bool>  { 
# 409
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 410
{ return __x >= __y; } 
# 411
}; 
# 414
template< class _Tp> 
# 415
struct less_equal : public binary_function< _Tp, _Tp, bool>  { 
# 419
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 420
{ return __x <= __y; } 
# 421
}; 
# 424
template< class _Tp> 
# 425
struct greater< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 428
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 429
{ 
# 432
if (__builtin_is_constant_evaluated()) { 
# 436
return __x > __y; }  
# 438
return ((unsigned long)__x) > ((unsigned long)__y); 
# 439
} 
# 440
}; 
# 443
template< class _Tp> 
# 444
struct less< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 447
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 448
{ 
# 451
if (__builtin_is_constant_evaluated()) { 
# 455
return __x < __y; }  
# 457
return ((unsigned long)__x) < ((unsigned long)__y); 
# 458
} 
# 459
}; 
# 462
template< class _Tp> 
# 463
struct greater_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 466
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 467
{ 
# 470
if (__builtin_is_constant_evaluated()) { 
# 474
return __x >= __y; }  
# 476
return ((unsigned long)__x) >= ((unsigned long)__y); 
# 477
} 
# 478
}; 
# 481
template< class _Tp> 
# 482
struct less_equal< _Tp *>  : public binary_function< _Tp *, _Tp *, bool>  { 
# 485
constexpr bool operator()(_Tp *__x, _Tp *__y) const noexcept 
# 486
{ 
# 489
if (__builtin_is_constant_evaluated()) { 
# 493
return __x <= __y; }  
# 495
return ((unsigned long)__x) <= ((unsigned long)__y); 
# 496
} 
# 497
}; 
# 502
template<> struct equal_to< void>  { 
# 504
template< class _Tp, class _Up> constexpr auto 
# 506
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) == std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) == std::forward< _Up> (__u))) 
# 509
{ return std::forward< _Tp> (__t) == std::forward< _Up> (__u); } 
# 511
typedef __is_transparent is_transparent; 
# 512
}; 
# 516
template<> struct not_equal_to< void>  { 
# 518
template< class _Tp, class _Up> constexpr auto 
# 520
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) != std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) != std::forward< _Up> (__u))) 
# 523
{ return std::forward< _Tp> (__t) != std::forward< _Up> (__u); } 
# 525
typedef __is_transparent is_transparent; 
# 526
}; 
# 530
template<> struct greater< void>  { 
# 532
template< class _Tp, class _Up> constexpr auto 
# 534
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) > std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) > std::forward< _Up> (__u))) 
# 537
{ 
# 538
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 540
} 
# 542
template< class _Tp, class _Up> constexpr bool 
# 544
operator()(_Tp *__t, _Up *__u) const noexcept 
# 545
{ return std::greater< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 547
typedef __is_transparent is_transparent; 
# 552
private: 
# 550
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 552
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 553
{ return std::forward< _Tp> (__t) > std::forward< _Up> (__u); } 
# 555
template< class _Tp, class _Up> static constexpr bool 
# 557
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 558
{ 
# 559
return std::greater< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 562
} 
# 565
template< class _Tp, class _Up, class  = void> 
# 566
struct __not_overloaded2 : public true_type { }; 
# 569
template< class _Tp, class _Up> 
# 570
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>(std::declval< _Up> ())))> >  : public false_type { 
# 572
}; 
# 575
template< class _Tp, class _Up, class  = void> 
# 576
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 579
template< class _Tp, class _Up> 
# 580
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 582
}; 
# 584
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 588
}; 
# 592
template<> struct less< void>  { 
# 594
template< class _Tp, class _Up> constexpr auto 
# 596
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) < std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) < std::forward< _Up> (__u))) 
# 599
{ 
# 600
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 602
} 
# 604
template< class _Tp, class _Up> constexpr bool 
# 606
operator()(_Tp *__t, _Up *__u) const noexcept 
# 607
{ return std::less< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 609
typedef __is_transparent is_transparent; 
# 614
private: 
# 612
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 614
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 615
{ return std::forward< _Tp> (__t) < std::forward< _Up> (__u); } 
# 617
template< class _Tp, class _Up> static constexpr bool 
# 619
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 620
{ 
# 621
return std::less< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 624
} 
# 627
template< class _Tp, class _Up, class  = void> 
# 628
struct __not_overloaded2 : public true_type { }; 
# 631
template< class _Tp, class _Up> 
# 632
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator< (std::declval< _Up> ())))> >  : public false_type { 
# 634
}; 
# 637
template< class _Tp, class _Up, class  = void> 
# 638
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 641
template< class _Tp, class _Up> 
# 642
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator< (std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 644
}; 
# 646
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 650
}; 
# 654
template<> struct greater_equal< void>  { 
# 656
template< class _Tp, class _Up> constexpr auto 
# 658
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) >= std::forward< _Up> (__u))) 
# 661
{ 
# 662
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 664
} 
# 666
template< class _Tp, class _Up> constexpr bool 
# 668
operator()(_Tp *__t, _Up *__u) const noexcept 
# 669
{ return std::greater_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 671
typedef __is_transparent is_transparent; 
# 676
private: 
# 674
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 676
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 677
{ return std::forward< _Tp> (__t) >= std::forward< _Up> (__u); } 
# 679
template< class _Tp, class _Up> static constexpr bool 
# 681
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 682
{ 
# 683
return std::greater_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 686
} 
# 689
template< class _Tp, class _Up, class  = void> 
# 690
struct __not_overloaded2 : public true_type { }; 
# 693
template< class _Tp, class _Up> 
# 694
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator>=(std::declval< _Up> ())))> >  : public false_type { 
# 696
}; 
# 699
template< class _Tp, class _Up, class  = void> 
# 700
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 703
template< class _Tp, class _Up> 
# 704
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator>=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 706
}; 
# 708
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 712
}; 
# 716
template<> struct less_equal< void>  { 
# 718
template< class _Tp, class _Up> constexpr auto 
# 720
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) <= std::forward< _Up> (__u))) 
# 723
{ 
# 724
return _S_cmp(std::forward< _Tp> (__t), std::forward< _Up> (__u), __ptr_cmp< _Tp, _Up> {}); 
# 726
} 
# 728
template< class _Tp, class _Up> constexpr bool 
# 730
operator()(_Tp *__t, _Up *__u) const noexcept 
# 731
{ return std::less_equal< common_type_t< _Tp *, _Up *> > {}(__t, __u); } 
# 733
typedef __is_transparent is_transparent; 
# 738
private: 
# 736
template< class _Tp, class _Up> static constexpr decltype(auto) 
# 738
_S_cmp(_Tp &&__t, _Up &&__u, false_type) 
# 739
{ return std::forward< _Tp> (__t) <= std::forward< _Up> (__u); } 
# 741
template< class _Tp, class _Up> static constexpr bool 
# 743
_S_cmp(_Tp &&__t, _Up &&__u, true_type) noexcept 
# 744
{ 
# 745
return std::less_equal< const volatile void *> {}(static_cast< const volatile void *>(std::forward< _Tp> (__t)), static_cast< const volatile void *>(std::forward< _Up> (__u))); 
# 748
} 
# 751
template< class _Tp, class _Up, class  = void> 
# 752
struct __not_overloaded2 : public true_type { }; 
# 755
template< class _Tp, class _Up> 
# 756
struct __not_overloaded2< _Tp, _Up, __void_t< __decltype((std::declval< _Tp> ().operator<=(std::declval< _Up> ())))> >  : public false_type { 
# 758
}; 
# 761
template< class _Tp, class _Up, class  = void> 
# 762
struct __not_overloaded : public __not_overloaded2< _Tp, _Up>  { }; 
# 765
template< class _Tp, class _Up> 
# 766
struct __not_overloaded< _Tp, _Up, __void_t< __decltype((operator<=(std::declval< _Tp> (), std::declval< _Up> ())))> >  : public false_type { 
# 768
}; 
# 770
template< class _Tp, class _Up> using __ptr_cmp = __and_< __not_overloaded< _Tp, _Up> , is_convertible< _Tp, const volatile void *> , is_convertible< _Up, const volatile void *> > ; 
# 774
}; 
# 788 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Tp = void> struct logical_and; 
# 791
template< class _Tp = void> struct logical_or; 
# 794
template< class _Tp = void> struct logical_not; 
# 799
template< class _Tp> 
# 800
struct logical_and : public binary_function< _Tp, _Tp, bool>  { 
# 804
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 805
{ return __x && __y; } 
# 806
}; 
# 809
template< class _Tp> 
# 810
struct logical_or : public binary_function< _Tp, _Tp, bool>  { 
# 814
constexpr bool operator()(const _Tp &__x, const _Tp &__y) const 
# 815
{ return __x || __y; } 
# 816
}; 
# 819
template< class _Tp> 
# 820
struct logical_not : public unary_function< _Tp, bool>  { 
# 824
constexpr bool operator()(const _Tp &__x) const 
# 825
{ return !__x; } 
# 826
}; 
# 831
template<> struct logical_and< void>  { 
# 833
template< class _Tp, class _Up> constexpr auto 
# 836
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) && std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) && std::forward< _Up> (__u))) 
# 839
{ return std::forward< _Tp> (__t) && std::forward< _Up> (__u); } 
# 841
typedef __is_transparent is_transparent; 
# 842
}; 
# 846
template<> struct logical_or< void>  { 
# 848
template< class _Tp, class _Up> constexpr auto 
# 851
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) || std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) || std::forward< _Up> (__u))) 
# 854
{ return std::forward< _Tp> (__t) || std::forward< _Up> (__u); } 
# 856
typedef __is_transparent is_transparent; 
# 857
}; 
# 861
template<> struct logical_not< void>  { 
# 863
template< class _Tp> constexpr auto 
# 866
operator()(_Tp &&__t) const noexcept(noexcept((!std::forward< _Tp> (__t))))->__decltype((!std::forward< _Tp> (__t))) 
# 869
{ return !std::forward< _Tp> (__t); } 
# 871
typedef __is_transparent is_transparent; 
# 872
}; 
# 877
template< class _Tp = void> struct bit_and; 
# 880
template< class _Tp = void> struct bit_or; 
# 883
template< class _Tp = void> struct bit_xor; 
# 886
template< class _Tp = void> struct bit_not; 
# 892
template< class _Tp> 
# 893
struct bit_and : public binary_function< _Tp, _Tp, _Tp>  { 
# 897
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 898
{ return __x & __y; } 
# 899
}; 
# 901
template< class _Tp> 
# 902
struct bit_or : public binary_function< _Tp, _Tp, _Tp>  { 
# 906
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 907
{ return __x | __y; } 
# 908
}; 
# 910
template< class _Tp> 
# 911
struct bit_xor : public binary_function< _Tp, _Tp, _Tp>  { 
# 915
constexpr _Tp operator()(const _Tp &__x, const _Tp &__y) const 
# 916
{ return __x ^ __y; } 
# 917
}; 
# 919
template< class _Tp> 
# 920
struct bit_not : public unary_function< _Tp, _Tp>  { 
# 924
constexpr _Tp operator()(const _Tp &__x) const 
# 925
{ return ~__x; } 
# 926
}; 
# 930
template<> struct bit_and< void>  { 
# 932
template< class _Tp, class _Up> constexpr auto 
# 935
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) & std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) & std::forward< _Up> (__u))) 
# 938
{ return std::forward< _Tp> (__t) & std::forward< _Up> (__u); } 
# 940
typedef __is_transparent is_transparent; 
# 941
}; 
# 944
template<> struct bit_or< void>  { 
# 946
template< class _Tp, class _Up> constexpr auto 
# 949
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) | std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) | std::forward< _Up> (__u))) 
# 952
{ return std::forward< _Tp> (__t) | std::forward< _Up> (__u); } 
# 954
typedef __is_transparent is_transparent; 
# 955
}; 
# 958
template<> struct bit_xor< void>  { 
# 960
template< class _Tp, class _Up> constexpr auto 
# 963
operator()(_Tp &&__t, _Up &&__u) const noexcept(noexcept((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))))->__decltype((std::forward< _Tp> (__t) ^ std::forward< _Up> (__u))) 
# 966
{ return std::forward< _Tp> (__t) ^ std::forward< _Up> (__u); } 
# 968
typedef __is_transparent is_transparent; 
# 969
}; 
# 972
template<> struct bit_not< void>  { 
# 974
template< class _Tp> constexpr auto 
# 977
operator()(_Tp &&__t) const noexcept(noexcept((~std::forward< _Tp> (__t))))->__decltype((~std::forward< _Tp> (__t))) 
# 980
{ return ~std::forward< _Tp> (__t); } 
# 982
typedef __is_transparent is_transparent; 
# 983
}; 
# 1019 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Predicate> 
# 1020
class unary_negate : public unary_function< typename _Predicate::argument_type, bool>  { 
# 1024
protected: _Predicate _M_pred; 
# 1029
public: constexpr explicit unary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1033
constexpr bool operator()(const typename _Predicate::argument_type &__x) const 
# 1034
{ return !(_M_pred)(__x); } 
# 1035
}; 
# 1038
template< class _Predicate> constexpr unary_negate< _Predicate>  
# 1041
not1(const _Predicate &__pred) 
# 1042
{ return ((unary_negate< _Predicate> )(__pred)); } 
# 1045
template< class _Predicate> 
# 1046
class binary_negate : public binary_function< typename _Predicate::first_argument_type, typename _Predicate::second_argument_type, bool>  { 
# 1051
protected: _Predicate _M_pred; 
# 1056
public: constexpr explicit binary_negate(const _Predicate &__x) : _M_pred(__x) { } 
# 1060
constexpr bool operator()(const typename _Predicate::first_argument_type &__x, const typename _Predicate::second_argument_type &
# 1061
__y) const 
# 1062
{ return !(_M_pred)(__x, __y); } 
# 1063
}; 
# 1066
template< class _Predicate> constexpr binary_negate< _Predicate>  
# 1069
not2(const _Predicate &__pred) 
# 1070
{ return ((binary_negate< _Predicate> )(__pred)); } 
# 1098 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Arg, class _Result> 
# 1099
class pointer_to_unary_function : public unary_function< _Arg, _Result>  { 
# 1102
protected: _Result (*_M_ptr)(_Arg); 
# 1105
public: pointer_to_unary_function() { } 
# 1108
explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) 
# 1109
{ } 
# 1112
_Result operator()(_Arg __x) const 
# 1113
{ return (_M_ptr)(__x); } 
# 1114
}; 
# 1117
template< class _Arg, class _Result> inline pointer_to_unary_function< _Arg, _Result>  
# 1119
ptr_fun(_Result (*__x)(_Arg)) 
# 1120
{ return ((pointer_to_unary_function< _Arg, _Result> )(__x)); } 
# 1123
template< class _Arg1, class _Arg2, class _Result> 
# 1124
class pointer_to_binary_function : public binary_function< _Arg1, _Arg2, _Result>  { 
# 1128
protected: _Result (*_M_ptr)(_Arg1, _Arg2); 
# 1131
public: pointer_to_binary_function() { } 
# 1134
explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2)) : _M_ptr(__x) 
# 1135
{ } 
# 1138
_Result operator()(_Arg1 __x, _Arg2 __y) const 
# 1139
{ return (_M_ptr)(__x, __y); } 
# 1140
}; 
# 1143
template< class _Arg1, class _Arg2, class _Result> inline pointer_to_binary_function< _Arg1, _Arg2, _Result>  
# 1145
ptr_fun(_Result (*__x)(_Arg1, _Arg2)) 
# 1146
{ return ((pointer_to_binary_function< _Arg1, _Arg2, _Result> )(__x)); } 
# 1149
template< class _Tp> 
# 1150
struct _Identity : public unary_function< _Tp, _Tp>  { 
# 1154
_Tp &operator()(_Tp &__x) const 
# 1155
{ return __x; } 
# 1158
const _Tp &operator()(const _Tp &__x) const 
# 1159
{ return __x; } 
# 1160
}; 
# 1163
template< class _Tp> struct _Identity< const _Tp>  : public std::_Identity< _Tp>  { }; 
# 1165
template< class _Pair> 
# 1166
struct _Select1st : public unary_function< _Pair, typename _Pair::first_type>  { 
# 1170
typename _Pair::first_type &operator()(_Pair &__x) const 
# 1171
{ return __x.first; } 
# 1174
const typename _Pair::first_type &operator()(const _Pair &__x) const 
# 1175
{ return __x.first; } 
# 1178
template< class _Pair2> typename _Pair2::first_type &
# 1180
operator()(_Pair2 &__x) const 
# 1181
{ return __x.first; } 
# 1183
template< class _Pair2> const typename _Pair2::first_type &
# 1185
operator()(const _Pair2 &__x) const 
# 1186
{ return __x.first; } 
# 1188
}; 
# 1190
template< class _Pair> 
# 1191
struct _Select2nd : public unary_function< _Pair, typename _Pair::second_type>  { 
# 1195
typename _Pair::second_type &operator()(_Pair &__x) const 
# 1196
{ return __x.second; } 
# 1199
const typename _Pair::second_type &operator()(const _Pair &__x) const 
# 1200
{ return __x.second; } 
# 1201
}; 
# 1223 "/usr/include/c++/11/bits/stl_function.h" 3
template< class _Ret, class _Tp> 
# 1224
class mem_fun_t : public unary_function< _Tp *, _Ret>  { 
# 1228
public: explicit mem_fun_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1229
{ } 
# 1232
_Ret operator()(_Tp *__p) const 
# 1233
{ return (__p->*(_M_f))(); } 
# 1236
private: _Ret (_Tp::*_M_f)(void); 
# 1237
}; 
# 1240
template< class _Ret, class _Tp> 
# 1241
class const_mem_fun_t : public unary_function< const _Tp *, _Ret>  { 
# 1245
public: explicit const_mem_fun_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1246
{ } 
# 1249
_Ret operator()(const _Tp *__p) const 
# 1250
{ return (__p->*(_M_f))(); } 
# 1253
private: _Ret (_Tp::*_M_f)(void) const; 
# 1254
}; 
# 1257
template< class _Ret, class _Tp> 
# 1258
class mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1262
public: explicit mem_fun_ref_t(_Ret (_Tp::*__pf)(void)) : _M_f(__pf) 
# 1263
{ } 
# 1266
_Ret operator()(_Tp &__r) const 
# 1267
{ return (__r.*(_M_f))(); } 
# 1270
private: _Ret (_Tp::*_M_f)(void); 
# 1271
}; 
# 1274
template< class _Ret, class _Tp> 
# 1275
class const_mem_fun_ref_t : public unary_function< _Tp, _Ret>  { 
# 1279
public: explicit const_mem_fun_ref_t(_Ret (_Tp::*__pf)(void) const) : _M_f(__pf) 
# 1280
{ } 
# 1283
_Ret operator()(const _Tp &__r) const 
# 1284
{ return (__r.*(_M_f))(); } 
# 1287
private: _Ret (_Tp::*_M_f)(void) const; 
# 1288
}; 
# 1291
template< class _Ret, class _Tp, class _Arg> 
# 1292
class mem_fun1_t : public binary_function< _Tp *, _Arg, _Ret>  { 
# 1296
public: explicit mem_fun1_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1297
{ } 
# 1300
_Ret operator()(_Tp *__p, _Arg __x) const 
# 1301
{ return (__p->*(_M_f))(__x); } 
# 1304
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1305
}; 
# 1308
template< class _Ret, class _Tp, class _Arg> 
# 1309
class const_mem_fun1_t : public binary_function< const _Tp *, _Arg, _Ret>  { 
# 1313
public: explicit const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1314
{ } 
# 1317
_Ret operator()(const _Tp *__p, _Arg __x) const 
# 1318
{ return (__p->*(_M_f))(__x); } 
# 1321
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1322
}; 
# 1325
template< class _Ret, class _Tp, class _Arg> 
# 1326
class mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1330
public: explicit mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg)) : _M_f(__pf) 
# 1331
{ } 
# 1334
_Ret operator()(_Tp &__r, _Arg __x) const 
# 1335
{ return (__r.*(_M_f))(__x); } 
# 1338
private: _Ret (_Tp::*_M_f)(_Arg); 
# 1339
}; 
# 1342
template< class _Ret, class _Tp, class _Arg> 
# 1343
class const_mem_fun1_ref_t : public binary_function< _Tp, _Arg, _Ret>  { 
# 1347
public: explicit const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const) : _M_f(__pf) 
# 1348
{ } 
# 1351
_Ret operator()(const _Tp &__r, _Arg __x) const 
# 1352
{ return (__r.*(_M_f))(__x); } 
# 1355
private: _Ret (_Tp::*_M_f)(_Arg) const; 
# 1356
}; 
# 1360
template< class _Ret, class _Tp> inline mem_fun_t< _Ret, _Tp>  
# 1362
mem_fun(_Ret (_Tp::*__f)(void)) 
# 1363
{ return ((mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1365
template< class _Ret, class _Tp> inline const_mem_fun_t< _Ret, _Tp>  
# 1367
mem_fun(_Ret (_Tp::*__f)(void) const) 
# 1368
{ return ((const_mem_fun_t< _Ret, _Tp> )(__f)); } 
# 1370
template< class _Ret, class _Tp> inline mem_fun_ref_t< _Ret, _Tp>  
# 1372
mem_fun_ref(_Ret (_Tp::*__f)(void)) 
# 1373
{ return ((mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1375
template< class _Ret, class _Tp> inline const_mem_fun_ref_t< _Ret, _Tp>  
# 1377
mem_fun_ref(_Ret (_Tp::*__f)(void) const) 
# 1378
{ return ((const_mem_fun_ref_t< _Ret, _Tp> )(__f)); } 
# 1380
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_t< _Ret, _Tp, _Arg>  
# 1382
mem_fun(_Ret (_Tp::*__f)(_Arg)) 
# 1383
{ return ((mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1385
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_t< _Ret, _Tp, _Arg>  
# 1387
mem_fun(_Ret (_Tp::*__f)(_Arg) const) 
# 1388
{ return ((const_mem_fun1_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1390
template< class _Ret, class _Tp, class _Arg> inline mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1392
mem_fun_ref(_Ret (_Tp::*__f)(_Arg)) 
# 1393
{ return ((mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1395
template< class _Ret, class _Tp, class _Arg> inline const_mem_fun1_ref_t< _Ret, _Tp, _Arg>  
# 1397
mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const) 
# 1398
{ return ((const_mem_fun1_ref_t< _Ret, _Tp, _Arg> )(__f)); } 
# 1403
template< class _Func, class _SfinaeType, class  = __void_t< > > 
# 1404
struct __has_is_transparent { 
# 1405
}; 
# 1407
template< class _Func, class _SfinaeType> 
# 1408
struct __has_is_transparent< _Func, _SfinaeType, __void_t< typename _Func::is_transparent> >  { 
# 1410
typedef void type; }; 
# 1412
template< class _Func, class _SfinaeType> using __has_is_transparent_t = typename __has_is_transparent< _Func, _SfinaeType> ::type; 
# 1418
}
# 60 "/usr/include/c++/11/backward/binders.h" 3
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 63
namespace std __attribute((__visibility__("default"))) { 
# 107 "/usr/include/c++/11/backward/binders.h" 3
template< class _Operation> 
# 108
class binder1st : public unary_function< typename _Operation::second_argument_type, typename _Operation::result_type>  { 
# 113
protected: _Operation op; 
# 114
typename _Operation::first_argument_type value; 
# 117
public: binder1st(const _Operation &__x, const typename _Operation::first_argument_type &
# 118
__y) : op(__x), value(__y) 
# 119
{ } 
# 122
typename _Operation::result_type operator()(const typename _Operation::second_argument_type &__x) const 
# 123
{ return (op)(value, __x); } 
# 128
typename _Operation::result_type operator()(typename _Operation::second_argument_type &__x) const 
# 129
{ return (op)(value, __x); } 
# 130
} __attribute((__deprecated__("use \'std::bind\' instead"))); 
# 133
template< class _Operation, class _Tp> inline binder1st< _Operation>  
# 135
bind1st(const _Operation &__fn, const _Tp &__x) 
# 136
{ 
# 137
typedef typename _Operation::first_argument_type _Arg1_type; 
# 138
return binder1st< _Operation> (__fn, (_Arg1_type)__x); 
# 139
} 
# 142
template< class _Operation> 
# 143
class binder2nd : public unary_function< typename _Operation::first_argument_type, typename _Operation::result_type>  { 
# 148
protected: _Operation op; 
# 149
typename _Operation::second_argument_type value; 
# 152
public: binder2nd(const _Operation &__x, const typename _Operation::second_argument_type &
# 153
__y) : op(__x), value(__y) 
# 154
{ } 
# 157
typename _Operation::result_type operator()(const typename _Operation::first_argument_type &__x) const 
# 158
{ return (op)(__x, value); } 
# 163
typename _Operation::result_type operator()(typename _Operation::first_argument_type &__x) const 
# 164
{ return (op)(__x, value); } 
# 165
} __attribute((__deprecated__("use \'std::bind\' instead"))); 
# 168
template< class _Operation, class _Tp> inline binder2nd< _Operation>  
# 170
bind2nd(const _Operation &__fn, const _Tp &__x) 
# 171
{ 
# 172
typedef typename _Operation::second_argument_type _Arg2_type; 
# 173
return binder2nd< _Operation> (__fn, (_Arg2_type)__x); 
# 174
} 
# 178
}
# 180
#pragma GCC diagnostic pop
# 40 "/usr/include/c++/11/bits/range_access.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
template< class _Container> constexpr auto 
# 51
begin(_Container &__cont)->__decltype((__cont.begin())) 
# 52
{ return __cont.begin(); } 
# 59
template< class _Container> constexpr auto 
# 61
begin(const _Container &__cont)->__decltype((__cont.begin())) 
# 62
{ return __cont.begin(); } 
# 69
template< class _Container> constexpr auto 
# 71
end(_Container &__cont)->__decltype((__cont.end())) 
# 72
{ return __cont.end(); } 
# 79
template< class _Container> constexpr auto 
# 81
end(const _Container &__cont)->__decltype((__cont.end())) 
# 82
{ return __cont.end(); } 
# 88
template< class _Tp, size_t _Nm> constexpr _Tp *
# 90
begin(_Tp (&__arr)[_Nm]) noexcept 
# 91
{ return __arr; } 
# 98
template< class _Tp, size_t _Nm> constexpr _Tp *
# 100
end(_Tp (&__arr)[_Nm]) noexcept 
# 101
{ return __arr + _Nm; } 
# 105
template< class _Tp> class valarray; 
# 107
template< class _Tp> _Tp *begin(valarray< _Tp>  &) noexcept; 
# 108
template< class _Tp> const _Tp *begin(const valarray< _Tp>  &) noexcept; 
# 109
template< class _Tp> _Tp *end(valarray< _Tp>  &) noexcept; 
# 110
template< class _Tp> const _Tp *end(const valarray< _Tp>  &) noexcept; 
# 117
template< class _Container> constexpr auto 
# 119
cbegin(const _Container &__cont) noexcept(noexcept(std::begin(__cont)))->__decltype((std::begin(__cont))) 
# 121
{ return std::begin(__cont); } 
# 128
template< class _Container> constexpr auto 
# 130
cend(const _Container &__cont) noexcept(noexcept(std::end(__cont)))->__decltype((std::end(__cont))) 
# 132
{ return std::end(__cont); } 
# 139
template< class _Container> constexpr auto 
# 141
rbegin(_Container &__cont)->__decltype((__cont.rbegin())) 
# 142
{ return __cont.rbegin(); } 
# 149
template< class _Container> constexpr auto 
# 151
rbegin(const _Container &__cont)->__decltype((__cont.rbegin())) 
# 152
{ return __cont.rbegin(); } 
# 159
template< class _Container> constexpr auto 
# 161
rend(_Container &__cont)->__decltype((__cont.rend())) 
# 162
{ return __cont.rend(); } 
# 169
template< class _Container> constexpr auto 
# 171
rend(const _Container &__cont)->__decltype((__cont.rend())) 
# 172
{ return __cont.rend(); } 
# 179
template< class _Tp, size_t _Nm> constexpr reverse_iterator< _Tp *>  
# 181
rbegin(_Tp (&__arr)[_Nm]) noexcept 
# 182
{ return ((reverse_iterator< _Tp *> )(__arr + _Nm)); } 
# 189
template< class _Tp, size_t _Nm> constexpr reverse_iterator< _Tp *>  
# 191
rend(_Tp (&__arr)[_Nm]) noexcept 
# 192
{ return ((reverse_iterator< _Tp *> )(__arr)); } 
# 199
template< class _Tp> constexpr reverse_iterator< const _Tp *>  
# 201
rbegin(initializer_list< _Tp>  __il) noexcept 
# 202
{ return ((reverse_iterator< const _Tp *> )(__il.end())); } 
# 209
template< class _Tp> constexpr reverse_iterator< const _Tp *>  
# 211
rend(initializer_list< _Tp>  __il) noexcept 
# 212
{ return ((reverse_iterator< const _Tp *> )(__il.begin())); } 
# 219
template< class _Container> constexpr auto 
# 221
crbegin(const _Container &__cont)->__decltype((std::rbegin(__cont))) 
# 222
{ return std::rbegin(__cont); } 
# 229
template< class _Container> constexpr auto 
# 231
crend(const _Container &__cont)->__decltype((std::rend(__cont))) 
# 232
{ return std::rend(__cont); } 
# 243 "/usr/include/c++/11/bits/range_access.h" 3
template< class _Container> constexpr auto 
# 245
size(const _Container &__cont) noexcept(noexcept(__cont.size()))->__decltype((__cont.size())) 
# 247
{ return __cont.size(); } 
# 252
template< class _Tp, size_t _Nm> constexpr size_t 
# 254
size(const _Tp (&)[_Nm]) noexcept 
# 255
{ return _Nm; } 
# 261
template< class _Container> 
# 262
[[nodiscard]] constexpr auto 
# 263
empty(const _Container &__cont) noexcept(noexcept(__cont.empty()))->__decltype((__cont.empty())) 
# 265
{ return __cont.empty(); } 
# 270
template< class _Tp, size_t _Nm> 
# 271
[[nodiscard]] constexpr bool 
# 272
empty(const _Tp (&)[_Nm]) noexcept 
# 273
{ return false; } 
# 279
template< class _Tp> 
# 280
[[nodiscard]] constexpr bool 
# 281
empty(initializer_list< _Tp>  __il) noexcept 
# 282
{ return __il.size() == 0; } 
# 288
template< class _Container> constexpr auto 
# 290
data(_Container &__cont) noexcept(noexcept(__cont.data()))->__decltype((__cont.data())) 
# 292
{ return __cont.data(); } 
# 298
template< class _Container> constexpr auto 
# 300
data(const _Container &__cont) noexcept(noexcept(__cont.data()))->__decltype((__cont.data())) 
# 302
{ return __cont.data(); } 
# 308
template< class _Tp, size_t _Nm> constexpr _Tp *
# 310
data(_Tp (&__array)[_Nm]) noexcept 
# 311
{ return __array; } 
# 317
template< class _Tp> constexpr const _Tp *
# 319
data(initializer_list< _Tp>  __il) noexcept 
# 320
{ return __il.begin(); } 
# 342 "/usr/include/c++/11/bits/range_access.h" 3
}
# 73 "/usr/include/c++/11/bits/stl_construct.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 78
template< class _Tp> inline void 
# 80
destroy_at(_Tp *__location) 
# 81
{ 
# 82
if constexpr ((201703L > 201703L) && is_array_v< _Tp> ) 
# 83
{ 
# 84
for (auto &__x : *__location) { 
# 85
std::destroy_at(std::__addressof(__x)); }  
# 86
} else { 
# 88
__location->~_Tp(); }  
# 89
} 
# 106 "/usr/include/c++/11/bits/stl_construct.h" 3
template< class _Tp, class ..._Args> inline void 
# 109
_Construct(_Tp *__p, _Args &&...__args) 
# 110
{ 
# 119 "/usr/include/c++/11/bits/stl_construct.h" 3
::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); 
# 120
} 
# 132 "/usr/include/c++/11/bits/stl_construct.h" 3
template< class _T1> inline void 
# 134
_Construct_novalue(_T1 *__p) 
# 135
{ ::new ((void *)__p) _T1; } 
# 137
template< class _ForwardIterator> inline void _Destroy(_ForwardIterator __first, _ForwardIterator __last); 
# 144
template< class _Tp> constexpr void 
# 146
_Destroy(_Tp *__pointer) 
# 147
{ 
# 151
__pointer->~_Tp(); 
# 153
} 
# 155
template< bool > 
# 156
struct _Destroy_aux { 
# 158
template< class _ForwardIterator> static void 
# 160
__destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 161
{ 
# 162
for (; __first != __last; ++__first) { 
# 163
std::_Destroy(std::__addressof(*__first)); }  
# 164
} 
# 165
}; 
# 168
template<> struct _Destroy_aux< true>  { 
# 170
template< class _ForwardIterator> static void 
# 172
__destroy(_ForwardIterator, _ForwardIterator) { } 
# 173
}; 
# 180
template< class _ForwardIterator> inline void 
# 182
_Destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 183
{ 
# 185
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 188
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 195
std::template _Destroy_aux< __has_trivial_destructor(_Value_type)> ::__destroy(__first, __last); 
# 197
} 
# 199
template< bool > 
# 200
struct _Destroy_n_aux { 
# 202
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 204
__destroy_n(_ForwardIterator __first, _Size __count) 
# 205
{ 
# 206
for (; __count > 0; ((void)(++__first)), (--__count)) { 
# 207
std::_Destroy(std::__addressof(*__first)); }  
# 208
return __first; 
# 209
} 
# 210
}; 
# 213
template<> struct _Destroy_n_aux< true>  { 
# 215
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 217
__destroy_n(_ForwardIterator __first, _Size __count) 
# 218
{ 
# 219
std::advance(__first, __count); 
# 220
return __first; 
# 221
} 
# 222
}; 
# 229
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 231
_Destroy_n(_ForwardIterator __first, _Size __count) 
# 232
{ 
# 234
typedef typename iterator_traits< _ForwardIterator> ::value_type _Value_type; 
# 237
static_assert((is_destructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value), "value type is destructible");
# 244
return std::template _Destroy_n_aux< __has_trivial_destructor(_Value_type)> ::__destroy_n(__first, __count); 
# 246
} 
# 249
template< class _ForwardIterator> inline void 
# 251
destroy(_ForwardIterator __first, _ForwardIterator __last) 
# 252
{ 
# 253
std::_Destroy(__first, __last); 
# 254
} 
# 256
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 258
destroy_n(_ForwardIterator __first, _Size __count) 
# 259
{ 
# 260
return std::_Destroy_n(__first, __count); 
# 261
} 
# 265
}
# 41 "/usr/include/c++/11/bits/alloc_traits.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49
struct __allocator_traits_base { 
# 51
template< class _Tp, class _Up, class  = void> 
# 52
struct __rebind : public __replace_first_arg< _Tp, _Up>  { }; 
# 54
template< class _Tp, class _Up> 
# 55
struct __rebind< _Tp, _Up, __void_t< typename _Tp::template rebind< _Up> ::other> >  { 
# 57
using type = typename _Tp::template rebind< _Up> ::other; }; 
# 61
protected: 
# 60
template< class _Tp> using __pointer = typename _Tp::pointer; 
# 62
template< class _Tp> using __c_pointer = typename _Tp::const_pointer; 
# 64
template< class _Tp> using __v_pointer = typename _Tp::void_pointer; 
# 66
template< class _Tp> using __cv_pointer = typename _Tp::const_void_pointer; 
# 68
template< class _Tp> using __pocca = typename _Tp::propagate_on_container_copy_assignment; 
# 70
template< class _Tp> using __pocma = typename _Tp::propagate_on_container_move_assignment; 
# 72
template< class _Tp> using __pocs = typename _Tp::propagate_on_container_swap; 
# 74
template< class _Tp> using __equal = typename _Tp::is_always_equal; 
# 76
}; 
# 78
template< class _Alloc, class _Up> using __alloc_rebind = typename __allocator_traits_base::__rebind< _Alloc, _Up> ::type; 
# 89 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> 
# 90
struct allocator_traits : public __allocator_traits_base { 
# 93
typedef _Alloc allocator_type; 
# 95
typedef typename _Alloc::value_type value_type; 
# 102
using pointer = __detected_or_t< value_type *, __pointer, _Alloc> ; 
# 107
private: 
# 106
template< template< class >  class _Func, class _Tp, class  = void> 
# 107
struct _Ptr { 
# 109
using type = typename pointer_traits< pointer> ::template rebind< _Tp> ; 
# 110
}; 
# 112
template< template< class >  class _Func, class _Tp> 
# 113
struct _Ptr< _Func, _Tp, __void_t< _Func< _Alloc> > >  { 
# 115
using type = _Func< _Alloc> ; 
# 116
}; 
# 119
template< class _A2, class _PtrT, class  = void> 
# 120
struct _Diff { 
# 121
using type = typename pointer_traits< _PtrT> ::difference_type; }; 
# 123
template< class _A2, class _PtrT> 
# 124
struct _Diff< _A2, _PtrT, __void_t< typename _A2::difference_type> >  { 
# 125
using type = typename _A2::difference_type; }; 
# 128
template< class _A2, class _DiffT, class  = void> 
# 129
struct _Size : public make_unsigned< _DiffT>  { }; 
# 131
template< class _A2, class _DiffT> 
# 132
struct _Size< _A2, _DiffT, __void_t< typename _A2::size_type> >  { 
# 133
using type = typename _A2::size_type; }; 
# 142
public: using const_pointer = typename _Ptr< __c_pointer, const value_type> ::type; 
# 150
using void_pointer = typename _Ptr< __v_pointer, void> ::type; 
# 158
using const_void_pointer = typename _Ptr< __cv_pointer, const void> ::type; 
# 166
using difference_type = typename _Diff< _Alloc, pointer> ::type; 
# 174
using size_type = typename _Size< _Alloc, difference_type> ::type; 
# 182
using propagate_on_container_copy_assignment = __detected_or_t< false_type, __pocca, _Alloc> ; 
# 191
using propagate_on_container_move_assignment = __detected_or_t< false_type, __pocma, _Alloc> ; 
# 200
using propagate_on_container_swap = __detected_or_t< false_type, __pocs, _Alloc> ; 
# 209
using is_always_equal = __detected_or_t< typename is_empty< _Alloc> ::type, __equal, _Alloc> ; 
# 212
template< class _Tp> using rebind_alloc = __alloc_rebind< _Alloc, _Tp> ; 
# 214
template< class _Tp> using rebind_traits = allocator_traits< rebind_alloc< _Tp> > ; 
# 220
private: 
# 218
template< class _Alloc2> static constexpr auto 
# 220
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer __hint, int)->__decltype((__a.allocate(__n, __hint))) 
# 222
{ return __a.allocate(__n, __hint); } 
# 224
template< class _Alloc2> static constexpr pointer 
# 226
_S_allocate(_Alloc2 &__a, size_type __n, const_void_pointer, ...) 
# 227
{ return __a.allocate(__n); } 
# 229
template< class _Tp, class ..._Args> 
# 230
struct __construct_helper { 
# 232
template< class _Alloc2, class 
# 233
 = __decltype((std::declval< _Alloc2 *> ()->construct(std::declval< _Tp *> (), std::declval< _Args> ()...)))> static true_type 
# 232
__test(int); 
# 237
template< class > static false_type __test(...); 
# 240
using type = __decltype((__test< _Alloc> (0))); 
# 241
}; 
# 243
template< class _Tp, class ..._Args> using __has_construct = typename __construct_helper< _Tp, _Args...> ::type; 
# 247
template< class _Tp, class ..._Args> static constexpr _Require< __has_construct< _Tp, _Args...> >  
# 249
_S_construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(__a.construct(__p, std::forward< _Args> (__args)...))) 
# 251
{ __a.construct(__p, std::forward< _Args> (__args)...); } 
# 253
template< class _Tp, class ..._Args> static constexpr _Require< __and_< __not_< __has_construct< _Tp, _Args...> > , is_constructible< _Tp, _Args...> > >  
# 257
_S_construct(_Alloc &, _Tp *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Tp, _Args...> ::value) 
# 259
{ 
# 261
::new ((void *)__p) _Tp(std::forward< _Args> (__args)...); 
# 265
} 
# 267
template< class _Alloc2, class _Tp> static constexpr auto 
# 269
_S_destroy(_Alloc2 &__a, _Tp *__p, int) noexcept(noexcept(__a.destroy(__p)))->__decltype((__a.destroy(__p))) 
# 272
{ __a.destroy(__p); } 
# 274
template< class _Alloc2, class _Tp> static constexpr void 
# 276
_S_destroy(_Alloc2 &, _Tp *__p, ...) noexcept(std::template is_nothrow_destructible< _Tp> ::value) 
# 278
{ std::_Destroy(__p); } 
# 280
template< class _Alloc2> static constexpr auto 
# 282
_S_max_size(_Alloc2 &__a, int)->__decltype((__a.max_size())) 
# 284
{ return __a.max_size(); } 
# 286
template< class _Alloc2> static constexpr size_type 
# 288
_S_max_size(_Alloc2 &, ...) 
# 289
{ 
# 292
return __gnu_cxx::template __numeric_traits< size_type> ::__max / sizeof(value_type); 
# 294
} 
# 296
template< class _Alloc2> static constexpr auto 
# 298
_S_select(_Alloc2 &__a, int)->__decltype((__a.select_on_container_copy_construction())) 
# 300
{ return __a.select_on_container_copy_construction(); } 
# 302
template< class _Alloc2> static constexpr _Alloc2 
# 304
_S_select(_Alloc2 &__a, ...) 
# 305
{ return __a; } 
# 317 "/usr/include/c++/11/bits/alloc_traits.h" 3
public: 
# 316
[[__nodiscard__]] static pointer 
# 317
allocate(_Alloc &__a, size_type __n) 
# 318
{ return __a.allocate(__n); } 
# 331 "/usr/include/c++/11/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 332
allocate(_Alloc &__a, size_type __n, const_void_pointer __hint) 
# 333
{ return _S_allocate(__a, __n, __hint, 0); } 
# 344 "/usr/include/c++/11/bits/alloc_traits.h" 3
static void deallocate(_Alloc &__a, pointer __p, size_type __n) 
# 345
{ __a.deallocate(__p, __n); } 
# 358 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Tp, class ..._Args> static auto 
# 360
construct(_Alloc &__a, _Tp *__p, _Args &&...__args) noexcept(noexcept(_S_construct(__a, __p, std::forward< _Args> (__args)...)))->__decltype((_S_construct(__a, __p, std::forward< _Args> (__args)...))) 
# 364
{ _S_construct(__a, __p, std::forward< _Args> (__args)...); } 
# 374 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Tp> static void 
# 376
destroy(_Alloc &__a, _Tp *__p) noexcept(noexcept(_S_destroy(__a, __p, 0))) 
# 378
{ _S_destroy(__a, __p, 0); } 
# 389 "/usr/include/c++/11/bits/alloc_traits.h" 3
static size_type max_size(const _Alloc &__a) noexcept 
# 390
{ return _S_max_size(__a, 0); } 
# 401 "/usr/include/c++/11/bits/alloc_traits.h" 3
static _Alloc select_on_container_copy_construction(const _Alloc &__rhs) 
# 402
{ return _S_select(__rhs, 0); } 
# 403
}; 
# 410
template< class _Tp> 
# 411
struct allocator_traits< allocator< _Tp> >  { 
# 414
using allocator_type = allocator< _Tp> ; 
# 417
using value_type = _Tp; 
# 420
using pointer = _Tp *; 
# 423
using const_pointer = const _Tp *; 
# 426
using void_pointer = void *; 
# 429
using const_void_pointer = const void *; 
# 432
using difference_type = ptrdiff_t; 
# 435
using size_type = size_t; 
# 438
using propagate_on_container_copy_assignment = false_type; 
# 441
using propagate_on_container_move_assignment = true_type; 
# 444
using propagate_on_container_swap = false_type; 
# 447
using is_always_equal = true_type; 
# 449
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 452
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 462 "/usr/include/c++/11/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 463
allocate(allocator_type &__a, size_type __n) 
# 464
{ return __a.allocate(__n); } 
# 476 "/usr/include/c++/11/bits/alloc_traits.h" 3
[[__nodiscard__]] static pointer 
# 477
allocate(allocator_type &__a, size_type __n, const_void_pointer __hint) 
# 478
{ 
# 480
return __a.allocate(__n, __hint); 
# 484
} 
# 495 "/usr/include/c++/11/bits/alloc_traits.h" 3
static void deallocate(allocator_type &__a, pointer __p, size_type __n) 
# 496
{ __a.deallocate(__p, __n); } 
# 509 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 511
construct(allocator_type &__a __attribute((__unused__)), _Up *__p, _Args &&...
# 512
__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 514
{ 
# 516
__a.construct(__p, std::forward< _Args> (__args)...); 
# 520
} 
# 529 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up> static void 
# 531
destroy(allocator_type &__a __attribute((__unused__)), _Up *__p) noexcept(is_nothrow_destructible< _Up> ::value) 
# 533
{ 
# 535
__a.destroy(__p); 
# 539
} 
# 547
static size_type max_size(const allocator_type &__a __attribute((__unused__))) noexcept 
# 548
{ 
# 550
return __a.max_size(); 
# 554
} 
# 562
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 563
{ return __rhs; } 
# 564
}; 
# 568
template<> struct allocator_traits< allocator< void> >  { 
# 571
using allocator_type = allocator< void> ; 
# 574
using value_type = void; 
# 577
using pointer = void *; 
# 580
using const_pointer = const void *; 
# 583
using void_pointer = void *; 
# 586
using const_void_pointer = const void *; 
# 589
using difference_type = ptrdiff_t; 
# 592
using size_type = size_t; 
# 595
using propagate_on_container_copy_assignment = false_type; 
# 598
using propagate_on_container_move_assignment = true_type; 
# 601
using propagate_on_container_swap = false_type; 
# 604
using is_always_equal = true_type; 
# 606
template< class _Up> using rebind_alloc = allocator< _Up> ; 
# 609
template< class _Up> using rebind_traits = std::allocator_traits< allocator< _Up> > ; 
# 614
static void *allocate(allocator_type &, size_type, const void * = 0) = delete;
# 618
static void deallocate(allocator_type &, void *, size_type) = delete;
# 631 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up, class ..._Args> static void 
# 633
construct(allocator_type &, _Up *__p, _Args &&...__args) noexcept(std::template is_nothrow_constructible< _Up, _Args...> ::value) 
# 635
{ std::_Construct(__p, std::forward< _Args> (__args)...); } 
# 644 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Up> static void 
# 646
destroy(allocator_type &, _Up *__p) noexcept(is_nothrow_destructible< _Up> ::value) 
# 648
{ std::_Destroy(__p); } 
# 652
static size_type max_size(const allocator_type &) = delete;
# 660
static allocator_type select_on_container_copy_construction(const allocator_type &__rhs) 
# 661
{ return __rhs; } 
# 662
}; 
# 676 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 678
__alloc_on_copy(_Alloc &__one, const _Alloc &__two) 
# 679
{ 
# 680
typedef allocator_traits< _Alloc>  __traits; 
# 681
typedef typename allocator_traits< _Alloc> ::propagate_on_container_copy_assignment __pocca; 
# 683
if constexpr (__pocca::value) { 
# 684
__one = __two; }  
# 688
} 
# 690
template< class _Alloc> constexpr _Alloc 
# 692
__alloc_on_copy(const _Alloc &__a) 
# 693
{ 
# 694
typedef allocator_traits< _Alloc>  __traits; 
# 695
return __traits::select_on_container_copy_construction(__a); 
# 696
} 
# 708 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 710
__alloc_on_move(_Alloc &__one, _Alloc &__two) 
# 711
{ 
# 712
typedef allocator_traits< _Alloc>  __traits; 
# 713
typedef typename allocator_traits< _Alloc> ::propagate_on_container_move_assignment __pocma; 
# 715
if constexpr (__pocma::value) { 
# 716
__one = std::move(__two); }  
# 720
} 
# 735 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _Alloc> constexpr void 
# 737
__alloc_on_swap(_Alloc &__one, _Alloc &__two) 
# 738
{ 
# 739
typedef allocator_traits< _Alloc>  __traits; 
# 740
typedef typename allocator_traits< _Alloc> ::propagate_on_container_swap __pocs; 
# 742
if constexpr (__pocs::value) 
# 743
{ 
# 744
using std::swap;
# 745
swap(__one, __two); 
# 746
}  
# 750
} 
# 752
template< class _Alloc, class _Tp, class 
# 753
_ValueT = __remove_cvref_t< typename _Alloc::value_type> , class 
# 754
 = void> 
# 755
struct __is_alloc_insertable_impl : public false_type { 
# 757
}; 
# 759
template< class _Alloc, class _Tp, class _ValueT> 
# 760
struct __is_alloc_insertable_impl< _Alloc, _Tp, _ValueT, __void_t< __decltype((allocator_traits< _Alloc> ::construct(std::declval< _Alloc &> (), std::declval< _ValueT *> (), std::declval< _Tp> ())))> >  : public true_type { 
# 765
}; 
# 770
template< class _Alloc> 
# 771
struct __is_copy_insertable : public __is_alloc_insertable_impl< _Alloc, const typename _Alloc::value_type &> ::type { 
# 774
}; 
# 777
template< class _Tp> 
# 778
struct __is_copy_insertable< allocator< _Tp> >  : public is_copy_constructible< _Tp>  { 
# 780
}; 
# 785
template< class _Alloc> 
# 786
struct __is_move_insertable : public __is_alloc_insertable_impl< _Alloc, typename _Alloc::value_type> ::type { 
# 788
}; 
# 791
template< class _Tp> 
# 792
struct __is_move_insertable< allocator< _Tp> >  : public is_move_constructible< _Tp>  { 
# 794
}; 
# 797
template< class _Alloc, class  = void> 
# 798
struct __is_allocator : public false_type { }; 
# 800
template< class _Alloc> 
# 801
struct __is_allocator< _Alloc, __void_t< typename _Alloc::value_type, __decltype((std::declval< _Alloc &> ().allocate((unsigned long)0UL)))> >  : public true_type { 
# 804
}; 
# 806
template< class _Alloc> using _RequireAllocator = typename enable_if< __is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 810
template< class _Alloc> using _RequireNotAllocator = typename enable_if< !__is_allocator< _Alloc> ::value, _Alloc> ::type; 
# 829 "/usr/include/c++/11/bits/alloc_traits.h" 3
template< class _ForwardIterator, class _Allocator> void 
# 831
_Destroy(_ForwardIterator __first, _ForwardIterator __last, _Allocator &
# 832
__alloc) 
# 833
{ 
# 834
for (; __first != __last; ++__first) { 
# 838
allocator_traits< _Allocator> ::destroy(__alloc, std::__addressof(*__first)); }  
# 841
} 
# 843
template< class _ForwardIterator, class _Tp> inline void 
# 845
_Destroy(_ForwardIterator __first, _ForwardIterator __last, allocator< _Tp>  &) 
# 847
{ 
# 848
_Destroy(__first, __last); 
# 849
} 
# 852
}
# 39 "/usr/include/c++/11/ext/alloc_traits.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 47
template< class _Alloc, class  = typename _Alloc::value_type> 
# 48
struct __alloc_traits : public std::allocator_traits< _Alloc>  { 
# 53
typedef _Alloc allocator_type; 
# 55
typedef std::allocator_traits< _Alloc>  _Base_type; 
# 56
typedef typename std::allocator_traits< _Alloc> ::value_type value_type; 
# 57
typedef typename std::allocator_traits< _Alloc> ::pointer pointer; 
# 58
typedef typename std::allocator_traits< _Alloc> ::const_pointer const_pointer; 
# 59
typedef typename std::allocator_traits< _Alloc> ::size_type size_type; 
# 60
typedef typename std::allocator_traits< _Alloc> ::difference_type difference_type; 
# 62
typedef value_type &reference; 
# 63
typedef const value_type &const_reference; 
# 64
using std::allocator_traits< _Alloc> ::allocate;
# 65
using std::allocator_traits< _Alloc> ::deallocate;
# 66
using std::allocator_traits< _Alloc> ::construct;
# 67
using std::allocator_traits< _Alloc> ::destroy;
# 68
using std::allocator_traits< _Alloc> ::max_size;
# 72
private: 
# 71
template< class _Ptr> using __is_custom_pointer = std::__and_< std::is_same< pointer, _Ptr> , std::__not_< std::is_pointer< _Ptr> > > ; 
# 81
public: 
# 78
template< class _Ptr, class ..._Args> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr> ::value>  
# 81
construct(_Alloc &__a, _Ptr __p, _Args &&...__args) noexcept(noexcept(_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...))) 
# 84
{ 
# 85
_Base_type::construct(__a, std::__to_address(__p), std::forward< _Args> (__args)...); 
# 87
} 
# 90
template< class _Ptr> static constexpr std::__enable_if_t< __is_custom_pointer< _Ptr> ::value>  
# 93
destroy(_Alloc &__a, _Ptr __p) noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p)))) 
# 95
{ _Base_type::destroy(__a, std::__to_address(__p)); } 
# 97
static constexpr _Alloc _S_select_on_copy(const _Alloc &__a) 
# 98
{ return _Base_type::select_on_container_copy_construction(__a); } 
# 100
static constexpr void _S_on_swap(_Alloc &__a, _Alloc &__b) 
# 101
{ std::__alloc_on_swap(__a, __b); } 
# 103
static constexpr bool _S_propagate_on_copy_assign() 
# 104
{ return _Base_type::propagate_on_container_copy_assignment::value; } 
# 106
static constexpr bool _S_propagate_on_move_assign() 
# 107
{ return _Base_type::propagate_on_container_move_assignment::value; } 
# 109
static constexpr bool _S_propagate_on_swap() 
# 110
{ return _Base_type::propagate_on_container_swap::value; } 
# 112
static constexpr bool _S_always_equal() 
# 113
{ return _Base_type::is_always_equal::value; } 
# 115
static constexpr bool _S_nothrow_move() 
# 116
{ return (_S_propagate_on_move_assign)() || (_S_always_equal)(); } 
# 118
template< class _Tp> 
# 119
struct rebind { 
# 120
typedef typename std::allocator_traits< _Alloc> ::template rebind_alloc< _Tp>  other; }; 
# 166 "/usr/include/c++/11/ext/alloc_traits.h" 3
}; 
# 169
}
# 38 "/usr/include/c++/11/bits/functional_hash.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 50 "/usr/include/c++/11/bits/functional_hash.h" 3
template< class _Result, class _Arg> 
# 51
struct __hash_base { 
# 53
typedef _Result result_type [[__deprecated__]]; 
# 54
typedef _Arg argument_type [[__deprecated__]]; 
# 55
}; 
# 58
template< class _Tp> struct hash; 
# 61
template< class _Tp, class  = void> 
# 62
struct __poison_hash { 
# 64
static constexpr inline bool __enable_hash_call = false; 
# 67
private: __poison_hash(__poison_hash &&); 
# 68
~__poison_hash(); 
# 69
}; 
# 71
template< class _Tp> 
# 72
struct __poison_hash< _Tp, __void_t< __decltype((hash< _Tp> ()(declval< _Tp> ())))> >  { 
# 74
static constexpr inline bool __enable_hash_call = true; 
# 75
}; 
# 78
template< class _Tp, bool  = is_enum< _Tp> ::value> 
# 79
struct __hash_enum { 
# 83
private: __hash_enum(__hash_enum &&); 
# 84
~__hash_enum(); 
# 85
}; 
# 88
template< class _Tp> 
# 89
struct __hash_enum< _Tp, true>  : public __hash_base< unsigned long, _Tp>  { 
# 92
std::size_t operator()(_Tp __val) const noexcept 
# 93
{ 
# 94
using __type = typename underlying_type< _Tp> ::type; 
# 95
return hash< typename underlying_type< _Tp> ::type> {}(static_cast< __type>(__val)); 
# 96
} 
# 97
}; 
# 101
template< class _Tp> 
# 102
struct hash : public __hash_enum< _Tp>  { 
# 103
}; 
# 106
template< class _Tp> 
# 107
struct hash< _Tp *>  : public __hash_base< unsigned long, _Tp *>  { 
# 110
std::size_t operator()(_Tp *__p) const noexcept 
# 111
{ return reinterpret_cast< std::size_t>(__p); } 
# 112
}; 
# 125 "/usr/include/c++/11/bits/functional_hash.h" 3
template<> struct hash< bool>  : public __hash_base< unsigned long, bool>  { size_t operator()(bool __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 128
template<> struct hash< char>  : public __hash_base< unsigned long, char>  { size_t operator()(char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 131
template<> struct hash< signed char>  : public __hash_base< unsigned long, signed char>  { size_t operator()(signed char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 134
template<> struct hash< unsigned char>  : public __hash_base< unsigned long, unsigned char>  { size_t operator()(unsigned char __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 137
template<> struct hash< wchar_t>  : public __hash_base< unsigned long, wchar_t>  { size_t operator()(wchar_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 145
template<> struct hash< char16_t>  : public __hash_base< unsigned long, char16_t>  { size_t operator()(char16_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 148
template<> struct hash< char32_t>  : public __hash_base< unsigned long, char32_t>  { size_t operator()(char32_t __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 151
template<> struct hash< short>  : public __hash_base< unsigned long, short>  { size_t operator()(short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 154
template<> struct hash< int>  : public __hash_base< unsigned long, int>  { size_t operator()(int __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 157
template<> struct hash< long>  : public __hash_base< unsigned long, long>  { size_t operator()(long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 160
template<> struct hash< long long>  : public __hash_base< unsigned long, long long>  { size_t operator()(long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 163
template<> struct hash< unsigned short>  : public __hash_base< unsigned long, unsigned short>  { size_t operator()(unsigned short __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 166
template<> struct hash< unsigned>  : public __hash_base< unsigned long, unsigned>  { size_t operator()(unsigned __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 169
template<> struct hash< unsigned long>  : public __hash_base< unsigned long, unsigned long>  { size_t operator()(unsigned long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 172
template<> struct hash< unsigned long long>  : public __hash_base< unsigned long, unsigned long long>  { size_t operator()(unsigned long long __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 175
template<> struct hash< __int128>  : public __hash_base< unsigned long, __int128>  { size_t operator()(__int128 __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 176
template<> struct hash< unsigned __int128>  : public __hash_base< unsigned long, unsigned __int128>  { size_t operator()(unsigned __int128 __val) const noexcept { return static_cast< size_t>(__val); } }; 
# 193 "/usr/include/c++/11/bits/functional_hash.h" 3
struct _Hash_impl { 
# 196
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 197
__seed = static_cast< size_t>(3339675911UL)) 
# 198
{ return _Hash_bytes(__ptr, __clength, __seed); } 
# 200
template< class _Tp> static size_t 
# 202
hash(const _Tp &__val) 
# 203
{ return hash(&__val, sizeof(__val)); } 
# 205
template< class _Tp> static size_t 
# 207
__hash_combine(const _Tp &__val, size_t __hash) 
# 208
{ return hash(&__val, sizeof(__val), __hash); } 
# 209
}; 
# 212
struct _Fnv_hash_impl { 
# 215
static size_t hash(const void *__ptr, size_t __clength, size_t 
# 216
__seed = static_cast< size_t>(2166136261UL)) 
# 217
{ return _Fnv_hash_bytes(__ptr, __clength, __seed); } 
# 219
template< class _Tp> static size_t 
# 221
hash(const _Tp &__val) 
# 222
{ return hash(&__val, sizeof(__val)); } 
# 224
template< class _Tp> static size_t 
# 226
__hash_combine(const _Tp &__val, size_t __hash) 
# 227
{ return hash(&__val, sizeof(__val), __hash); } 
# 228
}; 
# 232
template<> struct hash< float>  : public __hash_base< unsigned long, float>  { 
# 235
size_t operator()(float __val) const noexcept 
# 236
{ 
# 238
return (__val != (0.0F)) ? std::_Hash_impl::hash(__val) : (0); 
# 239
} 
# 240
}; 
# 244
template<> struct hash< double>  : public __hash_base< unsigned long, double>  { 
# 247
size_t operator()(double __val) const noexcept 
# 248
{ 
# 250
return (__val != (0.0)) ? std::_Hash_impl::hash(__val) : (0); 
# 251
} 
# 252
}; 
# 256
template<> struct hash< long double>  : public __hash_base< unsigned long, long double>  { 
# 259
__attribute((__pure__)) size_t 
# 260
operator()(long double __val) const noexcept; 
# 261
}; 
# 265
template<> struct hash< __decltype((nullptr))>  : public __hash_base< unsigned long, __decltype((nullptr))>  { 
# 268
size_t operator()(nullptr_t) const noexcept 
# 269
{ return 0; } 
# 270
}; 
# 279 "/usr/include/c++/11/bits/functional_hash.h" 3
template< class _Hash> 
# 280
struct __is_fast_hash : public true_type { 
# 281
}; 
# 284
template<> struct __is_fast_hash< hash< long double> >  : public false_type { 
# 285
}; 
# 288
}
# 51 "/usr/include/c++/11/string_view" 3
namespace std __attribute((__visibility__("default"))) { 
# 62
constexpr size_t __sv_check(size_t __size, size_t __pos, const char *__s) 
# 63
{ 
# 64
if (__pos > __size) { 
# 65
__throw_out_of_range_fmt("%s: __pos (which is %zu) > __size (which is %zu)", __s, __pos, __size); }  
# 67
return __pos; 
# 68
} 
# 73
constexpr size_t __sv_limit(size_t __size, size_t __pos, size_t __off) noexcept 
# 74
{ 
# 75
const bool __testoff = __off < (__size - __pos); 
# 76
return __testoff ? __off : (__size - __pos); 
# 77
} 
# 97 "/usr/include/c++/11/string_view" 3
template< class _CharT, class _Traits = char_traits< _CharT> > 
# 98
class basic_string_view { 
# 100
static_assert((!is_array_v< _CharT> ));
# 101
static_assert((is_trivial_v< _CharT>  && is_standard_layout_v< _CharT> ));
# 102
static_assert((is_same_v< _CharT, typename _Traits::char_type> ));
# 107
public: using traits_type = _Traits; 
# 108
using value_type = _CharT; 
# 109
using pointer = value_type *; 
# 110
using const_pointer = const value_type *; 
# 111
using reference = value_type &; 
# 112
using const_reference = const value_type &; 
# 113
using const_iterator = const value_type *; 
# 114
using iterator = const_iterator; 
# 115
using const_reverse_iterator = std::reverse_iterator< const_iterator> ; 
# 116
using reverse_iterator = const_reverse_iterator; 
# 117
using size_type = size_t; 
# 118
using difference_type = ptrdiff_t; 
# 119
static constexpr inline size_type npos = ((size_type)(-1)); 
# 124
constexpr basic_string_view() noexcept : _M_len{(0)}, _M_str{(nullptr)} 
# 126
{ } 
# 128
constexpr basic_string_view(const basic_string_view &) noexcept = default;
# 130
__attribute((__nonnull__)) constexpr 
# 131
basic_string_view(const _CharT *__str) noexcept : _M_len{traits_type::length(__str)}, _M_str{__str} 
# 134
{ } 
# 137
constexpr basic_string_view(const _CharT *__str, size_type __len) noexcept : _M_len{__len}, _M_str{__str} 
# 139
{ } 
# 172 "/usr/include/c++/11/string_view" 3
constexpr basic_string_view &operator=(const basic_string_view &) noexcept = default;
# 177
constexpr const_iterator begin() const noexcept 
# 178
{ return this->_M_str; } 
# 181
constexpr const_iterator end() const noexcept 
# 182
{ return (this->_M_str) + (this->_M_len); } 
# 185
constexpr const_iterator cbegin() const noexcept 
# 186
{ return this->_M_str; } 
# 189
constexpr const_iterator cend() const noexcept 
# 190
{ return (this->_M_str) + (this->_M_len); } 
# 193
constexpr const_reverse_iterator rbegin() const noexcept 
# 194
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 197
constexpr const_reverse_iterator rend() const noexcept 
# 198
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 201
constexpr const_reverse_iterator crbegin() const noexcept 
# 202
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 205
constexpr const_reverse_iterator crend() const noexcept 
# 206
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 211
constexpr size_type size() const noexcept 
# 212
{ return this->_M_len; } 
# 215
constexpr size_type length() const noexcept 
# 216
{ return _M_len; } 
# 219
constexpr size_type max_size() const noexcept 
# 220
{ 
# 221
return (((npos - sizeof(size_type)) - sizeof(void *)) / sizeof(value_type)) / (4); 
# 223
} 
# 225
[[nodiscard]] constexpr bool 
# 226
empty() const noexcept 
# 227
{ return (this->_M_len) == (0); } 
# 232
constexpr const_reference operator[](size_type __pos) const noexcept 
# 233
{ 
# 234
do { if (__builtin_is_constant_evaluated() && (!((bool)(__pos < (this->_M_len))))) { __builtin_unreachable(); }  } while (false); 
# 235
return *((this->_M_str) + __pos); 
# 236
} 
# 239
constexpr const_reference at(size_type __pos) const 
# 240
{ 
# 241
if (__pos >= (_M_len)) { 
# 242
__throw_out_of_range_fmt("basic_string_view::at: __pos (which is %zu) >= this->size() (which is %zu)", __pos, size()); }  
# 245
return *((this->_M_str) + __pos); 
# 246
} 
# 249
constexpr const_reference front() const noexcept 
# 250
{ 
# 251
do { if (__builtin_is_constant_evaluated() && (!((bool)((this->_M_len) > (0))))) { __builtin_unreachable(); }  } while (false); 
# 252
return *(this->_M_str); 
# 253
} 
# 256
constexpr const_reference back() const noexcept 
# 257
{ 
# 258
do { if (__builtin_is_constant_evaluated() && (!((bool)((this->_M_len) > (0))))) { __builtin_unreachable(); }  } while (false); 
# 259
return *(((this->_M_str) + (this->_M_len)) - 1); 
# 260
} 
# 263
constexpr const_pointer data() const noexcept 
# 264
{ return this->_M_str; } 
# 269
constexpr void remove_prefix(size_type __n) noexcept 
# 270
{ 
# 271
do { if (__builtin_is_constant_evaluated() && (!((bool)((this->_M_len) >= __n)))) { __builtin_unreachable(); }  } while (false); 
# 272
(this->_M_str) += __n; 
# 273
(this->_M_len) -= __n; 
# 274
} 
# 277
constexpr void remove_suffix(size_type __n) noexcept 
# 278
{ (this->_M_len) -= __n; } 
# 281
constexpr void swap(basic_string_view &__sv) noexcept 
# 282
{ 
# 283
auto __tmp = *this; 
# 284
(*this) = __sv; 
# 285
__sv = __tmp; 
# 286
} 
# 292
size_type copy(_CharT *__str, size_type __n, size_type __pos = 0) const 
# 293
{ 
# 294
; 
# 295
__pos = std::__sv_check(size(), __pos, "basic_string_view::copy"); 
# 296
const size_type __rlen = std::min(__n, (_M_len) - __pos); 
# 299
traits_type::copy(__str, data() + __pos, __rlen); 
# 300
return __rlen; 
# 301
} 
# 304
constexpr basic_string_view substr(size_type __pos = 0, size_type __n = npos) const noexcept(false) 
# 305
{ 
# 306
__pos = std::__sv_check(size(), __pos, "basic_string_view::substr"); 
# 307
const size_type __rlen = std::min(__n, (_M_len) - __pos); 
# 308
return basic_string_view{(_M_str) + __pos, __rlen}; 
# 309
} 
# 312
constexpr int compare(basic_string_view __str) const noexcept 
# 313
{ 
# 314
const size_type __rlen = std::min(this->_M_len, __str._M_len); 
# 315
int __ret = traits_type::compare(this->_M_str, __str._M_str, __rlen); 
# 316
if (__ret == 0) { 
# 317
__ret = (_S_compare)(this->_M_len, __str._M_len); }  
# 318
return __ret; 
# 319
} 
# 322
constexpr int compare(size_type __pos1, size_type __n1, basic_string_view __str) const 
# 323
{ return substr(__pos1, __n1).compare(__str); } 
# 326
constexpr int compare(size_type __pos1, size_type __n1, basic_string_view 
# 327
__str, size_type __pos2, size_type __n2) const 
# 328
{ 
# 329
return substr(__pos1, __n1).compare(__str.substr(__pos2, __n2)); 
# 330
} 
# 332
__attribute((__nonnull__)) constexpr int 
# 333
compare(const _CharT *__str) const noexcept 
# 334
{ return this->compare(basic_string_view{__str}); } 
# 336
__attribute((__nonnull__)) constexpr int 
# 337
compare(size_type __pos1, size_type __n1, const _CharT *__str) const 
# 338
{ return substr(__pos1, __n1).compare(basic_string_view{__str}); } 
# 341
constexpr int compare(size_type __pos1, size_type __n1, const _CharT *
# 342
__str, size_type __n2) const noexcept(false) 
# 343
{ 
# 344
return substr(__pos1, __n1).compare(basic_string_view(__str, __n2)); 
# 346
} 
# 398 "/usr/include/c++/11/string_view" 3
constexpr size_type find(basic_string_view __str, size_type __pos = 0) const noexcept 
# 399
{ return this->find(__str._M_str, __pos, __str._M_len); } 
# 402
constexpr size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 405
constexpr size_type find(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 407
__attribute((__nonnull__)) constexpr size_type 
# 408
find(const _CharT *__str, size_type __pos = 0) const noexcept 
# 409
{ return this->find(__str, __pos, traits_type::length(__str)); } 
# 412
constexpr size_type rfind(basic_string_view __str, size_type __pos = npos) const noexcept 
# 413
{ return this->rfind(__str._M_str, __pos, __str._M_len); } 
# 416
constexpr size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 419
constexpr size_type rfind(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 421
__attribute((__nonnull__)) constexpr size_type 
# 422
rfind(const _CharT *__str, size_type __pos = npos) const noexcept 
# 423
{ return this->rfind(__str, __pos, traits_type::length(__str)); } 
# 426
constexpr size_type find_first_of(basic_string_view __str, size_type __pos = 0) const noexcept 
# 427
{ return this->find_first_of(__str._M_str, __pos, __str._M_len); } 
# 430
constexpr size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 431
{ return this->find(__c, __pos); } 
# 434
constexpr size_type find_first_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 437
__attribute((__nonnull__)) constexpr size_type 
# 438
find_first_of(const _CharT *__str, size_type __pos = 0) const noexcept 
# 439
{ return this->find_first_of(__str, __pos, traits_type::length(__str)); } 
# 442
constexpr size_type find_last_of(basic_string_view __str, size_type 
# 443
__pos = npos) const noexcept 
# 444
{ return this->find_last_of(__str._M_str, __pos, __str._M_len); } 
# 447
constexpr size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 448
{ return this->rfind(__c, __pos); } 
# 451
constexpr size_type find_last_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 454
__attribute((__nonnull__)) constexpr size_type 
# 455
find_last_of(const _CharT *__str, size_type __pos = npos) const noexcept 
# 456
{ return this->find_last_of(__str, __pos, traits_type::length(__str)); } 
# 459
constexpr size_type find_first_not_of(basic_string_view __str, size_type 
# 460
__pos = 0) const noexcept 
# 461
{ return this->find_first_not_of(__str._M_str, __pos, __str._M_len); } 
# 464
constexpr size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 467
constexpr size_type find_first_not_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 470
__attribute((__nonnull__)) constexpr size_type 
# 471
find_first_not_of(const _CharT *__str, size_type __pos = 0) const noexcept 
# 472
{ 
# 473
return this->find_first_not_of(__str, __pos, traits_type::length(__str)); 
# 475
} 
# 478
constexpr size_type find_last_not_of(basic_string_view __str, size_type 
# 479
__pos = npos) const noexcept 
# 480
{ return this->find_last_not_of(__str._M_str, __pos, __str._M_len); } 
# 483
constexpr size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 486
constexpr size_type find_last_not_of(const _CharT * __str, size_type __pos, size_type __n) const noexcept; 
# 489
__attribute((__nonnull__)) constexpr size_type 
# 490
find_last_not_of(const _CharT *__str, size_type 
# 491
__pos = npos) const noexcept 
# 492
{ 
# 493
return this->find_last_not_of(__str, __pos, traits_type::length(__str)); 
# 495
} 
# 500
private: static constexpr int _S_compare(size_type __n1, size_type __n2) noexcept 
# 501
{ 
# 502
using __limits = __gnu_cxx::__int_traits< int> ; 
# 503
const difference_type __diff = __n1 - __n2; 
# 504
if (__diff > __gnu_cxx::__numeric_traits_integer< int> ::__max) { 
# 505
return __limits::__max; }  
# 506
if (__diff < __gnu_cxx::__numeric_traits_integer< int> ::__min) { 
# 507
return __limits::__min; }  
# 508
return static_cast< int>(__diff); 
# 509
} 
# 511
size_t _M_len; 
# 512
const _CharT *_M_str; 
# 513
}; 
# 533 "/usr/include/c++/11/string_view" 3
template< class _CharT, class _Traits> constexpr bool 
# 535
operator==(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 536
__y) noexcept 
# 537
{ return (__x.size() == __y.size()) && (__x.compare(__y) == 0); } 
# 539
template< class _CharT, class _Traits> constexpr bool 
# 541
operator==(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 542
__y) noexcept 
# 544
{ return (__x.size() == __y.size()) && (__x.compare(__y) == 0); } 
# 562 "/usr/include/c++/11/string_view" 3
template< class _CharT, class _Traits> constexpr bool 
# 564
operator==(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 565
__y) noexcept 
# 566
{ return (__x.size() == __y.size()) && (__x.compare(__y) == 0); } 
# 568
template< class _CharT, class _Traits> constexpr bool 
# 570
operator!=(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 571
__y) noexcept 
# 572
{ return !(__x == __y); } 
# 574
template< class _CharT, class _Traits> constexpr bool 
# 576
operator!=(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 577
__y) noexcept 
# 579
{ return !(__x == __y); } 
# 581
template< class _CharT, class _Traits> constexpr bool 
# 583
operator!=(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 584
__y) noexcept 
# 585
{ return !(__x == __y); } 
# 587
template< class _CharT, class _Traits> constexpr bool 
# 589
operator<(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 590
__y) noexcept 
# 591
{ return __x.compare(__y) < 0; } 
# 593
template< class _CharT, class _Traits> constexpr bool 
# 595
operator<(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 596
__y) noexcept 
# 598
{ return __x.compare(__y) < 0; } 
# 600
template< class _CharT, class _Traits> constexpr bool 
# 602
operator<(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 603
__y) noexcept 
# 604
{ return __x.compare(__y) < 0; } 
# 606
template< class _CharT, class _Traits> constexpr bool 
# 608
operator>(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 609
__y) noexcept 
# 610
{ return __x.compare(__y) > 0; } 
# 612
template< class _CharT, class _Traits> constexpr bool 
# 614
operator>(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 615
__y) noexcept 
# 617
{ return __x.compare(__y) > 0; } 
# 619
template< class _CharT, class _Traits> constexpr bool 
# 621
operator>(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 622
__y) noexcept 
# 623
{ return __x.compare(__y) > 0; } 
# 625
template< class _CharT, class _Traits> constexpr bool 
# 627
operator<=(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 628
__y) noexcept 
# 629
{ return __x.compare(__y) <= 0; } 
# 631
template< class _CharT, class _Traits> constexpr bool 
# 633
operator<=(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 634
__y) noexcept 
# 636
{ return __x.compare(__y) <= 0; } 
# 638
template< class _CharT, class _Traits> constexpr bool 
# 640
operator<=(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 641
__y) noexcept 
# 642
{ return __x.compare(__y) <= 0; } 
# 644
template< class _CharT, class _Traits> constexpr bool 
# 646
operator>=(basic_string_view< _CharT, _Traits>  __x, basic_string_view< _CharT, _Traits>  
# 647
__y) noexcept 
# 648
{ return __x.compare(__y) >= 0; } 
# 650
template< class _CharT, class _Traits> constexpr bool 
# 652
operator>=(basic_string_view< _CharT, _Traits>  __x, __type_identity_t< basic_string_view< _CharT, _Traits> >  
# 653
__y) noexcept 
# 655
{ return __x.compare(__y) >= 0; } 
# 657
template< class _CharT, class _Traits> constexpr bool 
# 659
operator>=(__type_identity_t< basic_string_view< _CharT, _Traits> >  __x, basic_string_view< _CharT, _Traits>  
# 660
__y) noexcept 
# 661
{ return __x.compare(__y) >= 0; } 
# 665
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 667
operator<<(basic_ostream< _CharT, _Traits>  &__os, basic_string_view< _CharT, _Traits>  
# 668
__str) 
# 669
{ return __ostream_insert(__os, __str.data(), __str.size()); } 
# 674
using string_view = basic_string_view< char> ; 
# 676
using wstring_view = basic_string_view< wchar_t> ; 
# 681
using u16string_view = basic_string_view< char16_t> ; 
# 682
using u32string_view = basic_string_view< char32_t> ; 
# 686
template< class _Tp> struct hash; 
# 690
template<> struct hash< basic_string_view< char> >  : public __hash_base< unsigned long, basic_string_view< char> >  { 
# 694
size_t operator()(const string_view &__str) const noexcept 
# 695
{ return std::_Hash_impl::hash(__str.data(), __str.length()); } 
# 696
}; 
# 699
template<> struct __is_fast_hash< hash< basic_string_view< char> > >  : public false_type { 
# 700
}; 
# 704
template<> struct hash< basic_string_view< wchar_t> >  : public __hash_base< unsigned long, basic_string_view< wchar_t> >  { 
# 708
size_t operator()(const wstring_view &__s) const noexcept 
# 709
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 710
} 
# 711
}; 
# 714
template<> struct __is_fast_hash< hash< basic_string_view< wchar_t> > >  : public false_type { 
# 715
}; 
# 734 "/usr/include/c++/11/string_view" 3
template<> struct hash< basic_string_view< char16_t> >  : public __hash_base< unsigned long, basic_string_view< char16_t> >  { 
# 738
size_t operator()(const u16string_view &__s) const noexcept 
# 739
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 740
} 
# 741
}; 
# 744
template<> struct __is_fast_hash< hash< basic_string_view< char16_t> > >  : public false_type { 
# 745
}; 
# 748
template<> struct hash< basic_string_view< char32_t> >  : public __hash_base< unsigned long, basic_string_view< char32_t> >  { 
# 752
size_t operator()(const u32string_view &__s) const noexcept 
# 753
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 754
} 
# 755
}; 
# 758
template<> struct __is_fast_hash< hash< basic_string_view< char32_t> > >  : public false_type { 
# 759
}; 
# 761
inline namespace literals { 
# 763
inline namespace string_view_literals { 
# 765
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
# 768
constexpr basic_string_view< char>  operator ""sv(const char *__str, size_t __len) noexcept 
# 769
{ return basic_string_view< char> {__str, __len}; } 
# 773
constexpr basic_string_view< wchar_t>  operator ""sv(const wchar_t *__str, size_t __len) noexcept 
# 774
{ return basic_string_view< wchar_t> {__str, __len}; } 
# 784 "/usr/include/c++/11/string_view" 3
constexpr basic_string_view< char16_t>  operator ""sv(const char16_t *__str, size_t __len) noexcept 
# 785
{ return basic_string_view< char16_t> {__str, __len}; } 
# 788
constexpr basic_string_view< char32_t>  operator ""sv(const char32_t *__str, size_t __len) noexcept 
# 789
{ return basic_string_view< char32_t> {__str, __len}; } 
# 791
#pragma GCC diagnostic pop
}
# 793
}
# 810 "/usr/include/c++/11/string_view" 3
}
# 41 "/usr/include/c++/11/bits/string_view.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 48
basic_string_view< _CharT, _Traits> ::find(const _CharT *__str, size_type __pos, size_type __n) const noexcept 
# 49
{ 
# 50
; 
# 52
if (__n == (0)) { 
# 53
return (__pos <= (_M_len)) ? __pos : npos; }  
# 54
if (__pos >= (_M_len)) { 
# 55
return npos; }  
# 57
const _CharT __elem0 = __str[0]; 
# 58
const _CharT *__first = (_M_str) + __pos; 
# 59
const _CharT *const __last = (_M_str) + (_M_len); 
# 60
size_type __len = (_M_len) - __pos; 
# 62
while (__len >= __n) 
# 63
{ 
# 65
__first = traits_type::find(__first, (__len - __n) + (1), __elem0); 
# 66
if (!__first) { 
# 67
return npos; }  
# 71
if (traits_type::compare(__first, __str, __n) == 0) { 
# 72
return __first - (_M_str); }  
# 73
__len = (__last - (++__first)); 
# 74
}  
# 75
return npos; 
# 76
} 
# 78
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 81
basic_string_view< _CharT, _Traits> ::find(_CharT __c, size_type __pos) const noexcept 
# 82
{ 
# 83
size_type __ret = npos; 
# 84
if (__pos < (this->_M_len)) 
# 85
{ 
# 86
const size_type __n = (this->_M_len) - __pos; 
# 87
const _CharT *__p = traits_type::find((this->_M_str) + __pos, __n, __c); 
# 88
if (__p) { 
# 89
__ret = (__p - (this->_M_str)); }  
# 90
}  
# 91
return __ret; 
# 92
} 
# 94
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 97
basic_string_view< _CharT, _Traits> ::rfind(const _CharT *__str, size_type __pos, size_type __n) const noexcept 
# 98
{ 
# 99
; 
# 101
if (__n <= (this->_M_len)) 
# 102
{ 
# 103
__pos = std::min((size_type)((this->_M_len) - __n), __pos); 
# 104
do 
# 105
{ 
# 106
if (traits_type::compare((this->_M_str) + __pos, __str, __n) == 0) { 
# 107
return __pos; }  
# 108
} 
# 109
while ((__pos--) > (0)); 
# 110
}  
# 111
return npos; 
# 112
} 
# 114
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 117
basic_string_view< _CharT, _Traits> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 118
{ 
# 119
size_type __size = this->_M_len; 
# 120
if (__size > (0)) 
# 121
{ 
# 122
if ((--__size) > __pos) { 
# 123
__size = __pos; }  
# 124
for (++__size; (__size--) > (0);) { 
# 125
if (traits_type::eq((this->_M_str)[__size], __c)) { 
# 126
return __size; }  }  
# 127
}  
# 128
return npos; 
# 129
} 
# 131
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 134
basic_string_view< _CharT, _Traits> ::find_first_of(const _CharT *__str, size_type __pos, size_type 
# 135
__n) const noexcept 
# 136
{ 
# 137
; 
# 138
for (; __n && (__pos < (this->_M_len)); ++__pos) 
# 139
{ 
# 140
const _CharT *__p = traits_type::find(__str, __n, (this->_M_str)[__pos]); 
# 142
if (__p) { 
# 143
return __pos; }  
# 144
}  
# 145
return npos; 
# 146
} 
# 148
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 151
basic_string_view< _CharT, _Traits> ::find_last_of(const _CharT *__str, size_type __pos, size_type 
# 152
__n) const noexcept 
# 153
{ 
# 154
; 
# 155
size_type __size = size(); 
# 156
if (__size && __n) 
# 157
{ 
# 158
if ((--__size) > __pos) { 
# 159
__size = __pos; }  
# 160
do 
# 161
{ 
# 162
if (traits_type::find(__str, __n, (this->_M_str)[__size])) { 
# 163
return __size; }  
# 164
} 
# 165
while ((__size--) != (0)); 
# 166
}  
# 167
return npos; 
# 168
} 
# 170
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 173
basic_string_view< _CharT, _Traits> ::find_first_not_of(const _CharT *__str, size_type __pos, size_type 
# 174
__n) const noexcept 
# 175
{ 
# 176
; 
# 177
for (; __pos < (this->_M_len); ++__pos) { 
# 178
if (!traits_type::find(__str, __n, (this->_M_str)[__pos])) { 
# 179
return __pos; }  }  
# 180
return npos; 
# 181
} 
# 183
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 186
basic_string_view< _CharT, _Traits> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 187
{ 
# 188
for (; __pos < (this->_M_len); ++__pos) { 
# 189
if (!traits_type::eq((this->_M_str)[__pos], __c)) { 
# 190
return __pos; }  }  
# 191
return npos; 
# 192
} 
# 194
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 197
basic_string_view< _CharT, _Traits> ::find_last_not_of(const _CharT *__str, size_type __pos, size_type 
# 198
__n) const noexcept 
# 199
{ 
# 200
; 
# 201
size_type __size = this->_M_len; 
# 202
if (__size) 
# 203
{ 
# 204
if ((--__size) > __pos) { 
# 205
__size = __pos; }  
# 206
do 
# 207
{ 
# 208
if (!traits_type::find(__str, __n, (this->_M_str)[__size])) { 
# 209
return __size; }  
# 210
} 
# 211
while (__size--); 
# 212
}  
# 213
return npos; 
# 214
} 
# 216
template< class _CharT, class _Traits> constexpr typename basic_string_view< _CharT, _Traits> ::size_type 
# 219
basic_string_view< _CharT, _Traits> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 220
{ 
# 221
size_type __size = this->_M_len; 
# 222
if (__size) 
# 223
{ 
# 224
if ((--__size) > __pos) { 
# 225
__size = __pos; }  
# 226
do 
# 227
{ 
# 228
if (!traits_type::eq((this->_M_str)[__size], __c)) { 
# 229
return __size; }  
# 230
} 
# 231
while (__size--); 
# 232
}  
# 233
return npos; 
# 234
} 
# 237
}
# 51 "/usr/include/c++/11/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 65 "/usr/include/c++/11/bits/basic_string.h" 3
inline namespace __cxx11 { 
# 84 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> 
# 85
class basic_string { 
# 88
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 89
typedef __gnu_cxx::__alloc_traits< _Char_alloc_type>  _Alloc_traits; 
# 93
public: typedef _Traits traits_type; 
# 94
typedef typename _Traits::char_type value_type; 
# 95
typedef _Char_alloc_type allocator_type; 
# 96
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::size_type size_type; 
# 97
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::difference_type difference_type; 
# 98
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::reference reference; 
# 99
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_reference const_reference; 
# 100
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::pointer pointer; 
# 101
typedef typename __gnu_cxx::__alloc_traits< _Char_alloc_type> ::const_pointer const_pointer; 
# 102
typedef __gnu_cxx::__normal_iterator< pointer, basic_string>  iterator; 
# 104
typedef __gnu_cxx::__normal_iterator< const_pointer, basic_string>  const_iterator; 
# 105
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 106
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 109
static const size_type npos = (static_cast< size_type>(-1)); 
# 116
protected: typedef const_iterator __const_iterator; 
# 122
private: typedef basic_string_view< _CharT, _Traits>  __sv_type; 
# 124
template< class _Tp, class _Res> using _If_sv = enable_if_t< __and_< is_convertible< const _Tp &, __sv_type> , __not_< is_convertible< const _Tp *, const basic_string *> > , __not_< is_convertible< const _Tp &, const _CharT *> > > ::value, _Res> ; 
# 133
static __sv_type _S_to_string_view(__sv_type __svt) noexcept 
# 134
{ return __svt; } 
# 140
struct __sv_wrapper { 
# 142
explicit __sv_wrapper(__sv_type __sv) noexcept : _M_sv(__sv) { } 
# 143
__sv_type _M_sv; 
# 144
}; 
# 153
explicit basic_string(__sv_wrapper __svw, const _Alloc &__a) : basic_string((__svw._M_sv).data(), (__svw._M_sv).size(), __a) 
# 154
{ } 
# 158
struct _Alloc_hider : public allocator_type { 
# 164
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, const _Alloc &__a) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(__a), _M_p(__dat) 
# 165
{ } 
# 167
_Alloc_hider(typename basic_string< _CharT, _Traits, _Alloc> ::pointer __dat, _Alloc &&__a = _Alloc()) : basic_string< _CharT, _Traits, _Alloc> ::allocator_type(std::move(__a)), _M_p(__dat) 
# 168
{ } 
# 171
typename basic_string< _CharT, _Traits, _Alloc> ::pointer _M_p; 
# 172
}; 
# 174
_Alloc_hider _M_dataplus; 
# 175
size_type _M_string_length; 
# 177
enum { _S_local_capacity = (15) / sizeof(_CharT)}; 
# 180
union { 
# 181
_CharT _M_local_buf[_S_local_capacity + 1]; 
# 182
size_type _M_allocated_capacity; 
# 183
}; 
# 186
void _M_data(pointer __p) 
# 187
{ ((_M_dataplus)._M_p) = __p; } 
# 190
void _M_length(size_type __length) 
# 191
{ (_M_string_length) = __length; } 
# 194
pointer _M_data() const 
# 195
{ return (_M_dataplus)._M_p; } 
# 198
pointer _M_local_data() 
# 199
{ 
# 201
return std::template pointer_traits< pointer> ::pointer_to(*(_M_local_buf)); 
# 205
} 
# 208
const_pointer _M_local_data() const 
# 209
{ 
# 211
return std::template pointer_traits< const_pointer> ::pointer_to(*(_M_local_buf)); 
# 215
} 
# 218
void _M_capacity(size_type __capacity) 
# 219
{ (_M_allocated_capacity) = __capacity; } 
# 222
void _M_set_length(size_type __n) 
# 223
{ 
# 224
_M_length(__n); 
# 225
traits_type::assign(_M_data()[__n], _CharT()); 
# 226
} 
# 229
bool _M_is_local() const 
# 230
{ return _M_data() == _M_local_data(); } 
# 234
pointer _M_create(size_type &, size_type); 
# 237
void _M_dispose() 
# 238
{ 
# 239
if (!_M_is_local()) { 
# 240
_M_destroy(_M_allocated_capacity); }  
# 241
} 
# 244
void _M_destroy(size_type __size) throw() 
# 245
{ _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); } 
# 249
template< class _InIterator> void 
# 251
_M_construct_aux(_InIterator __beg, _InIterator __end, __false_type) 
# 253
{ 
# 254
typedef typename iterator_traits< _InIterator> ::iterator_category _Tag; 
# 255
_M_construct(__beg, __end, _Tag()); 
# 256
} 
# 260
template< class _Integer> void 
# 262
_M_construct_aux(_Integer __beg, _Integer __end, __true_type) 
# 263
{ _M_construct_aux_2(static_cast< size_type>(__beg), __end); } 
# 266
void _M_construct_aux_2(size_type __req, _CharT __c) 
# 267
{ _M_construct(__req, __c); } 
# 269
template< class _InIterator> void 
# 271
_M_construct(_InIterator __beg, _InIterator __end) 
# 272
{ 
# 273
typedef typename __is_integer< _InIterator> ::__type _Integral; 
# 274
_M_construct_aux(__beg, __end, _Integral()); 
# 275
} 
# 278
template< class _InIterator> void _M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag); 
# 285
template< class _FwdIterator> void _M_construct(_FwdIterator __beg, _FwdIterator __end, forward_iterator_tag); 
# 291
void _M_construct(size_type __req, _CharT __c); 
# 294
allocator_type &_M_get_allocator() 
# 295
{ return _M_dataplus; } 
# 298
const allocator_type &_M_get_allocator() const 
# 299
{ return _M_dataplus; } 
# 318 "/usr/include/c++/11/bits/basic_string.h" 3
size_type _M_check(size_type __pos, const char *__s) const 
# 319
{ 
# 320
if (__pos > size()) { 
# 321
__throw_out_of_range_fmt("%s: __pos (which is %zu) > this->size() (which is %zu)", __s, __pos, size()); }  
# 324
return __pos; 
# 325
} 
# 328
void _M_check_length(size_type __n1, size_type __n2, const char *__s) const 
# 329
{ 
# 330
if ((max_size() - (size() - __n1)) < __n2) { 
# 331
__throw_length_error(__s); }  
# 332
} 
# 337
size_type _M_limit(size_type __pos, size_type __off) const noexcept 
# 338
{ 
# 339
const bool __testoff = __off < (size() - __pos); 
# 340
return __testoff ? __off : (size() - __pos); 
# 341
} 
# 345
bool _M_disjunct(const _CharT *__s) const noexcept 
# 346
{ 
# 347
return (less< const _CharT *> ()(__s, _M_data()) || less< const _CharT *> ()(_M_data() + size(), __s)); 
# 349
} 
# 354
static void _S_copy(_CharT *__d, const _CharT *__s, size_type __n) 
# 355
{ 
# 356
if (__n == 1) { 
# 357
traits_type::assign(*__d, *__s); } else { 
# 359
traits_type::copy(__d, __s, __n); }  
# 360
} 
# 363
static void _S_move(_CharT *__d, const _CharT *__s, size_type __n) 
# 364
{ 
# 365
if (__n == 1) { 
# 366
traits_type::assign(*__d, *__s); } else { 
# 368
traits_type::move(__d, __s, __n); }  
# 369
} 
# 372
static void _S_assign(_CharT *__d, size_type __n, _CharT __c) 
# 373
{ 
# 374
if (__n == 1) { 
# 375
traits_type::assign(*__d, __c); } else { 
# 377
traits_type::assign(__d, __n, __c); }  
# 378
} 
# 382
template< class _Iterator> static void 
# 384
_S_copy_chars(_CharT *__p, _Iterator __k1, _Iterator __k2) 
# 385
{ 
# 386
for (; __k1 != __k2; (++__k1), ((void)(++__p))) { 
# 387
traits_type::assign(*__p, *__k1); }  
# 388
} 
# 391
static void _S_copy_chars(_CharT *__p, iterator __k1, iterator __k2) noexcept 
# 392
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 395
static void _S_copy_chars(_CharT *__p, const_iterator __k1, const_iterator __k2) noexcept 
# 397
{ _S_copy_chars(__p, __k1.base(), __k2.base()); } 
# 400
static void _S_copy_chars(_CharT *__p, _CharT *__k1, _CharT *__k2) noexcept 
# 401
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 404
static void _S_copy_chars(_CharT *__p, const _CharT *__k1, const _CharT *__k2) noexcept 
# 406
{ (_S_copy)(__p, __k1, __k2 - __k1); } 
# 409
static int _S_compare(size_type __n1, size_type __n2) noexcept 
# 410
{ 
# 411
const difference_type __d = (difference_type)(__n1 - __n2); 
# 413
if (__d > __gnu_cxx::__numeric_traits< int> ::__max) { 
# 414
return __gnu_cxx::__numeric_traits< int> ::__max; } else { 
# 415
if (__d < __gnu_cxx::__numeric_traits< int> ::__min) { 
# 416
return __gnu_cxx::__numeric_traits< int> ::__min; } else { 
# 418
return (int)__d; }  }  
# 419
} 
# 422
void _M_assign(const basic_string &); 
# 425
void _M_mutate(size_type __pos, size_type __len1, const _CharT * __s, size_type __len2); 
# 429
void _M_erase(size_type __pos, size_type __n); 
# 439
public: basic_string() noexcept(is_nothrow_default_constructible< _Alloc> ::value) : _M_dataplus(_M_local_data()) 
# 442
{ _M_set_length(0); } 
# 448
explicit basic_string(const _Alloc &__a) noexcept : _M_dataplus(_M_local_data(), __a) 
# 450
{ _M_set_length(0); } 
# 456
basic_string(const basic_string &__str) : _M_dataplus(_M_local_data(), _Alloc_traits::_S_select_on_copy(__str._M_get_allocator())) 
# 459
{ _M_construct(__str._M_data(), __str._M_data() + __str.length()); } 
# 469 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, const _Alloc &
# 470
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 472
{ 
# 473
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 475
_M_construct(__start, __start + __str._M_limit(__pos, npos)); 
# 476
} 
# 484
basic_string(const basic_string &__str, size_type __pos, size_type 
# 485
__n) : _M_dataplus(_M_local_data()) 
# 487
{ 
# 488
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "basic_string::basic_string"); 
# 490
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 491
} 
# 500 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string(const basic_string &__str, size_type __pos, size_type 
# 501
__n, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 503
{ 
# 504
const _CharT *__start = __str._M_data() + __str._M_check(__pos, "string::string"); 
# 506
_M_construct(__start, __start + __str._M_limit(__pos, __n)); 
# 507
} 
# 518 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string(const _CharT *__s, size_type __n, const _Alloc &
# 519
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 521
{ _M_construct(__s, __s + __n); } 
# 531 "/usr/include/c++/11/bits/basic_string.h" 3
template< class  = _RequireAllocator< _Alloc> > 
# 533
basic_string(const _CharT *__s, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 535
{ 
# 536
const _CharT *__end = (__s) ? __s + traits_type::length(__s) : (reinterpret_cast< const _CharT *>(__alignof__(_CharT))); 
# 539
_M_construct(__s, __end, random_access_iterator_tag()); 
# 540
} 
# 551 "/usr/include/c++/11/bits/basic_string.h" 3
template< class  = _RequireAllocator< _Alloc> > 
# 553
basic_string(size_type __n, _CharT __c, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 555
{ _M_construct(__n, __c); } 
# 565 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string(basic_string &&__str) noexcept : _M_dataplus(_M_local_data(), std::move(__str._M_get_allocator())) 
# 567
{ 
# 568
if (__str._M_is_local()) 
# 569
{ 
# 570
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 572
} else 
# 574
{ 
# 575
_M_data(__str._M_data()); 
# 576
_M_capacity(__str._M_allocated_capacity); 
# 577
}  
# 582
_M_length(__str.length()); 
# 583
__str._M_data(__str._M_local_data()); 
# 584
__str._M_set_length(0); 
# 585
} 
# 592
basic_string(initializer_list< _CharT>  __l, const _Alloc &__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 594
{ _M_construct(__l.begin(), __l.end()); } 
# 596
basic_string(const basic_string &__str, const _Alloc &__a) : _M_dataplus(_M_local_data(), __a) 
# 598
{ _M_construct(__str.begin(), __str.end()); } 
# 600
basic_string(basic_string &&__str, const _Alloc &__a) noexcept(_Alloc_traits::_S_always_equal()) : _M_dataplus(_M_local_data(), __a) 
# 603
{ 
# 604
if (__str._M_is_local()) 
# 605
{ 
# 606
traits_type::copy(_M_local_buf, __str._M_local_buf, _S_local_capacity + 1); 
# 608
_M_length(__str.length()); 
# 609
__str._M_set_length(0); 
# 610
} else { 
# 611
if (_Alloc_traits::_S_always_equal() || (__str.get_allocator() == __a)) 
# 613
{ 
# 614
_M_data(__str._M_data()); 
# 615
_M_length(__str.length()); 
# 616
_M_capacity(__str._M_allocated_capacity); 
# 617
__str._M_data(__str._M_local_buf); 
# 618
__str._M_set_length(0); 
# 619
} else { 
# 621
_M_construct(__str.begin(), __str.end()); }  }  
# 622
} 
# 633 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _InputIterator, class 
# 634
 = _RequireInputIter< _InputIterator> > 
# 638
basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc &
# 639
__a = _Alloc()) : _M_dataplus(_M_local_data(), __a) 
# 641
{ _M_construct(__beg, __end); } 
# 651 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp, class 
# 652
 = enable_if_t< is_convertible_v< const _Tp &, __sv_type> > > 
# 653
basic_string(const _Tp &__t, size_type __pos, size_type __n, const _Alloc &
# 654
__a = _Alloc()) : basic_string((_S_to_string_view)(__t).substr(__pos, __n), __a) 
# 655
{ } 
# 662
template< class _Tp, class  = _If_sv< _Tp, void> > explicit 
# 664
basic_string(const _Tp &__t, const _Alloc &__a = _Alloc()) : basic_string((__sv_wrapper)(_S_to_string_view)(__t), __a) 
# 665
{ } 
# 671
~basic_string() 
# 672
{ _M_dispose(); } 
# 679
basic_string &operator=(const basic_string &__str) 
# 680
{ 
# 681
return this->assign(__str); 
# 682
} 
# 689
basic_string &operator=(const _CharT *__s) 
# 690
{ return this->assign(__s); } 
# 700 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &operator=(_CharT __c) 
# 701
{ 
# 702
this->assign(1, __c); 
# 703
return *this; 
# 704
} 
# 717 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &operator=(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 719
{ 
# 720
if ((!_M_is_local()) && _Alloc_traits::_S_propagate_on_move_assign() && (!_Alloc_traits::_S_always_equal()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 723
{ 
# 725
_M_destroy(_M_allocated_capacity); 
# 726
_M_data(_M_local_data()); 
# 727
_M_set_length(0); 
# 728
}  
# 730
std::__alloc_on_move(_M_get_allocator(), __str._M_get_allocator()); 
# 732
if (__str._M_is_local()) 
# 733
{ 
# 737
if (__builtin_expect(std::__addressof(__str) != this, true)) 
# 738
{ 
# 739
if (__str.size()) { 
# 740
this->_S_copy(_M_data(), __str._M_data(), __str.size()); }  
# 741
_M_set_length(__str.size()); 
# 742
}  
# 743
} else { 
# 744
if ((_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()) || (_M_get_allocator() == __str._M_get_allocator())) 
# 747
{ 
# 749
pointer __data = (nullptr); 
# 750
size_type __capacity; 
# 751
if (!_M_is_local()) 
# 752
{ 
# 753
if (_Alloc_traits::_S_always_equal()) 
# 754
{ 
# 756
__data = _M_data(); 
# 757
__capacity = (_M_allocated_capacity); 
# 758
} else { 
# 760
_M_destroy(_M_allocated_capacity); }  
# 761
}  
# 763
_M_data(__str._M_data()); 
# 764
_M_length(__str.length()); 
# 765
_M_capacity(__str._M_allocated_capacity); 
# 766
if (__data) 
# 767
{ 
# 768
__str._M_data(__data); 
# 769
__str._M_capacity(__capacity); 
# 770
} else { 
# 772
__str._M_data(__str._M_local_buf); }  
# 773
} else { 
# 775
assign(__str); }  }  
# 776
__str.clear(); 
# 777
return *this; 
# 778
} 
# 785
basic_string &operator=(initializer_list< _CharT>  __l) 
# 786
{ 
# 787
this->assign(__l.begin(), __l.size()); 
# 788
return *this; 
# 789
} 
# 797
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 799
operator=(const _Tp &__svt) 
# 800
{ return this->assign(__svt); } 
# 806
operator __sv_type() const noexcept 
# 807
{ return __sv_type(data(), size()); } 
# 816
iterator begin() noexcept 
# 817
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data())); } 
# 824
const_iterator begin() const noexcept 
# 825
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data())); } 
# 832
iterator end() noexcept 
# 833
{ return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + size())); } 
# 840
const_iterator end() const noexcept 
# 841
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(_M_data() + size())); } 
# 849
reverse_iterator rbegin() noexcept 
# 850
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 858
const_reverse_iterator rbegin() const noexcept 
# 859
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 867
reverse_iterator rend() noexcept 
# 868
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 876
const_reverse_iterator rend() const noexcept 
# 877
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 885
const_iterator cbegin() const noexcept 
# 886
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data())); } 
# 893
const_iterator cend() const noexcept 
# 894
{ return ((__gnu_cxx::__normal_iterator< const_pointer, basic_string> )(this->_M_data() + size())); } 
# 902
const_reverse_iterator crbegin() const noexcept 
# 903
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 911
const_reverse_iterator crend() const noexcept 
# 912
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 920
size_type size() const noexcept 
# 921
{ return _M_string_length; } 
# 926
size_type length() const noexcept 
# 927
{ return _M_string_length; } 
# 931
size_type max_size() const noexcept 
# 932
{ return (_Alloc_traits::max_size(_M_get_allocator()) - 1) / 2; } 
# 945 "/usr/include/c++/11/bits/basic_string.h" 3
void resize(size_type __n, _CharT __c); 
# 958 "/usr/include/c++/11/bits/basic_string.h" 3
void resize(size_type __n) 
# 959
{ this->resize(__n, _CharT()); } 
# 962
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 966
void shrink_to_fit() noexcept 
# 967
{ reserve(); } 
#pragma GCC diagnostic pop
# 976
size_type capacity() const noexcept 
# 977
{ 
# 978
return (_M_is_local()) ? (size_type)_S_local_capacity : (_M_allocated_capacity); 
# 980
} 
# 1000 "/usr/include/c++/11/bits/basic_string.h" 3
void reserve(size_type __res_arg); 
# 1009
void reserve(); 
# 1015
void clear() noexcept 
# 1016
{ _M_set_length(0); } 
# 1022
[[__nodiscard__]] bool 
# 1023
empty() const noexcept 
# 1024
{ return size() == 0; } 
# 1038 "/usr/include/c++/11/bits/basic_string.h" 3
const_reference operator[](size_type __pos) const noexcept 
# 1039
{ 
# 1040
do { if (__builtin_is_constant_evaluated() && (!((bool)(__pos <= size())))) { __builtin_unreachable(); }  } while (false); 
# 1041
return _M_data()[__pos]; 
# 1042
} 
# 1055 "/usr/include/c++/11/bits/basic_string.h" 3
reference operator[](size_type __pos) 
# 1056
{ 
# 1059
do { if (__builtin_is_constant_evaluated() && (!((bool)(__pos <= size())))) { __builtin_unreachable(); }  } while (false); 
# 1061
; 
# 1062
return _M_data()[__pos]; 
# 1063
} 
# 1076 "/usr/include/c++/11/bits/basic_string.h" 3
const_reference at(size_type __n) const 
# 1077
{ 
# 1078
if (__n >= size()) { 
# 1079
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1083
return _M_data()[__n]; 
# 1084
} 
# 1097 "/usr/include/c++/11/bits/basic_string.h" 3
reference at(size_type __n) 
# 1098
{ 
# 1099
if (__n >= size()) { 
# 1100
__throw_out_of_range_fmt("basic_string::at: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1104
return _M_data()[__n]; 
# 1105
} 
# 1113
reference front() noexcept 
# 1114
{ 
# 1115
do { if (__builtin_is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1116
return operator[](0); 
# 1117
} 
# 1124
const_reference front() const noexcept 
# 1125
{ 
# 1126
do { if (__builtin_is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1127
return operator[](0); 
# 1128
} 
# 1135
reference back() noexcept 
# 1136
{ 
# 1137
do { if (__builtin_is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1138
return operator[](size() - 1); 
# 1139
} 
# 1146
const_reference back() const noexcept 
# 1147
{ 
# 1148
do { if (__builtin_is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1149
return operator[](size() - 1); 
# 1150
} 
# 1160 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &operator+=(const basic_string &__str) 
# 1161
{ return this->append(__str); } 
# 1169
basic_string &operator+=(const _CharT *__s) 
# 1170
{ return this->append(__s); } 
# 1178
basic_string &operator+=(_CharT __c) 
# 1179
{ 
# 1180
push_back(__c); 
# 1181
return *this; 
# 1182
} 
# 1191
basic_string &operator+=(initializer_list< _CharT>  __l) 
# 1192
{ return this->append(__l.begin(), __l.size()); } 
# 1201 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1203
operator+=(const _Tp &__svt) 
# 1204
{ return this->append(__svt); } 
# 1213
basic_string &append(const basic_string &__str) 
# 1214
{ return _M_append(__str._M_data(), __str.size()); } 
# 1230 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &append(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1231
{ return _M_append(__str._M_data() + __str._M_check(__pos, "basic_string::append"), __str._M_limit(__pos, __n)); 
# 1233
} 
# 1242
basic_string &append(const _CharT *__s, size_type __n) 
# 1243
{ 
# 1244
; 
# 1245
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1246
return _M_append(__s, __n); 
# 1247
} 
# 1255
basic_string &append(const _CharT *__s) 
# 1256
{ 
# 1257
; 
# 1258
const size_type __n = traits_type::length(__s); 
# 1259
_M_check_length((size_type)0, __n, "basic_string::append"); 
# 1260
return _M_append(__s, __n); 
# 1261
} 
# 1272 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &append(size_type __n, _CharT __c) 
# 1273
{ return _M_replace_aux(size(), (size_type)0, __n, __c); } 
# 1282
basic_string &append(initializer_list< _CharT>  __l) 
# 1283
{ return this->append(__l.begin(), __l.size()); } 
# 1295 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1296
 = _RequireInputIter< _InputIterator> > basic_string &
# 1301
append(_InputIterator __first, _InputIterator __last) 
# 1302
{ return this->replace(end(), end(), __first, __last); } 
# 1310
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1312
append(const _Tp &__svt) 
# 1313
{ 
# 1314
__sv_type __sv = __svt; 
# 1315
return this->append(__sv.data(), __sv.size()); 
# 1316
} 
# 1325 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1327
append(const _Tp &__svt, size_type __pos, size_type __n = npos) 
# 1328
{ 
# 1329
__sv_type __sv = __svt; 
# 1330
return _M_append(__sv.data() + std::__sv_check(__sv.size(), __pos, "basic_string::append"), std::__sv_limit(__sv.size(), __pos, __n)); 
# 1333
} 
# 1341
void push_back(_CharT __c) 
# 1342
{ 
# 1343
const size_type __size = size(); 
# 1344
if ((__size + 1) > capacity()) { 
# 1345
_M_mutate(__size, (size_type)0, 0, (size_type)1); }  
# 1346
traits_type::assign(this->_M_data()[__size], __c); 
# 1347
_M_set_length(__size + 1); 
# 1348
} 
# 1356
basic_string &assign(const basic_string &__str) 
# 1357
{ 
# 1359
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 1360
{ 
# 1361
if ((!_Alloc_traits::_S_always_equal()) && (!_M_is_local()) && (_M_get_allocator() != __str._M_get_allocator())) 
# 1363
{ 
# 1366
if (__str.size() <= _S_local_capacity) 
# 1367
{ 
# 1368
_M_destroy(_M_allocated_capacity); 
# 1369
_M_data(_M_local_data()); 
# 1370
_M_set_length(0); 
# 1371
} else 
# 1373
{ 
# 1374
const auto __len = __str.size(); 
# 1375
auto __alloc = __str._M_get_allocator(); 
# 1377
auto __ptr = _Alloc_traits::allocate(__alloc, __len + 1); 
# 1378
_M_destroy(_M_allocated_capacity); 
# 1379
_M_data(__ptr); 
# 1380
_M_capacity(__len); 
# 1381
_M_set_length(__len); 
# 1382
}  
# 1383
}  
# 1384
std::__alloc_on_copy(_M_get_allocator(), __str._M_get_allocator()); 
# 1385
}  
# 1387
_M_assign(__str); 
# 1388
return *this; 
# 1389
} 
# 1401 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &assign(basic_string &&__str) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 1403
{ 
# 1406
return (*this) = std::move(__str); 
# 1407
} 
# 1424 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &assign(const basic_string &__str, size_type __pos, size_type __n = npos) 
# 1425
{ return _M_replace((size_type)0, size(), __str._M_data() + __str._M_check(__pos, "basic_string::assign"), __str._M_limit(__pos, __n)); 
# 1427
} 
# 1440 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s, size_type __n) 
# 1441
{ 
# 1442
; 
# 1443
return _M_replace((size_type)0, size(), __s, __n); 
# 1444
} 
# 1456 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &assign(const _CharT *__s) 
# 1457
{ 
# 1458
; 
# 1459
return _M_replace((size_type)0, size(), __s, traits_type::length(__s)); 
# 1461
} 
# 1473 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &assign(size_type __n, _CharT __c) 
# 1474
{ return _M_replace_aux((size_type)0, size(), __n, __c); } 
# 1485 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1486
 = _RequireInputIter< _InputIterator> > basic_string &
# 1491
assign(_InputIterator __first, _InputIterator __last) 
# 1492
{ return this->replace(begin(), end(), __first, __last); } 
# 1501
basic_string &assign(initializer_list< _CharT>  __l) 
# 1502
{ return this->assign(__l.begin(), __l.size()); } 
# 1511 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1513
assign(const _Tp &__svt) 
# 1514
{ 
# 1515
__sv_type __sv = __svt; 
# 1516
return this->assign(__sv.data(), __sv.size()); 
# 1517
} 
# 1526 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1528
assign(const _Tp &__svt, size_type __pos, size_type __n = npos) 
# 1529
{ 
# 1530
__sv_type __sv = __svt; 
# 1531
return _M_replace((size_type)0, size(), __sv.data() + std::__sv_check(__sv.size(), __pos, "basic_string::assign"), std::__sv_limit(__sv.size(), __pos, __n)); 
# 1535
} 
# 1555 "/usr/include/c++/11/bits/basic_string.h" 3
iterator insert(const_iterator __p, size_type __n, _CharT __c) 
# 1556
{ 
# 1557
; 
# 1558
const size_type __pos = __p - begin(); 
# 1559
this->replace(__p, __p, __n, __c); 
# 1560
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1561
} 
# 1596 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _InputIterator, class 
# 1597
 = _RequireInputIter< _InputIterator> > iterator 
# 1599
insert(const_iterator __p, _InputIterator __beg, _InputIterator __end) 
# 1600
{ 
# 1601
; 
# 1602
const size_type __pos = __p - begin(); 
# 1603
this->replace(__p, __p, __beg, __end); 
# 1604
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1605
} 
# 1633 "/usr/include/c++/11/bits/basic_string.h" 3
iterator insert(const_iterator __p, initializer_list< _CharT>  __l) 
# 1634
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1660 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str) 
# 1661
{ return this->replace(__pos1, (size_type)0, __str._M_data(), __str.size()); 
# 1662
} 
# 1683 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &insert(size_type __pos1, const basic_string &__str, size_type 
# 1684
__pos2, size_type __n = npos) 
# 1685
{ return this->replace(__pos1, (size_type)0, __str._M_data() + __str._M_check(__pos2, "basic_string::insert"), __str._M_limit(__pos2, __n)); 
# 1687
} 
# 1706 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s, size_type __n) 
# 1707
{ return this->replace(__pos, (size_type)0, __s, __n); } 
# 1725 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &insert(size_type __pos, const _CharT *__s) 
# 1726
{ 
# 1727
; 
# 1728
return this->replace(__pos, (size_type)0, __s, traits_type::length(__s)); 
# 1730
} 
# 1749 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &insert(size_type __pos, size_type __n, _CharT __c) 
# 1750
{ return _M_replace_aux(_M_check(__pos, "basic_string::insert"), (size_type)0, __n, __c); 
# 1751
} 
# 1767 "/usr/include/c++/11/bits/basic_string.h" 3
iterator insert(__const_iterator __p, _CharT __c) 
# 1768
{ 
# 1769
; 
# 1770
const size_type __pos = __p - begin(); 
# 1771
_M_replace_aux(__pos, (size_type)0, (size_type)1, __c); 
# 1772
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1773
} 
# 1782 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1784
insert(size_type __pos, const _Tp &__svt) 
# 1785
{ 
# 1786
__sv_type __sv = __svt; 
# 1787
return this->insert(__pos, __sv.data(), __sv.size()); 
# 1788
} 
# 1798 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 1800
insert(size_type __pos1, const _Tp &__svt, size_type 
# 1801
__pos2, size_type __n = npos) 
# 1802
{ 
# 1803
__sv_type __sv = __svt; 
# 1804
return this->replace(__pos1, (size_type)0, __sv.data() + std::__sv_check(__sv.size(), __pos2, "basic_string::insert"), std::__sv_limit(__sv.size(), __pos2, __n)); 
# 1808
} 
# 1827 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &erase(size_type __pos = 0, size_type __n = npos) 
# 1828
{ 
# 1829
_M_check(__pos, "basic_string::erase"); 
# 1830
if (__n == npos) { 
# 1831
_M_set_length(__pos); } else { 
# 1832
if (__n != 0) { 
# 1833
_M_erase(__pos, _M_limit(__pos, __n)); }  }  
# 1834
return *this; 
# 1835
} 
# 1846 "/usr/include/c++/11/bits/basic_string.h" 3
iterator erase(__const_iterator __position) 
# 1847
{ 
# 1849
; 
# 1850
const size_type __pos = __position - begin(); 
# 1851
_M_erase(__pos, (size_type)1); 
# 1852
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(_M_data() + __pos)); 
# 1853
} 
# 1865 "/usr/include/c++/11/bits/basic_string.h" 3
iterator erase(__const_iterator __first, __const_iterator __last) 
# 1866
{ 
# 1868
; 
# 1869
const size_type __pos = __first - begin(); 
# 1870
if (__last == end()) { 
# 1871
_M_set_length(__pos); } else { 
# 1873
_M_erase(__pos, __last - __first); }  
# 1874
return ((__gnu_cxx::__normal_iterator< pointer, basic_string> )(this->_M_data() + __pos)); 
# 1875
} 
# 1884
void pop_back() noexcept 
# 1885
{ 
# 1886
do { if (__builtin_is_constant_evaluated() && (!((bool)(!empty())))) { __builtin_unreachable(); }  } while (false); 
# 1887
_M_erase(size() - 1, 1); 
# 1888
} 
# 1909 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n, const basic_string &__str) 
# 1910
{ return this->replace(__pos, __n, __str._M_data(), __str.size()); } 
# 1931 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1932
__pos2, size_type __n2 = npos) 
# 1933
{ return this->replace(__pos1, __n1, __str._M_data() + __str._M_check(__pos2, "basic_string::replace"), __str._M_limit(__pos2, __n2)); 
# 1935
} 
# 1956 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1957
__n2) 
# 1958
{ 
# 1959
; 
# 1960
return _M_replace(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __s, __n2); 
# 1962
} 
# 1981 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, const _CharT *__s) 
# 1982
{ 
# 1983
; 
# 1984
return this->replace(__pos, __n1, __s, traits_type::length(__s)); 
# 1985
} 
# 2005 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c) 
# 2006
{ return _M_replace_aux(_M_check(__pos, "basic_string::replace"), _M_limit(__pos, __n1), __n2, __c); 
# 2007
} 
# 2023 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const basic_string &
# 2024
__str) 
# 2025
{ return this->replace(__i1, __i2, __str._M_data(), __str.size()); } 
# 2043 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2044
__s, size_type __n) 
# 2045
{ 
# 2047
; 
# 2048
return this->replace(__i1 - begin(), __i2 - __i1, __s, __n); 
# 2049
} 
# 2065 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *__s) 
# 2066
{ 
# 2067
; 
# 2068
return this->replace(__i1, __i2, __s, traits_type::length(__s)); 
# 2069
} 
# 2086 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, size_type __n, _CharT 
# 2087
__c) 
# 2088
{ 
# 2090
; 
# 2091
return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __c); 
# 2092
} 
# 2110 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _InputIterator, class 
# 2111
 = _RequireInputIter< _InputIterator> > basic_string &
# 2113
replace(const_iterator __i1, const_iterator __i2, _InputIterator 
# 2114
__k1, _InputIterator __k2) 
# 2115
{ 
# 2117
; 
# 2118
; 
# 2119
return this->_M_replace_dispatch(__i1, __i2, __k1, __k2, __false_type()); 
# 2121
} 
# 2143 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(__const_iterator __i1, __const_iterator __i2, _CharT *
# 2144
__k1, _CharT *__k2) 
# 2145
{ 
# 2147
; 
# 2148
; 
# 2149
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2151
} 
# 2154
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const _CharT *
# 2155
__k1, const _CharT *__k2) 
# 2156
{ 
# 2158
; 
# 2159
; 
# 2160
return this->replace(__i1 - begin(), __i2 - __i1, __k1, __k2 - __k1); 
# 2162
} 
# 2165
basic_string &replace(__const_iterator __i1, __const_iterator __i2, iterator 
# 2166
__k1, iterator __k2) 
# 2167
{ 
# 2169
; 
# 2170
; 
# 2171
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2173
} 
# 2176
basic_string &replace(__const_iterator __i1, __const_iterator __i2, const_iterator 
# 2177
__k1, const_iterator __k2) 
# 2178
{ 
# 2180
; 
# 2181
; 
# 2182
return this->replace(__i1 - begin(), __i2 - __i1, __k1.base(), __k2 - __k1); 
# 2184
} 
# 2201 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string &replace(const_iterator __i1, const_iterator __i2, initializer_list< _CharT>  
# 2202
__l) 
# 2203
{ return this->replace(__i1, __i2, __l.begin(), __l.size()); } 
# 2214 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2216
replace(size_type __pos, size_type __n, const _Tp &__svt) 
# 2217
{ 
# 2218
__sv_type __sv = __svt; 
# 2219
return this->replace(__pos, __n, __sv.data(), __sv.size()); 
# 2220
} 
# 2231 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2233
replace(size_type __pos1, size_type __n1, const _Tp &__svt, size_type 
# 2234
__pos2, size_type __n2 = npos) 
# 2235
{ 
# 2236
__sv_type __sv = __svt; 
# 2237
return this->replace(__pos1, __n1, __sv.data() + std::__sv_check(__sv.size(), __pos2, "basic_string::replace"), std::__sv_limit(__sv.size(), __pos2, __n2)); 
# 2241
} 
# 2252 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, basic_string &>  
# 2254
replace(const_iterator __i1, const_iterator __i2, const _Tp &__svt) 
# 2255
{ 
# 2256
__sv_type __sv = __svt; 
# 2257
return this->replace(__i1 - begin(), __i2 - __i1, __sv); 
# 2258
} 
# 2264
private: 
# 2262
template< class _Integer> basic_string &
# 2264
_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _Integer 
# 2265
__n, _Integer __val, __true_type) 
# 2266
{ return _M_replace_aux(__i1 - begin(), __i2 - __i1, __n, __val); } 
# 2268
template< class _InputIterator> basic_string &_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator __k1, _InputIterator __k2, __false_type); 
# 2275
basic_string &_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT __c); 
# 2279
basic_string &_M_replace(size_type __pos, size_type __len1, const _CharT * __s, const size_type __len2); 
# 2283
basic_string &_M_append(const _CharT * __s, size_type __n); 
# 2300 "/usr/include/c++/11/bits/basic_string.h" 3
public: size_type copy(_CharT * __s, size_type __n, size_type __pos = 0) const; 
# 2310 "/usr/include/c++/11/bits/basic_string.h" 3
void swap(basic_string & __s) noexcept; 
# 2320 "/usr/include/c++/11/bits/basic_string.h" 3
const _CharT *c_str() const noexcept 
# 2321
{ return _M_data(); } 
# 2332 "/usr/include/c++/11/bits/basic_string.h" 3
const _CharT *data() const noexcept 
# 2333
{ return _M_data(); } 
# 2343 "/usr/include/c++/11/bits/basic_string.h" 3
_CharT *data() noexcept 
# 2344
{ return _M_data(); } 
# 2351
allocator_type get_allocator() const noexcept 
# 2352
{ return _M_get_allocator(); } 
# 2367 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2381 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2383
{ return this->find(__str.data(), __pos, __str.size()); } 
# 2392 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2394
find(const _Tp &__svt, size_type __pos = 0) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2396
{ 
# 2397
__sv_type __sv = __svt; 
# 2398
return this->find(__sv.data(), __pos, __sv.size()); 
# 2399
} 
# 2413 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2414
{ 
# 2415
; 
# 2416
return this->find(__s, __pos, traits_type::length(__s)); 
# 2417
} 
# 2430 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find(_CharT __c, size_type __pos = 0) const noexcept; 
# 2443 "/usr/include/c++/11/bits/basic_string.h" 3
size_type rfind(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2445
{ return this->rfind(__str.data(), __pos, __str.size()); } 
# 2454 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2456
rfind(const _Tp &__svt, size_type __pos = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2458
{ 
# 2459
__sv_type __sv = __svt; 
# 2460
return this->rfind(__sv.data(), __pos, __sv.size()); 
# 2461
} 
# 2477 "/usr/include/c++/11/bits/basic_string.h" 3
size_type rfind(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2491 "/usr/include/c++/11/bits/basic_string.h" 3
size_type rfind(const _CharT *__s, size_type __pos = npos) const 
# 2492
{ 
# 2493
; 
# 2494
return this->rfind(__s, __pos, traits_type::length(__s)); 
# 2495
} 
# 2508 "/usr/include/c++/11/bits/basic_string.h" 3
size_type rfind(_CharT __c, size_type __pos = npos) const noexcept; 
# 2522 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2524
{ return this->find_first_of(__str.data(), __pos, __str.size()); } 
# 2534 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2536
find_first_of(const _Tp &__svt, size_type __pos = 0) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2538
{ 
# 2539
__sv_type __sv = __svt; 
# 2540
return this->find_first_of(__sv.data(), __pos, __sv.size()); 
# 2541
} 
# 2557 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2571 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2573
{ 
# 2574
; 
# 2575
return this->find_first_of(__s, __pos, traits_type::length(__s)); 
# 2576
} 
# 2591 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_of(_CharT __c, size_type __pos = 0) const noexcept 
# 2592
{ return this->find(__c, __pos); } 
# 2606 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2608
{ return this->find_last_of(__str.data(), __pos, __str.size()); } 
# 2618 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2620
find_last_of(const _Tp &__svt, size_type __pos = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2622
{ 
# 2623
__sv_type __sv = __svt; 
# 2624
return this->find_last_of(__sv.data(), __pos, __sv.size()); 
# 2625
} 
# 2641 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2655 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2657
{ 
# 2658
; 
# 2659
return this->find_last_of(__s, __pos, traits_type::length(__s)); 
# 2660
} 
# 2675 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_of(_CharT __c, size_type __pos = npos) const noexcept 
# 2676
{ return this->rfind(__c, __pos); } 
# 2689 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_not_of(const basic_string &__str, size_type __pos = 0) const noexcept 
# 2691
{ return this->find_first_not_of(__str.data(), __pos, __str.size()); } 
# 2701 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2703
find_first_not_of(const _Tp &__svt, size_type __pos = 0) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2705
{ 
# 2706
__sv_type __sv = __svt; 
# 2707
return this->find_first_not_of(__sv.data(), __pos, __sv.size()); 
# 2708
} 
# 2724 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2738 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_not_of(const _CharT *__s, size_type __pos = 0) const noexcept 
# 2740
{ 
# 2741
; 
# 2742
return this->find_first_not_of(__s, __pos, traits_type::length(__s)); 
# 2743
} 
# 2756 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_first_not_of(_CharT __c, size_type __pos = 0) const noexcept; 
# 2771 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_not_of(const basic_string &__str, size_type __pos = npos) const noexcept 
# 2773
{ return this->find_last_not_of(__str.data(), __pos, __str.size()); } 
# 2783 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, size_type>  
# 2785
find_last_not_of(const _Tp &__svt, size_type __pos = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2787
{ 
# 2788
__sv_type __sv = __svt; 
# 2789
return this->find_last_not_of(__sv.data(), __pos, __sv.size()); 
# 2790
} 
# 2806 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT * __s, size_type __pos, size_type __n) const noexcept; 
# 2820 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_not_of(const _CharT *__s, size_type __pos = npos) const noexcept 
# 2822
{ 
# 2823
; 
# 2824
return this->find_last_not_of(__s, __pos, traits_type::length(__s)); 
# 2825
} 
# 2838 "/usr/include/c++/11/bits/basic_string.h" 3
size_type find_last_not_of(_CharT __c, size_type __pos = npos) const noexcept; 
# 2854 "/usr/include/c++/11/bits/basic_string.h" 3
basic_string substr(size_type __pos = 0, size_type __n = npos) const 
# 2855
{ return basic_string(*this, _M_check(__pos, "basic_string::substr"), __n); 
# 2856
} 
# 2873 "/usr/include/c++/11/bits/basic_string.h" 3
int compare(const basic_string &__str) const 
# 2874
{ 
# 2875
const size_type __size = size(); 
# 2876
const size_type __osize = __str.size(); 
# 2877
const size_type __len = std::min(__size, __osize); 
# 2879
int __r = traits_type::compare(_M_data(), __str.data(), __len); 
# 2880
if (!__r) { 
# 2881
__r = (_S_compare)(__size, __osize); }  
# 2882
return __r; 
# 2883
} 
# 2891
template< class _Tp> _If_sv< _Tp, int>  
# 2893
compare(const _Tp &__svt) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2895
{ 
# 2896
__sv_type __sv = __svt; 
# 2897
const size_type __size = size(); 
# 2898
const size_type __osize = __sv.size(); 
# 2899
const size_type __len = std::min(__size, __osize); 
# 2901
int __r = traits_type::compare(_M_data(), __sv.data(), __len); 
# 2902
if (!__r) { 
# 2903
__r = (_S_compare)(__size, __osize); }  
# 2904
return __r; 
# 2905
} 
# 2915 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, int>  
# 2917
compare(size_type __pos, size_type __n, const _Tp &__svt) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2919
{ 
# 2920
__sv_type __sv = __svt; 
# 2921
return ((basic_string_view< _CharT, _Traits> )(*this)).substr(__pos, __n).compare(__sv); 
# 2922
} 
# 2934 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _Tp> _If_sv< _Tp, int>  
# 2936
compare(size_type __pos1, size_type __n1, const _Tp &__svt, size_type 
# 2937
__pos2, size_type __n2 = npos) const noexcept(is_same< _Tp, __sv_type> ::value) 
# 2939
{ 
# 2940
__sv_type __sv = __svt; 
# 2941
return ((basic_string_view< _CharT, _Traits> )(*this)).substr(__pos1, __n1).compare(__sv.substr(__pos2, __n2)); 
# 2943
} 
# 2966 "/usr/include/c++/11/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n, const basic_string & __str) const; 
# 2992 "/usr/include/c++/11/bits/basic_string.h" 3
int compare(size_type __pos1, size_type __n1, const basic_string & __str, size_type __pos2, size_type __n2 = npos) const; 
# 3010 "/usr/include/c++/11/bits/basic_string.h" 3
int compare(const _CharT * __s) const noexcept; 
# 3034 "/usr/include/c++/11/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s) const; 
# 3061 "/usr/include/c++/11/bits/basic_string.h" 3
int compare(size_type __pos, size_type __n1, const _CharT * __s, size_type __n2) const; 
# 3105 "/usr/include/c++/11/bits/basic_string.h" 3
template< class , class , class > friend class basic_stringbuf; 
# 3106
}; 
# 3107
}
# 6058 "/usr/include/c++/11/bits/basic_string.h" 3
inline namespace __cxx11 { 
# 6059
template< class _InputIterator, class _CharT = typename iterator_traits< _InputIterator> ::value_type, class 
# 6061
_Allocator = allocator< _CharT> , class 
# 6062
 = _RequireInputIter< _InputIterator> , class 
# 6063
 = _RequireAllocator< _Allocator> > 
# 6064
basic_string(_InputIterator, _InputIterator, _Allocator = _Allocator())->basic_string< _CharT, char_traits< _CharT> , _Allocator> ; 
# 6069
template< class _CharT, class _Traits, class 
# 6070
_Allocator = allocator< _CharT> , class 
# 6071
 = _RequireAllocator< _Allocator> > 
# 6072
basic_string(basic_string_view< _CharT, _Traits> , const _Allocator & = _Allocator())->basic_string< _CharT, _Traits, _Allocator> ; 
# 6075
template< class _CharT, class _Traits, class 
# 6076
_Allocator = allocator< _CharT> , class 
# 6077
 = _RequireAllocator< _Allocator> > 
# 6078
basic_string(basic_string_view< _CharT, _Traits> , typename basic_string< _CharT, _Traits, _Allocator> ::size_type, typename basic_string< _CharT, _Traits, _Allocator> ::size_type, const _Allocator & = _Allocator())->basic_string< _CharT, _Traits, _Allocator> ; 
# 6083
}
# 6093 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6095
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6096
__rhs) 
# 6097
{ 
# 6098
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 6099
__str.append(__rhs); 
# 6100
return __str; 
# 6101
} 
# 6109
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(const _CharT * __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 6120
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __rhs); 
# 6130
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6132
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6133
__rhs) 
# 6134
{ 
# 6135
__cxx11::basic_string< _CharT, _Traits, _Alloc>  __str(__lhs); 
# 6136
__str.append(__rhs); 
# 6137
return __str; 
# 6138
} 
# 6146
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6148
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, _CharT __rhs) 
# 6149
{ 
# 6150
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 6151
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 6152
__string_type __str(__lhs); 
# 6153
__str.append((__size_type)1, __rhs); 
# 6154
return __str; 
# 6155
} 
# 6158
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6160
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6161
__rhs) 
# 6162
{ return std::move(__lhs.append(__rhs)); } 
# 6164
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6166
operator+(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6167
__rhs) 
# 6168
{ return std::move(__rhs.insert(0, __lhs)); } 
# 6170
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6172
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6173
__rhs) 
# 6174
{ 
# 6176
using _Alloc_traits = allocator_traits< _Alloc> ; 
# 6177
bool __use_rhs = false; 
# 6178
if constexpr (typename allocator_traits< _Alloc> ::is_always_equal{}) { 
# 6179
__use_rhs = true; } else { 
# 6180
if (__lhs.get_allocator() == __rhs.get_allocator()) { 
# 6181
__use_rhs = true; }  }  
# 6182
if (__use_rhs) 
# 6184
{ 
# 6185
const auto __size = __lhs.size() + __rhs.size(); 
# 6186
if ((__size > __lhs.capacity()) && (__size <= __rhs.capacity())) { 
# 6187
return std::move(__rhs.insert(0, __lhs)); }  
# 6188
}  
# 6189
return std::move(__lhs.append(__rhs)); 
# 6190
} 
# 6192
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6194
operator+(const _CharT *__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6195
__rhs) 
# 6196
{ return std::move(__rhs.insert(0, __lhs)); } 
# 6198
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6200
operator+(_CharT __lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &&
# 6201
__rhs) 
# 6202
{ return std::move(__rhs.insert(0, 1, __lhs)); } 
# 6204
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6206
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, const _CharT *
# 6207
__rhs) 
# 6208
{ return std::move(__lhs.append(__rhs)); } 
# 6210
template< class _CharT, class _Traits, class _Alloc> inline __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 6212
operator+(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &&__lhs, _CharT 
# 6213
__rhs) 
# 6214
{ return std::move(__lhs.append(1, __rhs)); } 
# 6224 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6226
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6227
__rhs) noexcept 
# 6229
{ return __lhs.compare(__rhs) == 0; } 
# 6231
template< class _CharT> inline typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, bool> ::__type 
# 6234
operator==(const __cxx11::basic_string< _CharT>  &__lhs, const __cxx11::basic_string< _CharT>  &
# 6235
__rhs) noexcept 
# 6236
{ return ((__lhs.size() == __rhs.size()) && (!std::template char_traits< _CharT> ::compare(__lhs.data(), __rhs.data(), __lhs.size()))); 
# 6238
} 
# 6246
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6248
operator==(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6249
__rhs) 
# 6250
{ return __lhs.compare(__rhs) == 0; } 
# 6287 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6289
operator==(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6290
__rhs) 
# 6291
{ return __rhs.compare(__lhs) == 0; } 
# 6300 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6302
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6303
__rhs) noexcept 
# 6305
{ return !(__lhs == __rhs); } 
# 6313
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6315
operator!=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6316
__rhs) 
# 6317
{ return !(__lhs == __rhs); } 
# 6325
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6327
operator!=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6328
__rhs) 
# 6329
{ return !(__lhs == __rhs); } 
# 6338 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6340
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6341
__rhs) noexcept 
# 6343
{ return __lhs.compare(__rhs) < 0; } 
# 6351
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6353
operator<(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6354
__rhs) 
# 6355
{ return __lhs.compare(__rhs) < 0; } 
# 6363
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6365
operator<(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6366
__rhs) 
# 6367
{ return __rhs.compare(__lhs) > 0; } 
# 6376 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6378
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6379
__rhs) noexcept 
# 6381
{ return __lhs.compare(__rhs) > 0; } 
# 6389
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6391
operator>(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6392
__rhs) 
# 6393
{ return __lhs.compare(__rhs) > 0; } 
# 6401
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6403
operator>(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6404
__rhs) 
# 6405
{ return __rhs.compare(__lhs) < 0; } 
# 6414 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6416
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6417
__rhs) noexcept 
# 6419
{ return __lhs.compare(__rhs) <= 0; } 
# 6427
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6429
operator<=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6430
__rhs) 
# 6431
{ return __lhs.compare(__rhs) <= 0; } 
# 6439
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6441
operator<=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6442
__rhs) 
# 6443
{ return __rhs.compare(__lhs) >= 0; } 
# 6452 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6454
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6455
__rhs) noexcept 
# 6457
{ return __lhs.compare(__rhs) >= 0; } 
# 6465
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6467
operator>=(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, const _CharT *
# 6468
__rhs) 
# 6469
{ return __lhs.compare(__rhs) >= 0; } 
# 6477
template< class _CharT, class _Traits, class _Alloc> inline bool 
# 6479
operator>=(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6480
__rhs) 
# 6481
{ return __rhs.compare(__lhs) <= 0; } 
# 6491 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline void 
# 6493
swap(__cxx11::basic_string< _CharT, _Traits, _Alloc>  &__lhs, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6494
__rhs) noexcept(noexcept(__lhs.swap(__rhs))) 
# 6496
{ __lhs.swap(__rhs); } 
# 6511 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str); 
# 6518
template<> basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str); 
# 6529 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_ostream< _CharT, _Traits>  &
# 6531
operator<<(basic_ostream< _CharT, _Traits>  &__os, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6532
__str) 
# 6533
{ 
# 6536
return __ostream_insert(__os, __str.data(), __str.size()); 
# 6537
} 
# 6552 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &getline(basic_istream< _CharT, _Traits>  & __is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  & __str, _CharT __delim); 
# 6569 "/usr/include/c++/11/bits/basic_string.h" 3
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6571
getline(basic_istream< _CharT, _Traits>  &__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6572
__str) 
# 6573
{ return std::getline(__is, __str, __is.widen('\n')); } 
# 6577
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6579
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6580
__str, _CharT __delim) 
# 6581
{ return std::getline(__is, __str, __delim); } 
# 6584
template< class _CharT, class _Traits, class _Alloc> inline basic_istream< _CharT, _Traits>  &
# 6586
getline(basic_istream< _CharT, _Traits>  &&__is, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 6587
__str) 
# 6588
{ return std::getline(__is, __str); } 
# 6593
template<> basic_istream< char>  &getline(basic_istream< char>  & __in, __cxx11::basic_string< char>  & __str, char __delim); 
# 6599
template<> basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __in, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim); 
# 6604
}
# 34 "/usr/include/errno.h" 3
extern "C" {
# 37
extern int *__errno_location() noexcept(true) __attribute((const)); 
# 45
extern char *program_invocation_name; 
# 46
extern char *program_invocation_short_name; 
# 22 "/usr/include/x86_64-linux-gnu/bits/types/error_t.h" 3
typedef int error_t; 
# 52 "/usr/include/errno.h" 3
}
# 46 "/usr/include/c++/11/ext/string_conversions.h" 3
namespace __gnu_cxx __attribute((__visibility__("default"))) { 
# 51
template< class _TRet, class _Ret = _TRet, class _CharT, class ...
# 52
_Base> _Ret 
# 54
__stoa(_TRet (*__convf)(const _CharT *, _CharT **, _Base ...), const char *
# 55
__name, const _CharT *__str, std::size_t *__idx, _Base ...
# 56
__base) 
# 57
{ 
# 58
_Ret __ret; 
# 60
_CharT *__endptr; 
# 66
const 
# 62
struct _Save_errno { 
# 63
_Save_errno() : _M_errno(*__errno_location()) { (*__errno_location()) = 0; } 
# 64
~_Save_errno() { if ((*__errno_location()) == 0) { (*__errno_location()) = (_M_errno); }  } 
# 65
int _M_errno; 
# 66
} __save_errno; 
# 68
struct _Range_chk { 
# 70
static bool _S_chk(_TRet, std::false_type) { return false; } 
# 73
static bool _S_chk(_TRet __val, std::true_type) 
# 74
{ 
# 75
return (__val < ((_TRet)__numeric_traits< int> ::__min)) || (__val > ((_TRet)__numeric_traits< int> ::__max)); 
# 77
} 
# 78
}; 
# 80
const _TRet __tmp = __convf(__str, &__endptr, __base...); 
# 82
if (__endptr == __str) { 
# 83
std::__throw_invalid_argument(__name); } else { 
# 84
if (((*__errno_location()) == 34) || _Range_chk::_S_chk(__tmp, std::is_same< _Ret, int> {})) { 
# 86
std::__throw_out_of_range(__name); } else { 
# 88
__ret = __tmp; }  }  
# 90
if (__idx) { 
# 91
(*__idx) = (__endptr - __str); }  
# 93
return __ret; 
# 94
} 
# 97
template< class _String, class _CharT = typename _String::value_type> _String 
# 99
__to_xstring(int (*__convf)(_CharT *, std::size_t, const _CharT *, __builtin_va_list), std::size_t 
# 100
__n, const _CharT *
# 101
__fmt, ...) 
# 102
{ 
# 105
_CharT *__s = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __n)); 
# 108
__builtin_va_list __args; 
# 109
__builtin_va_start((__args),__fmt); 
# 111
const int __len = __convf(__s, __n, __fmt, __args); 
# 113
__builtin_va_end(__args); 
# 115
return _String(__s, __s + __len); 
# 116
} 
# 119
}
# 39 "/usr/include/c++/11/bits/charconv.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 42
namespace __detail { 
# 45
template< class _Tp> constexpr unsigned 
# 47
__to_chars_len(_Tp __value, int __base = 10) noexcept 
# 48
{ 
# 49
static_assert((is_integral< _Tp> ::value), "implementation bug");
# 50
static_assert((is_unsigned< _Tp> ::value), "implementation bug");
# 52
unsigned __n = (1); 
# 53
const unsigned __b2 = __base * __base; 
# 54
const unsigned __b3 = __b2 * __base; 
# 55
const unsigned long __b4 = __b3 * __base; 
# 56
for (; ;) 
# 57
{ 
# 58
if (__value < ((unsigned)__base)) { return __n; }  
# 59
if (__value < __b2) { return __n + (1); }  
# 60
if (__value < __b3) { return __n + (2); }  
# 61
if (__value < __b4) { return __n + (3); }  
# 62
__value /= __b4; 
# 63
__n += (4); 
# 64
}  
# 65
} 
# 70
template< class _Tp> void 
# 72
__to_chars_10_impl(char *__first, unsigned __len, _Tp __val) noexcept 
# 73
{ 
# 74
static_assert((is_integral< _Tp> ::value), "implementation bug");
# 75
static_assert((is_unsigned< _Tp> ::value), "implementation bug");
# 77
static constexpr char __digits[201] = "00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263" "646566676869707172737475767778798081828384858687888990919293949596979899"; 
# 83
unsigned __pos = __len - (1); 
# 84
while (__val >= 100) 
# 85
{ 
# 86
const auto __num = (__val % 100) * 2; 
# 87
__val /= 100; 
# 88
(__first[__pos]) = (__digits[__num + 1]); 
# 89
(__first[__pos - (1)]) = (__digits[__num]); 
# 90
__pos -= (2); 
# 91
}  
# 92
if (__val >= 10) 
# 93
{ 
# 94
const auto __num = __val * 2; 
# 95
(__first[1]) = (__digits[__num + 1]); 
# 96
(__first[0]) = (__digits[__num]); 
# 97
} else { 
# 99
(__first[0]) = ('0' + __val); }  
# 100
} 
# 102
}
# 104
}
# 6611 "/usr/include/c++/11/bits/basic_string.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 6614
inline namespace __cxx11 { 
# 6619
inline int stoi(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6620
{ return __gnu_cxx::__stoa< long, int> (&std::strtol, "stoi", __str.c_str(), __idx, __base); 
# 6621
} 
# 6624
inline long stol(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6625
{ return __gnu_cxx::__stoa(&std::strtol, "stol", __str.c_str(), __idx, __base); 
# 6626
} 
# 6629
inline unsigned long stoul(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6630
{ return __gnu_cxx::__stoa(&std::strtoul, "stoul", __str.c_str(), __idx, __base); 
# 6631
} 
# 6634
inline long long stoll(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6635
{ return __gnu_cxx::__stoa(&std::strtoll, "stoll", __str.c_str(), __idx, __base); 
# 6636
} 
# 6639
inline unsigned long long stoull(const string &__str, size_t *__idx = 0, int __base = 10) 
# 6640
{ return __gnu_cxx::__stoa(&std::strtoull, "stoull", __str.c_str(), __idx, __base); 
# 6641
} 
# 6645
inline float stof(const string &__str, size_t *__idx = 0) 
# 6646
{ return __gnu_cxx::__stoa(&std::strtof, "stof", __str.c_str(), __idx); } 
# 6649
inline double stod(const string &__str, size_t *__idx = 0) 
# 6650
{ return __gnu_cxx::__stoa(&std::strtod, "stod", __str.c_str(), __idx); } 
# 6653
inline long double stold(const string &__str, size_t *__idx = 0) 
# 6654
{ return __gnu_cxx::__stoa(&std::strtold, "stold", __str.c_str(), __idx); } 
# 6660
inline string to_string(int __val) 
# 6661
{ 
# 6662
const bool __neg = __val < 0; 
# 6663
const unsigned __uval = __neg ? ((unsigned)(~__val)) + 1U : __val; 
# 6664
const auto __len = __detail::__to_chars_len(__uval); 
# 6665
string __str(__neg + __len, '-'); 
# 6666
__detail::__to_chars_10_impl(&__str[__neg], __len, __uval); 
# 6667
return __str; 
# 6668
} 
# 6671
inline string to_string(unsigned __val) 
# 6672
{ 
# 6673
string __str(__detail::__to_chars_len(__val), '\000'); 
# 6674
__detail::__to_chars_10_impl(&__str[0], __str.size(), __val); 
# 6675
return __str; 
# 6676
} 
# 6679
inline string to_string(long __val) 
# 6680
{ 
# 6681
const bool __neg = __val < (0); 
# 6682
const unsigned long __uval = __neg ? ((unsigned long)(~__val)) + 1UL : __val; 
# 6683
const auto __len = __detail::__to_chars_len(__uval); 
# 6684
string __str(__neg + __len, '-'); 
# 6685
__detail::__to_chars_10_impl(&__str[__neg], __len, __uval); 
# 6686
return __str; 
# 6687
} 
# 6690
inline string to_string(unsigned long __val) 
# 6691
{ 
# 6692
string __str(__detail::__to_chars_len(__val), '\000'); 
# 6693
__detail::__to_chars_10_impl(&__str[0], __str.size(), __val); 
# 6694
return __str; 
# 6695
} 
# 6698
inline string to_string(long long __val) 
# 6699
{ 
# 6700
const bool __neg = __val < (0); 
# 6701
const unsigned long long __uval = __neg ? ((unsigned long long)(~__val)) + 1ULL : __val; 
# 6703
const auto __len = __detail::__to_chars_len(__uval); 
# 6704
string __str(__neg + __len, '-'); 
# 6705
__detail::__to_chars_10_impl(&__str[__neg], __len, __uval); 
# 6706
return __str; 
# 6707
} 
# 6710
inline string to_string(unsigned long long __val) 
# 6711
{ 
# 6712
string __str(__detail::__to_chars_len(__val), '\000'); 
# 6713
__detail::__to_chars_10_impl(&__str[0], __str.size(), __val); 
# 6714
return __str; 
# 6715
} 
# 6721
inline string to_string(float __val) 
# 6722
{ 
# 6723
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6725
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6727
} 
# 6730
inline string to_string(double __val) 
# 6731
{ 
# 6732
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6734
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%f", __val); 
# 6736
} 
# 6739
inline string to_string(long double __val) 
# 6740
{ 
# 6741
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6743
return __gnu_cxx::__to_xstring< basic_string< char> > (&std::vsnprintf, __n, "%Lf", __val); 
# 6745
} 
# 6750
inline int stoi(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6751
{ return __gnu_cxx::__stoa< long, int> (&std::wcstol, "stoi", __str.c_str(), __idx, __base); 
# 6752
} 
# 6755
inline long stol(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6756
{ return __gnu_cxx::__stoa(&std::wcstol, "stol", __str.c_str(), __idx, __base); 
# 6757
} 
# 6760
inline unsigned long stoul(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6761
{ return __gnu_cxx::__stoa(&std::wcstoul, "stoul", __str.c_str(), __idx, __base); 
# 6762
} 
# 6765
inline long long stoll(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6766
{ return __gnu_cxx::__stoa(&std::wcstoll, "stoll", __str.c_str(), __idx, __base); 
# 6767
} 
# 6770
inline unsigned long long stoull(const wstring &__str, size_t *__idx = 0, int __base = 10) 
# 6771
{ return __gnu_cxx::__stoa(&std::wcstoull, "stoull", __str.c_str(), __idx, __base); 
# 6772
} 
# 6776
inline float stof(const wstring &__str, size_t *__idx = 0) 
# 6777
{ return __gnu_cxx::__stoa(&std::wcstof, "stof", __str.c_str(), __idx); } 
# 6780
inline double stod(const wstring &__str, size_t *__idx = 0) 
# 6781
{ return __gnu_cxx::__stoa(&std::wcstod, "stod", __str.c_str(), __idx); } 
# 6784
inline long double stold(const wstring &__str, size_t *__idx = 0) 
# 6785
{ return __gnu_cxx::__stoa(&std::wcstold, "stold", __str.c_str(), __idx); } 
# 6790
inline wstring to_wstring(int __val) 
# 6791
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(int), L"\x25\x64", __val); 
# 6792
} 
# 6795
inline wstring to_wstring(unsigned __val) 
# 6796
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned), L"\x25\x75", __val); 
# 6798
} 
# 6801
inline wstring to_wstring(long __val) 
# 6802
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long), L"\x25\x6c\x64", __val); 
# 6803
} 
# 6806
inline wstring to_wstring(unsigned long __val) 
# 6807
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long), L"\x25\x6c\x75", __val); 
# 6809
} 
# 6812
inline wstring to_wstring(long long __val) 
# 6813
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(long long), L"\x25\x6c\x6c\x64", __val); 
# 6815
} 
# 6818
inline wstring to_wstring(unsigned long long __val) 
# 6819
{ return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, (4) * sizeof(unsigned long long), L"\x25\x6c\x6c\x75", __val); 
# 6821
} 
# 6824
inline wstring to_wstring(float __val) 
# 6825
{ 
# 6826
const int __n = (__gnu_cxx::__numeric_traits_floating< float> ::__max_exponent10 + 20); 
# 6828
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6830
} 
# 6833
inline wstring to_wstring(double __val) 
# 6834
{ 
# 6835
const int __n = (__gnu_cxx::__numeric_traits_floating< double> ::__max_exponent10 + 20); 
# 6837
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x66", __val); 
# 6839
} 
# 6842
inline wstring to_wstring(long double __val) 
# 6843
{ 
# 6844
const int __n = (__gnu_cxx::__numeric_traits_floating< long double> ::__max_exponent10 + 20); 
# 6846
return __gnu_cxx::__to_xstring< basic_string< wchar_t> > (&std::vswprintf, __n, L"\x25\x4c\x66", __val); 
# 6848
} 
# 6852
}
# 6854
}
# 6862
namespace std __attribute((__visibility__("default"))) { 
# 6871
template<> struct hash< __cxx11::basic_string< char> >  : public __hash_base< unsigned long, __cxx11::basic_string< char> >  { 
# 6875
size_t operator()(const string &__s) const noexcept 
# 6876
{ return std::_Hash_impl::hash(__s.data(), __s.length()); } 
# 6877
}; 
# 6880
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char> > >  : public false_type { 
# 6881
}; 
# 6886
template<> struct hash< __cxx11::basic_string< wchar_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< wchar_t> >  { 
# 6890
size_t operator()(const wstring &__s) const noexcept 
# 6891
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(wchar_t)); 
# 6892
} 
# 6893
}; 
# 6896
template<> struct __is_fast_hash< hash< __cxx11::basic_string< wchar_t> > >  : public false_type { 
# 6897
}; 
# 6920 "/usr/include/c++/11/bits/basic_string.h" 3
template<> struct hash< __cxx11::basic_string< char16_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char16_t> >  { 
# 6924
size_t operator()(const u16string &__s) const noexcept 
# 6925
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char16_t)); 
# 6926
} 
# 6927
}; 
# 6930
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char16_t> > >  : public false_type { 
# 6931
}; 
# 6935
template<> struct hash< __cxx11::basic_string< char32_t> >  : public __hash_base< unsigned long, __cxx11::basic_string< char32_t> >  { 
# 6939
size_t operator()(const u32string &__s) const noexcept 
# 6940
{ return std::_Hash_impl::hash(__s.data(), __s.length() * sizeof(char32_t)); 
# 6941
} 
# 6942
}; 
# 6945
template<> struct __is_fast_hash< hash< __cxx11::basic_string< char32_t> > >  : public false_type { 
# 6946
}; 
# 6952
inline namespace literals { 
# 6954
inline namespace string_literals { 
# 6956
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wliteral-suffix"
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char>  
# 6960
operator ""s(const char *__str, size_t __len) 
# 6961
{ return __cxx11::basic_string< char> {__str, __len}; } 
# 6964
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< wchar_t>  
# 6966
operator ""s(const wchar_t *__str, size_t __len) 
# 6967
{ return __cxx11::basic_string< wchar_t> {__str, __len}; } 
# 6977 "/usr/include/c++/11/bits/basic_string.h" 3
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char16_t>  
# 6979
operator ""s(const char16_t *__str, size_t __len) 
# 6980
{ return __cxx11::basic_string< char16_t> {__str, __len}; } 
# 6982
__attribute((__abi_tag__("cxx11"))) inline __cxx11::basic_string< char32_t>  
# 6984
operator ""s(const char32_t *__str, size_t __len) 
# 6985
{ return __cxx11::basic_string< char32_t> {__str, __len}; } 
# 6987
#pragma GCC diagnostic pop
}
# 6989
}
# 6992
namespace __detail { namespace __variant { 
# 6994
template< class > struct _Never_valueless_alt; 
# 6998
template< class _Tp, class _Traits, class _Alloc> 
# 6999
struct _Never_valueless_alt< __cxx11::basic_string< _Tp, _Traits, _Alloc> >  : public __and_< is_nothrow_move_constructible< __cxx11::basic_string< _Tp, _Traits, _Alloc> > , is_nothrow_move_assignable< __cxx11::basic_string< _Tp, _Traits, _Alloc> > > ::type { 
# 7004
}; 
# 7005
}}
# 7010
}
# 46 "/usr/include/c++/11/bits/basic_string.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 52
template< class _CharT, class _Traits, class _Alloc> const typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __cxx11::basic_string< _CharT, _Traits, _Alloc> ::npos; 
# 56
template< class _CharT, class _Traits, class _Alloc> void 
# 59
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::swap(basic_string &__s) noexcept 
# 60
{ 
# 61
if (this == (&__s)) { 
# 62
return; }  
# 64
_Alloc_traits::_S_on_swap(_M_get_allocator(), __s._M_get_allocator()); 
# 66
if (_M_is_local()) { 
# 67
if (__s._M_is_local()) 
# 68
{ 
# 69
if (length() && __s.length()) 
# 70
{ 
# 71
_CharT __tmp_data[_S_local_capacity + 1]; 
# 72
traits_type::copy(__tmp_data, __s._M_local_buf, _S_local_capacity + 1); 
# 74
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 76
traits_type::copy(_M_local_buf, __tmp_data, _S_local_capacity + 1); 
# 78
} else { 
# 79
if (__s.length()) 
# 80
{ 
# 81
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 83
_M_length(__s.length()); 
# 84
__s._M_set_length(0); 
# 85
return; 
# 86
} else { 
# 87
if (length()) 
# 88
{ 
# 89
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 91
__s._M_length(length()); 
# 92
_M_set_length(0); 
# 93
return; 
# 94
}  }  }  
# 95
} else 
# 97
{ 
# 98
const size_type __tmp_capacity = __s._M_allocated_capacity; 
# 99
traits_type::copy(__s._M_local_buf, _M_local_buf, _S_local_capacity + 1); 
# 101
_M_data(__s._M_data()); 
# 102
__s._M_data(__s._M_local_buf); 
# 103
_M_capacity(__tmp_capacity); 
# 104
}  } else 
# 106
{ 
# 107
const size_type __tmp_capacity = _M_allocated_capacity; 
# 108
if (__s._M_is_local()) 
# 109
{ 
# 110
traits_type::copy(_M_local_buf, __s._M_local_buf, _S_local_capacity + 1); 
# 112
__s._M_data(_M_data()); 
# 113
_M_data(_M_local_buf); 
# 114
} else 
# 116
{ 
# 117
pointer __tmp_ptr = _M_data(); 
# 118
_M_data(__s._M_data()); 
# 119
__s._M_data(__tmp_ptr); 
# 120
_M_capacity(__s._M_allocated_capacity); 
# 121
}  
# 122
__s._M_capacity(__tmp_capacity); 
# 123
}  
# 125
const size_type __tmp_length = length(); 
# 126
_M_length(__s.length()); 
# 127
__s._M_length(__tmp_length); 
# 128
} 
# 130
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::pointer 
# 133
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_create(size_type &__capacity, size_type __old_capacity) 
# 134
{ 
# 137
if (__capacity > max_size()) { 
# 138
std::__throw_length_error("basic_string::_M_create"); }  
# 143
if ((__capacity > __old_capacity) && (__capacity < (2 * __old_capacity))) 
# 144
{ 
# 145
__capacity = (2 * __old_capacity); 
# 147
if (__capacity > max_size()) { 
# 148
__capacity = max_size(); }  
# 149
}  
# 153
return _Alloc_traits::allocate(_M_get_allocator(), __capacity + 1); 
# 154
} 
# 160
template< class _CharT, class _Traits, class _Alloc> 
# 161
template< class _InIterator> void 
# 164
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, input_iterator_tag) 
# 166
{ 
# 167
size_type __len = (0); 
# 168
size_type __capacity = ((size_type)_S_local_capacity); 
# 170
while ((__beg != __end) && (__len < __capacity)) 
# 171
{ 
# 172
(_M_data()[__len++]) = (*__beg); 
# 173
++__beg; 
# 174
}  
# 176
try 
# 177
{ 
# 178
while (__beg != __end) 
# 179
{ 
# 180
if (__len == __capacity) 
# 181
{ 
# 183
__capacity = (__len + 1); 
# 184
pointer __another = _M_create(__capacity, __len); 
# 185
this->_S_copy(__another, _M_data(), __len); 
# 186
_M_dispose(); 
# 187
_M_data(__another); 
# 188
_M_capacity(__capacity); 
# 189
}  
# 190
(_M_data()[__len++]) = (*__beg); 
# 191
++__beg; 
# 192
}  
# 193
} 
# 194
catch (...) 
# 195
{ 
# 196
_M_dispose(); 
# 197
throw; 
# 198
}  
# 200
_M_set_length(__len); 
# 201
} 
# 203
template< class _CharT, class _Traits, class _Alloc> 
# 204
template< class _InIterator> void 
# 207
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(_InIterator __beg, _InIterator __end, forward_iterator_tag) 
# 209
{ 
# 211
if (__gnu_cxx::__is_null_pointer(__beg) && (__beg != __end)) { 
# 212
std::__throw_logic_error("basic_string::_M_construct null not valid"); }  
# 215
size_type __dnew = static_cast< size_type>(std::distance(__beg, __end)); 
# 217
if (__dnew > ((size_type)_S_local_capacity)) 
# 218
{ 
# 219
_M_data(_M_create(__dnew, (size_type)0)); 
# 220
_M_capacity(__dnew); 
# 221
}  
# 224
try 
# 225
{ this->_S_copy_chars(_M_data(), __beg, __end); } 
# 226
catch (...) 
# 227
{ 
# 228
_M_dispose(); 
# 229
throw; 
# 230
}  
# 232
_M_set_length(__dnew); 
# 233
} 
# 235
template< class _CharT, class _Traits, class _Alloc> void 
# 238
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_construct(size_type __n, _CharT __c) 
# 239
{ 
# 240
if (__n > ((size_type)_S_local_capacity)) 
# 241
{ 
# 242
_M_data(_M_create(__n, (size_type)0)); 
# 243
_M_capacity(__n); 
# 244
}  
# 246
if (__n) { 
# 247
this->_S_assign(_M_data(), __n, __c); }  
# 249
_M_set_length(__n); 
# 250
} 
# 252
template< class _CharT, class _Traits, class _Alloc> void 
# 255
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_assign(const basic_string &__str) 
# 256
{ 
# 257
if (this != (&__str)) 
# 258
{ 
# 259
const size_type __rsize = __str.length(); 
# 260
const size_type __capacity = capacity(); 
# 262
if (__rsize > __capacity) 
# 263
{ 
# 264
size_type __new_capacity = __rsize; 
# 265
pointer __tmp = _M_create(__new_capacity, __capacity); 
# 266
_M_dispose(); 
# 267
_M_data(__tmp); 
# 268
_M_capacity(__new_capacity); 
# 269
}  
# 271
if (__rsize) { 
# 272
this->_S_copy(_M_data(), __str._M_data(), __rsize); }  
# 274
_M_set_length(__rsize); 
# 275
}  
# 276
} 
# 278
template< class _CharT, class _Traits, class _Alloc> void 
# 281
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve(size_type __res) 
# 282
{ 
# 283
const size_type __capacity = capacity(); 
# 288
if (__res <= __capacity) { 
# 289
return; }  
# 291
pointer __tmp = _M_create(__res, __capacity); 
# 292
this->_S_copy(__tmp, _M_data(), length() + 1); 
# 293
_M_dispose(); 
# 294
_M_data(__tmp); 
# 295
_M_capacity(__res); 
# 296
} 
# 298
template< class _CharT, class _Traits, class _Alloc> void 
# 301
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_mutate(size_type __pos, size_type __len1, const _CharT *__s, size_type 
# 302
__len2) 
# 303
{ 
# 304
const size_type __how_much = (length() - __pos) - __len1; 
# 306
size_type __new_capacity = (length() + __len2) - __len1; 
# 307
pointer __r = _M_create(__new_capacity, capacity()); 
# 309
if (__pos) { 
# 310
this->_S_copy(__r, _M_data(), __pos); }  
# 311
if (__s && __len2) { 
# 312
this->_S_copy(__r + __pos, __s, __len2); }  
# 313
if (__how_much) { 
# 314
this->_S_copy((__r + __pos) + __len2, (_M_data() + __pos) + __len1, __how_much); }  
# 317
_M_dispose(); 
# 318
_M_data(__r); 
# 319
_M_capacity(__new_capacity); 
# 320
} 
# 322
template< class _CharT, class _Traits, class _Alloc> void 
# 325
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_erase(size_type __pos, size_type __n) 
# 326
{ 
# 327
const size_type __how_much = (length() - __pos) - __n; 
# 329
if (__how_much && __n) { 
# 330
this->_S_move(_M_data() + __pos, (_M_data() + __pos) + __n, __how_much); }  
# 332
_M_set_length(length() - __n); 
# 333
} 
# 335
template< class _CharT, class _Traits, class _Alloc> void 
# 338
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::reserve() 
# 339
{ 
# 340
if (_M_is_local()) { 
# 341
return; }  
# 343
const size_type __length = length(); 
# 344
const size_type __capacity = _M_allocated_capacity; 
# 346
if (__length <= ((size_type)_S_local_capacity)) 
# 347
{ 
# 348
this->_S_copy(_M_local_data(), _M_data(), __length + 1); 
# 349
_M_destroy(__capacity); 
# 350
_M_data(_M_local_data()); 
# 351
} else { 
# 353
if (__length < __capacity) { 
# 354
try 
# 355
{ 
# 356
pointer __tmp = _Alloc_traits::allocate(_M_get_allocator(), __length + 1); 
# 358
this->_S_copy(__tmp, _M_data(), __length + 1); 
# 359
_M_dispose(); 
# 360
_M_data(__tmp); 
# 361
_M_capacity(__length); 
# 362
} 
# 363
catch (const __cxxabiv1::__forced_unwind &) 
# 364
{ throw; } 
# 365
catch (...) 
# 366
{ }  }  }  
# 368
} 
# 370
template< class _CharT, class _Traits, class _Alloc> void 
# 373
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::resize(size_type __n, _CharT __c) 
# 374
{ 
# 375
const size_type __size = size(); 
# 376
if (__size < __n) { 
# 377
this->append(__n - __size, __c); } else { 
# 378
if (__n < __size) { 
# 379
_M_set_length(__n); }  }  
# 380
} 
# 382
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 385
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_append(const _CharT *__s, size_type __n) 
# 386
{ 
# 387
const size_type __len = __n + size(); 
# 389
if (__len <= capacity()) 
# 390
{ 
# 391
if (__n) { 
# 392
this->_S_copy(this->_M_data() + size(), __s, __n); }  
# 393
} else { 
# 395
_M_mutate(size(), (size_type)0, __s, __n); }  
# 397
_M_set_length(__len); 
# 398
return *this; 
# 399
} 
# 401
template< class _CharT, class _Traits, class _Alloc> 
# 402
template< class _InputIterator> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 405
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_dispatch(const_iterator __i1, const_iterator __i2, _InputIterator 
# 406
__k1, _InputIterator __k2, __false_type) 
# 408
{ 
# 411
const basic_string __s(__k1, __k2, get_allocator()); 
# 412
const size_type __n1 = __i2 - __i1; 
# 413
return _M_replace(__i1 - begin(), __n1, __s._M_data(), __s.size()); 
# 415
} 
# 417
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 420
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace_aux(size_type __pos1, size_type __n1, size_type __n2, _CharT 
# 421
__c) 
# 422
{ 
# 423
_M_check_length(__n1, __n2, "basic_string::_M_replace_aux"); 
# 425
const size_type __old_size = size(); 
# 426
const size_type __new_size = (__old_size + __n2) - __n1; 
# 428
if (__new_size <= capacity()) 
# 429
{ 
# 430
pointer __p = this->_M_data() + __pos1; 
# 432
const size_type __how_much = (__old_size - __pos1) - __n1; 
# 433
if (__how_much && (__n1 != __n2)) { 
# 434
this->_S_move(__p + __n2, __p + __n1, __how_much); }  
# 435
} else { 
# 437
_M_mutate(__pos1, __n1, 0, __n2); }  
# 439
if (__n2) { 
# 440
this->_S_assign(this->_M_data() + __pos1, __n2, __c); }  
# 442
_M_set_length(__new_size); 
# 443
return *this; 
# 444
} 
# 446
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 449
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::_M_replace(size_type __pos, size_type __len1, const _CharT *__s, const size_type 
# 450
__len2) 
# 451
{ 
# 452
_M_check_length(__len1, __len2, "basic_string::_M_replace"); 
# 454
const size_type __old_size = size(); 
# 455
const size_type __new_size = (__old_size + __len2) - __len1; 
# 457
if (__new_size <= capacity()) 
# 458
{ 
# 459
pointer __p = this->_M_data() + __pos; 
# 461
const size_type __how_much = (__old_size - __pos) - __len1; 
# 462
if (_M_disjunct(__s)) 
# 463
{ 
# 464
if (__how_much && (__len1 != __len2)) { 
# 465
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 466
if (__len2) { 
# 467
this->_S_copy(__p, __s, __len2); }  
# 468
} else 
# 470
{ 
# 472
if (__len2 && (__len2 <= __len1)) { 
# 473
this->_S_move(__p, __s, __len2); }  
# 474
if (__how_much && (__len1 != __len2)) { 
# 475
this->_S_move(__p + __len2, __p + __len1, __how_much); }  
# 476
if (__len2 > __len1) 
# 477
{ 
# 478
if ((__s + __len2) <= (__p + __len1)) { 
# 479
this->_S_move(__p, __s, __len2); } else { 
# 480
if (__s >= (__p + __len1)) 
# 481
{ 
# 484
const size_type __poff = (__s - __p) + (__len2 - __len1); 
# 485
this->_S_copy(__p, __p + __poff, __len2); 
# 486
} else 
# 488
{ 
# 489
const size_type __nleft = (__p + __len1) - __s; 
# 490
this->_S_move(__p, __s, __nleft); 
# 491
this->_S_copy(__p + __nleft, __p + __len2, __len2 - __nleft); 
# 493
}  }  
# 494
}  
# 495
}  
# 496
} else { 
# 498
_M_mutate(__pos, __len1, __s, __len2); }  
# 500
_M_set_length(__new_size); 
# 501
return *this; 
# 502
} 
# 504
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 507
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::copy(_CharT *__s, size_type __n, size_type __pos) const 
# 508
{ 
# 509
_M_check(__pos, "basic_string::copy"); 
# 510
__n = _M_limit(__pos, __n); 
# 511
; 
# 512
if (__n) { 
# 513
(_S_copy)(__s, _M_data() + __pos, __n); }  
# 515
return __n; 
# 516
} 
# 1167 "/usr/include/c++/11/bits/basic_string.tcc" 3
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1169
operator+(const _CharT *__lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1170
__rhs) 
# 1171
{ 
# 1172
; 
# 1173
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1174
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1176
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 1177
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other>  _Alloc_traits; 
# 1178
const __size_type __len = _Traits::length(__lhs); 
# 1179
__string_type __str(_Alloc_traits::_S_select_on_copy(__rhs.get_allocator())); 
# 1181
__str.reserve(__len + __rhs.size()); 
# 1182
__str.append(__lhs, __len); 
# 1183
__str.append(__rhs); 
# 1184
return __str; 
# 1185
} 
# 1187
template< class _CharT, class _Traits, class _Alloc> __cxx11::basic_string< _CharT, _Traits, _Alloc>  
# 1189
operator+(_CharT __lhs, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__rhs) 
# 1190
{ 
# 1191
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1192
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1194
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other _Char_alloc_type; 
# 1195
typedef __gnu_cxx::__alloc_traits< typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _CharT> ::other>  _Alloc_traits; 
# 1196
__string_type __str(_Alloc_traits::_S_select_on_copy(__rhs.get_allocator())); 
# 1198
const __size_type __len = __rhs.size(); 
# 1199
__str.reserve(__len + 1); 
# 1200
__str.append((__size_type)1, __lhs); 
# 1201
__str.append(__rhs); 
# 1202
return __str; 
# 1203
} 
# 1205
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1208
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1210
{ 
# 1211
; 
# 1212
const size_type __size = size(); 
# 1214
if (__n == 0) { 
# 1215
return (__pos <= __size) ? __pos : npos; }  
# 1216
if (__pos >= __size) { 
# 1217
return npos; }  
# 1219
const _CharT __elem0 = __s[0]; 
# 1220
const _CharT *const __data = data(); 
# 1221
const _CharT *__first = __data + __pos; 
# 1222
const _CharT *const __last = __data + __size; 
# 1223
size_type __len = __size - __pos; 
# 1225
while (__len >= __n) 
# 1226
{ 
# 1228
__first = traits_type::find(__first, (__len - __n) + 1, __elem0); 
# 1229
if (!__first) { 
# 1230
return npos; }  
# 1234
if (traits_type::compare(__first, __s, __n) == 0) { 
# 1235
return __first - __data; }  
# 1236
__len = (__last - (++__first)); 
# 1237
}  
# 1238
return npos; 
# 1239
} 
# 1241
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1244
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find(_CharT __c, size_type __pos) const noexcept 
# 1245
{ 
# 1246
size_type __ret = npos; 
# 1247
const size_type __size = size(); 
# 1248
if (__pos < __size) 
# 1249
{ 
# 1250
const _CharT *__data = _M_data(); 
# 1251
const size_type __n = __size - __pos; 
# 1252
const _CharT *__p = traits_type::find(__data + __pos, __n, __c); 
# 1253
if (__p) { 
# 1254
__ret = (__p - __data); }  
# 1255
}  
# 1256
return __ret; 
# 1257
} 
# 1259
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1262
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1264
{ 
# 1265
; 
# 1266
const size_type __size = size(); 
# 1267
if (__n <= __size) 
# 1268
{ 
# 1269
__pos = std::min((size_type)(__size - __n), __pos); 
# 1270
const _CharT *__data = _M_data(); 
# 1271
do 
# 1272
{ 
# 1273
if (traits_type::compare(__data + __pos, __s, __n) == 0) { 
# 1274
return __pos; }  
# 1275
} 
# 1276
while ((__pos--) > 0); 
# 1277
}  
# 1278
return npos; 
# 1279
} 
# 1281
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1284
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::rfind(_CharT __c, size_type __pos) const noexcept 
# 1285
{ 
# 1286
size_type __size = size(); 
# 1287
if (__size) 
# 1288
{ 
# 1289
if ((--__size) > __pos) { 
# 1290
__size = __pos; }  
# 1291
for (++__size; (__size--) > 0;) { 
# 1292
if (traits_type::eq(_M_data()[__size], __c)) { 
# 1293
return __size; }  }  
# 1294
}  
# 1295
return npos; 
# 1296
} 
# 1298
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1301
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1303
{ 
# 1304
; 
# 1305
for (; __n && (__pos < size()); ++__pos) 
# 1306
{ 
# 1307
const _CharT *__p = traits_type::find(__s, __n, _M_data()[__pos]); 
# 1308
if (__p) { 
# 1309
return __pos; }  
# 1310
}  
# 1311
return npos; 
# 1312
} 
# 1314
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1317
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1319
{ 
# 1320
; 
# 1321
size_type __size = size(); 
# 1322
if (__size && __n) 
# 1323
{ 
# 1324
if ((--__size) > __pos) { 
# 1325
__size = __pos; }  
# 1326
do 
# 1327
{ 
# 1328
if (traits_type::find(__s, __n, _M_data()[__size])) { 
# 1329
return __size; }  
# 1330
} 
# 1331
while ((__size--) != 0); 
# 1332
}  
# 1333
return npos; 
# 1334
} 
# 1336
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1339
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1341
{ 
# 1342
; 
# 1343
for (; __pos < size(); ++__pos) { 
# 1344
if (!traits_type::find(__s, __n, _M_data()[__pos])) { 
# 1345
return __pos; }  }  
# 1346
return npos; 
# 1347
} 
# 1349
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1352
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const noexcept 
# 1353
{ 
# 1354
for (; __pos < size(); ++__pos) { 
# 1355
if (!traits_type::eq(_M_data()[__pos], __c)) { 
# 1356
return __pos; }  }  
# 1357
return npos; 
# 1358
} 
# 1360
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1363
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(const _CharT *__s, size_type __pos, size_type __n) const noexcept 
# 1365
{ 
# 1366
; 
# 1367
size_type __size = size(); 
# 1368
if (__size) 
# 1369
{ 
# 1370
if ((--__size) > __pos) { 
# 1371
__size = __pos; }  
# 1372
do 
# 1373
{ 
# 1374
if (!traits_type::find(__s, __n, _M_data()[__size])) { 
# 1375
return __size; }  
# 1376
} 
# 1377
while (__size--); 
# 1378
}  
# 1379
return npos; 
# 1380
} 
# 1382
template< class _CharT, class _Traits, class _Alloc> typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type 
# 1385
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::find_last_not_of(_CharT __c, size_type __pos) const noexcept 
# 1386
{ 
# 1387
size_type __size = size(); 
# 1388
if (__size) 
# 1389
{ 
# 1390
if ((--__size) > __pos) { 
# 1391
__size = __pos; }  
# 1392
do 
# 1393
{ 
# 1394
if (!traits_type::eq(_M_data()[__size], __c)) { 
# 1395
return __size; }  
# 1396
} 
# 1397
while (__size--); 
# 1398
}  
# 1399
return npos; 
# 1400
} 
# 1402
template< class _CharT, class _Traits, class _Alloc> int 
# 1405
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n, const basic_string &__str) const 
# 1406
{ 
# 1407
_M_check(__pos, "basic_string::compare"); 
# 1408
__n = _M_limit(__pos, __n); 
# 1409
const size_type __osize = __str.size(); 
# 1410
const size_type __len = std::min(__n, __osize); 
# 1411
int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len); 
# 1412
if (!__r) { 
# 1413
__r = (_S_compare)(__n, __osize); }  
# 1414
return __r; 
# 1415
} 
# 1417
template< class _CharT, class _Traits, class _Alloc> int 
# 1420
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos1, size_type __n1, const basic_string &__str, size_type 
# 1421
__pos2, size_type __n2) const 
# 1422
{ 
# 1423
_M_check(__pos1, "basic_string::compare"); 
# 1424
__str._M_check(__pos2, "basic_string::compare"); 
# 1425
__n1 = _M_limit(__pos1, __n1); 
# 1426
__n2 = __str._M_limit(__pos2, __n2); 
# 1427
const size_type __len = std::min(__n1, __n2); 
# 1428
int __r = traits_type::compare(_M_data() + __pos1, __str.data() + __pos2, __len); 
# 1430
if (!__r) { 
# 1431
__r = (_S_compare)(__n1, __n2); }  
# 1432
return __r; 
# 1433
} 
# 1435
template< class _CharT, class _Traits, class _Alloc> int 
# 1438
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(const _CharT *__s) const noexcept 
# 1439
{ 
# 1440
; 
# 1441
const size_type __size = size(); 
# 1442
const size_type __osize = traits_type::length(__s); 
# 1443
const size_type __len = std::min(__size, __osize); 
# 1444
int __r = traits_type::compare(_M_data(), __s, __len); 
# 1445
if (!__r) { 
# 1446
__r = (_S_compare)(__size, __osize); }  
# 1447
return __r; 
# 1448
} 
# 1450
template< class _CharT, class _Traits, class _Alloc> int 
# 1453
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s) const 
# 1454
{ 
# 1455
; 
# 1456
_M_check(__pos, "basic_string::compare"); 
# 1457
__n1 = _M_limit(__pos, __n1); 
# 1458
const size_type __osize = traits_type::length(__s); 
# 1459
const size_type __len = std::min(__n1, __osize); 
# 1460
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1461
if (!__r) { 
# 1462
__r = (_S_compare)(__n1, __osize); }  
# 1463
return __r; 
# 1464
} 
# 1466
template< class _CharT, class _Traits, class _Alloc> int 
# 1469
__cxx11::basic_string< _CharT, _Traits, _Alloc> ::compare(size_type __pos, size_type __n1, const _CharT *__s, size_type 
# 1470
__n2) const 
# 1471
{ 
# 1472
; 
# 1473
_M_check(__pos, "basic_string::compare"); 
# 1474
__n1 = _M_limit(__pos, __n1); 
# 1475
const size_type __len = std::min(__n1, __n2); 
# 1476
int __r = traits_type::compare(_M_data() + __pos, __s, __len); 
# 1477
if (!__r) { 
# 1478
__r = (_S_compare)(__n1, __n2); }  
# 1479
return __r; 
# 1480
} 
# 1483
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1485
operator>>(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1486
__str) 
# 1487
{ 
# 1488
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1489
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1490
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1491
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1492
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1493
typedef ctype< _CharT>  __ctype_type; 
# 1494
typedef typename ctype< _CharT> ::ctype_base __ctype_base; 
# 1496
__size_type __extracted = (0); 
# 1497
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1498
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1499
if (__cerb) 
# 1500
{ 
# 1501
try 
# 1502
{ 
# 1504
__str.erase(); 
# 1505
_CharT __buf[128]; 
# 1506
__size_type __len = (0); 
# 1507
const streamsize __w = __in.width(); 
# 1508
const __size_type __n = (__w > (0)) ? static_cast< __size_type>(__w) : __str.max_size(); 
# 1510
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1511
const __int_type __eof = _Traits::eof(); 
# 1512
__int_type __c = __in.rdbuf()->sgetc(); 
# 1514
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(__ctype_base::space, _Traits::to_char_type(__c)))) 
# 1518
{ 
# 1519
if (__len == (sizeof(__buf) / sizeof(_CharT))) 
# 1520
{ 
# 1521
__str.append(__buf, sizeof(__buf) / sizeof(_CharT)); 
# 1522
__len = 0; 
# 1523
}  
# 1524
(__buf[__len++]) = _Traits::to_char_type(__c); 
# 1525
++__extracted; 
# 1526
__c = __in.rdbuf()->snextc(); 
# 1527
}  
# 1528
__str.append(__buf, __len); 
# 1530
if ((__extracted < __n) && _Traits::eq_int_type(__c, __eof)) { 
# 1531
__err |= __ios_base::eofbit; }  
# 1532
__in.width(0); 
# 1533
} 
# 1534
catch (__cxxabiv1::__forced_unwind &) 
# 1535
{ 
# 1536
__in._M_setstate(__ios_base::badbit); 
# 1537
throw; 
# 1538
} 
# 1539
catch (...) 
# 1540
{ 
# 1544
__in._M_setstate(__ios_base::badbit); 
# 1545
}  
# 1546
}  
# 1548
if (!__extracted) { 
# 1549
__err |= __ios_base::failbit; }  
# 1550
if (__err) { 
# 1551
__in.setstate(__err); }  
# 1552
return __in; 
# 1553
} 
# 1555
template< class _CharT, class _Traits, class _Alloc> basic_istream< _CharT, _Traits>  &
# 1557
getline(basic_istream< _CharT, _Traits>  &__in, __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 1558
__str, _CharT __delim) 
# 1559
{ 
# 1560
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1561
typedef __cxx11::basic_string< _CharT, _Traits, _Alloc>  __string_type; 
# 1562
typedef typename basic_istream< _CharT, _Traits> ::ios_base __ios_base; 
# 1563
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1564
typedef typename __cxx11::basic_string< _CharT, _Traits, _Alloc> ::size_type __size_type; 
# 1566
__size_type __extracted = (0); 
# 1567
const __size_type __n = __str.max_size(); 
# 1568
typename basic_istream< _CharT, _Traits> ::ios_base::iostate __err = (__ios_base::goodbit); 
# 1569
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, true); 
# 1570
if (__cerb) 
# 1571
{ 
# 1572
try 
# 1573
{ 
# 1574
__str.erase(); 
# 1575
const __int_type __idelim = _Traits::to_int_type(__delim); 
# 1576
const __int_type __eof = _Traits::eof(); 
# 1577
__int_type __c = __in.rdbuf()->sgetc(); 
# 1579
while ((__extracted < __n) && (!_Traits::eq_int_type(__c, __eof)) && (!_Traits::eq_int_type(__c, __idelim))) 
# 1582
{ 
# 1583
__str += _Traits::to_char_type(__c); 
# 1584
++__extracted; 
# 1585
__c = __in.rdbuf()->snextc(); 
# 1586
}  
# 1588
if (_Traits::eq_int_type(__c, __eof)) { 
# 1589
__err |= __ios_base::eofbit; } else { 
# 1590
if (_Traits::eq_int_type(__c, __idelim)) 
# 1591
{ 
# 1592
++__extracted; 
# 1593
__in.rdbuf()->sbumpc(); 
# 1594
} else { 
# 1596
__err |= __ios_base::failbit; }  }  
# 1597
} 
# 1598
catch (__cxxabiv1::__forced_unwind &) 
# 1599
{ 
# 1600
__in._M_setstate(__ios_base::badbit); 
# 1601
throw; 
# 1602
} 
# 1603
catch (...) 
# 1604
{ 
# 1608
__in._M_setstate(__ios_base::badbit); 
# 1609
}  
# 1610
}  
# 1611
if (!__extracted) { 
# 1612
__err |= __ios_base::failbit; }  
# 1613
if (__err) { 
# 1614
__in.setstate(__err); }  
# 1615
return __in; 
# 1616
} 
# 1627 "/usr/include/c++/11/bits/basic_string.tcc" 3
extern template class __cxx11::basic_string< char> ;
# 1635
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1638
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __os, const __cxx11::basic_string< char>  & __str);
# 1641
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str, char __delim);
# 1644
extern template basic_istream< char>  &getline(basic_istream< char>  & __is, __cxx11::basic_string< char>  & __str);
# 1650
extern template class __cxx11::basic_string< wchar_t> ;
# 1656
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1659
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __os, const __cxx11::basic_string< wchar_t>  & __str);
# 1662
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str, wchar_t __delim);
# 1665
extern template basic_istream< wchar_t>  &getline(basic_istream< wchar_t>  & __is, __cxx11::basic_string< wchar_t>  & __str);
# 1672
}
# 59 "/usr/include/c++/11/string" 3
namespace std __attribute((__visibility__("default"))) { 
# 62
namespace pmr { 
# 63
template< class _Tp> class polymorphic_allocator; 
# 64
template< class _CharT, class _Traits = char_traits< _CharT> > using basic_string = __cxx11::basic_string< _CharT, _Traits, polymorphic_allocator< _CharT> > ; 
# 67
using string = basic_string< char> ; 
# 71
using u16string = basic_string< char16_t> ; 
# 72
using u32string = basic_string< char32_t> ; 
# 74
using wstring = basic_string< wchar_t> ; 
# 76
}
# 78
template< class _Str> 
# 79
struct __hash_string_base : public __hash_base< unsigned long, _Str>  { 
# 83
std::size_t operator()(const _Str &__s) const noexcept 
# 84
{ return hash< basic_string_view< typename _Str::value_type> > {}(__s); } 
# 85
}; 
# 88
template<> struct hash< __cxx11::basic_string< char, char_traits< char> , pmr::polymorphic_allocator< char> > >  : public __hash_string_base< __cxx11::basic_string< char, char_traits< char> , pmr::polymorphic_allocator< char> > >  { 
# 90
}; 
# 98
template<> struct hash< __cxx11::basic_string< char16_t, char_traits< char16_t> , pmr::polymorphic_allocator< char16_t> > >  : public __hash_string_base< __cxx11::basic_string< char16_t, char_traits< char16_t> , pmr::polymorphic_allocator< char16_t> > >  { 
# 100
}; 
# 102
template<> struct hash< __cxx11::basic_string< char32_t, char_traits< char32_t> , pmr::polymorphic_allocator< char32_t> > >  : public __hash_string_base< __cxx11::basic_string< char32_t, char_traits< char32_t> , pmr::polymorphic_allocator< char32_t> > >  { 
# 104
}; 
# 107
template<> struct hash< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , pmr::polymorphic_allocator< wchar_t> > >  : public __hash_string_base< __cxx11::basic_string< wchar_t, char_traits< wchar_t> , pmr::polymorphic_allocator< wchar_t> > >  { 
# 109
}; 
# 113
}
# 43 "/usr/include/c++/11/bits/locale_classes.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 62 "/usr/include/c++/11/bits/locale_classes.h" 3
class locale { 
# 67
public: typedef int category; 
# 70
class facet; 
# 71
class id; 
# 72
class _Impl; 
# 74
friend class facet; 
# 75
friend class _Impl; 
# 77
template< class _Facet> friend bool has_facet(const locale &) throw(); 
# 81
template< class _Facet> friend const _Facet &use_facet(const locale &); 
# 85
template< class _Cache> friend struct __use_cache; 
# 98 "/usr/include/c++/11/bits/locale_classes.h" 3
static const category none = 0; 
# 99
static const category ctype = (1L << 0); 
# 100
static const category numeric = (1L << 1); 
# 101
static const category collate = (1L << 2); 
# 102
static const category time = (1L << 3); 
# 103
static const category monetary = (1L << 4); 
# 104
static const category messages = (1L << 5); 
# 105
static const category all = (((((ctype | numeric) | collate) | time) | monetary) | messages); 
# 117 "/usr/include/c++/11/bits/locale_classes.h" 3
locale() throw(); 
# 126 "/usr/include/c++/11/bits/locale_classes.h" 3
locale(const locale & __other) throw(); 
# 137 "/usr/include/c++/11/bits/locale_classes.h" 3
explicit locale(const char * __s); 
# 151 "/usr/include/c++/11/bits/locale_classes.h" 3
locale(const locale & __base, const char * __s, category __cat); 
# 163 "/usr/include/c++/11/bits/locale_classes.h" 3
explicit locale(const string &__s) : locale(__s.c_str()) { } 
# 177 "/usr/include/c++/11/bits/locale_classes.h" 3
locale(const locale &__base, const string &__s, category __cat) : locale(__base, __s.c_str(), __cat) 
# 178
{ } 
# 192 "/usr/include/c++/11/bits/locale_classes.h" 3
locale(const locale & __base, const locale & __add, category __cat); 
# 205 "/usr/include/c++/11/bits/locale_classes.h" 3
template< class _Facet> locale(const locale & __other, _Facet * __f); 
# 209
~locale() throw(); 
# 220 "/usr/include/c++/11/bits/locale_classes.h" 3
const locale &operator=(const locale & __other) throw(); 
# 234 "/usr/include/c++/11/bits/locale_classes.h" 3
template< class _Facet> locale combine(const locale & __other) const; 
# 243
__attribute((__abi_tag__("cxx11"))) string 
# 245
name() const; 
# 255 "/usr/include/c++/11/bits/locale_classes.h" 3
bool operator==(const locale & __other) const throw(); 
# 265 "/usr/include/c++/11/bits/locale_classes.h" 3
bool operator!=(const locale &__other) const throw() 
# 266
{ return !this->operator==(__other); } 
# 284 "/usr/include/c++/11/bits/locale_classes.h" 3
template< class _Char, class _Traits, class _Alloc> bool operator()(const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s1, const __cxx11::basic_string< _Char, _Traits, _Alloc>  & __s2) const; 
# 301 "/usr/include/c++/11/bits/locale_classes.h" 3
static locale global(const locale & __loc); 
# 307
static const locale &classic(); 
# 311
private: _Impl *_M_impl; 
# 314
static _Impl *_S_classic; 
# 317
static _Impl *_S_global; 
# 323
static const char *const *const _S_categories; 
# 335 "/usr/include/c++/11/bits/locale_classes.h" 3
enum { _S_categories_size = (6 + 6)}; 
# 338
static __gthread_once_t _S_once; 
# 342
explicit locale(_Impl *) throw(); 
# 345
static void _S_initialize(); 
# 348
static void _S_initialize_once() throw(); 
# 351
static category _S_normalize_category(category); 
# 354
void _M_coalesce(const locale & __base, const locale & __add, category __cat); 
# 357
static const id *const _S_twinned_facets[]; 
# 359
}; 
# 373 "/usr/include/c++/11/bits/locale_classes.h" 3
class locale::facet { 
# 376
friend class locale; 
# 377
friend class _Impl; 
# 379
mutable _Atomic_word _M_refcount; 
# 382
static __c_locale _S_c_locale; 
# 385
static const char _S_c_name[2]; 
# 388
static __gthread_once_t _S_once; 
# 392
static void _S_initialize_once(); 
# 405 "/usr/include/c++/11/bits/locale_classes.h" 3
protected: explicit facet(size_t __refs = 0) throw() : _M_refcount((__refs) ? 1 : 0) 
# 406
{ } 
# 410
virtual ~facet(); 
# 413
static void _S_create_c_locale(__c_locale & __cloc, const char * __s, __c_locale __old = 0); 
# 417
static __c_locale _S_clone_c_locale(__c_locale & __cloc) throw(); 
# 420
static void _S_destroy_c_locale(__c_locale & __cloc); 
# 423
static __c_locale _S_lc_ctype_c_locale(__c_locale __cloc, const char * __s); 
# 428
static __c_locale _S_get_c_locale(); 
# 430
__attribute((const)) static const char *
# 431
_S_get_c_name() throw(); 
# 440 "/usr/include/c++/11/bits/locale_classes.h" 3
facet(const facet &) = delete;
# 443
facet &operator=(const facet &) = delete;
# 448
private: void _M_add_reference() const throw() 
# 449
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 452
void _M_remove_reference() const throw() 
# 453
{ 
# 455
; 
# 456
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 457
{ 
# 458
; 
# 459
try 
# 460
{ delete this; } 
# 461
catch (...) 
# 462
{ }  
# 463
}  
# 464
} 
# 466
const facet *_M_sso_shim(const id *) const; 
# 467
const facet *_M_cow_shim(const id *) const; 
# 470
protected: class __shim; 
# 471
}; 
# 485 "/usr/include/c++/11/bits/locale_classes.h" 3
class locale::id { 
# 488
friend class locale; 
# 489
friend class _Impl; 
# 491
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 495
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 502
mutable size_t _M_index; 
# 505
static _Atomic_word _S_refcount; 
# 508
void operator=(const id &); 
# 510
id(const id &); 
# 516
public: id() { } 
# 519
size_t _M_id() const throw(); 
# 520
}; 
# 524
class locale::_Impl { 
# 528
friend class locale; 
# 529
friend class facet; 
# 531
template< class _Facet> friend bool has_facet(const std::locale &) throw(); 
# 535
template< class _Facet> friend const _Facet &use_facet(const std::locale &); 
# 539
template< class _Cache> friend struct __use_cache; 
# 544
_Atomic_word _M_refcount; 
# 545
const facet **_M_facets; 
# 546
size_t _M_facets_size; 
# 547
const facet **_M_caches; 
# 548
char **_M_names; 
# 549
static const id *const _S_id_ctype[]; 
# 550
static const id *const _S_id_numeric[]; 
# 551
static const id *const _S_id_collate[]; 
# 552
static const id *const _S_id_time[]; 
# 553
static const id *const _S_id_monetary[]; 
# 554
static const id *const _S_id_messages[]; 
# 555
static const id *const *const _S_facet_categories[]; 
# 558
void _M_add_reference() throw() 
# 559
{ __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 562
void _M_remove_reference() throw() 
# 563
{ 
# 565
; 
# 566
if (__gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1) == 1) 
# 567
{ 
# 568
; 
# 569
try 
# 570
{ delete this; } 
# 571
catch (...) 
# 572
{ }  
# 573
}  
# 574
} 
# 576
_Impl(const _Impl &, size_t); 
# 577
_Impl(const char *, size_t); 
# 578
_Impl(size_t) throw(); 
# 580
~_Impl() throw(); 
# 582
_Impl(const _Impl &); 
# 585
void operator=(const _Impl &); 
# 588
bool _M_check_same_name() 
# 589
{ 
# 590
bool __ret = true; 
# 591
if ((_M_names)[1]) { 
# 593
for (size_t __i = (0); __ret && (__i < ((_S_categories_size) - 1)); ++__i) { 
# 594
__ret = (__builtin_strcmp((_M_names)[__i], (_M_names)[__i + (1)]) == 0); }  }  
# 595
return __ret; 
# 596
} 
# 599
void _M_replace_categories(const _Impl *, category); 
# 602
void _M_replace_category(const _Impl *, const id *const *); 
# 605
void _M_replace_facet(const _Impl *, const id *); 
# 608
void _M_install_facet(const id *, const facet *); 
# 610
template< class _Facet> void 
# 612
_M_init_facet(_Facet *__facet) 
# 613
{ this->_M_install_facet(&_Facet::id, __facet); } 
# 615
template< class _Facet> void 
# 617
_M_init_facet_unchecked(_Facet *__facet) 
# 618
{ 
# 619
__facet->_M_add_reference(); 
# 620
((_M_facets)[(_Facet::id._M_id)()]) = __facet; 
# 621
} 
# 624
void _M_install_cache(const facet *, size_t); 
# 626
void _M_init_extra(facet **); 
# 627
void _M_init_extra(void *, void *, const char *, const char *); 
# 632
}; 
# 647 "/usr/include/c++/11/bits/locale_classes.h" 3
template< class _CharT> 
# 648
class __cxx11::collate : public locale::facet { 
# 654
public: typedef _CharT char_type; 
# 655
typedef basic_string< _CharT>  string_type; 
# 661
protected: __c_locale _M_c_locale_collate; 
# 665
public: static locale::id id; 
# 675 "/usr/include/c++/11/bits/locale_classes.h" 3
explicit collate(size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_get_c_locale()) 
# 677
{ } 
# 689 "/usr/include/c++/11/bits/locale_classes.h" 3
explicit collate(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc)) 
# 691
{ } 
# 706 "/usr/include/c++/11/bits/locale_classes.h" 3
int compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 707
__lo2, const _CharT *__hi2) const 
# 708
{ return do_compare(__lo1, __hi1, __lo2, __hi2); } 
# 725 "/usr/include/c++/11/bits/locale_classes.h" 3
string_type transform(const _CharT *__lo, const _CharT *__hi) const 
# 726
{ return do_transform(__lo, __hi); } 
# 739 "/usr/include/c++/11/bits/locale_classes.h" 3
long hash(const _CharT *__lo, const _CharT *__hi) const 
# 740
{ return do_hash(__lo, __hi); } 
# 744
int _M_compare(const _CharT *, const _CharT *) const throw(); 
# 747
size_t _M_transform(_CharT *, const _CharT *, size_t) const throw(); 
# 752
protected: virtual ~collate() 
# 753
{ _S_destroy_c_locale(_M_c_locale_collate); } 
# 768 "/usr/include/c++/11/bits/locale_classes.h" 3
virtual int do_compare(const _CharT * __lo1, const _CharT * __hi1, const _CharT * __lo2, const _CharT * __hi2) const; 
# 782 "/usr/include/c++/11/bits/locale_classes.h" 3
virtual string_type do_transform(const _CharT * __lo, const _CharT * __hi) const; 
# 795 "/usr/include/c++/11/bits/locale_classes.h" 3
virtual long do_hash(const _CharT * __lo, const _CharT * __hi) const; 
# 796
}; 
# 798
template< class _CharT> locale::id 
# 799
__cxx11::collate< _CharT> ::id; 
# 804
template<> int collate< char> ::_M_compare(const char *, const char *) const throw(); 
# 808
template<> size_t collate< char> ::_M_transform(char *, const char *, size_t) const throw(); 
# 813
template<> int collate< wchar_t> ::_M_compare(const wchar_t *, const wchar_t *) const throw(); 
# 817
template<> size_t collate< wchar_t> ::_M_transform(wchar_t *, const wchar_t *, size_t) const throw(); 
# 821
template< class _CharT> 
# 822
class __cxx11::collate_byname : public collate< _CharT>  { 
# 827
public: typedef _CharT char_type; 
# 828
typedef basic_string< _CharT>  string_type; 
# 832
explicit collate_byname(const char *__s, std::size_t __refs = 0) : collate< _CharT> (__refs) 
# 834
{ 
# 835
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 837
{ 
# 838
this->_S_destroy_c_locale((this->_M_c_locale_collate)); 
# 839
this->_S_create_c_locale((this->_M_c_locale_collate), __s); 
# 840
}  
# 841
} 
# 845
explicit collate_byname(const std::string &__s, std::size_t __refs = 0) : collate_byname(__s.c_str(), __refs) 
# 846
{ } 
# 851
protected: virtual ~collate_byname() { } 
# 852
}; 
# 855
}
# 39 "/usr/include/c++/11/bits/locale_classes.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _Facet> 
# 45
locale::locale(const locale &__other, _Facet *__f) 
# 46
{ 
# 47
(_M_impl) = (new _Impl(*(__other._M_impl), 1)); 
# 49
try 
# 50
{ (_M_impl)->_M_install_facet(&_Facet::id, __f); } 
# 51
catch (...) 
# 52
{ 
# 53
(_M_impl)->_M_remove_reference(); 
# 54
throw; 
# 55
}  
# 56
delete [] (((_M_impl)->_M_names)[0]); 
# 57
(((_M_impl)->_M_names)[0]) = (0); 
# 58
} 
# 60
template< class _Facet> locale 
# 63
locale::combine(const locale &__other) const 
# 64
{ 
# 65
_Impl *__tmp = new _Impl(*(_M_impl), 1); 
# 66
try 
# 67
{ 
# 68
__tmp->_M_replace_facet(__other._M_impl, &_Facet::id); 
# 69
} 
# 70
catch (...) 
# 71
{ 
# 72
__tmp->_M_remove_reference(); 
# 73
throw; 
# 74
}  
# 75
return ((locale)(__tmp)); 
# 76
} 
# 78
template< class _CharT, class _Traits, class _Alloc> bool 
# 81
locale::operator()(const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &__s1, const __cxx11::basic_string< _CharT, _Traits, _Alloc>  &
# 82
__s2) const 
# 83
{ 
# 84
typedef __cxx11::collate< _CharT>  __collate_type; 
# 85
const __collate_type &__collate = use_facet< __cxx11::collate< _CharT> > (*this); 
# 86
return (__collate.compare(__s1.data(), __s1.data() + __s1.length(), __s2.data(), __s2.data() + __s2.length()) < 0); 
# 88
} 
# 102 "/usr/include/c++/11/bits/locale_classes.tcc" 3
template< class _Facet> bool 
# 104
has_facet(const locale &__loc) throw() 
# 105
{ 
# 106
const size_t __i = (_Facet::id._M_id)(); 
# 107
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 108
return ((__i < ((__loc._M_impl)->_M_facets_size)) && (dynamic_cast< const _Facet *>(__facets[__i]))); 
# 114
} 
# 130 "/usr/include/c++/11/bits/locale_classes.tcc" 3
template< class _Facet> const _Facet &
# 132
use_facet(const locale &__loc) 
# 133
{ 
# 134
const size_t __i = (_Facet::id._M_id)(); 
# 135
const locale::facet **__facets = (__loc._M_impl)->_M_facets; 
# 136
if ((__i >= ((__loc._M_impl)->_M_facets_size)) || (!(__facets[__i]))) { 
# 137
__throw_bad_cast(); }  
# 139
return dynamic_cast< const _Facet &>(*(__facets[__i])); 
# 143
} 
# 147
template< class _CharT> int 
# 149
__cxx11::collate< _CharT> ::_M_compare(const _CharT *, const _CharT *) const throw() 
# 150
{ return 0; } 
# 153
template< class _CharT> size_t 
# 155
__cxx11::collate< _CharT> ::_M_transform(_CharT *, const _CharT *, size_t) const throw() 
# 156
{ return 0; } 
# 158
template< class _CharT> int 
# 161
__cxx11::collate< _CharT> ::do_compare(const _CharT *__lo1, const _CharT *__hi1, const _CharT *
# 162
__lo2, const _CharT *__hi2) const 
# 163
{ 
# 166
const string_type __one(__lo1, __hi1); 
# 167
const string_type __two(__lo2, __hi2); 
# 169
const _CharT *__p = __one.c_str(); 
# 170
const _CharT *__pend = __one.data() + __one.length(); 
# 171
const _CharT *__q = __two.c_str(); 
# 172
const _CharT *__qend = __two.data() + __two.length(); 
# 177
for (; ;) 
# 178
{ 
# 179
const int __res = _M_compare(__p, __q); 
# 180
if (__res) { 
# 181
return __res; }  
# 183
__p += char_traits< _CharT> ::length(__p); 
# 184
__q += char_traits< _CharT> ::length(__q); 
# 185
if ((__p == __pend) && (__q == __qend)) { 
# 186
return 0; } else { 
# 187
if (__p == __pend) { 
# 188
return -1; } else { 
# 189
if (__q == __qend) { 
# 190
return 1; }  }  }  
# 192
__p++; 
# 193
__q++; 
# 194
}  
# 195
} 
# 197
template< class _CharT> typename __cxx11::collate< _CharT> ::string_type 
# 200
__cxx11::collate< _CharT> ::do_transform(const _CharT *__lo, const _CharT *__hi) const 
# 201
{ 
# 202
string_type __ret; 
# 205
const string_type __str(__lo, __hi); 
# 207
const _CharT *__p = __str.c_str(); 
# 208
const _CharT *__pend = __str.data() + __str.length(); 
# 210
size_t __len = (__hi - __lo) * 2; 
# 212
_CharT *__c = new _CharT [__len]; 
# 214
try 
# 215
{ 
# 219
for (; ;) 
# 220
{ 
# 222
size_t __res = _M_transform(__c, __p, __len); 
# 225
if (__res >= __len) 
# 226
{ 
# 227
__len = (__res + (1)); 
# 228
(delete [] __c), (__c = 0); 
# 229
__c = (new _CharT [__len]); 
# 230
__res = _M_transform(__c, __p, __len); 
# 231
}  
# 233
__ret.append(__c, __res); 
# 234
__p += char_traits< _CharT> ::length(__p); 
# 235
if (__p == __pend) { 
# 236
break; }  
# 238
__p++; 
# 239
__ret.push_back(_CharT()); 
# 240
}  
# 241
} 
# 242
catch (...) 
# 243
{ 
# 244
delete [] __c; 
# 245
throw; 
# 246
}  
# 248
delete [] __c; 
# 250
return __ret; 
# 251
} 
# 253
template< class _CharT> long 
# 256
__cxx11::collate< _CharT> ::do_hash(const _CharT *__lo, const _CharT *__hi) const 
# 257
{ 
# 258
unsigned long __val = (0); 
# 259
for (; __lo < __hi; ++__lo) { 
# 260
__val = ((*__lo) + ((__val << 7) | (__val >> (__gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits - 7)))); }  
# 264
return static_cast< long>(__val); 
# 265
} 
# 270
extern template class __cxx11::collate< char> ;
# 271
extern template class __cxx11::collate_byname< char> ;
# 273
extern template const __cxx11::collate< char>  &use_facet< __cxx11::collate< char> > (const locale &);
# 277
extern template bool has_facet< __cxx11::collate< char> > (const locale &) throw();
# 282
extern template class __cxx11::collate< wchar_t> ;
# 283
extern template class __cxx11::collate_byname< wchar_t> ;
# 285
extern template const __cxx11::collate< wchar_t>  &use_facet< __cxx11::collate< wchar_t> > (const locale &);
# 289
extern template bool has_facet< __cxx11::collate< wchar_t> > (const locale &) throw();
# 296
}
# 36 "/usr/include/x86_64-linux-gnu/c++/11/bits/error_constants.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 40
enum class errc { 
# 42
address_family_not_supported = 97, 
# 43
address_in_use, 
# 44
address_not_available, 
# 45
already_connected = 106, 
# 46
argument_list_too_long = 7, 
# 47
argument_out_of_domain = 33, 
# 48
bad_address = 14, 
# 49
bad_file_descriptor = 9, 
# 52
bad_message = 74, 
# 55
broken_pipe = 32, 
# 56
connection_aborted = 103, 
# 57
connection_already_in_progress = 114, 
# 58
connection_refused = 111, 
# 59
connection_reset = 104, 
# 60
cross_device_link = 18, 
# 61
destination_address_required = 89, 
# 62
device_or_resource_busy = 16, 
# 63
directory_not_empty = 39, 
# 64
executable_format_error = 8, 
# 65
file_exists = 17, 
# 66
file_too_large = 27, 
# 67
filename_too_long = 36, 
# 68
function_not_supported = 38, 
# 69
host_unreachable = 113, 
# 72
identifier_removed = 43, 
# 75
illegal_byte_sequence = 84, 
# 76
inappropriate_io_control_operation = 25, 
# 77
interrupted = 4, 
# 78
invalid_argument = 22, 
# 79
invalid_seek = 29, 
# 80
io_error = 5, 
# 81
is_a_directory = 21, 
# 82
message_size = 90, 
# 83
network_down = 100, 
# 84
network_reset = 102, 
# 85
network_unreachable = 101, 
# 86
no_buffer_space = 105, 
# 87
no_child_process = 10, 
# 90
no_link = 67, 
# 93
no_lock_available = 37, 
# 96
no_message_available = 61, 
# 99
no_message = 42, 
# 100
no_protocol_option = 92, 
# 101
no_space_on_device = 28, 
# 104
no_stream_resources = 63, 
# 107
no_such_device_or_address = 6, 
# 108
no_such_device = 19, 
# 109
no_such_file_or_directory = 2, 
# 110
no_such_process, 
# 111
not_a_directory = 20, 
# 112
not_a_socket = 88, 
# 115
not_a_stream = 60, 
# 118
not_connected = 107, 
# 119
not_enough_memory = 12, 
# 122
not_supported = 95, 
# 126
operation_canceled = 125, 
# 129
operation_in_progress = 115, 
# 130
operation_not_permitted = 1, 
# 131
operation_not_supported = 95, 
# 132
operation_would_block = 11, 
# 135
owner_dead = 130, 
# 138
permission_denied = 13, 
# 141
protocol_error = 71, 
# 144
protocol_not_supported = 93, 
# 145
read_only_file_system = 30, 
# 146
resource_deadlock_would_occur = 35, 
# 147
resource_unavailable_try_again = 11, 
# 148
result_out_of_range = 34, 
# 151
state_not_recoverable = 131, 
# 155
stream_timeout = 62, 
# 159
text_file_busy = 26, 
# 162
timed_out = 110, 
# 163
too_many_files_open_in_system = 23, 
# 164
too_many_files_open, 
# 165
too_many_links = 31, 
# 166
too_many_symbolic_link_levels = 40, 
# 169
value_too_large = 75, 
# 174
wrong_protocol_type = 91
# 175
}; 
# 178
}
# 41 "/usr/include/c++/11/stdexcept" 3
namespace std __attribute((__visibility__("default"))) { 
# 48
struct __cow_string { 
# 50
union { 
# 51
const char *_M_p; 
# 52
char _M_bytes[sizeof(const char *)]; 
# 53
}; 
# 55
__cow_string(); 
# 56
__cow_string(const string &); 
# 57
__cow_string(const char *, size_t); 
# 58
__cow_string(const __cow_string &) noexcept; 
# 59
__cow_string &operator=(const __cow_string &) noexcept; 
# 60
~__cow_string(); 
# 62
__cow_string(__cow_string &&) noexcept; 
# 63
__cow_string &operator=(__cow_string &&) noexcept; 
# 65
}; 
# 67
typedef __cxx11::basic_string< char>  __sso_string; 
# 113 "/usr/include/c++/11/stdexcept" 3
class logic_error : public exception { 
# 115
__cow_string _M_msg; 
# 120
public: explicit logic_error(const string & __arg); 
# 124
explicit logic_error(const char *); 
# 126
logic_error(logic_error &&) noexcept; 
# 127
logic_error &operator=(logic_error &&) noexcept; 
# 131
logic_error(const logic_error &) noexcept; 
# 132
logic_error &operator=(const logic_error &) noexcept; 
# 138
virtual ~logic_error() noexcept; 
# 143
virtual const char *what() const noexcept; 
# 149
}; 
# 153
class domain_error : public logic_error { 
# 156
public: explicit domain_error(const string & __arg); 
# 158
explicit domain_error(const char *); 
# 159
domain_error(const domain_error &) = default;
# 160
domain_error &operator=(const domain_error &) = default;
# 161
domain_error(domain_error &&) = default;
# 162
domain_error &operator=(domain_error &&) = default;
# 164
virtual ~domain_error() noexcept; 
# 165
}; 
# 168
class invalid_argument : public logic_error { 
# 171
public: explicit invalid_argument(const string & __arg); 
# 173
explicit invalid_argument(const char *); 
# 174
invalid_argument(const invalid_argument &) = default;
# 175
invalid_argument &operator=(const invalid_argument &) = default;
# 176
invalid_argument(invalid_argument &&) = default;
# 177
invalid_argument &operator=(invalid_argument &&) = default;
# 179
virtual ~invalid_argument() noexcept; 
# 180
}; 
# 184
class length_error : public logic_error { 
# 187
public: explicit length_error(const string & __arg); 
# 189
explicit length_error(const char *); 
# 190
length_error(const length_error &) = default;
# 191
length_error &operator=(const length_error &) = default;
# 192
length_error(length_error &&) = default;
# 193
length_error &operator=(length_error &&) = default;
# 195
virtual ~length_error() noexcept; 
# 196
}; 
# 200
class out_of_range : public logic_error { 
# 203
public: explicit out_of_range(const string & __arg); 
# 205
explicit out_of_range(const char *); 
# 206
out_of_range(const out_of_range &) = default;
# 207
out_of_range &operator=(const out_of_range &) = default;
# 208
out_of_range(out_of_range &&) = default;
# 209
out_of_range &operator=(out_of_range &&) = default;
# 211
virtual ~out_of_range() noexcept; 
# 212
}; 
# 219
class runtime_error : public exception { 
# 221
__cow_string _M_msg; 
# 226
public: explicit runtime_error(const string & __arg); 
# 230
explicit runtime_error(const char *); 
# 232
runtime_error(runtime_error &&) noexcept; 
# 233
runtime_error &operator=(runtime_error &&) noexcept; 
# 237
runtime_error(const runtime_error &) noexcept; 
# 238
runtime_error &operator=(const runtime_error &) noexcept; 
# 244
virtual ~runtime_error() noexcept; 
# 249
virtual const char *what() const noexcept; 
# 255
}; 
# 258
class range_error : public runtime_error { 
# 261
public: explicit range_error(const string & __arg); 
# 263
explicit range_error(const char *); 
# 264
range_error(const range_error &) = default;
# 265
range_error &operator=(const range_error &) = default;
# 266
range_error(range_error &&) = default;
# 267
range_error &operator=(range_error &&) = default;
# 269
virtual ~range_error() noexcept; 
# 270
}; 
# 273
class overflow_error : public runtime_error { 
# 276
public: explicit overflow_error(const string & __arg); 
# 278
explicit overflow_error(const char *); 
# 279
overflow_error(const overflow_error &) = default;
# 280
overflow_error &operator=(const overflow_error &) = default;
# 281
overflow_error(overflow_error &&) = default;
# 282
overflow_error &operator=(overflow_error &&) = default;
# 284
virtual ~overflow_error() noexcept; 
# 285
}; 
# 288
class underflow_error : public runtime_error { 
# 291
public: explicit underflow_error(const string & __arg); 
# 293
explicit underflow_error(const char *); 
# 294
underflow_error(const underflow_error &) = default;
# 295
underflow_error &operator=(const underflow_error &) = default;
# 296
underflow_error(underflow_error &&) = default;
# 297
underflow_error &operator=(underflow_error &&) = default;
# 299
virtual ~underflow_error() noexcept; 
# 300
}; 
# 305
}
# 46 "/usr/include/c++/11/system_error" 3
namespace std __attribute((__visibility__("default"))) { 
# 54
class error_code; 
# 55
class error_condition; 
# 56
class system_error; 
# 59
template< class _Tp> 
# 60
struct is_error_code_enum : public false_type { }; 
# 63
template< class _Tp> 
# 64
struct is_error_condition_enum : public false_type { }; 
# 67
template<> struct is_error_condition_enum< errc>  : public true_type { 
# 68
}; 
# 71
template< class _Tp> constexpr bool 
# 72
is_error_code_enum_v = (is_error_code_enum< _Tp> ::value); 
# 74
template< class _Tp> constexpr bool 
# 75
is_error_condition_enum_v = (is_error_condition_enum< _Tp> ::value); 
# 80
inline namespace _V2 { 
# 97 "/usr/include/c++/11/system_error" 3
class error_category { 
# 100
public: constexpr error_category() noexcept = default;
# 102
virtual ~error_category(); 
# 104
error_category(const error_category &) = delete;
# 105
error_category &operator=(const error_category &) = delete;
# 108
virtual const char *name() const noexcept = 0; 
# 118
private: 
# 116
__attribute((__abi_tag__("cxx11"))) virtual __cow_string 
# 118
_M_message(int) const; 
# 123
public: 
# 121
__attribute((__abi_tag__("cxx11"))) virtual string 
# 123
message(int) const = 0; 
# 135 "/usr/include/c++/11/system_error" 3
virtual error_condition default_error_condition(int __i) const noexcept; 
# 138
virtual bool equivalent(int __i, const error_condition & __cond) const noexcept; 
# 141
virtual bool equivalent(const error_code & __code, int __i) const noexcept; 
# 144
bool operator==(const error_category &__other) const noexcept 
# 145
{ return this == (&__other); } 
# 153
bool operator!=(const error_category &__other) const noexcept 
# 154
{ return this != (&__other); } 
# 157
bool operator<(const error_category &__other) const noexcept 
# 158
{ return less< const error_category *> ()(this, &__other); } 
# 160
}; 
# 165
__attribute((const)) const error_category &generic_category() noexcept; 
# 168
__attribute((const)) const error_category &system_category() noexcept; 
# 171
}
# 177
inline error_code make_error_code(errc) noexcept; 
# 196 "/usr/include/c++/11/system_error" 3
class error_code { 
# 199
public: error_code() noexcept : _M_value(0), _M_cat(&system_category()) 
# 200
{ } 
# 202
error_code(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 203
{ } 
# 205
template< class _ErrorCodeEnum, class  = typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value> ::type> 
# 207
error_code(_ErrorCodeEnum __e) noexcept 
# 208
{ (*this) = make_error_code(__e); } 
# 211
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 212
{ 
# 213
(_M_value) = __v; 
# 214
(_M_cat) = (&__cat); 
# 215
} 
# 218
void clear() noexcept 
# 219
{ this->assign(0, system_category()); } 
# 222
template< class _ErrorCodeEnum> typename enable_if< is_error_code_enum< _ErrorCodeEnum> ::value, error_code &> ::type 
# 225
operator=(_ErrorCodeEnum __e) noexcept 
# 226
{ return (*this) = make_error_code(__e); } 
# 229
int value() const noexcept { return _M_value; } 
# 232
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 235
error_condition default_error_condition() const noexcept; 
# 237
__attribute((__abi_tag__("cxx11"))) string 
# 239
message() const 
# 240
{ return this->category().message(this->value()); } 
# 242
explicit operator bool() const noexcept 
# 243
{ return (_M_value) != 0; } 
# 247
private: int _M_value; 
# 248
const _V2::error_category *_M_cat; 
# 249
}; 
# 256
inline error_code make_error_code(errc __e) noexcept 
# 257
{ return error_code(static_cast< int>(__e), generic_category()); } 
# 269 "/usr/include/c++/11/system_error" 3
inline bool operator<(const error_code &__lhs, const error_code &__rhs) noexcept 
# 270
{ 
# 271
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 274
} 
# 277
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 279
operator<<(basic_ostream< _CharT, _Traits>  &__os, const error_code &__e) 
# 280
{ return (((__os << __e.category().name()) << ':') << __e.value()); } 
# 284
inline error_condition make_error_condition(errc) noexcept; 
# 297 "/usr/include/c++/11/system_error" 3
class error_condition { 
# 300
public: error_condition() noexcept : _M_value(0), _M_cat(&generic_category()) 
# 301
{ } 
# 303
error_condition(int __v, const _V2::error_category &__cat) noexcept : _M_value(__v), _M_cat(&__cat) 
# 304
{ } 
# 306
template< class _ErrorConditionEnum, class  = typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value> ::type> 
# 308
error_condition(_ErrorConditionEnum __e) noexcept 
# 309
{ (*this) = make_error_condition(__e); } 
# 312
void assign(int __v, const _V2::error_category &__cat) noexcept 
# 313
{ 
# 314
(_M_value) = __v; 
# 315
(_M_cat) = (&__cat); 
# 316
} 
# 319
template< class _ErrorConditionEnum> typename enable_if< is_error_condition_enum< _ErrorConditionEnum> ::value, error_condition &> ::type 
# 322
operator=(_ErrorConditionEnum __e) noexcept 
# 323
{ return (*this) = make_error_condition(__e); } 
# 326
void clear() noexcept 
# 327
{ this->assign(0, generic_category()); } 
# 331
int value() const noexcept { return _M_value; } 
# 334
const _V2::error_category &category() const noexcept { return *(_M_cat); } 
# 336
__attribute((__abi_tag__("cxx11"))) string 
# 338
message() const 
# 339
{ return this->category().message(this->value()); } 
# 341
explicit operator bool() const noexcept 
# 342
{ return (_M_value) != 0; } 
# 346
private: int _M_value; 
# 347
const _V2::error_category *_M_cat; 
# 348
}; 
# 355
inline error_condition make_error_condition(errc __e) noexcept 
# 356
{ return error_condition(static_cast< int>(__e), generic_category()); } 
# 362
inline bool operator==(const error_code &__lhs, const error_code &__rhs) noexcept 
# 363
{ return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 364
} 
# 368
inline bool operator==(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 369
{ 
# 370
return (__lhs.category().equivalent(__lhs.value(), __rhs) || __rhs.category().equivalent(__lhs, __rhs.value())); 
# 372
} 
# 376
inline bool operator==(const error_condition &__lhs, const error_condition &
# 377
__rhs) noexcept 
# 378
{ 
# 379
return (((__lhs.category()) == (__rhs.category())) && (__lhs.value() == __rhs.value())); 
# 381
} 
# 398 "/usr/include/c++/11/system_error" 3
inline bool operator<(const error_condition &__lhs, const error_condition &
# 399
__rhs) noexcept 
# 400
{ 
# 401
return (((__lhs.category()) < (__rhs.category())) || (((__lhs.category()) == (__rhs.category())) && (__lhs.value() < __rhs.value()))); 
# 404
} 
# 408
inline bool operator==(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 409
{ 
# 410
return (__rhs.category().equivalent(__rhs.value(), __lhs) || __lhs.category().equivalent(__rhs, __lhs.value())); 
# 412
} 
# 416
inline bool operator!=(const error_code &__lhs, const error_code &__rhs) noexcept 
# 417
{ return !(__lhs == __rhs); } 
# 421
inline bool operator!=(const error_code &__lhs, const error_condition &__rhs) noexcept 
# 422
{ return !(__lhs == __rhs); } 
# 426
inline bool operator!=(const error_condition &__lhs, const error_code &__rhs) noexcept 
# 427
{ return !(__lhs == __rhs); } 
# 431
inline bool operator!=(const error_condition &__lhs, const error_condition &
# 432
__rhs) noexcept 
# 433
{ return !(__lhs == __rhs); } 
# 446 "/usr/include/c++/11/system_error" 3
class system_error : public runtime_error { 
# 449
error_code _M_code; 
# 452
public: system_error(error_code __ec = error_code()) : runtime_error(__ec.message()), _M_code(__ec) 
# 453
{ } 
# 455
system_error(error_code __ec, const string &__what) : runtime_error((((__what + (": "))) + (__ec.message()))), _M_code(__ec) 
# 456
{ } 
# 458
system_error(error_code __ec, const char *__what) : runtime_error((__what + (((": ") + (__ec.message()))))), _M_code(__ec) 
# 459
{ } 
# 461
system_error(int __v, const _V2::error_category &__ecat, const char *__what) : system_error(error_code(__v, __ecat), __what) 
# 462
{ } 
# 464
system_error(int __v, const _V2::error_category &__ecat) : runtime_error(error_code(__v, __ecat).message()), _M_code(__v, __ecat) 
# 466
{ } 
# 468
system_error(int __v, const _V2::error_category &__ecat, const string &__what) : runtime_error((((__what + (": "))) + (error_code(__v, __ecat).message()))), _M_code(__v, __ecat) 
# 470
{ } 
# 473
system_error(const system_error &) = default;
# 474
system_error &operator=(const system_error &) = default;
# 477
virtual ~system_error() noexcept; 
# 480
const error_code &code() const noexcept { return _M_code; } 
# 481
}; 
# 484
}
# 488
namespace std __attribute((__visibility__("default"))) { 
# 497
template<> struct hash< error_code>  : public __hash_base< unsigned long, error_code>  { 
# 501
size_t operator()(const error_code &__e) const noexcept 
# 502
{ 
# 503
const size_t __tmp = std::_Hash_impl::hash(__e.value()); 
# 504
return std::_Hash_impl::__hash_combine(&__e.category(), __tmp); 
# 505
} 
# 506
}; 
# 514
template<> struct hash< error_condition>  : public __hash_base< unsigned long, error_condition>  { 
# 518
size_t operator()(const error_condition &__e) const noexcept 
# 519
{ 
# 520
const size_t __tmp = std::_Hash_impl::hash(__e.value()); 
# 521
return std::_Hash_impl::__hash_combine(&__e.category(), __tmp); 
# 522
} 
# 523
}; 
# 527
}
# 49 "/usr/include/c++/11/bits/ios_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 57
enum _Ios_Fmtflags { 
# 59
_S_boolalpha = (1L << 0), 
# 60
_S_dec, 
# 61
_S_fixed = (1L << 2), 
# 62
_S_hex = (1L << 3), 
# 63
_S_internal = (1L << 4), 
# 64
_S_left = (1L << 5), 
# 65
_S_oct = (1L << 6), 
# 66
_S_right = (1L << 7), 
# 67
_S_scientific = (1L << 8), 
# 68
_S_showbase = (1L << 9), 
# 69
_S_showpoint = (1L << 10), 
# 70
_S_showpos = (1L << 11), 
# 71
_S_skipws = (1L << 12), 
# 72
_S_unitbuf = (1L << 13), 
# 73
_S_uppercase = (1L << 14), 
# 74
_S_adjustfield = ((_S_left | _S_right) | _S_internal), 
# 75
_S_basefield = ((_S_dec | _S_oct) | _S_hex), 
# 76
_S_floatfield = (_S_scientific | _S_fixed), 
# 77
_S_ios_fmtflags_end = (1L << 16), 
# 78
_S_ios_fmtflags_max = 2147483647, 
# 79
_S_ios_fmtflags_min = (~2147483647)
# 80
}; 
# 83
constexpr _Ios_Fmtflags operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 84
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 87
constexpr _Ios_Fmtflags operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 88
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 91
constexpr _Ios_Fmtflags operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b) 
# 92
{ return (_Ios_Fmtflags)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 95
constexpr _Ios_Fmtflags operator~(_Ios_Fmtflags __a) 
# 96
{ return (_Ios_Fmtflags)(~(static_cast< int>(__a))); } 
# 99
inline const _Ios_Fmtflags &operator|=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 100
{ return __a = (__a | __b); } 
# 103
inline const _Ios_Fmtflags &operator&=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 104
{ return __a = (__a & __b); } 
# 107
inline const _Ios_Fmtflags &operator^=(_Ios_Fmtflags &__a, _Ios_Fmtflags __b) 
# 108
{ return __a = (__a ^ __b); } 
# 111
enum _Ios_Openmode { 
# 113
_S_app = (1L << 0), 
# 114
_S_ate, 
# 115
_S_bin = (1L << 2), 
# 116
_S_in = (1L << 3), 
# 117
_S_out = (1L << 4), 
# 118
_S_trunc = (1L << 5), 
# 119
_S_ios_openmode_end = (1L << 16), 
# 120
_S_ios_openmode_max = 2147483647, 
# 121
_S_ios_openmode_min = (~2147483647)
# 122
}; 
# 125
constexpr _Ios_Openmode operator&(_Ios_Openmode __a, _Ios_Openmode __b) 
# 126
{ return (_Ios_Openmode)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 129
constexpr _Ios_Openmode operator|(_Ios_Openmode __a, _Ios_Openmode __b) 
# 130
{ return (_Ios_Openmode)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 133
constexpr _Ios_Openmode operator^(_Ios_Openmode __a, _Ios_Openmode __b) 
# 134
{ return (_Ios_Openmode)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 137
constexpr _Ios_Openmode operator~(_Ios_Openmode __a) 
# 138
{ return (_Ios_Openmode)(~(static_cast< int>(__a))); } 
# 141
inline const _Ios_Openmode &operator|=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 142
{ return __a = (__a | __b); } 
# 145
inline const _Ios_Openmode &operator&=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 146
{ return __a = (__a & __b); } 
# 149
inline const _Ios_Openmode &operator^=(_Ios_Openmode &__a, _Ios_Openmode __b) 
# 150
{ return __a = (__a ^ __b); } 
# 153
enum _Ios_Iostate { 
# 155
_S_goodbit, 
# 156
_S_badbit, 
# 157
_S_eofbit, 
# 158
_S_failbit = (1L << 2), 
# 159
_S_ios_iostate_end = (1L << 16), 
# 160
_S_ios_iostate_max = 2147483647, 
# 161
_S_ios_iostate_min = (~2147483647)
# 162
}; 
# 165
constexpr _Ios_Iostate operator&(_Ios_Iostate __a, _Ios_Iostate __b) 
# 166
{ return (_Ios_Iostate)((static_cast< int>(__a)) & (static_cast< int>(__b))); } 
# 169
constexpr _Ios_Iostate operator|(_Ios_Iostate __a, _Ios_Iostate __b) 
# 170
{ return (_Ios_Iostate)((static_cast< int>(__a)) | (static_cast< int>(__b))); } 
# 173
constexpr _Ios_Iostate operator^(_Ios_Iostate __a, _Ios_Iostate __b) 
# 174
{ return (_Ios_Iostate)((static_cast< int>(__a)) ^ (static_cast< int>(__b))); } 
# 177
constexpr _Ios_Iostate operator~(_Ios_Iostate __a) 
# 178
{ return (_Ios_Iostate)(~(static_cast< int>(__a))); } 
# 181
inline const _Ios_Iostate &operator|=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 182
{ return __a = (__a | __b); } 
# 185
inline const _Ios_Iostate &operator&=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 186
{ return __a = (__a & __b); } 
# 189
inline const _Ios_Iostate &operator^=(_Ios_Iostate &__a, _Ios_Iostate __b) 
# 190
{ return __a = (__a ^ __b); } 
# 193
enum _Ios_Seekdir { 
# 195
_S_beg, 
# 196
_S_cur, 
# 197
_S_end, 
# 198
_S_ios_seekdir_end = (1L << 16)
# 199
}; 
# 203
enum class io_errc { stream = 1}; 
# 205
template<> struct is_error_code_enum< io_errc>  : public true_type { }; 
# 207
const _V2::error_category &iostream_category() noexcept; 
# 210
inline error_code make_error_code(io_errc __e) noexcept 
# 211
{ return error_code(static_cast< int>(__e), iostream_category()); } 
# 214
inline error_condition make_error_condition(io_errc __e) noexcept 
# 215
{ return error_condition(static_cast< int>(__e), iostream_category()); } 
# 228 "/usr/include/c++/11/bits/ios_base.h" 3
class ios_base { 
# 255 "/usr/include/c++/11/bits/ios_base.h" 3
public: class __attribute((__abi_tag__("cxx11"))) failure : public system_error { 
# 259
public: explicit failure(const string & __str); 
# 263
explicit failure(const string &, const error_code &); 
# 266
explicit failure(const char *, const error_code & = io_errc::stream); 
# 270
virtual ~failure() throw(); 
# 273
virtual const char *what() const throw(); 
# 274
}; 
# 341 "/usr/include/c++/11/bits/ios_base.h" 3
typedef _Ios_Fmtflags fmtflags; 
# 344
static const fmtflags boolalpha = _S_boolalpha; 
# 347
static const fmtflags dec = _S_dec; 
# 350
static const fmtflags fixed = _S_fixed; 
# 353
static const fmtflags hex = _S_hex; 
# 358
static const fmtflags internal = _S_internal; 
# 362
static const fmtflags left = _S_left; 
# 365
static const fmtflags oct = _S_oct; 
# 369
static const fmtflags right = _S_right; 
# 372
static const fmtflags scientific = _S_scientific; 
# 376
static const fmtflags showbase = _S_showbase; 
# 380
static const fmtflags showpoint = _S_showpoint; 
# 383
static const fmtflags showpos = _S_showpos; 
# 386
static const fmtflags skipws = _S_skipws; 
# 389
static const fmtflags unitbuf = _S_unitbuf; 
# 393
static const fmtflags uppercase = _S_uppercase; 
# 396
static const fmtflags adjustfield = _S_adjustfield; 
# 399
static const fmtflags basefield = _S_basefield; 
# 402
static const fmtflags floatfield = _S_floatfield; 
# 416 "/usr/include/c++/11/bits/ios_base.h" 3
typedef _Ios_Iostate iostate; 
# 420
static const iostate badbit = _S_badbit; 
# 423
static const iostate eofbit = _S_eofbit; 
# 428
static const iostate failbit = _S_failbit; 
# 431
static const iostate goodbit = _S_goodbit; 
# 447 "/usr/include/c++/11/bits/ios_base.h" 3
typedef _Ios_Openmode openmode; 
# 450
static const openmode app = _S_app; 
# 453
static const openmode ate = _S_ate; 
# 458
static const openmode binary = _S_bin; 
# 461
static const openmode in = _S_in; 
# 464
static const openmode out = _S_out; 
# 467
static const openmode trunc = _S_trunc; 
# 479 "/usr/include/c++/11/bits/ios_base.h" 3
typedef _Ios_Seekdir seekdir; 
# 482
static const seekdir beg = _S_beg; 
# 485
static const seekdir cur = _S_cur; 
# 488
static const seekdir end = _S_end; 
# 512 "/usr/include/c++/11/bits/ios_base.h" 3
enum event { 
# 514
erase_event, 
# 515
imbue_event, 
# 516
copyfmt_event
# 517
}; 
# 529 "/usr/include/c++/11/bits/ios_base.h" 3
typedef void (*event_callback)(event __e, ios_base & __b, int __i); 
# 542 "/usr/include/c++/11/bits/ios_base.h" 3
void register_callback(event_callback __fn, int __index); 
# 545
protected: streamsize _M_precision; 
# 546
streamsize _M_width; 
# 547
fmtflags _M_flags; 
# 548
iostate _M_exception; 
# 549
iostate _M_streambuf_state; 
# 553
struct _Callback_list { 
# 556
_Callback_list *_M_next; 
# 557
event_callback _M_fn; 
# 558
int _M_index; 
# 559
_Atomic_word _M_refcount; 
# 561
_Callback_list(event_callback __fn, int __index, _Callback_list *
# 562
__cb) : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) 
# 563
{ } 
# 566
void _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&(_M_refcount), 1); } 
# 570
int _M_remove_reference() 
# 571
{ 
# 573
; 
# 574
int __res = __gnu_cxx::__exchange_and_add_dispatch(&(_M_refcount), -1); 
# 575
if (__res == 0) 
# 576
{ 
# 577
; 
# 578
}  
# 579
return __res; 
# 580
} 
# 581
}; 
# 583
_Callback_list *_M_callbacks; 
# 586
void _M_call_callbacks(event __ev) throw(); 
# 589
void _M_dispose_callbacks() throw(); 
# 592
struct _Words { 
# 594
void *_M_pword; 
# 595
long _M_iword; 
# 596
_Words() : _M_pword((0)), _M_iword((0)) { } 
# 597
}; 
# 600
_Words _M_word_zero; 
# 604
enum { _S_local_word_size = 8}; 
# 605
_Words _M_local_word[_S_local_word_size]; 
# 608
int _M_word_size; 
# 609
_Words *_M_word; 
# 612
_Words &_M_grow_words(int __index, bool __iword); 
# 615
locale _M_ios_locale; 
# 618
void _M_init() throw(); 
# 626
public: class Init { 
# 628
friend class ios_base; 
# 630
public: Init(); 
# 631
~Init(); 
# 634
Init(const Init &) = default;
# 635
Init &operator=(const Init &) = default;
# 639
private: static _Atomic_word _S_refcount; 
# 640
static bool _S_synced_with_stdio; 
# 641
}; 
# 649
fmtflags flags() const 
# 650
{ return _M_flags; } 
# 660 "/usr/include/c++/11/bits/ios_base.h" 3
fmtflags flags(fmtflags __fmtfl) 
# 661
{ 
# 662
fmtflags __old = _M_flags; 
# 663
(_M_flags) = __fmtfl; 
# 664
return __old; 
# 665
} 
# 676 "/usr/include/c++/11/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl) 
# 677
{ 
# 678
fmtflags __old = _M_flags; 
# 679
((_M_flags) |= __fmtfl); 
# 680
return __old; 
# 681
} 
# 693 "/usr/include/c++/11/bits/ios_base.h" 3
fmtflags setf(fmtflags __fmtfl, fmtflags __mask) 
# 694
{ 
# 695
fmtflags __old = _M_flags; 
# 696
((_M_flags) &= ((~__mask))); 
# 697
((_M_flags) |= ((__fmtfl & __mask))); 
# 698
return __old; 
# 699
} 
# 708
void unsetf(fmtflags __mask) 
# 709
{ ((_M_flags) &= ((~__mask))); } 
# 719 "/usr/include/c++/11/bits/ios_base.h" 3
streamsize precision() const 
# 720
{ return _M_precision; } 
# 728
streamsize precision(streamsize __prec) 
# 729
{ 
# 730
streamsize __old = _M_precision; 
# 731
(_M_precision) = __prec; 
# 732
return __old; 
# 733
} 
# 742
streamsize width() const 
# 743
{ return _M_width; } 
# 751
streamsize width(streamsize __wide) 
# 752
{ 
# 753
streamsize __old = _M_width; 
# 754
(_M_width) = __wide; 
# 755
return __old; 
# 756
} 
# 770 "/usr/include/c++/11/bits/ios_base.h" 3
static bool sync_with_stdio(bool __sync = true); 
# 782 "/usr/include/c++/11/bits/ios_base.h" 3
locale imbue(const locale & __loc) throw(); 
# 793 "/usr/include/c++/11/bits/ios_base.h" 3
locale getloc() const 
# 794
{ return _M_ios_locale; } 
# 804 "/usr/include/c++/11/bits/ios_base.h" 3
const locale &_M_getloc() const 
# 805
{ return _M_ios_locale; } 
# 823 "/usr/include/c++/11/bits/ios_base.h" 3
static int xalloc() throw(); 
# 839 "/usr/include/c++/11/bits/ios_base.h" 3
long &iword(int __ix) 
# 840
{ 
# 841
_Words &__word = (((unsigned)__ix) < ((unsigned)(_M_word_size))) ? (_M_word)[__ix] : this->_M_grow_words(__ix, true); 
# 843
return __word._M_iword; 
# 844
} 
# 860 "/usr/include/c++/11/bits/ios_base.h" 3
void *&pword(int __ix) 
# 861
{ 
# 862
_Words &__word = (((unsigned)__ix) < ((unsigned)(_M_word_size))) ? (_M_word)[__ix] : this->_M_grow_words(__ix, false); 
# 864
return __word._M_pword; 
# 865
} 
# 876 "/usr/include/c++/11/bits/ios_base.h" 3
virtual ~ios_base(); 
# 879
protected: ios_base() throw(); 
# 891 "/usr/include/c++/11/bits/ios_base.h" 3
public: ios_base(const ios_base &) = delete;
# 894
ios_base &operator=(const ios_base &) = delete;
# 898
protected: void _M_move(ios_base &) noexcept; 
# 901
void _M_swap(ios_base & __rhs) noexcept; 
# 903
}; 
# 908
inline ios_base &boolalpha(ios_base &__base) 
# 909
{ 
# 910
__base.setf(ios_base::boolalpha); 
# 911
return __base; 
# 912
} 
# 916
inline ios_base &noboolalpha(ios_base &__base) 
# 917
{ 
# 918
__base.unsetf(ios_base::boolalpha); 
# 919
return __base; 
# 920
} 
# 924
inline ios_base &showbase(ios_base &__base) 
# 925
{ 
# 926
__base.setf(ios_base::showbase); 
# 927
return __base; 
# 928
} 
# 932
inline ios_base &noshowbase(ios_base &__base) 
# 933
{ 
# 934
__base.unsetf(ios_base::showbase); 
# 935
return __base; 
# 936
} 
# 940
inline ios_base &showpoint(ios_base &__base) 
# 941
{ 
# 942
__base.setf(ios_base::showpoint); 
# 943
return __base; 
# 944
} 
# 948
inline ios_base &noshowpoint(ios_base &__base) 
# 949
{ 
# 950
__base.unsetf(ios_base::showpoint); 
# 951
return __base; 
# 952
} 
# 956
inline ios_base &showpos(ios_base &__base) 
# 957
{ 
# 958
__base.setf(ios_base::showpos); 
# 959
return __base; 
# 960
} 
# 964
inline ios_base &noshowpos(ios_base &__base) 
# 965
{ 
# 966
__base.unsetf(ios_base::showpos); 
# 967
return __base; 
# 968
} 
# 972
inline ios_base &skipws(ios_base &__base) 
# 973
{ 
# 974
__base.setf(ios_base::skipws); 
# 975
return __base; 
# 976
} 
# 980
inline ios_base &noskipws(ios_base &__base) 
# 981
{ 
# 982
__base.unsetf(ios_base::skipws); 
# 983
return __base; 
# 984
} 
# 988
inline ios_base &uppercase(ios_base &__base) 
# 989
{ 
# 990
__base.setf(ios_base::uppercase); 
# 991
return __base; 
# 992
} 
# 996
inline ios_base &nouppercase(ios_base &__base) 
# 997
{ 
# 998
__base.unsetf(ios_base::uppercase); 
# 999
return __base; 
# 1000
} 
# 1004
inline ios_base &unitbuf(ios_base &__base) 
# 1005
{ 
# 1006
__base.setf(ios_base::unitbuf); 
# 1007
return __base; 
# 1008
} 
# 1012
inline ios_base &nounitbuf(ios_base &__base) 
# 1013
{ 
# 1014
__base.unsetf(ios_base::unitbuf); 
# 1015
return __base; 
# 1016
} 
# 1021
inline ios_base &internal(ios_base &__base) 
# 1022
{ 
# 1023
__base.setf(ios_base::internal, ios_base::adjustfield); 
# 1024
return __base; 
# 1025
} 
# 1029
inline ios_base &left(ios_base &__base) 
# 1030
{ 
# 1031
__base.setf(ios_base::left, ios_base::adjustfield); 
# 1032
return __base; 
# 1033
} 
# 1037
inline ios_base &right(ios_base &__base) 
# 1038
{ 
# 1039
__base.setf(ios_base::right, ios_base::adjustfield); 
# 1040
return __base; 
# 1041
} 
# 1046
inline ios_base &dec(ios_base &__base) 
# 1047
{ 
# 1048
__base.setf(ios_base::dec, ios_base::basefield); 
# 1049
return __base; 
# 1050
} 
# 1054
inline ios_base &hex(ios_base &__base) 
# 1055
{ 
# 1056
__base.setf(ios_base::hex, ios_base::basefield); 
# 1057
return __base; 
# 1058
} 
# 1062
inline ios_base &oct(ios_base &__base) 
# 1063
{ 
# 1064
__base.setf(ios_base::oct, ios_base::basefield); 
# 1065
return __base; 
# 1066
} 
# 1071
inline ios_base &fixed(ios_base &__base) 
# 1072
{ 
# 1073
__base.setf(ios_base::fixed, ios_base::floatfield); 
# 1074
return __base; 
# 1075
} 
# 1079
inline ios_base &scientific(ios_base &__base) 
# 1080
{ 
# 1081
__base.setf(ios_base::scientific, ios_base::floatfield); 
# 1082
return __base; 
# 1083
} 
# 1091
inline ios_base &hexfloat(ios_base &__base) 
# 1092
{ 
# 1093
__base.setf((ios_base::fixed | ios_base::scientific), ios_base::floatfield); 
# 1094
return __base; 
# 1095
} 
# 1099
inline ios_base &defaultfloat(ios_base &__base) 
# 1100
{ 
# 1101
__base.unsetf(ios_base::floatfield); 
# 1102
return __base; 
# 1103
} 
# 1107
}
# 45 "/usr/include/c++/11/streambuf" 3
namespace std __attribute((__visibility__("default"))) { 
# 51
template< class _CharT, class _Traits> streamsize __copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 121 "/usr/include/c++/11/streambuf" 3
template< class _CharT, class _Traits> 
# 122
class basic_streambuf { 
# 131
public: typedef _CharT char_type; 
# 132
typedef _Traits traits_type; 
# 133
typedef typename _Traits::int_type int_type; 
# 134
typedef typename _Traits::pos_type pos_type; 
# 135
typedef typename _Traits::off_type off_type; 
# 140
typedef basic_streambuf __streambuf_type; 
# 143
friend class basic_ios< char_type, traits_type> ; 
# 144
friend class basic_istream< char_type, traits_type> ; 
# 145
friend class basic_ostream< char_type, traits_type> ; 
# 146
friend class istreambuf_iterator< char_type, traits_type> ; 
# 147
friend class ostreambuf_iterator< char_type, traits_type> ; 
# 150
friend streamsize __copy_streambufs_eof<> (basic_streambuf< _CharT, _Traits>  *, basic_streambuf< _CharT, _Traits>  *, bool &); 
# 152
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 158
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 164
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2>  &, _Distance); 
# 169
friend void __istream_extract(std::istream &, char *, std::streamsize); 
# 171
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &operator>>(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &); 
# 176
template< class _CharT2, class _Traits2, class _Alloc> friend basic_istream< _CharT2, _Traits2>  &getline(std::basic_istream< _CharT2, _Traits2>  &, std::__cxx11::basic_string< _CharT2, _Traits2, _Alloc>  &, _CharT2); 
# 189
protected: char_type *_M_in_beg; 
# 190
char_type *_M_in_cur; 
# 191
char_type *_M_in_end; 
# 192
char_type *_M_out_beg; 
# 193
char_type *_M_out_cur; 
# 194
char_type *_M_out_end; 
# 197
locale _M_buf_locale; 
# 202
public: virtual ~basic_streambuf() 
# 203
{ } 
# 214 "/usr/include/c++/11/streambuf" 3
locale pubimbue(const locale &__loc) 
# 215
{ 
# 216
locale __tmp(getloc()); 
# 217
imbue(__loc); 
# 218
((_M_buf_locale) = __loc); 
# 219
return __tmp; 
# 220
} 
# 231 "/usr/include/c++/11/streambuf" 3
locale getloc() const 
# 232
{ return _M_buf_locale; } 
# 244 "/usr/include/c++/11/streambuf" 3
basic_streambuf *pubsetbuf(char_type *__s, streamsize __n) 
# 245
{ return setbuf(__s, __n); } 
# 256 "/usr/include/c++/11/streambuf" 3
pos_type pubseekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode 
# 257
__mode = (ios_base::in | ios_base::out)) 
# 258
{ return seekoff(__off, __way, __mode); } 
# 268 "/usr/include/c++/11/streambuf" 3
pos_type pubseekpos(pos_type __sp, ios_base::openmode 
# 269
__mode = (ios_base::in | ios_base::out)) 
# 270
{ return seekpos(__sp, __mode); } 
# 276
int pubsync() { return sync(); } 
# 289 "/usr/include/c++/11/streambuf" 3
streamsize in_avail() 
# 290
{ 
# 291
const streamsize __ret = egptr() - gptr(); 
# 292
return (__ret) ? __ret : showmanyc(); 
# 293
} 
# 303 "/usr/include/c++/11/streambuf" 3
int_type snextc() 
# 304
{ 
# 305
int_type __ret = traits_type::eof(); 
# 306
if (__builtin_expect(!traits_type::eq_int_type(sbumpc(), __ret), true)) { 
# 308
__ret = sgetc(); }  
# 309
return __ret; 
# 310
} 
# 321 "/usr/include/c++/11/streambuf" 3
int_type sbumpc() 
# 322
{ 
# 323
int_type __ret; 
# 324
if (__builtin_expect(gptr() < egptr(), true)) 
# 325
{ 
# 326
__ret = traits_type::to_int_type(*gptr()); 
# 327
gbump(1); 
# 328
} else { 
# 330
__ret = uflow(); }  
# 331
return __ret; 
# 332
} 
# 343 "/usr/include/c++/11/streambuf" 3
int_type sgetc() 
# 344
{ 
# 345
int_type __ret; 
# 346
if (__builtin_expect(gptr() < egptr(), true)) { 
# 347
__ret = traits_type::to_int_type(*gptr()); } else { 
# 349
__ret = underflow(); }  
# 350
return __ret; 
# 351
} 
# 362 "/usr/include/c++/11/streambuf" 3
streamsize sgetn(char_type *__s, streamsize __n) 
# 363
{ return xsgetn(__s, __n); } 
# 377 "/usr/include/c++/11/streambuf" 3
int_type sputbackc(char_type __c) 
# 378
{ 
# 379
int_type __ret; 
# 380
const bool __testpos = eback() < gptr(); 
# 381
if (__builtin_expect((!__testpos) || (!traits_type::eq(__c, gptr()[-1])), false)) { 
# 383
__ret = pbackfail(traits_type::to_int_type(__c)); } else 
# 385
{ 
# 386
gbump(-1); 
# 387
__ret = traits_type::to_int_type(*gptr()); 
# 388
}  
# 389
return __ret; 
# 390
} 
# 402 "/usr/include/c++/11/streambuf" 3
int_type sungetc() 
# 403
{ 
# 404
int_type __ret; 
# 405
if (__builtin_expect(eback() < gptr(), true)) 
# 406
{ 
# 407
gbump(-1); 
# 408
__ret = traits_type::to_int_type(*gptr()); 
# 409
} else { 
# 411
__ret = pbackfail(); }  
# 412
return __ret; 
# 413
} 
# 429 "/usr/include/c++/11/streambuf" 3
int_type sputc(char_type __c) 
# 430
{ 
# 431
int_type __ret; 
# 432
if (__builtin_expect(pptr() < epptr(), true)) 
# 433
{ 
# 434
(*pptr()) = __c; 
# 435
pbump(1); 
# 436
__ret = traits_type::to_int_type(__c); 
# 437
} else { 
# 439
__ret = overflow(traits_type::to_int_type(__c)); }  
# 440
return __ret; 
# 441
} 
# 455 "/usr/include/c++/11/streambuf" 3
streamsize sputn(const char_type *__s, streamsize __n) 
# 456
{ return xsputn(__s, __n); } 
# 468 "/usr/include/c++/11/streambuf" 3
protected: basic_streambuf() : _M_in_beg((0)), _M_in_cur((0)), _M_in_end((0)), _M_out_beg((0)), _M_out_cur((0)), _M_out_end((0)), _M_buf_locale(locale()) 
# 472
{ } 
# 487 "/usr/include/c++/11/streambuf" 3
char_type *eback() const { return _M_in_beg; } 
# 490
char_type *gptr() const { return _M_in_cur; } 
# 493
char_type *egptr() const { return _M_in_end; } 
# 503 "/usr/include/c++/11/streambuf" 3
void gbump(int __n) { (_M_in_cur) += __n; } 
# 514 "/usr/include/c++/11/streambuf" 3
void setg(char_type *__gbeg, char_type *__gnext, char_type *__gend) 
# 515
{ 
# 516
(_M_in_beg) = __gbeg; 
# 517
(_M_in_cur) = __gnext; 
# 518
(_M_in_end) = __gend; 
# 519
} 
# 534 "/usr/include/c++/11/streambuf" 3
char_type *pbase() const { return _M_out_beg; } 
# 537
char_type *pptr() const { return _M_out_cur; } 
# 540
char_type *epptr() const { return _M_out_end; } 
# 550 "/usr/include/c++/11/streambuf" 3
void pbump(int __n) { (_M_out_cur) += __n; } 
# 560 "/usr/include/c++/11/streambuf" 3
void setp(char_type *__pbeg, char_type *__pend) 
# 561
{ 
# 562
(_M_out_beg) = ((_M_out_cur) = __pbeg); 
# 563
(_M_out_end) = __pend; 
# 564
} 
# 581 "/usr/include/c++/11/streambuf" 3
virtual void imbue(const locale &__loc __attribute((__unused__))) 
# 582
{ } 
# 596 "/usr/include/c++/11/streambuf" 3
virtual basic_streambuf *setbuf(char_type *, streamsize) 
# 597
{ return this; } 
# 607 "/usr/include/c++/11/streambuf" 3
virtual pos_type seekoff(off_type, ios_base::seekdir, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 609
{ return (pos_type)((off_type)(-1)); } 
# 619 "/usr/include/c++/11/streambuf" 3
virtual pos_type seekpos(pos_type, ios_base::openmode = (ios_base::in | ios_base::out)) 
# 621
{ return (pos_type)((off_type)(-1)); } 
# 632 "/usr/include/c++/11/streambuf" 3
virtual int sync() { return 0; } 
# 654 "/usr/include/c++/11/streambuf" 3
virtual streamsize showmanyc() { return 0; } 
# 670 "/usr/include/c++/11/streambuf" 3
virtual streamsize xsgetn(char_type * __s, streamsize __n); 
# 692 "/usr/include/c++/11/streambuf" 3
virtual int_type underflow() 
# 693
{ return traits_type::eof(); } 
# 705 "/usr/include/c++/11/streambuf" 3
virtual int_type uflow() 
# 706
{ 
# 707
int_type __ret = traits_type::eof(); 
# 708
const bool __testeof = traits_type::eq_int_type(underflow(), __ret); 
# 710
if (!__testeof) 
# 711
{ 
# 712
__ret = traits_type::to_int_type(*gptr()); 
# 713
gbump(1); 
# 714
}  
# 715
return __ret; 
# 716
} 
# 729 "/usr/include/c++/11/streambuf" 3
virtual int_type pbackfail(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 730
{ return traits_type::eof(); } 
# 747 "/usr/include/c++/11/streambuf" 3
virtual streamsize xsputn(const char_type * __s, streamsize __n); 
# 773 "/usr/include/c++/11/streambuf" 3
virtual int_type overflow(int_type __c __attribute((__unused__)) = traits_type::eof()) 
# 774
{ return traits_type::eof(); } 
# 800 "/usr/include/c++/11/streambuf" 3
void __safe_gbump(streamsize __n) { (_M_in_cur) += __n; } 
# 803
void __safe_pbump(streamsize __n) { (_M_out_cur) += __n; } 
# 810
basic_streambuf(const basic_streambuf &); 
# 813
basic_streambuf &operator=(const basic_streambuf &); 
# 817
void swap(basic_streambuf &__sb) 
# 818
{ 
# 819
std::swap(_M_in_beg, __sb._M_in_beg); 
# 820
std::swap(_M_in_cur, __sb._M_in_cur); 
# 821
std::swap(_M_in_end, __sb._M_in_end); 
# 822
std::swap(_M_out_beg, __sb._M_out_beg); 
# 823
std::swap(_M_out_cur, __sb._M_out_cur); 
# 824
std::swap(_M_out_end, __sb._M_out_end); 
# 825
std::swap(_M_buf_locale, __sb._M_buf_locale); 
# 826
} 
# 828
}; 
# 831
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > ::
    basic_streambuf ( const basic_streambuf & ) = default;
# 835
template < typename _CharT, typename _Traits >
    std :: basic_streambuf < _CharT, _Traits > &
    std :: basic_streambuf < _CharT, _Traits > ::
    operator = ( const basic_streambuf & ) = default;
# 844
template<> streamsize __copy_streambufs_eof(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout, bool & __ineof); 
# 849
template<> streamsize __copy_streambufs_eof(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout, bool & __ineof); 
# 856
}
# 39 "/usr/include/c++/11/bits/streambuf.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
template< class _CharT, class _Traits> streamsize 
# 46
basic_streambuf< _CharT, _Traits> ::xsgetn(char_type *__s, streamsize __n) 
# 47
{ 
# 48
streamsize __ret = (0); 
# 49
while (__ret < __n) 
# 50
{ 
# 51
const streamsize __buf_len = egptr() - gptr(); 
# 52
if (__buf_len) 
# 53
{ 
# 54
const streamsize __remaining = __n - __ret; 
# 55
const streamsize __len = std::min(__buf_len, __remaining); 
# 56
traits_type::copy(__s, gptr(), __len); 
# 57
__ret += __len; 
# 58
__s += __len; 
# 59
__safe_gbump(__len); 
# 60
}  
# 62
if (__ret < __n) 
# 63
{ 
# 64
const int_type __c = uflow(); 
# 65
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 66
{ 
# 67
traits_type::assign(*(__s++), traits_type::to_char_type(__c)); 
# 68
++__ret; 
# 69
} else { 
# 71
break; }  
# 72
}  
# 73
}  
# 74
return __ret; 
# 75
} 
# 77
template< class _CharT, class _Traits> streamsize 
# 80
basic_streambuf< _CharT, _Traits> ::xsputn(const char_type *__s, streamsize __n) 
# 81
{ 
# 82
streamsize __ret = (0); 
# 83
while (__ret < __n) 
# 84
{ 
# 85
const streamsize __buf_len = epptr() - pptr(); 
# 86
if (__buf_len) 
# 87
{ 
# 88
const streamsize __remaining = __n - __ret; 
# 89
const streamsize __len = std::min(__buf_len, __remaining); 
# 90
traits_type::copy(pptr(), __s, __len); 
# 91
__ret += __len; 
# 92
__s += __len; 
# 93
__safe_pbump(__len); 
# 94
}  
# 96
if (__ret < __n) 
# 97
{ 
# 98
int_type __c = overflow(traits_type::to_int_type(*__s)); 
# 99
if (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 100
{ 
# 101
++__ret; 
# 102
++__s; 
# 103
} else { 
# 105
break; }  
# 106
}  
# 107
}  
# 108
return __ret; 
# 109
} 
# 114
template< class _CharT, class _Traits> streamsize 
# 116
__copy_streambufs_eof(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 117
__sbout, bool &
# 118
__ineof) 
# 119
{ 
# 120
streamsize __ret = (0); 
# 121
__ineof = true; 
# 122
typename _Traits::int_type __c = __sbin->sgetc(); 
# 123
while (!_Traits::eq_int_type(__c, _Traits::eof())) 
# 124
{ 
# 125
__c = __sbout->sputc(_Traits::to_char_type(__c)); 
# 126
if (_Traits::eq_int_type(__c, _Traits::eof())) 
# 127
{ 
# 128
__ineof = false; 
# 129
break; 
# 130
}  
# 131
++__ret; 
# 132
__c = __sbin->snextc(); 
# 133
}  
# 134
return __ret; 
# 135
} 
# 137
template< class _CharT, class _Traits> inline streamsize 
# 139
__copy_streambufs(basic_streambuf< _CharT, _Traits>  *__sbin, basic_streambuf< _CharT, _Traits>  *
# 140
__sbout) 
# 141
{ 
# 142
bool __ineof; 
# 143
return __copy_streambufs_eof(__sbin, __sbout, __ineof); 
# 144
} 
# 149
extern template class basic_streambuf< char> ;
# 150
extern template streamsize __copy_streambufs(basic_streambuf< char>  * __sbin, basic_streambuf< char>  * __sbout);
# 154
extern template streamsize __copy_streambufs_eof<> (basic_streambuf< char>  *, basic_streambuf< char>  *, bool &);
# 160
extern template class basic_streambuf< wchar_t> ;
# 161
extern template streamsize __copy_streambufs(basic_streambuf< wchar_t>  * __sbin, basic_streambuf< wchar_t>  * __sbout);
# 165
extern template streamsize __copy_streambufs_eof<> (basic_streambuf< wchar_t>  *, basic_streambuf< wchar_t>  *, bool &);
# 173
}
# 38 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
typedef unsigned long wctype_t; 
# 57 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
enum { 
# 58
__ISwupper, 
# 59
__ISwlower, 
# 60
__ISwalpha, 
# 61
__ISwdigit, 
# 62
__ISwxdigit, 
# 63
__ISwspace, 
# 64
__ISwprint, 
# 65
__ISwgraph, 
# 66
__ISwblank, 
# 67
__ISwcntrl, 
# 68
__ISwpunct, 
# 69
__ISwalnum, 
# 71
_ISwupper = ((__ISwupper < 8) ? (int)((1UL << __ISwupper) << 24) : ((__ISwupper < 16) ? (int)((1UL << __ISwupper) << 8) : ((__ISwupper < 24) ? (int)((1UL << __ISwupper) >> 8) : ((int)((1UL << __ISwupper) >> 24))))), 
# 72
_ISwlower = ((__ISwlower < 8) ? (int)((1UL << __ISwlower) << 24) : ((__ISwlower < 16) ? (int)((1UL << __ISwlower) << 8) : ((__ISwlower < 24) ? (int)((1UL << __ISwlower) >> 8) : ((int)((1UL << __ISwlower) >> 24))))), 
# 73
_ISwalpha = ((__ISwalpha < 8) ? (int)((1UL << __ISwalpha) << 24) : ((__ISwalpha < 16) ? (int)((1UL << __ISwalpha) << 8) : ((__ISwalpha < 24) ? (int)((1UL << __ISwalpha) >> 8) : ((int)((1UL << __ISwalpha) >> 24))))), 
# 74
_ISwdigit = ((__ISwdigit < 8) ? (int)((1UL << __ISwdigit) << 24) : ((__ISwdigit < 16) ? (int)((1UL << __ISwdigit) << 8) : ((__ISwdigit < 24) ? (int)((1UL << __ISwdigit) >> 8) : ((int)((1UL << __ISwdigit) >> 24))))), 
# 75
_ISwxdigit = ((__ISwxdigit < 8) ? (int)((1UL << __ISwxdigit) << 24) : ((__ISwxdigit < 16) ? (int)((1UL << __ISwxdigit) << 8) : ((__ISwxdigit < 24) ? (int)((1UL << __ISwxdigit) >> 8) : ((int)((1UL << __ISwxdigit) >> 24))))), 
# 76
_ISwspace = ((__ISwspace < 8) ? (int)((1UL << __ISwspace) << 24) : ((__ISwspace < 16) ? (int)((1UL << __ISwspace) << 8) : ((__ISwspace < 24) ? (int)((1UL << __ISwspace) >> 8) : ((int)((1UL << __ISwspace) >> 24))))), 
# 77
_ISwprint = ((__ISwprint < 8) ? (int)((1UL << __ISwprint) << 24) : ((__ISwprint < 16) ? (int)((1UL << __ISwprint) << 8) : ((__ISwprint < 24) ? (int)((1UL << __ISwprint) >> 8) : ((int)((1UL << __ISwprint) >> 24))))), 
# 78
_ISwgraph = ((__ISwgraph < 8) ? (int)((1UL << __ISwgraph) << 24) : ((__ISwgraph < 16) ? (int)((1UL << __ISwgraph) << 8) : ((__ISwgraph < 24) ? (int)((1UL << __ISwgraph) >> 8) : ((int)((1UL << __ISwgraph) >> 24))))), 
# 79
_ISwblank = ((__ISwblank < 8) ? (int)((1UL << __ISwblank) << 24) : ((__ISwblank < 16) ? (int)((1UL << __ISwblank) << 8) : ((__ISwblank < 24) ? (int)((1UL << __ISwblank) >> 8) : ((int)((1UL << __ISwblank) >> 24))))), 
# 80
_ISwcntrl = ((__ISwcntrl < 8) ? (int)((1UL << __ISwcntrl) << 24) : ((__ISwcntrl < 16) ? (int)((1UL << __ISwcntrl) << 8) : ((__ISwcntrl < 24) ? (int)((1UL << __ISwcntrl) >> 8) : ((int)((1UL << __ISwcntrl) >> 24))))), 
# 81
_ISwpunct = ((__ISwpunct < 8) ? (int)((1UL << __ISwpunct) << 24) : ((__ISwpunct < 16) ? (int)((1UL << __ISwpunct) << 8) : ((__ISwpunct < 24) ? (int)((1UL << __ISwpunct) >> 8) : ((int)((1UL << __ISwpunct) >> 24))))), 
# 82
_ISwalnum = ((__ISwalnum < 8) ? (int)((1UL << __ISwalnum) << 24) : ((__ISwalnum < 16) ? (int)((1UL << __ISwalnum) << 8) : ((__ISwalnum < 24) ? (int)((1UL << __ISwalnum) >> 8) : ((int)((1UL << __ISwalnum) >> 24)))))
# 83
}; 
# 87
extern "C" {
# 95
extern int iswalnum(wint_t __wc) noexcept(true); 
# 101
extern int iswalpha(wint_t __wc) noexcept(true); 
# 104
extern int iswcntrl(wint_t __wc) noexcept(true); 
# 108
extern int iswdigit(wint_t __wc) noexcept(true); 
# 112
extern int iswgraph(wint_t __wc) noexcept(true); 
# 117
extern int iswlower(wint_t __wc) noexcept(true); 
# 120
extern int iswprint(wint_t __wc) noexcept(true); 
# 125
extern int iswpunct(wint_t __wc) noexcept(true); 
# 130
extern int iswspace(wint_t __wc) noexcept(true); 
# 135
extern int iswupper(wint_t __wc) noexcept(true); 
# 140
extern int iswxdigit(wint_t __wc) noexcept(true); 
# 146
extern int iswblank(wint_t __wc) noexcept(true); 
# 155 "/usr/include/x86_64-linux-gnu/bits/wctype-wchar.h" 3
extern wctype_t wctype(const char * __property) noexcept(true); 
# 159
extern int iswctype(wint_t __wc, wctype_t __desc) noexcept(true); 
# 166
extern wint_t towlower(wint_t __wc) noexcept(true); 
# 169
extern wint_t towupper(wint_t __wc) noexcept(true); 
# 171
}
# 44 "/usr/include/wctype.h" 3
extern "C" {
# 48
typedef const __int32_t *wctrans_t; 
# 52
extern wctrans_t wctrans(const char * __property) noexcept(true); 
# 55
extern wint_t towctrans(wint_t __wc, wctrans_t __desc) noexcept(true); 
# 63
extern int iswalnum_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 69
extern int iswalpha_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 72
extern int iswcntrl_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 76
extern int iswdigit_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 80
extern int iswgraph_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 85
extern int iswlower_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 88
extern int iswprint_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 93
extern int iswpunct_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 98
extern int iswspace_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 103
extern int iswupper_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 108
extern int iswxdigit_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 113
extern int iswblank_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 117
extern wctype_t wctype_l(const char * __property, locale_t __locale) noexcept(true); 
# 122
extern int iswctype_l(wint_t __wc, wctype_t __desc, locale_t __locale) noexcept(true); 
# 130
extern wint_t towlower_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 133
extern wint_t towupper_l(wint_t __wc, locale_t __locale) noexcept(true); 
# 137
extern wctrans_t wctrans_l(const char * __property, locale_t __locale) noexcept(true); 
# 141
extern wint_t towctrans_l(wint_t __wc, wctrans_t __desc, locale_t __locale) noexcept(true); 
# 146
}
# 80 "/usr/include/c++/11/cwctype" 3
namespace std { 
# 82
using ::wctrans_t;
# 83
using ::wctype_t;
# 86
using ::iswalnum;
# 87
using ::iswalpha;
# 89
using ::iswblank;
# 91
using ::iswcntrl;
# 92
using ::iswctype;
# 93
using ::iswdigit;
# 94
using ::iswgraph;
# 95
using ::iswlower;
# 96
using ::iswprint;
# 97
using ::iswpunct;
# 98
using ::iswspace;
# 99
using ::iswupper;
# 100
using ::iswxdigit;
# 101
using ::towctrans;
# 102
using ::towlower;
# 103
using ::towupper;
# 104
using ::wctrans;
# 105
using ::wctype;
# 106
}
# 36 "/usr/include/x86_64-linux-gnu/c++/11/bits/ctype_base.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
struct ctype_base { 
# 44
typedef const int *__to_type; 
# 48
typedef unsigned short mask; 
# 49
static const mask upper = (_ISupper); 
# 50
static const mask lower = (_ISlower); 
# 51
static const mask alpha = (_ISalpha); 
# 52
static const mask digit = (_ISdigit); 
# 53
static const mask xdigit = (_ISxdigit); 
# 54
static const mask space = (_ISspace); 
# 55
static const mask print = (_ISprint); 
# 56
static const mask graph = (((_ISalpha) | (_ISdigit)) | (_ISpunct)); 
# 57
static const mask cntrl = (_IScntrl); 
# 58
static const mask punct = (_ISpunct); 
# 59
static const mask alnum = ((_ISalpha) | (_ISdigit)); 
# 61
static const mask blank = (_ISblank); 
# 63
}; 
# 66
}
# 38 "/usr/include/c++/11/bits/streambuf_iterator.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 49 "/usr/include/c++/11/bits/streambuf_iterator.h" 3
template< class _CharT, class _Traits> 
# 50
class istreambuf_iterator : public iterator< input_iterator_tag, _CharT, typename _Traits::off_type, _CharT *, _CharT>  { 
# 66 "/usr/include/c++/11/bits/streambuf_iterator.h" 3
public: typedef _CharT char_type; 
# 67
typedef _Traits traits_type; 
# 68
typedef typename _Traits::int_type int_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 70
typedef basic_istream< _CharT, _Traits>  istream_type; 
# 73
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 79
template< bool _IsMove, class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_move_a2(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , _CharT2 *); 
# 85
template< class _CharT2, class _Size> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, _CharT2 *> ::__type __copy_n_a(std::istreambuf_iterator< _CharT2> , _Size, _CharT2 *, bool); 
# 90
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, istreambuf_iterator< _CharT2> > ::__type find(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , const _CharT2 &); 
# 96
template< class _CharT2, class _Distance> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, void> ::__type advance(std::istreambuf_iterator< _CharT2>  &, _Distance); 
# 109
private: mutable streambuf_type *_M_sbuf; 
# 110
int_type _M_c; 
# 114
public: constexpr istreambuf_iterator() noexcept : _M_sbuf((0)), _M_c(traits_type::eof()) 
# 115
{ } 
# 123
istreambuf_iterator(const istreambuf_iterator &) noexcept = default;
# 125
~istreambuf_iterator() = default;
# 129
istreambuf_iterator(istream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) 
# 130
{ } 
# 133
istreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_c(traits_type::eof()) 
# 134
{ } 
# 138
istreambuf_iterator &operator=(const istreambuf_iterator &) noexcept = default;
# 145
char_type operator*() const 
# 146
{ 
# 147
int_type __c = _M_get(); 
# 156 "/usr/include/c++/11/bits/streambuf_iterator.h" 3
return traits_type::to_char_type(__c); 
# 157
} 
# 161
istreambuf_iterator &operator++() 
# 162
{ 
# 166
; 
# 168
(_M_sbuf)->sbumpc(); 
# 169
(_M_c) = traits_type::eof(); 
# 170
return *this; 
# 171
} 
# 175
istreambuf_iterator operator++(int) 
# 176
{ 
# 180
; 
# 182
istreambuf_iterator __old = *this; 
# 183
(__old._M_c) = (_M_sbuf)->sbumpc(); 
# 184
(_M_c) = traits_type::eof(); 
# 185
return __old; 
# 186
} 
# 193
bool equal(const istreambuf_iterator &__b) const 
# 194
{ return _M_at_eof() == __b._M_at_eof(); } 
# 198
private: int_type _M_get() const 
# 199
{ 
# 200
int_type __ret = _M_c; 
# 201
if ((_M_sbuf) && (_S_is_eof)(__ret) && (_S_is_eof)(__ret = (_M_sbuf)->sgetc())) { 
# 202
(_M_sbuf) = 0; }  
# 203
return __ret; 
# 204
} 
# 207
bool _M_at_eof() const 
# 208
{ return (_S_is_eof)(_M_get()); } 
# 211
static bool _S_is_eof(int_type __c) 
# 212
{ 
# 213
const int_type __eof = traits_type::eof(); 
# 214
return traits_type::eq_int_type(__c, __eof); 
# 215
} 
# 222
}; 
# 224
template< class _CharT, class _Traits> inline bool 
# 226
operator==(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 227
__b) 
# 228
{ return __a.equal(__b); } 
# 230
template< class _CharT, class _Traits> inline bool 
# 232
operator!=(const istreambuf_iterator< _CharT, _Traits>  &__a, const istreambuf_iterator< _CharT, _Traits>  &
# 233
__b) 
# 234
{ return !__a.equal(__b); } 
# 237
template< class _CharT, class _Traits> 
# 238
class ostreambuf_iterator : public iterator< output_iterator_tag, void, void, void, void>  { 
# 248
public: typedef _CharT char_type; 
# 249
typedef _Traits traits_type; 
# 250
typedef basic_streambuf< _CharT, _Traits>  streambuf_type; 
# 251
typedef basic_ostream< _CharT, _Traits>  ostream_type; 
# 254
template< class _CharT2> friend typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, ostreambuf_iterator< _CharT2> > ::__type copy(std::istreambuf_iterator< _CharT2> , std::istreambuf_iterator< _CharT2> , std::ostreambuf_iterator< _CharT2> ); 
# 261
private: streambuf_type *_M_sbuf; 
# 262
bool _M_failed; 
# 273 "/usr/include/c++/11/bits/streambuf_iterator.h" 3
public: ostreambuf_iterator(ostream_type &__s) noexcept : _M_sbuf(__s.rdbuf()), _M_failed((!(_M_sbuf))) 
# 274
{ } 
# 277
ostreambuf_iterator(streambuf_type *__s) noexcept : _M_sbuf(__s), _M_failed((!(_M_sbuf))) 
# 278
{ } 
# 282
ostreambuf_iterator &operator=(_CharT __c) 
# 283
{ 
# 284
if ((!(_M_failed)) && _Traits::eq_int_type((_M_sbuf)->sputc(__c), _Traits::eof())) { 
# 286
(_M_failed) = true; }  
# 287
return *this; 
# 288
} 
# 292
ostreambuf_iterator &operator*() 
# 293
{ return *this; } 
# 297
ostreambuf_iterator &operator++(int) 
# 298
{ return *this; } 
# 302
ostreambuf_iterator &operator++() 
# 303
{ return *this; } 
# 307
bool failed() const noexcept 
# 308
{ return _M_failed; } 
# 311
ostreambuf_iterator &_M_put(const _CharT *__ws, streamsize __len) 
# 312
{ 
# 313
if ((__builtin_expect(!(_M_failed), true)) && (__builtin_expect((this->_M_sbuf)->sputn(__ws, __len) != __len, false))) { 
# 316
(_M_failed) = true; }  
# 317
return *this; 
# 318
} 
# 319
}; 
# 322
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 325
copy(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 326
__last, ostreambuf_iterator< _CharT>  
# 327
__result) 
# 328
{ 
# 329
if ((__first._M_sbuf) && (!(__last._M_sbuf)) && (!(__result._M_failed))) 
# 330
{ 
# 331
bool __ineof; 
# 332
__copy_streambufs_eof((__first._M_sbuf), (__result._M_sbuf), __ineof); 
# 333
if (!__ineof) { 
# 334
(__result._M_failed) = true; }  
# 335
}  
# 336
return __result; 
# 337
} 
# 339
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 342
__copy_move_a2(_CharT *__first, _CharT *__last, ostreambuf_iterator< _CharT>  
# 343
__result) 
# 344
{ 
# 345
const streamsize __num = __last - __first; 
# 346
if (__num > (0)) { 
# 347
__result._M_put(__first, __num); }  
# 348
return __result; 
# 349
} 
# 351
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, ostreambuf_iterator< _CharT> > ::__type 
# 354
__copy_move_a2(const _CharT *__first, const _CharT *__last, ostreambuf_iterator< _CharT>  
# 355
__result) 
# 356
{ 
# 357
const streamsize __num = __last - __first; 
# 358
if (__num > (0)) { 
# 359
__result._M_put(__first, __num); }  
# 360
return __result; 
# 361
} 
# 363
template< bool _IsMove, class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 366
__copy_move_a2(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 367
__last, _CharT *__result) 
# 368
{ 
# 369
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 370
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 371
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 372
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 374
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 375
{ 
# 376
streambuf_type *__sb = ((__first._M_sbuf)); 
# 377
int_type __c = __sb->sgetc(); 
# 378
while (!traits_type::eq_int_type(__c, traits_type::eof())) 
# 379
{ 
# 380
const streamsize __n = __sb->egptr() - __sb->gptr(); 
# 381
if (__n > (1)) 
# 382
{ 
# 383
traits_type::copy(__result, __sb->gptr(), __n); 
# 384
__sb->__safe_gbump(__n); 
# 385
__result += __n; 
# 386
__c = __sb->underflow(); 
# 387
} else 
# 389
{ 
# 390
(*(__result++)) = traits_type::to_char_type(__c); 
# 391
__c = __sb->snextc(); 
# 392
}  
# 393
}  
# 394
}  
# 395
return __result; 
# 396
} 
# 398
template< class _CharT, class _Size> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, _CharT *> ::__type 
# 401
__copy_n_a(istreambuf_iterator< _CharT>  __it, _Size __n, _CharT *__result, bool 
# 402
__strict __attribute((__unused__))) 
# 403
{ 
# 404
if (__n == 0) { 
# 405
return __result; }  
# 409
; 
# 410
_CharT *__beg = __result; 
# 411
__result += (__it._M_sbuf)->sgetn(__beg, __n); 
# 414
; 
# 415
return __result; 
# 416
} 
# 418
template< class _CharT> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, istreambuf_iterator< _CharT> > ::__type 
# 421
find(istreambuf_iterator< _CharT>  __first, istreambuf_iterator< _CharT>  
# 422
__last, const _CharT &__val) 
# 423
{ 
# 424
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 425
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 426
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 427
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 428
const int_type __eof = traits_type::eof(); 
# 430
if ((__first._M_sbuf) && (!(__last._M_sbuf))) 
# 431
{ 
# 432
const int_type __ival = traits_type::to_int_type(__val); 
# 433
streambuf_type *__sb = ((__first._M_sbuf)); 
# 434
int_type __c = __sb->sgetc(); 
# 435
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __ival))) 
# 437
{ 
# 438
streamsize __n = __sb->egptr() - __sb->gptr(); 
# 439
if (__n > (1)) 
# 440
{ 
# 441
const _CharT *__p = traits_type::find(__sb->gptr(), __n, __val); 
# 443
if (__p) { 
# 444
__n = (__p - __sb->gptr()); }  
# 445
__sb->__safe_gbump(__n); 
# 446
__c = __sb->sgetc(); 
# 447
} else { 
# 449
__c = __sb->snextc(); }  
# 450
}  
# 452
(__first._M_c) = __eof; 
# 453
}  
# 455
return __first; 
# 456
} 
# 458
template< class _CharT, class _Distance> typename __gnu_cxx::__enable_if< __is_char< _CharT> ::__value, void> ::__type 
# 461
advance(istreambuf_iterator< _CharT>  &__i, _Distance __n) 
# 462
{ 
# 463
if (__n == 0) { 
# 464
return; }  
# 466
do { if (__builtin_is_constant_evaluated() && (!((bool)(__n > 0)))) { __builtin_unreachable(); }  } while (false); 
# 469
; 
# 471
typedef istreambuf_iterator< _CharT>  __is_iterator_type; 
# 472
typedef typename istreambuf_iterator< _CharT> ::traits_type traits_type; 
# 473
typedef typename istreambuf_iterator< _CharT> ::streambuf_type streambuf_type; 
# 474
typedef typename istreambuf_iterator< _CharT> ::traits_type::int_type int_type; 
# 475
const int_type __eof = traits_type::eof(); 
# 477
streambuf_type *__sb = ((__i._M_sbuf)); 
# 478
while (__n > 0) 
# 479
{ 
# 480
streamsize __size = __sb->egptr() - __sb->gptr(); 
# 481
if (__size > __n) 
# 482
{ 
# 483
__sb->__safe_gbump(__n); 
# 484
break; 
# 485
}  
# 487
__sb->__safe_gbump(__size); 
# 488
__n -= __size; 
# 489
if (traits_type::eq_int_type(__sb->underflow(), __eof)) 
# 490
{ 
# 493
; 
# 494
break; 
# 495
}  
# 496
}  
# 498
(__i._M_c) = __eof; 
# 499
} 
# 504
}
# 50 "/usr/include/c++/11/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 74 "/usr/include/c++/11/bits/locale_facets.h" 3
template< class _Tp> void __convert_to_v(const char *, _Tp &, ios_base::iostate &, const __c_locale &) throw(); 
# 82
template<> void __convert_to_v(const char *, float &, ios_base::iostate &, const __c_locale &) throw(); 
# 87
template<> void __convert_to_v(const char *, double &, ios_base::iostate &, const __c_locale &) throw(); 
# 92
template<> void __convert_to_v(const char *, long double &, ios_base::iostate &, const __c_locale &) throw(); 
# 97
template< class _CharT, class _Traits> 
# 98
struct __pad { 
# 101
static void _S_pad(ios_base & __io, _CharT __fill, _CharT * __news, const _CharT * __olds, streamsize __newlen, streamsize __oldlen); 
# 103
}; 
# 110
template< class _CharT> _CharT *__add_grouping(_CharT * __s, _CharT __sep, const char * __gbeg, size_t __gsize, const _CharT * __first, const _CharT * __last); 
# 119
template< class _CharT> inline ostreambuf_iterator< _CharT>  
# 122
__write(ostreambuf_iterator< _CharT>  __s, const _CharT *__ws, int __len) 
# 123
{ 
# 124
__s._M_put(__ws, __len); 
# 125
return __s; 
# 126
} 
# 129
template< class _CharT, class _OutIter> inline _OutIter 
# 132
__write(_OutIter __s, const _CharT *__ws, int __len) 
# 133
{ 
# 134
for (int __j = 0; __j < __len; (__j++), (++__s)) { 
# 135
(*__s) = (__ws[__j]); }  
# 136
return __s; 
# 137
} 
# 152 "/usr/include/c++/11/bits/locale_facets.h" 3
template< class _CharT> 
# 153
class __ctype_abstract_base : public locale::facet, public ctype_base { 
# 158
public: typedef _CharT char_type; 
# 172 "/usr/include/c++/11/bits/locale_facets.h" 3
bool is(mask __m, char_type __c) const 
# 173
{ return this->do_is(__m, __c); } 
# 189 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *is(const char_type *__lo, const char_type *__hi, mask *__vec) const 
# 190
{ return this->do_is(__lo, __hi, __vec); } 
# 205 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *scan_is(mask __m, const char_type *__lo, const char_type *__hi) const 
# 206
{ return do_scan_is(__m, __lo, __hi); } 
# 221 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *scan_not(mask __m, const char_type *__lo, const char_type *__hi) const 
# 222
{ return do_scan_not(__m, __lo, __hi); } 
# 235 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 236
{ return this->do_toupper(__c); } 
# 250 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 251
{ return this->do_toupper(__lo, __hi); } 
# 264 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 265
{ return this->do_tolower(__c); } 
# 279 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 280
{ return this->do_tolower(__lo, __hi); } 
# 296 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 297
{ return this->do_widen(__c); } 
# 315 "/usr/include/c++/11/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 316
{ return this->do_widen(__lo, __hi, __to); } 
# 334 "/usr/include/c++/11/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 335
{ return this->do_narrow(__c, __dfault); } 
# 356 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 357
__dfault, char *__to) const 
# 358
{ return this->do_narrow(__lo, __hi, __dfault, __to); } 
# 362
protected: explicit __ctype_abstract_base(size_t __refs = 0) : locale::facet(__refs) { } 
# 365
virtual ~__ctype_abstract_base() { } 
# 381 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const = 0; 
# 400 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const = 0; 
# 419 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 438 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const = 0; 
# 456 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const = 0; 
# 473 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const = 0; 
# 489 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const = 0; 
# 506 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const = 0; 
# 525 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const = 0; 
# 546 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const = 0; 
# 567 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const = 0; 
# 592 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const = 0; 
# 594
}; 
# 614 "/usr/include/c++/11/bits/locale_facets.h" 3
template< class _CharT> 
# 615
class ctype : public __ctype_abstract_base< _CharT>  { 
# 619
public: typedef _CharT char_type; 
# 620
typedef typename __ctype_abstract_base< _CharT> ::mask mask; 
# 623
static std::locale::id id; 
# 626
explicit ctype(std::size_t __refs = 0) : __ctype_abstract_base< _CharT> (__refs) { } 
# 630
protected: virtual ~ctype(); 
# 633
virtual bool do_is(mask __m, char_type __c) const; 
# 636
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 639
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 642
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 646
virtual char_type do_toupper(char_type __c) const; 
# 649
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 652
virtual char_type do_tolower(char_type __c) const; 
# 655
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 658
virtual char_type do_widen(char __c) const; 
# 661
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __dest) const; 
# 664
virtual char do_narrow(char_type, char __dfault) const; 
# 667
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 669
}; 
# 671
template< class _CharT> locale::id 
# 672
ctype< _CharT> ::id; 
# 684 "/usr/include/c++/11/bits/locale_facets.h" 3
template<> class ctype< char>  : public locale::facet, public ctype_base { 
# 689
public: typedef char char_type; 
# 693
protected: __c_locale _M_c_locale_ctype; 
# 694
bool _M_del; 
# 695
__to_type _M_toupper; 
# 696
__to_type _M_tolower; 
# 697
const mask *_M_table; 
# 698
mutable char _M_widen_ok; 
# 699
mutable char _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 700
mutable char _M_narrow[1 + (static_cast< unsigned char>(-1))]; 
# 701
mutable char _M_narrow_ok; 
# 706
public: static locale::id id; 
# 708
static const size_t table_size = (1 + (static_cast< unsigned char>(-1))); 
# 721 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit ctype(const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 734 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, const mask * __table = 0, bool __del = false, size_t __refs = 0); 
# 747 "/usr/include/c++/11/bits/locale_facets.h" 3
inline bool is(mask __m, char __c) const; 
# 762 "/usr/include/c++/11/bits/locale_facets.h" 3
inline const char *is(const char * __lo, const char * __hi, mask * __vec) const; 
# 776 "/usr/include/c++/11/bits/locale_facets.h" 3
inline const char *scan_is(mask __m, const char * __lo, const char * __hi) const; 
# 790 "/usr/include/c++/11/bits/locale_facets.h" 3
inline const char *scan_not(mask __m, const char * __lo, const char * __hi) const; 
# 805 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type toupper(char_type __c) const 
# 806
{ return this->do_toupper(__c); } 
# 822 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *toupper(char_type *__lo, const char_type *__hi) const 
# 823
{ return this->do_toupper(__lo, __hi); } 
# 838 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type tolower(char_type __c) const 
# 839
{ return this->do_tolower(__c); } 
# 855 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *tolower(char_type *__lo, const char_type *__hi) const 
# 856
{ return this->do_tolower(__lo, __hi); } 
# 875 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type widen(char __c) const 
# 876
{ 
# 877
if (_M_widen_ok) { 
# 878
return (_M_widen)[static_cast< unsigned char>(__c)]; }  
# 879
this->_M_widen_init(); 
# 880
return this->do_widen(__c); 
# 881
} 
# 902 "/usr/include/c++/11/bits/locale_facets.h" 3
const char *widen(const char *__lo, const char *__hi, char_type *__to) const 
# 903
{ 
# 904
if ((_M_widen_ok) == 1) 
# 905
{ 
# 906
if (__builtin_expect(__hi != __lo, true)) { 
# 907
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 908
return __hi; 
# 909
}  
# 910
if (!(_M_widen_ok)) { 
# 911
this->_M_widen_init(); }  
# 912
return this->do_widen(__lo, __hi, __to); 
# 913
} 
# 934 "/usr/include/c++/11/bits/locale_facets.h" 3
char narrow(char_type __c, char __dfault) const 
# 935
{ 
# 936
if ((_M_narrow)[static_cast< unsigned char>(__c)]) { 
# 937
return (_M_narrow)[static_cast< unsigned char>(__c)]; }  
# 938
const char __t = this->do_narrow(__c, __dfault); 
# 939
if (__t != __dfault) { 
# 940
((_M_narrow)[static_cast< unsigned char>(__c)]) = __t; }  
# 941
return __t; 
# 942
} 
# 967 "/usr/include/c++/11/bits/locale_facets.h" 3
const char_type *narrow(const char_type *__lo, const char_type *__hi, char 
# 968
__dfault, char *__to) const 
# 969
{ 
# 970
if (__builtin_expect((_M_narrow_ok) == 1, true)) 
# 971
{ 
# 972
if (__builtin_expect(__hi != __lo, true)) { 
# 973
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 974
return __hi; 
# 975
}  
# 976
if (!(_M_narrow_ok)) { 
# 977
this->_M_narrow_init(); }  
# 978
return this->do_narrow(__lo, __hi, __dfault, __to); 
# 979
} 
# 986
const mask *table() const throw() 
# 987
{ return _M_table; } 
# 991
static const mask *classic_table() throw(); 
# 1001
protected: virtual ~ctype(); 
# 1017 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1034 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1050 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1067 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1087 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const 
# 1088
{ return __c; } 
# 1110 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char *do_widen(const char *__lo, const char *__hi, char_type *__to) const 
# 1111
{ 
# 1112
if (__builtin_expect(__hi != __lo, true)) { 
# 1113
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1114
return __hi; 
# 1115
} 
# 1137 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault __attribute((__unused__))) const 
# 1138
{ return __c; } 
# 1163 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type *__lo, const char_type *__hi, char 
# 1164
__dfault __attribute((__unused__)), char *__to) const 
# 1165
{ 
# 1166
if (__builtin_expect(__hi != __lo, true)) { 
# 1167
__builtin_memcpy(__to, __lo, __hi - __lo); }  
# 1168
return __hi; 
# 1169
} 
# 1172
private: void _M_narrow_init() const; 
# 1173
void _M_widen_init() const; 
# 1174
}; 
# 1189 "/usr/include/c++/11/bits/locale_facets.h" 3
template<> class ctype< wchar_t>  : public __ctype_abstract_base< wchar_t>  { 
# 1194
public: typedef wchar_t char_type; 
# 1195
typedef wctype_t __wmask_type; 
# 1198
protected: __c_locale _M_c_locale_ctype; 
# 1201
bool _M_narrow_ok; 
# 1202
char _M_narrow[128]; 
# 1203
wint_t _M_widen[1 + (static_cast< unsigned char>(-1))]; 
# 1206
mask _M_bit[16]; 
# 1207
__wmask_type _M_wmask[16]; 
# 1212
public: static locale::id id; 
# 1222 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit ctype(size_t __refs = 0); 
# 1233 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit ctype(__c_locale __cloc, size_t __refs = 0); 
# 1237
protected: __wmask_type _M_convert_to_wmask(const mask __m) const throw(); 
# 1241
virtual ~ctype(); 
# 1257 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual bool do_is(mask __m, char_type __c) const; 
# 1276 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_is(const char_type * __lo, const char_type * __hi, mask * __vec) const; 
# 1294 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_scan_is(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1312 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_scan_not(mask __m, const char_type * __lo, const char_type * __hi) const; 
# 1329 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_toupper(char_type __c) const; 
# 1346 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_toupper(char_type * __lo, const char_type * __hi) const; 
# 1362 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_tolower(char_type __c) const; 
# 1379 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_tolower(char_type * __lo, const char_type * __hi) const; 
# 1399 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_widen(char __c) const; 
# 1421 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char *do_widen(const char * __lo, const char * __hi, char_type * __to) const; 
# 1444 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char do_narrow(char_type __c, char __dfault) const; 
# 1470 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual const char_type *do_narrow(const char_type * __lo, const char_type * __hi, char __dfault, char * __to) const; 
# 1475
void _M_initialize_ctype() throw(); 
# 1476
}; 
# 1480
template< class _CharT> 
# 1481
class ctype_byname : public ctype< _CharT>  { 
# 1484
public: typedef typename ctype< _CharT> ::mask mask; 
# 1487
explicit ctype_byname(const char * __s, std::size_t __refs = 0); 
# 1491
explicit ctype_byname(const std::string &__s, std::size_t __refs = 0) : ctype_byname(__s.c_str(), __refs) 
# 1492
{ } 
# 1497
protected: virtual ~ctype_byname() { } 
# 1498
}; 
# 1502
template<> class ctype_byname< char>  : public ctype< char>  { 
# 1506
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1510
explicit ctype_byname(const string & __s, size_t __refs = 0); 
# 1515
protected: virtual ~ctype_byname(); 
# 1516
}; 
# 1520
template<> class ctype_byname< wchar_t>  : public ctype< wchar_t>  { 
# 1524
public: explicit ctype_byname(const char * __s, size_t __refs = 0); 
# 1528
explicit ctype_byname(const string & __s, size_t __refs = 0); 
# 1533
protected: virtual ~ctype_byname(); 
# 1534
}; 
# 1538
}
# 37 "/usr/include/x86_64-linux-gnu/c++/11/bits/ctype_inline.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 43
inline bool ctype< char> ::is(mask __m, char __c) const 
# 44
{ return ((_M_table)[static_cast< unsigned char>(__c)]) & __m; } 
# 48
inline const char *ctype< char> ::is(const char *__low, const char *__high, mask *__vec) const 
# 49
{ 
# 50
while (__low < __high) { 
# 51
(*(__vec++)) = ((_M_table)[static_cast< unsigned char>(*(__low++))]); }  
# 52
return __high; 
# 53
} 
# 57
inline const char *ctype< char> ::scan_is(mask __m, const char *__low, const char *__high) const 
# 58
{ 
# 59
while ((__low < __high) && (!(((_M_table)[static_cast< unsigned char>(*__low)]) & __m))) { 
# 61
++__low; }  
# 62
return __low; 
# 63
} 
# 67
inline const char *ctype< char> ::scan_not(mask __m, const char *__low, const char *__high) const 
# 68
{ 
# 69
while ((__low < __high) && ((((_M_table)[static_cast< unsigned char>(*__low)]) & __m) != 0)) { 
# 71
++__low; }  
# 72
return __low; 
# 73
} 
# 76
}
# 1543 "/usr/include/c++/11/bits/locale_facets.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 1548
class __num_base { 
# 1554
public: enum { 
# 1555
_S_ominus, 
# 1556
_S_oplus, 
# 1557
_S_ox, 
# 1558
_S_oX, 
# 1559
_S_odigits, 
# 1560
_S_odigits_end = (_S_odigits + 16), 
# 1561
_S_oudigits = _S_odigits_end, 
# 1562
_S_oudigits_end = (_S_oudigits + 16), 
# 1563
_S_oe = (_S_odigits + 14), 
# 1564
_S_oE = (_S_oudigits + 14), 
# 1565
_S_oend = _S_oudigits_end
# 1566
}; 
# 1573
static const char *_S_atoms_out; 
# 1577
static const char *_S_atoms_in; 
# 1580
enum { 
# 1581
_S_iminus, 
# 1582
_S_iplus, 
# 1583
_S_ix, 
# 1584
_S_iX, 
# 1585
_S_izero, 
# 1586
_S_ie = (_S_izero + 14), 
# 1587
_S_iE = (_S_izero + 20), 
# 1588
_S_iend = 26
# 1589
}; 
# 1594
static void _S_format_float(const ios_base & __io, char * __fptr, char __mod) throw(); 
# 1595
}; 
# 1597
template< class _CharT> 
# 1598
struct __numpunct_cache : public locale::facet { 
# 1600
const char *_M_grouping; 
# 1601
size_t _M_grouping_size; 
# 1602
bool _M_use_grouping; 
# 1603
const _CharT *_M_truename; 
# 1604
size_t _M_truename_size; 
# 1605
const _CharT *_M_falsename; 
# 1606
size_t _M_falsename_size; 
# 1607
_CharT _M_decimal_point; 
# 1608
_CharT _M_thousands_sep; 
# 1614
_CharT _M_atoms_out[__num_base::_S_oend]; 
# 1620
_CharT _M_atoms_in[__num_base::_S_iend]; 
# 1622
bool _M_allocated; 
# 1624
__numpunct_cache(size_t __refs = 0) : locale::facet(__refs), _M_grouping((0)), _M_grouping_size((0)), _M_use_grouping(false), _M_truename((0)), _M_truename_size((0)), _M_falsename((0)), _M_falsename_size((0)), _M_decimal_point(_CharT()), _M_thousands_sep(_CharT()), _M_allocated(false) 
# 1630
{ } 
# 1632
virtual ~__numpunct_cache(); 
# 1635
void _M_cache(const locale & __loc); 
# 1639
private: __numpunct_cache &operator=(const __numpunct_cache &); 
# 1642
explicit __numpunct_cache(const __numpunct_cache &); 
# 1643
}; 
# 1645
template< class _CharT> 
# 1646
__numpunct_cache< _CharT> ::~__numpunct_cache() 
# 1647
{ 
# 1648
if (_M_allocated) 
# 1649
{ 
# 1650
delete [] (_M_grouping); 
# 1651
delete [] (_M_truename); 
# 1652
delete [] (_M_falsename); 
# 1653
}  
# 1654
} 
# 1656
inline namespace __cxx11 { 
# 1672 "/usr/include/c++/11/bits/locale_facets.h" 3
template< class _CharT> 
# 1673
class numpunct : public locale::facet { 
# 1679
public: typedef _CharT char_type; 
# 1680
typedef basic_string< _CharT>  string_type; 
# 1682
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1685
protected: __cache_type *_M_data; 
# 1689
public: static locale::id id; 
# 1697
explicit numpunct(size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1699
{ _M_initialize_numpunct(); } 
# 1711 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit numpunct(__cache_type *__cache, size_t __refs = 0) : locale::facet(__refs), _M_data(__cache) 
# 1713
{ _M_initialize_numpunct(); } 
# 1725 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit numpunct(__c_locale __cloc, size_t __refs = 0) : locale::facet(__refs), _M_data((0)) 
# 1727
{ _M_initialize_numpunct(__cloc); } 
# 1739 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type decimal_point() const 
# 1740
{ return do_decimal_point(); } 
# 1752 "/usr/include/c++/11/bits/locale_facets.h" 3
char_type thousands_sep() const 
# 1753
{ return do_thousands_sep(); } 
# 1783 "/usr/include/c++/11/bits/locale_facets.h" 3
string grouping() const 
# 1784
{ return do_grouping(); } 
# 1796 "/usr/include/c++/11/bits/locale_facets.h" 3
string_type truename() const 
# 1797
{ return do_truename(); } 
# 1809 "/usr/include/c++/11/bits/locale_facets.h" 3
string_type falsename() const 
# 1810
{ return do_falsename(); } 
# 1815
protected: virtual ~numpunct(); 
# 1826 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_decimal_point() const 
# 1827
{ return (_M_data)->_M_decimal_point; } 
# 1838 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual char_type do_thousands_sep() const 
# 1839
{ return (_M_data)->_M_thousands_sep; } 
# 1851 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual string do_grouping() const 
# 1852
{ return (_M_data)->_M_grouping; } 
# 1864 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual string_type do_truename() const 
# 1865
{ return (_M_data)->_M_truename; } 
# 1877 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual string_type do_falsename() const 
# 1878
{ return (_M_data)->_M_falsename; } 
# 1882
void _M_initialize_numpunct(__c_locale __cloc = 0); 
# 1883
}; 
# 1885
template< class _CharT> locale::id 
# 1886
numpunct< _CharT> ::id; 
# 1889
template<> numpunct< char> ::~numpunct(); 
# 1893
template<> void numpunct< char> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1897
template<> numpunct< wchar_t> ::~numpunct(); 
# 1901
template<> void numpunct< wchar_t> ::_M_initialize_numpunct(__c_locale __cloc); 
# 1905
template< class _CharT> 
# 1906
class numpunct_byname : public numpunct< _CharT>  { 
# 1909
public: typedef _CharT char_type; 
# 1910
typedef basic_string< _CharT>  string_type; 
# 1913
explicit numpunct_byname(const char *__s, std::size_t __refs = 0) : numpunct< _CharT> (__refs) 
# 1915
{ 
# 1916
if ((__builtin_strcmp(__s, "C") != 0) && (__builtin_strcmp(__s, "POSIX") != 0)) 
# 1918
{ 
# 1919
std::__c_locale __tmp; 
# 1920
this->_S_create_c_locale(__tmp, __s); 
# 1921
this->_M_initialize_numpunct(__tmp); 
# 1922
this->_S_destroy_c_locale(__tmp); 
# 1923
}  
# 1924
} 
# 1928
explicit numpunct_byname(const std::string &__s, std::size_t __refs = 0) : numpunct_byname(__s.c_str(), __refs) 
# 1929
{ } 
# 1934
protected: virtual ~numpunct_byname() { } 
# 1935
}; 
# 1937
}
# 1954 "/usr/include/c++/11/bits/locale_facets.h" 3
template< class _CharT, class _InIter> 
# 1955
class num_get : public locale::facet { 
# 1961
public: typedef _CharT char_type; 
# 1962
typedef _InIter iter_type; 
# 1966
static locale::id id; 
# 1976 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit num_get(size_t __refs = 0) : locale::facet(__refs) { } 
# 2002 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2003
__err, bool &__v) const 
# 2004
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2039 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2040
__err, long &__v) const 
# 2041
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2044
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2045
__err, unsigned short &__v) const 
# 2046
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2049
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2050
__err, unsigned &__v) const 
# 2051
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2054
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2055
__err, unsigned long &__v) const 
# 2056
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2060
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2061
__err, long long &__v) const 
# 2062
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2065
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2066
__err, unsigned long long &__v) const 
# 2067
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2099 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2100
__err, float &__v) const 
# 2101
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2104
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2105
__err, double &__v) const 
# 2106
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2109
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2110
__err, long double &__v) const 
# 2111
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2142 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type get(iter_type __in, iter_type __end, ios_base &__io, ios_base::iostate &
# 2143
__err, void *&__v) const 
# 2144
{ return this->do_get(__in, __end, __io, __err, __v); } 
# 2148
protected: virtual ~num_get() { } 
# 2150
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2152
_M_extract_float(iter_type, iter_type, ios_base &, ios_base::iostate &, string &) const; 
# 2155
template< class _ValueT> 
# 2156
__attribute((__abi_tag__("cxx11"))) iter_type 
# 2155
_M_extract_int(iter_type, iter_type, ios_base &, ios_base::iostate &, _ValueT &) const; 
# 2161
template< class _CharT2> typename __gnu_cxx::__enable_if< __is_char< _CharT2> ::__value, int> ::__type 
# 2163
_M_find(const _CharT2 *, size_t __len, _CharT2 __c) const 
# 2164
{ 
# 2165
int __ret = (-1); 
# 2166
if (__len <= (10)) 
# 2167
{ 
# 2168
if ((__c >= ((_CharT2)'0')) && (__c < ((_CharT2)(((_CharT2)'0') + __len)))) { 
# 2169
__ret = (__c - ((_CharT2)'0')); }  
# 2170
} else 
# 2172
{ 
# 2173
if ((__c >= ((_CharT2)'0')) && (__c <= ((_CharT2)'9'))) { 
# 2174
__ret = (__c - ((_CharT2)'0')); } else { 
# 2175
if ((__c >= ((_CharT2)'a')) && (__c <= ((_CharT2)'f'))) { 
# 2176
__ret = (10 + (__c - ((_CharT2)'a'))); } else { 
# 2177
if ((__c >= ((_CharT2)'A')) && (__c <= ((_CharT2)'F'))) { 
# 2178
__ret = (10 + (__c - ((_CharT2)'A'))); }  }  }  
# 2179
}  
# 2180
return __ret; 
# 2181
} 
# 2183
template< class _CharT2> typename __gnu_cxx::__enable_if< !__is_char< _CharT2> ::__value, int> ::__type 
# 2186
_M_find(const _CharT2 *__zero, size_t __len, _CharT2 __c) const 
# 2187
{ 
# 2188
int __ret = (-1); 
# 2189
const char_type *__q = char_traits< _CharT2> ::find(__zero, __len, __c); 
# 2190
if (__q) 
# 2191
{ 
# 2192
__ret = (__q - __zero); 
# 2193
if (__ret > 15) { 
# 2194
__ret -= 6; }  
# 2195
}  
# 2196
return __ret; 
# 2197
} 
# 2215 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, bool &) const; 
# 2218
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2219
__err, long &__v) const 
# 2220
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2223
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2224
__err, unsigned short &__v) const 
# 2225
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2228
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2229
__err, unsigned &__v) const 
# 2230
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2233
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2234
__err, unsigned long &__v) const 
# 2235
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2239
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2240
__err, long long &__v) const 
# 2241
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2244
virtual iter_type do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 2245
__err, unsigned long long &__v) const 
# 2246
{ return _M_extract_int(__beg, __end, __io, __err, __v); } 
# 2250
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, float &) const; 
# 2253
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, double &) const; 
# 2267 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, long double &) const; 
# 2272
virtual iter_type do_get(iter_type, iter_type, ios_base &, ios_base::iostate &, void *&) const; 
# 2294 "/usr/include/c++/11/bits/locale_facets.h" 3
}; 
# 2296
template< class _CharT, class _InIter> locale::id 
# 2297
num_get< _CharT, _InIter> ::id; 
# 2312 "/usr/include/c++/11/bits/locale_facets.h" 3
template< class _CharT, class _OutIter> 
# 2313
class num_put : public locale::facet { 
# 2319
public: typedef _CharT char_type; 
# 2320
typedef _OutIter iter_type; 
# 2324
static locale::id id; 
# 2334 "/usr/include/c++/11/bits/locale_facets.h" 3
explicit num_put(size_t __refs = 0) : locale::facet(__refs) { } 
# 2352 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 2353
{ return this->do_put(__s, __io, __fill, __v); } 
# 2394 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2395
{ return this->do_put(__s, __io, __fill, __v); } 
# 2398
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2399
__v) const 
# 2400
{ return this->do_put(__s, __io, __fill, __v); } 
# 2404
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long long __v) const 
# 2405
{ return this->do_put(__s, __io, __fill, __v); } 
# 2408
iter_type put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2409
__v) const 
# 2410
{ return this->do_put(__s, __io, __fill, __v); } 
# 2457 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 2458
{ return this->do_put(__s, __io, __fill, __v); } 
# 2461
iter_type put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 2462
__v) const 
# 2463
{ return this->do_put(__s, __io, __fill, __v); } 
# 2482 "/usr/include/c++/11/bits/locale_facets.h" 3
iter_type put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 2483
__v) const 
# 2484
{ return this->do_put(__s, __io, __fill, __v); } 
# 2487
protected: template< class _ValueT> iter_type _M_insert_float(iter_type, ios_base & __io, char_type __fill, char __mod, _ValueT __v) const; 
# 2493
void _M_group_float(const char * __grouping, size_t __grouping_size, char_type __sep, const char_type * __p, char_type * __new, char_type * __cs, int & __len) const; 
# 2497
template< class _ValueT> iter_type _M_insert_int(iter_type, ios_base & __io, char_type __fill, _ValueT __v) const; 
# 2503
void _M_group_int(const char * __grouping, size_t __grouping_size, char_type __sep, ios_base & __io, char_type * __new, char_type * __cs, int & __len) const; 
# 2508
void _M_pad(char_type __fill, streamsize __w, ios_base & __io, char_type * __new, const char_type * __cs, int & __len) const; 
# 2513
virtual ~num_put() { } 
# 2530 "/usr/include/c++/11/bits/locale_facets.h" 3
virtual iter_type do_put(iter_type __s, ios_base & __io, char_type __fill, bool __v) const; 
# 2533
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long __v) const 
# 2534
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2537
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long 
# 2538
__v) const 
# 2539
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2543
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, long long 
# 2544
__v) const 
# 2545
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2548
virtual iter_type do_put(iter_type __s, ios_base &__io, char_type __fill, unsigned long long 
# 2549
__v) const 
# 2550
{ return _M_insert_int(__s, __io, __fill, __v); } 
# 2554
virtual iter_type do_put(iter_type, ios_base &, char_type, double) const; 
# 2562
virtual iter_type do_put(iter_type, ios_base &, char_type, long double) const; 
# 2566
virtual iter_type do_put(iter_type, ios_base &, char_type, const void *) const; 
# 2581 "/usr/include/c++/11/bits/locale_facets.h" 3
}; 
# 2583
template< class _CharT, class _OutIter> locale::id 
# 2584
num_put< _CharT, _OutIter> ::id; 
# 2594
template< class _CharT> inline bool 
# 2596
isspace(_CharT __c, const locale &__loc) 
# 2597
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::space, __c); } 
# 2600
template< class _CharT> inline bool 
# 2602
isprint(_CharT __c, const locale &__loc) 
# 2603
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::print, __c); } 
# 2606
template< class _CharT> inline bool 
# 2608
iscntrl(_CharT __c, const locale &__loc) 
# 2609
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::cntrl, __c); } 
# 2612
template< class _CharT> inline bool 
# 2614
isupper(_CharT __c, const locale &__loc) 
# 2615
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::upper, __c); } 
# 2618
template< class _CharT> inline bool 
# 2620
islower(_CharT __c, const locale &__loc) 
# 2621
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::lower, __c); } 
# 2624
template< class _CharT> inline bool 
# 2626
isalpha(_CharT __c, const locale &__loc) 
# 2627
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alpha, __c); } 
# 2630
template< class _CharT> inline bool 
# 2632
isdigit(_CharT __c, const locale &__loc) 
# 2633
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::digit, __c); } 
# 2636
template< class _CharT> inline bool 
# 2638
ispunct(_CharT __c, const locale &__loc) 
# 2639
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::punct, __c); } 
# 2642
template< class _CharT> inline bool 
# 2644
isxdigit(_CharT __c, const locale &__loc) 
# 2645
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::xdigit, __c); } 
# 2648
template< class _CharT> inline bool 
# 2650
isalnum(_CharT __c, const locale &__loc) 
# 2651
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::alnum, __c); } 
# 2654
template< class _CharT> inline bool 
# 2656
isgraph(_CharT __c, const locale &__loc) 
# 2657
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::graph, __c); } 
# 2661
template< class _CharT> inline bool 
# 2663
isblank(_CharT __c, const locale &__loc) 
# 2664
{ return use_facet< ctype< _CharT> > (__loc).is(ctype_base::blank, __c); } 
# 2668
template< class _CharT> inline _CharT 
# 2670
toupper(_CharT __c, const locale &__loc) 
# 2671
{ return use_facet< ctype< _CharT> > (__loc).toupper(__c); } 
# 2674
template< class _CharT> inline _CharT 
# 2676
tolower(_CharT __c, const locale &__loc) 
# 2677
{ return use_facet< ctype< _CharT> > (__loc).tolower(__c); } 
# 2680
}
# 35 "/usr/include/c++/11/bits/locale_facets.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
template< class _Facet> 
# 42
struct __use_cache { 
# 45
const _Facet *operator()(const locale & __loc) const; 
# 46
}; 
# 49
template< class _CharT> 
# 50
struct __use_cache< __numpunct_cache< _CharT> >  { 
# 53
const __numpunct_cache< _CharT>  *operator()(const locale &__loc) const 
# 54
{ 
# 55
const size_t __i = (numpunct< _CharT> ::id._M_id)(); 
# 56
const locale::facet **__caches = (__loc._M_impl)->_M_caches; 
# 57
if (!(__caches[__i])) 
# 58
{ 
# 59
__numpunct_cache< _CharT>  *__tmp = (0); 
# 60
try 
# 61
{ 
# 62
__tmp = (new __numpunct_cache< _CharT> ); 
# 63
__tmp->_M_cache(__loc); 
# 64
} 
# 65
catch (...) 
# 66
{ 
# 67
delete __tmp; 
# 68
throw; 
# 69
}  
# 70
(__loc._M_impl)->_M_install_cache(__tmp, __i); 
# 71
}  
# 72
return static_cast< const __numpunct_cache< _CharT>  *>(__caches[__i]); 
# 73
} 
# 74
}; 
# 76
template< class _CharT> void 
# 78
__numpunct_cache< _CharT> ::_M_cache(const locale &__loc) 
# 79
{ 
# 80
const __cxx11::numpunct< _CharT>  &__np = use_facet< __cxx11::numpunct< _CharT> > (__loc); 
# 82
char *__grouping = (0); 
# 83
_CharT *__truename = (0); 
# 84
_CharT *__falsename = (0); 
# 85
try 
# 86
{ 
# 87
const string &__g = __np.grouping(); 
# 88
(_M_grouping_size) = __g.size(); 
# 89
__grouping = (new char [_M_grouping_size]); 
# 90
__g.copy(__grouping, _M_grouping_size); 
# 91
(_M_use_grouping) = ((_M_grouping_size) && ((static_cast< signed char>(__grouping[0])) > 0) && ((__grouping[0]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)); 
# 96
const __cxx11::basic_string< _CharT>  &__tn = __np.truename(); 
# 97
(_M_truename_size) = __tn.size(); 
# 98
__truename = (new _CharT [_M_truename_size]); 
# 99
__tn.copy(__truename, _M_truename_size); 
# 101
const __cxx11::basic_string< _CharT>  &__fn = __np.falsename(); 
# 102
(_M_falsename_size) = __fn.size(); 
# 103
__falsename = (new _CharT [_M_falsename_size]); 
# 104
__fn.copy(__falsename, _M_falsename_size); 
# 106
(_M_decimal_point) = __np.decimal_point(); 
# 107
(_M_thousands_sep) = __np.thousands_sep(); 
# 109
const ctype< _CharT>  &__ct = use_facet< ctype< _CharT> > (__loc); 
# 110
__ct.widen(__num_base::_S_atoms_out, __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out); 
# 113
__ct.widen(__num_base::_S_atoms_in, __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in); 
# 117
(_M_grouping) = __grouping; 
# 118
(_M_truename) = __truename; 
# 119
(_M_falsename) = __falsename; 
# 120
(_M_allocated) = true; 
# 121
} 
# 122
catch (...) 
# 123
{ 
# 124
delete [] __grouping; 
# 125
delete [] __truename; 
# 126
delete [] __falsename; 
# 127
throw; 
# 128
}  
# 129
} 
# 139 "/usr/include/c++/11/bits/locale_facets.tcc" 3
__attribute((__pure__)) bool 
# 140
__verify_grouping(const char * __grouping, size_t __grouping_size, const string & __grouping_tmp) throw(); 
# 145
template< class _CharT, class _InIter> 
# 146
__attribute((__abi_tag__("cxx11"))) _InIter 
# 149
num_get< _CharT, _InIter> ::_M_extract_float(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 150
__err, string &__xtrc) const 
# 151
{ 
# 152
typedef char_traits< _CharT>  __traits_type; 
# 153
typedef __numpunct_cache< _CharT>  __cache_type; 
# 154
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 155
const locale &__loc = __io._M_getloc(); 
# 156
const __cache_type *__lc = __uc(__loc); 
# 157
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 158
char_type __c = char_type(); 
# 161
bool __testeof = __beg == __end; 
# 164
if (!__testeof) 
# 165
{ 
# 166
__c = (*__beg); 
# 167
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 168
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 171
{ 
# 172
(__xtrc += (__plus ? '+' : '-')); 
# 173
if ((++__beg) != __end) { 
# 174
__c = (*__beg); } else { 
# 176
__testeof = true; }  
# 177
}  
# 178
}  
# 181
bool __found_mantissa = false; 
# 182
int __sep_pos = 0; 
# 183
while (!__testeof) 
# 184
{ 
# 185
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 187
break; } else { 
# 188
if (__c == (__lit[__num_base::_S_izero])) 
# 189
{ 
# 190
if (!__found_mantissa) 
# 191
{ 
# 192
(__xtrc += ('0')); 
# 193
__found_mantissa = true; 
# 194
}  
# 195
++__sep_pos; 
# 197
if ((++__beg) != __end) { 
# 198
__c = (*__beg); } else { 
# 200
__testeof = true; }  
# 201
} else { 
# 203
break; }  }  
# 204
}  
# 207
bool __found_dec = false; 
# 208
bool __found_sci = false; 
# 209
string __found_grouping; 
# 210
if (__lc->_M_use_grouping) { 
# 211
__found_grouping.reserve(32); }  
# 212
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 214
if (!(__lc->_M_allocated)) { 
# 216
while (!__testeof) 
# 217
{ 
# 218
const int __digit = _M_find(__lit_zero, 10, __c); 
# 219
if (__digit != (-1)) 
# 220
{ 
# 221
(__xtrc += (('0') + __digit)); 
# 222
__found_mantissa = true; 
# 223
} else { 
# 224
if ((__c == (__lc->_M_decimal_point)) && (!__found_dec) && (!__found_sci)) 
# 226
{ 
# 227
(__xtrc += ('.')); 
# 228
__found_dec = true; 
# 229
} else { 
# 230
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 233
{ 
# 235
(__xtrc += ('e')); 
# 236
__found_sci = true; 
# 239
if ((++__beg) != __end) 
# 240
{ 
# 241
__c = (*__beg); 
# 242
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 243
if (__plus || (__c == (__lit[__num_base::_S_iminus]))) { 
# 244
(__xtrc += (__plus ? '+' : '-')); } else { 
# 246
continue; }  
# 247
} else 
# 249
{ 
# 250
__testeof = true; 
# 251
break; 
# 252
}  
# 253
} else { 
# 255
break; }  }  }  
# 257
if ((++__beg) != __end) { 
# 258
__c = (*__beg); } else { 
# 260
__testeof = true; }  
# 261
}   } else { 
# 263
while (!__testeof) 
# 264
{ 
# 267
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 268
{ 
# 269
if ((!__found_dec) && (!__found_sci)) 
# 270
{ 
# 273
if (__sep_pos) 
# 274
{ 
# 275
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 276
__sep_pos = 0; 
# 277
} else 
# 279
{ 
# 282
__xtrc.clear(); 
# 283
break; 
# 284
}  
# 285
} else { 
# 287
break; }  
# 288
} else { 
# 289
if (__c == (__lc->_M_decimal_point)) 
# 290
{ 
# 291
if ((!__found_dec) && (!__found_sci)) 
# 292
{ 
# 296
if (__found_grouping.size()) { 
# 297
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 298
(__xtrc += ('.')); 
# 299
__found_dec = true; 
# 300
} else { 
# 302
break; }  
# 303
} else 
# 305
{ 
# 306
const char_type *__q = __traits_type::find(__lit_zero, 10, __c); 
# 308
if (__q) 
# 309
{ 
# 310
__xtrc += ('0' + (__q - __lit_zero)); 
# 311
__found_mantissa = true; 
# 312
++__sep_pos; 
# 313
} else { 
# 314
if (((__c == (__lit[__num_base::_S_ie])) || (__c == (__lit[__num_base::_S_iE]))) && (!__found_sci) && __found_mantissa) 
# 317
{ 
# 319
if ((__found_grouping.size()) && (!__found_dec)) { 
# 320
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 321
(__xtrc += ('e')); 
# 322
__found_sci = true; 
# 325
if ((++__beg) != __end) 
# 326
{ 
# 327
__c = (*__beg); 
# 328
const bool __plus = __c == (__lit[__num_base::_S_iplus]); 
# 329
if ((__plus || (__c == (__lit[__num_base::_S_iminus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) { 
# 333
(__xtrc += (__plus ? '+' : '-')); } else { 
# 335
continue; }  
# 336
} else 
# 338
{ 
# 339
__testeof = true; 
# 340
break; 
# 341
}  
# 342
} else { 
# 344
break; }  }  
# 345
}  }  
# 347
if ((++__beg) != __end) { 
# 348
__c = (*__beg); } else { 
# 350
__testeof = true; }  
# 351
}   }  
# 355
if (__found_grouping.size()) 
# 356
{ 
# 358
if ((!__found_dec) && (!__found_sci)) { 
# 359
(__found_grouping += (static_cast< char>(__sep_pos))); }  
# 361
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 364
__err = ios_base::failbit; }  
# 365
}  
# 367
return __beg; 
# 368
} 
# 370
template< class _CharT, class _InIter> 
# 371
template< class _ValueT> 
# 372
__attribute((__abi_tag__("cxx11"))) _InIter 
# 375
num_get< _CharT, _InIter> ::_M_extract_int(_InIter __beg, _InIter __end, ios_base &__io, ios_base::iostate &
# 376
__err, _ValueT &__v) const 
# 377
{ 
# 378
typedef char_traits< _CharT>  __traits_type; 
# 379
using __gnu_cxx::__add_unsigned;
# 380
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 381
typedef __numpunct_cache< _CharT>  __cache_type; 
# 382
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 383
const locale &__loc = __io._M_getloc(); 
# 384
const __cache_type *__lc = __uc(__loc); 
# 385
const _CharT *__lit = ((__lc->_M_atoms_in)); 
# 386
char_type __c = char_type(); 
# 389
const ios_base::fmtflags __basefield = ((__io.flags()) & ios_base::basefield); 
# 391
const bool __oct = __basefield == ios_base::oct; 
# 392
int __base = __oct ? 8 : ((__basefield == ios_base::hex) ? 16 : 10); 
# 395
bool __testeof = __beg == __end; 
# 398
bool __negative = false; 
# 399
if (!__testeof) 
# 400
{ 
# 401
__c = (*__beg); 
# 402
__negative = (__c == (__lit[__num_base::_S_iminus])); 
# 403
if ((__negative || (__c == (__lit[__num_base::_S_iplus]))) && (!((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep)))) && (!(__c == (__lc->_M_decimal_point)))) 
# 406
{ 
# 407
if ((++__beg) != __end) { 
# 408
__c = (*__beg); } else { 
# 410
__testeof = true; }  
# 411
}  
# 412
}  
# 416
bool __found_zero = false; 
# 417
int __sep_pos = 0; 
# 418
while (!__testeof) 
# 419
{ 
# 420
if (((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) || (__c == (__lc->_M_decimal_point))) { 
# 422
break; } else { 
# 423
if ((__c == (__lit[__num_base::_S_izero])) && ((!__found_zero) || (__base == 10))) 
# 425
{ 
# 426
__found_zero = true; 
# 427
++__sep_pos; 
# 428
if (__basefield == 0) { 
# 429
__base = 8; }  
# 430
if (__base == 8) { 
# 431
__sep_pos = 0; }  
# 432
} else { 
# 433
if (__found_zero && ((__c == (__lit[__num_base::_S_ix])) || (__c == (__lit[__num_base::_S_iX])))) 
# 436
{ 
# 437
if (__basefield == 0) { 
# 438
__base = 16; }  
# 439
if (__base == 16) 
# 440
{ 
# 441
__found_zero = false; 
# 442
__sep_pos = 0; 
# 443
} else { 
# 445
break; }  
# 446
} else { 
# 448
break; }  }  }  
# 450
if ((++__beg) != __end) 
# 451
{ 
# 452
__c = (*__beg); 
# 453
if (!__found_zero) { 
# 454
break; }  
# 455
} else { 
# 457
__testeof = true; }  
# 458
}  
# 462
const size_t __len = (__base == 16) ? (__num_base::_S_iend) - (__num_base::_S_izero) : __base; 
# 466
typedef __gnu_cxx::__numeric_traits< _ValueT>  __num_traits; 
# 467
string __found_grouping; 
# 468
if (__lc->_M_use_grouping) { 
# 469
__found_grouping.reserve(32); }  
# 470
bool __testfail = false; 
# 471
bool __testoverflow = false; 
# 472
const __unsigned_type __max = (__negative && __num_traits::__is_signed) ? -(static_cast< __unsigned_type>(__num_traits::__min)) : __num_traits::__max; 
# 476
const __unsigned_type __smax = __max / __base; 
# 477
__unsigned_type __result = (0); 
# 478
int __digit = 0; 
# 479
const char_type *__lit_zero = __lit + __num_base::_S_izero; 
# 481
if (!(__lc->_M_allocated)) { 
# 483
while (!__testeof) 
# 484
{ 
# 485
__digit = _M_find(__lit_zero, __len, __c); 
# 486
if (__digit == (-1)) { 
# 487
break; }  
# 489
if (__result > __smax) { 
# 490
__testoverflow = true; } else 
# 492
{ 
# 493
__result *= __base; 
# 494
__testoverflow |= (__result > (__max - __digit)); 
# 495
__result += __digit; 
# 496
++__sep_pos; 
# 497
}  
# 499
if ((++__beg) != __end) { 
# 500
__c = (*__beg); } else { 
# 502
__testeof = true; }  
# 503
}  } else { 
# 505
while (!__testeof) 
# 506
{ 
# 509
if ((__lc->_M_use_grouping) && (__c == (__lc->_M_thousands_sep))) 
# 510
{ 
# 513
if (__sep_pos) 
# 514
{ 
# 515
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 516
__sep_pos = 0; 
# 517
} else 
# 519
{ 
# 520
__testfail = true; 
# 521
break; 
# 522
}  
# 523
} else { 
# 524
if (__c == (__lc->_M_decimal_point)) { 
# 525
break; } else 
# 527
{ 
# 528
const char_type *__q = __traits_type::find(__lit_zero, __len, __c); 
# 530
if (!__q) { 
# 531
break; }  
# 533
__digit = (__q - __lit_zero); 
# 534
if (__digit > 15) { 
# 535
__digit -= 6; }  
# 536
if (__result > __smax) { 
# 537
__testoverflow = true; } else 
# 539
{ 
# 540
__result *= __base; 
# 541
__testoverflow |= (__result > (__max - __digit)); 
# 542
__result += __digit; 
# 543
++__sep_pos; 
# 544
}  
# 545
}  }  
# 547
if ((++__beg) != __end) { 
# 548
__c = (*__beg); } else { 
# 550
__testeof = true; }  
# 551
}  }  
# 555
if (__found_grouping.size()) 
# 556
{ 
# 558
(__found_grouping += (static_cast< char>(__sep_pos))); 
# 560
if (!std::__verify_grouping((__lc->_M_grouping), (__lc->_M_grouping_size), __found_grouping)) { 
# 563
__err = ios_base::failbit; }  
# 564
}  
# 568
if (((!__sep_pos) && (!__found_zero) && (!(__found_grouping.size()))) || __testfail) 
# 570
{ 
# 571
__v = 0; 
# 572
__err = ios_base::failbit; 
# 573
} else { 
# 574
if (__testoverflow) 
# 575
{ 
# 576
if (__negative && __num_traits::__is_signed) { 
# 577
__v = __num_traits::__min; } else { 
# 579
__v = __num_traits::__max; }  
# 580
__err = ios_base::failbit; 
# 581
} else { 
# 583
__v = (__negative ? -__result : __result); }  }  
# 585
if (__testeof) { 
# 586
(__err |= ios_base::eofbit); }  
# 587
return __beg; 
# 588
} 
# 592
template< class _CharT, class _InIter> _InIter 
# 595
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 596
__err, bool &__v) const 
# 597
{ 
# 598
if (!(((__io.flags()) & ios_base::boolalpha))) 
# 599
{ 
# 603
long __l = (-1); 
# 604
__beg = _M_extract_int(__beg, __end, __io, __err, __l); 
# 605
if ((__l == (0)) || (__l == (1))) { 
# 606
__v = ((bool)__l); } else 
# 608
{ 
# 611
__v = true; 
# 612
__err = ios_base::failbit; 
# 613
if (__beg == __end) { 
# 614
(__err |= ios_base::eofbit); }  
# 615
}  
# 616
} else 
# 618
{ 
# 620
typedef __numpunct_cache< _CharT>  __cache_type; 
# 621
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 622
const locale &__loc = __io._M_getloc(); 
# 623
const __cache_type *__lc = __uc(__loc); 
# 625
bool __testf = true; 
# 626
bool __testt = true; 
# 627
bool __donef = (__lc->_M_falsename_size) == 0; 
# 628
bool __donet = (__lc->_M_truename_size) == 0; 
# 629
bool __testeof = false; 
# 630
size_t __n = (0); 
# 631
while ((!__donef) || (!__donet)) 
# 632
{ 
# 633
if (__beg == __end) 
# 634
{ 
# 635
__testeof = true; 
# 636
break; 
# 637
}  
# 639
const char_type __c = (*__beg); 
# 641
if (!__donef) { 
# 642
__testf = (__c == ((__lc->_M_falsename)[__n])); }  
# 644
if ((!__testf) && __donet) { 
# 645
break; }  
# 647
if (!__donet) { 
# 648
__testt = (__c == ((__lc->_M_truename)[__n])); }  
# 650
if ((!__testt) && __donef) { 
# 651
break; }  
# 653
if ((!__testt) && (!__testf)) { 
# 654
break; }  
# 656
++__n; 
# 657
++__beg; 
# 659
__donef = ((!__testf) || (__n >= (__lc->_M_falsename_size))); 
# 660
__donet = ((!__testt) || (__n >= (__lc->_M_truename_size))); 
# 661
}  
# 662
if (__testf && (__n == (__lc->_M_falsename_size)) && __n) 
# 663
{ 
# 664
__v = false; 
# 665
if (__testt && (__n == (__lc->_M_truename_size))) { 
# 666
__err = ios_base::failbit; } else { 
# 668
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); }  
# 669
} else { 
# 670
if (__testt && (__n == (__lc->_M_truename_size)) && __n) 
# 671
{ 
# 672
__v = true; 
# 673
__err = (__testeof ? ios_base::eofbit : ios_base::goodbit); 
# 674
} else 
# 676
{ 
# 679
__v = false; 
# 680
__err = ios_base::failbit; 
# 681
if (__testeof) { 
# 682
(__err |= ios_base::eofbit); }  
# 683
}  }  
# 684
}  
# 685
return __beg; 
# 686
} 
# 688
template< class _CharT, class _InIter> _InIter 
# 691
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 692
__err, float &__v) const 
# 693
{ 
# 694
string __xtrc; 
# 695
__xtrc.reserve(32); 
# 696
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 697
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 698
if (__beg == __end) { 
# 699
(__err |= ios_base::eofbit); }  
# 700
return __beg; 
# 701
} 
# 703
template< class _CharT, class _InIter> _InIter 
# 706
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 707
__err, double &__v) const 
# 708
{ 
# 709
string __xtrc; 
# 710
__xtrc.reserve(32); 
# 711
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 712
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 713
if (__beg == __end) { 
# 714
(__err |= ios_base::eofbit); }  
# 715
return __beg; 
# 716
} 
# 735 "/usr/include/c++/11/bits/locale_facets.tcc" 3
template< class _CharT, class _InIter> _InIter 
# 738
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 739
__err, long double &__v) const 
# 740
{ 
# 741
string __xtrc; 
# 742
__xtrc.reserve(32); 
# 743
__beg = _M_extract_float(__beg, __end, __io, __err, __xtrc); 
# 744
std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale()); 
# 745
if (__beg == __end) { 
# 746
(__err |= ios_base::eofbit); }  
# 747
return __beg; 
# 748
} 
# 750
template< class _CharT, class _InIter> _InIter 
# 753
num_get< _CharT, _InIter> ::do_get(iter_type __beg, iter_type __end, ios_base &__io, ios_base::iostate &
# 754
__err, void *&__v) const 
# 755
{ 
# 757
typedef ios_base::fmtflags fmtflags; 
# 758
const fmtflags __fmt = __io.flags(); 
# 759
__io.flags((((__fmt & ((~ios_base::basefield)))) | ios_base::hex)); 
# 763
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 765
_UIntPtrType __ul; 
# 766
__beg = _M_extract_int(__beg, __end, __io, __err, __ul); 
# 769
__io.flags(__fmt); 
# 771
__v = (reinterpret_cast< void *>(__ul)); 
# 772
return __beg; 
# 773
} 
# 795 "/usr/include/c++/11/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> void 
# 798
num_put< _CharT, _OutIter> ::_M_pad(_CharT __fill, streamsize __w, ios_base &__io, _CharT *
# 799
__new, const _CharT *__cs, int &__len) const 
# 800
{ 
# 803
__pad< _CharT, char_traits< _CharT> > ::_S_pad(__io, __fill, __new, __cs, __w, __len); 
# 805
__len = (static_cast< int>(__w)); 
# 806
} 
# 810
template< class _CharT, class _ValueT> int 
# 812
__int_to_char(_CharT *__bufend, _ValueT __v, const _CharT *__lit, ios_base::fmtflags 
# 813
__flags, bool __dec) 
# 814
{ 
# 815
_CharT *__buf = __bufend; 
# 816
if (__builtin_expect(__dec, true)) 
# 817
{ 
# 819
do 
# 820
{ 
# 821
(*(--__buf)) = (__lit[(__v % 10) + __num_base::_S_odigits]); 
# 822
__v /= 10; 
# 823
} 
# 824
while (__v != 0); 
# 825
} else { 
# 826
if (((__flags & ios_base::basefield)) == ios_base::oct) 
# 827
{ 
# 829
do 
# 830
{ 
# 831
(*(--__buf)) = (__lit[(__v & 7) + __num_base::_S_odigits]); 
# 832
__v >>= 3; 
# 833
} 
# 834
while (__v != 0); 
# 835
} else 
# 837
{ 
# 839
const bool __uppercase = (__flags & ios_base::uppercase); 
# 840
const int __case_offset = __uppercase ? __num_base::_S_oudigits : __num_base::_S_odigits; 
# 842
do 
# 843
{ 
# 844
(*(--__buf)) = (__lit[(__v & 15) + __case_offset]); 
# 845
__v >>= 4; 
# 846
} 
# 847
while (__v != 0); 
# 848
}  }  
# 849
return __bufend - __buf; 
# 850
} 
# 854
template< class _CharT, class _OutIter> void 
# 857
num_put< _CharT, _OutIter> ::_M_group_int(const char *__grouping, size_t __grouping_size, _CharT __sep, ios_base &, _CharT *
# 858
__new, _CharT *__cs, int &__len) const 
# 859
{ 
# 860
_CharT *__p = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __len); 
# 862
__len = (__p - __new); 
# 863
} 
# 865
template< class _CharT, class _OutIter> 
# 866
template< class _ValueT> _OutIter 
# 869
num_put< _CharT, _OutIter> ::_M_insert_int(_OutIter __s, ios_base &__io, _CharT __fill, _ValueT 
# 870
__v) const 
# 871
{ 
# 872
using __gnu_cxx::__add_unsigned;
# 873
typedef typename __gnu_cxx::__add_unsigned< _ValueT> ::__type __unsigned_type; 
# 874
typedef __numpunct_cache< _CharT>  __cache_type; 
# 875
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 876
const locale &__loc = __io._M_getloc(); 
# 877
const __cache_type *__lc = __uc(__loc); 
# 878
const _CharT *__lit = ((__lc->_M_atoms_out)); 
# 879
const ios_base::fmtflags __flags = __io.flags(); 
# 882
const int __ilen = ((5) * sizeof(_ValueT)); 
# 883
_CharT *__cs = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __ilen)); 
# 888
const ios_base::fmtflags __basefield = (__flags & ios_base::basefield); 
# 889
const bool __dec = (__basefield != ios_base::oct) && (__basefield != ios_base::hex); 
# 891
const __unsigned_type __u = ((__v > 0) || (!__dec)) ? (__unsigned_type)__v : (-((__unsigned_type)__v)); 
# 894
int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec); 
# 895
__cs += (__ilen - __len); 
# 898
if (__lc->_M_use_grouping) 
# 899
{ 
# 902
_CharT *__cs2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * (__len + 1)) * (2))); 
# 905
_M_group_int((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __io, __cs2 + 2, __cs, __len); 
# 907
__cs = (__cs2 + 2); 
# 908
}  
# 911
if (__builtin_expect(__dec, true)) 
# 912
{ 
# 914
if (__v >= 0) 
# 915
{ 
# 916
if (((bool)(__flags & ios_base::showpos)) && __gnu_cxx::template __numeric_traits< _ValueT> ::__is_signed) { 
# 918
((*(--__cs)) = (__lit[__num_base::_S_oplus])), (++__len); }  
# 919
} else { 
# 921
((*(--__cs)) = (__lit[__num_base::_S_ominus])), (++__len); }  
# 922
} else { 
# 923
if (((bool)(__flags & ios_base::showbase)) && __v) 
# 924
{ 
# 925
if (__basefield == ios_base::oct) { 
# 926
((*(--__cs)) = (__lit[__num_base::_S_odigits])), (++__len); } else 
# 928
{ 
# 930
const bool __uppercase = (__flags & ios_base::uppercase); 
# 931
(*(--__cs)) = (__lit[(__num_base::_S_ox) + __uppercase]); 
# 933
(*(--__cs)) = (__lit[__num_base::_S_odigits]); 
# 934
__len += 2; 
# 935
}  
# 936
}  }  
# 939
const streamsize __w = __io.width(); 
# 940
if (__w > (static_cast< streamsize>(__len))) 
# 941
{ 
# 942
_CharT *__cs3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 944
_M_pad(__fill, __w, __io, __cs3, __cs, __len); 
# 945
__cs = __cs3; 
# 946
}  
# 947
__io.width(0); 
# 951
return std::__write(__s, __cs, __len); 
# 952
} 
# 954
template< class _CharT, class _OutIter> void 
# 957
num_put< _CharT, _OutIter> ::_M_group_float(const char *__grouping, size_t __grouping_size, _CharT 
# 958
__sep, const _CharT *__p, _CharT *__new, _CharT *
# 959
__cs, int &__len) const 
# 960
{ 
# 964
const int __declen = (__p) ? __p - __cs : __len; 
# 965
_CharT *__p2 = std::__add_grouping(__new, __sep, __grouping, __grouping_size, __cs, __cs + __declen); 
# 970
int __newlen = __p2 - __new; 
# 971
if (__p) 
# 972
{ 
# 973
char_traits< _CharT> ::copy(__p2, __p, __len - __declen); 
# 974
__newlen += (__len - __declen); 
# 975
}  
# 976
__len = __newlen; 
# 977
} 
# 989 "/usr/include/c++/11/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> 
# 990
template< class _ValueT> _OutIter 
# 993
num_put< _CharT, _OutIter> ::_M_insert_float(_OutIter __s, ios_base &__io, _CharT __fill, char __mod, _ValueT 
# 994
__v) const 
# 995
{ 
# 996
typedef __numpunct_cache< _CharT>  __cache_type; 
# 997
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 998
const locale &__loc = __io._M_getloc(); 
# 999
const __cache_type *__lc = __uc(__loc); 
# 1002
const streamsize __prec = (__io.precision() < (0)) ? 6 : __io.precision(); 
# 1004
const int __max_digits = (__gnu_cxx::template __numeric_traits< _ValueT> ::__digits10); 
# 1008
int __len; 
# 1010
char __fbuf[16]; 
# 1011
__num_base::_S_format_float(__io, __fbuf, __mod); 
# 1015
const bool __use_prec = (((__io.flags()) & ios_base::floatfield)) != ios_base::floatfield; 
# 1020
int __cs_size = (__max_digits * 3); 
# 1021
char *__cs = static_cast< char *>(__builtin_alloca(__cs_size)); 
# 1022
if (__use_prec) { 
# 1023
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1026
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1030
if (__len >= __cs_size) 
# 1031
{ 
# 1032
__cs_size = (__len + 1); 
# 1033
__cs = (static_cast< char *>(__builtin_alloca(__cs_size))); 
# 1034
if (__use_prec) { 
# 1035
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __prec, __v); } else { 
# 1038
__len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size, __fbuf, __v); }  
# 1040
}  
# 1062 "/usr/include/c++/11/bits/locale_facets.tcc" 3
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1064
_CharT *__ws = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __len)); 
# 1066
__ctype.widen(__cs, __cs + __len, __ws); 
# 1069
_CharT *__wp = (0); 
# 1070
const char *__p = char_traits< char> ::find(__cs, __len, '.'); 
# 1071
if (__p) 
# 1072
{ 
# 1073
__wp = (__ws + (__p - __cs)); 
# 1074
(*__wp) = (__lc->_M_decimal_point); 
# 1075
}  
# 1080
if ((__lc->_M_use_grouping) && ((__wp || (__len < 3)) || (((__cs[1]) <= ('9')) && ((__cs[2]) <= ('9')) && ((__cs[1]) >= ('0')) && ((__cs[2]) >= ('0'))))) 
# 1083
{ 
# 1086
_CharT *__ws2 = static_cast< _CharT *>(__builtin_alloca((sizeof(_CharT) * __len) * (2))); 
# 1089
streamsize __off = (0); 
# 1090
if (((__cs[0]) == ('-')) || ((__cs[0]) == ('+'))) 
# 1091
{ 
# 1092
__off = (1); 
# 1093
(__ws2[0]) = (__ws[0]); 
# 1094
__len -= 1; 
# 1095
}  
# 1097
_M_group_float((__lc->_M_grouping), (__lc->_M_grouping_size), (__lc->_M_thousands_sep), __wp, __ws2 + __off, __ws + __off, __len); 
# 1100
__len += __off; 
# 1102
__ws = __ws2; 
# 1103
}  
# 1106
const streamsize __w = __io.width(); 
# 1107
if (__w > (static_cast< streamsize>(__len))) 
# 1108
{ 
# 1109
_CharT *__ws3 = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __w)); 
# 1111
_M_pad(__fill, __w, __io, __ws3, __ws, __len); 
# 1112
__ws = __ws3; 
# 1113
}  
# 1114
__io.width(0); 
# 1118
return std::__write(__s, __ws, __len); 
# 1119
} 
# 1121
template< class _CharT, class _OutIter> _OutIter 
# 1124
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, bool __v) const 
# 1125
{ 
# 1126
const ios_base::fmtflags __flags = __io.flags(); 
# 1127
if (((__flags & ios_base::boolalpha)) == 0) 
# 1128
{ 
# 1129
const long __l = __v; 
# 1130
__s = _M_insert_int(__s, __io, __fill, __l); 
# 1131
} else 
# 1133
{ 
# 1134
typedef __numpunct_cache< _CharT>  __cache_type; 
# 1135
__use_cache< __numpunct_cache< _CharT> >  __uc; 
# 1136
const locale &__loc = __io._M_getloc(); 
# 1137
const __cache_type *__lc = __uc(__loc); 
# 1139
const _CharT *__name = __v ? __lc->_M_truename : (__lc->_M_falsename); 
# 1141
int __len = __v ? __lc->_M_truename_size : (__lc->_M_falsename_size); 
# 1144
const streamsize __w = __io.width(); 
# 1145
if (__w > (static_cast< streamsize>(__len))) 
# 1146
{ 
# 1147
const streamsize __plen = __w - __len; 
# 1148
_CharT *__ps = static_cast< _CharT *>(__builtin_alloca(sizeof(_CharT) * __plen)); 
# 1152
char_traits< _CharT> ::assign(__ps, __plen, __fill); 
# 1153
__io.width(0); 
# 1155
if (((__flags & ios_base::adjustfield)) == ios_base::left) 
# 1156
{ 
# 1157
__s = std::__write(__s, __name, __len); 
# 1158
__s = std::__write(__s, __ps, __plen); 
# 1159
} else 
# 1161
{ 
# 1162
__s = std::__write(__s, __ps, __plen); 
# 1163
__s = std::__write(__s, __name, __len); 
# 1164
}  
# 1165
return __s; 
# 1166
}  
# 1167
__io.width(0); 
# 1168
__s = std::__write(__s, __name, __len); 
# 1169
}  
# 1170
return __s; 
# 1171
} 
# 1173
template< class _CharT, class _OutIter> _OutIter 
# 1176
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, double __v) const 
# 1177
{ return _M_insert_float(__s, __io, __fill, ((char)0), __v); } 
# 1187 "/usr/include/c++/11/bits/locale_facets.tcc" 3
template< class _CharT, class _OutIter> _OutIter 
# 1190
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, long double 
# 1191
__v) const 
# 1192
{ return _M_insert_float(__s, __io, __fill, 'L', __v); } 
# 1194
template< class _CharT, class _OutIter> _OutIter 
# 1197
num_put< _CharT, _OutIter> ::do_put(iter_type __s, ios_base &__io, char_type __fill, const void *
# 1198
__v) const 
# 1199
{ 
# 1200
const ios_base::fmtflags __flags = __io.flags(); 
# 1201
const ios_base::fmtflags __fmt = (~((ios_base::basefield | ios_base::uppercase))); 
# 1203
__io.flags((((__flags & __fmt)) | ((ios_base::hex | ios_base::showbase)))); 
# 1207
typedef __gnu_cxx::__conditional_type< sizeof(void *) <= sizeof(unsigned long), unsigned long, unsigned long long> ::__type _UIntPtrType; 
# 1209
__s = _M_insert_int(__s, __io, __fill, reinterpret_cast< _UIntPtrType>(__v)); 
# 1211
__io.flags(__flags); 
# 1212
return __s; 
# 1213
} 
# 1233 "/usr/include/c++/11/bits/locale_facets.tcc" 3
template< class _CharT, class _Traits> void 
# 1235
__pad< _CharT, _Traits> ::_S_pad(ios_base &__io, _CharT __fill, _CharT *
# 1236
__news, const _CharT *__olds, streamsize 
# 1237
__newlen, streamsize __oldlen) 
# 1238
{ 
# 1239
const size_t __plen = static_cast< size_t>(__newlen - __oldlen); 
# 1240
const ios_base::fmtflags __adjust = ((__io.flags()) & ios_base::adjustfield); 
# 1243
if (__adjust == ios_base::left) 
# 1244
{ 
# 1245
_Traits::copy(__news, __olds, __oldlen); 
# 1246
_Traits::assign(__news + __oldlen, __plen, __fill); 
# 1247
return; 
# 1248
}  
# 1250
size_t __mod = (0); 
# 1251
if (__adjust == ios_base::internal) 
# 1252
{ 
# 1256
const locale &__loc = __io._M_getloc(); 
# 1257
const ctype< _CharT>  &__ctype = use_facet< ctype< _CharT> > (__loc); 
# 1259
if ((__ctype.widen('-') == (__olds[0])) || (__ctype.widen('+') == (__olds[0]))) 
# 1261
{ 
# 1262
(__news[0]) = (__olds[0]); 
# 1263
__mod = (1); 
# 1264
++__news; 
# 1265
} else { 
# 1266
if ((__ctype.widen('0') == (__olds[0])) && (__oldlen > (1)) && ((__ctype.widen('x') == (__olds[1])) || (__ctype.widen('X') == (__olds[1])))) 
# 1270
{ 
# 1271
(__news[0]) = (__olds[0]); 
# 1272
(__news[1]) = (__olds[1]); 
# 1273
__mod = (2); 
# 1274
__news += 2; 
# 1275
}  }  
# 1277
}  
# 1278
_Traits::assign(__news, __plen, __fill); 
# 1279
_Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod); 
# 1280
} 
# 1282
template< class _CharT> _CharT *
# 1284
__add_grouping(_CharT *__s, _CharT __sep, const char *
# 1285
__gbeg, size_t __gsize, const _CharT *
# 1286
__first, const _CharT *__last) 
# 1287
{ 
# 1288
size_t __idx = (0); 
# 1289
size_t __ctr = (0); 
# 1291
while (((__last - __first) > (__gbeg[__idx])) && ((static_cast< signed char>(__gbeg[__idx])) > 0) && ((__gbeg[__idx]) != __gnu_cxx::__numeric_traits_integer< char> ::__max)) 
# 1294
{ 
# 1295
__last -= (__gbeg[__idx]); 
# 1296
(__idx < (__gsize - (1))) ? ++__idx : (++__ctr); 
# 1297
}  
# 1299
while (__first != __last) { 
# 1300
(*(__s++)) = (*(__first++)); }  
# 1302
while (__ctr--) 
# 1303
{ 
# 1304
(*(__s++)) = __sep; 
# 1305
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1306
(*(__s++)) = (*(__first++)); }  
# 1307
}  
# 1309
while (__idx--) 
# 1310
{ 
# 1311
(*(__s++)) = __sep; 
# 1312
for (char __i = __gbeg[__idx]; __i > 0; --__i) { 
# 1313
(*(__s++)) = (*(__first++)); }  
# 1314
}  
# 1316
return __s; 
# 1317
} 
# 1322
extern template class __cxx11::numpunct< char> ;
# 1323
extern template class __cxx11::numpunct_byname< char> ;
# 1324
extern template class num_get< char> ;
# 1325
extern template class num_put< char> ;
# 1328
extern template const ctype< char>  &use_facet< ctype< char> > (const locale &);
# 1332
extern template const __cxx11::numpunct< char>  &use_facet< __cxx11::numpunct< char> > (const locale &);
# 1336
extern template const num_put< char>  &use_facet< num_put< char> > (const locale &);
# 1340
extern template const num_get< char>  &use_facet< num_get< char> > (const locale &);
# 1344
extern template bool has_facet< ctype< char> > (const locale &) throw();
# 1348
extern template bool has_facet< __cxx11::numpunct< char> > (const locale &) throw();
# 1352
extern template bool has_facet< num_put< char> > (const locale &) throw();
# 1356
extern template bool has_facet< num_get< char> > (const locale &) throw();
# 1361
extern template class __cxx11::numpunct< wchar_t> ;
# 1362
extern template class __cxx11::numpunct_byname< wchar_t> ;
# 1363
extern template class num_get< wchar_t> ;
# 1364
extern template class num_put< wchar_t> ;
# 1367
extern template const ctype< wchar_t>  &use_facet< ctype< wchar_t> > (const locale &);
# 1371
extern template const __cxx11::numpunct< wchar_t>  &use_facet< __cxx11::numpunct< wchar_t> > (const locale &);
# 1375
extern template const num_put< wchar_t>  &use_facet< num_put< wchar_t> > (const locale &);
# 1379
extern template const num_get< wchar_t>  &use_facet< num_get< wchar_t> > (const locale &);
# 1383
extern template bool has_facet< ctype< wchar_t> > (const locale &) throw();
# 1387
extern template bool has_facet< __cxx11::numpunct< wchar_t> > (const locale &) throw();
# 1391
extern template bool has_facet< num_put< wchar_t> > (const locale &) throw();
# 1395
extern template bool has_facet< num_get< wchar_t> > (const locale &) throw();
# 1402
}
# 41 "/usr/include/c++/11/bits/basic_ios.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _Facet> inline const _Facet &
# 47
__check_facet(const _Facet *__f) 
# 48
{ 
# 49
if (!__f) { 
# 50
__throw_bad_cast(); }  
# 51
return *__f; 
# 52
} 
# 66 "/usr/include/c++/11/bits/basic_ios.h" 3
template< class _CharT, class _Traits> 
# 67
class basic_ios : public ios_base { 
# 76
public: typedef _CharT char_type; 
# 77
typedef typename _Traits::int_type int_type; 
# 78
typedef typename _Traits::pos_type pos_type; 
# 79
typedef typename _Traits::off_type off_type; 
# 80
typedef _Traits traits_type; 
# 87
typedef ctype< _CharT>  __ctype_type; 
# 89
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 91
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 96
protected: basic_ostream< _CharT, _Traits>  *_M_tie; 
# 97
mutable char_type _M_fill; 
# 98
mutable bool _M_fill_init; 
# 99
basic_streambuf< _CharT, _Traits>  *_M_streambuf; 
# 102
const __ctype_type *_M_ctype; 
# 104
const __num_put_type *_M_num_put; 
# 106
const __num_get_type *_M_num_get; 
# 117 "/usr/include/c++/11/bits/basic_ios.h" 3
public: explicit operator bool() const 
# 118
{ return !fail(); } 
# 125
bool operator!() const 
# 126
{ return fail(); } 
# 137 "/usr/include/c++/11/bits/basic_ios.h" 3
iostate rdstate() const 
# 138
{ return _M_streambuf_state; } 
# 148 "/usr/include/c++/11/bits/basic_ios.h" 3
void clear(iostate __state = goodbit); 
# 157
void setstate(iostate __state) 
# 158
{ clear(((rdstate()) | __state)); } 
# 164
void _M_setstate(iostate __state) 
# 165
{ 
# 168
((_M_streambuf_state) |= __state); 
# 169
if (((exceptions()) & __state)) { 
# 170
throw; }  
# 171
} 
# 180
bool good() const 
# 181
{ return (rdstate()) == 0; } 
# 190
bool eof() const 
# 191
{ return (((rdstate()) & eofbit)) != 0; } 
# 201 "/usr/include/c++/11/bits/basic_ios.h" 3
bool fail() const 
# 202
{ return (((rdstate()) & ((badbit | failbit)))) != 0; } 
# 211
bool bad() const 
# 212
{ return (((rdstate()) & badbit)) != 0; } 
# 222 "/usr/include/c++/11/bits/basic_ios.h" 3
iostate exceptions() const 
# 223
{ return _M_exception; } 
# 257 "/usr/include/c++/11/bits/basic_ios.h" 3
void exceptions(iostate __except) 
# 258
{ 
# 259
(_M_exception) = __except; 
# 260
clear(_M_streambuf_state); 
# 261
} 
# 270
explicit basic_ios(basic_streambuf< _CharT, _Traits>  *__sb) : ios_base(), _M_tie((0)), _M_fill(), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 273
{ init(__sb); } 
# 282
virtual ~basic_ios() { } 
# 295 "/usr/include/c++/11/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie() const 
# 296
{ return _M_tie; } 
# 307 "/usr/include/c++/11/bits/basic_ios.h" 3
basic_ostream< _CharT, _Traits>  *tie(basic_ostream< _CharT, _Traits>  *__tiestr) 
# 308
{ 
# 309
basic_ostream< _CharT, _Traits>  *__old = _M_tie; 
# 310
(_M_tie) = __tiestr; 
# 311
return __old; 
# 312
} 
# 321
basic_streambuf< _CharT, _Traits>  *rdbuf() const 
# 322
{ return _M_streambuf; } 
# 347 "/usr/include/c++/11/bits/basic_ios.h" 3
basic_streambuf< _CharT, _Traits>  *rdbuf(basic_streambuf< _CharT, _Traits>  * __sb); 
# 361 "/usr/include/c++/11/bits/basic_ios.h" 3
basic_ios &copyfmt(const basic_ios & __rhs); 
# 370
char_type fill() const 
# 371
{ 
# 372
if (!(_M_fill_init)) 
# 373
{ 
# 374
(_M_fill) = widen(' '); 
# 375
(_M_fill_init) = true; 
# 376
}  
# 377
return _M_fill; 
# 378
} 
# 390 "/usr/include/c++/11/bits/basic_ios.h" 3
char_type fill(char_type __ch) 
# 391
{ 
# 392
char_type __old = this->fill(); 
# 393
(_M_fill) = __ch; 
# 394
return __old; 
# 395
} 
# 410 "/usr/include/c++/11/bits/basic_ios.h" 3
locale imbue(const locale & __loc); 
# 430 "/usr/include/c++/11/bits/basic_ios.h" 3
char narrow(char_type __c, char __dfault) const 
# 431
{ return __check_facet(_M_ctype).narrow(__c, __dfault); } 
# 449 "/usr/include/c++/11/bits/basic_ios.h" 3
char_type widen(char __c) const 
# 450
{ return __check_facet(_M_ctype).widen(__c); } 
# 460
protected: basic_ios() : ios_base(), _M_tie((0)), _M_fill(char_type()), _M_fill_init(false), _M_streambuf((0)), _M_ctype((0)), _M_num_put((0)), _M_num_get((0)) 
# 463
{ } 
# 472
void init(basic_streambuf< _CharT, _Traits>  * __sb); 
# 475
basic_ios(const basic_ios &) = delete;
# 476
basic_ios &operator=(const basic_ios &) = delete;
# 479
void move(basic_ios &__rhs) 
# 480
{ 
# 481
this->ios_base::_M_move(__rhs); 
# 482
_M_cache_locale(_M_ios_locale); 
# 483
this->tie(__rhs.tie(nullptr)); 
# 484
(_M_fill) = (__rhs._M_fill); 
# 485
(_M_fill_init) = (__rhs._M_fill_init); 
# 486
(_M_streambuf) = nullptr; 
# 487
} 
# 490
void move(basic_ios &&__rhs) 
# 491
{ this->move(__rhs); } 
# 494
void swap(basic_ios &__rhs) noexcept 
# 495
{ 
# 496
this->ios_base::_M_swap(__rhs); 
# 497
_M_cache_locale(_M_ios_locale); 
# 498
__rhs._M_cache_locale(__rhs._M_ios_locale); 
# 499
std::swap(_M_tie, __rhs._M_tie); 
# 500
std::swap(_M_fill, __rhs._M_fill); 
# 501
std::swap(_M_fill_init, __rhs._M_fill_init); 
# 502
} 
# 505
void set_rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 506
{ (_M_streambuf) = __sb; } 
# 510
void _M_cache_locale(const locale & __loc); 
# 511
}; 
# 514
}
# 35 "/usr/include/c++/11/bits/basic_ios.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 39
template< class _CharT, class _Traits> void 
# 41
basic_ios< _CharT, _Traits> ::clear(iostate __state) 
# 42
{ 
# 43
if (this->rdbuf()) { 
# 44
(_M_streambuf_state) = __state; } else { 
# 46
(_M_streambuf_state) = (__state | badbit); }  
# 47
if (((exceptions()) & (rdstate()))) { 
# 48
__throw_ios_failure("basic_ios::clear"); }  
# 49
} 
# 51
template< class _CharT, class _Traits> basic_streambuf< _CharT, _Traits>  *
# 53
basic_ios< _CharT, _Traits> ::rdbuf(basic_streambuf< _CharT, _Traits>  *__sb) 
# 54
{ 
# 55
basic_streambuf< _CharT, _Traits>  *__old = _M_streambuf; 
# 56
(_M_streambuf) = __sb; 
# 57
clear(); 
# 58
return __old; 
# 59
} 
# 61
template< class _CharT, class _Traits> basic_ios< _CharT, _Traits>  &
# 63
basic_ios< _CharT, _Traits> ::copyfmt(const basic_ios &__rhs) 
# 64
{ 
# 67
if (this != (&__rhs)) 
# 68
{ 
# 73
_Words *__words = ((__rhs._M_word_size) <= (_S_local_word_size)) ? _M_local_word : (new _Words [__rhs._M_word_size]); 
# 77
_Callback_list *__cb = __rhs._M_callbacks; 
# 78
if (__cb) { 
# 79
__cb->_M_add_reference(); }  
# 80
this->ios_base::_M_call_callbacks(erase_event); 
# 81
if ((_M_word) != (_M_local_word)) 
# 82
{ 
# 83
delete [] (_M_word); 
# 84
(_M_word) = (0); 
# 85
}  
# 86
this->ios_base::_M_dispose_callbacks(); 
# 89
(_M_callbacks) = __cb; 
# 90
for (int __i = 0; __i < (__rhs._M_word_size); ++__i) { 
# 91
(__words[__i]) = ((__rhs._M_word)[__i]); }  
# 92
(_M_word) = __words; 
# 93
(_M_word_size) = (__rhs._M_word_size); 
# 95
this->flags(__rhs.flags()); 
# 96
this->width(__rhs.width()); 
# 97
this->precision(__rhs.precision()); 
# 98
this->tie(__rhs.tie()); 
# 99
this->fill(__rhs.fill()); 
# 100
((_M_ios_locale) = (__rhs.getloc())); 
# 101
_M_cache_locale(_M_ios_locale); 
# 103
this->ios_base::_M_call_callbacks(copyfmt_event); 
# 106
exceptions(__rhs.exceptions()); 
# 107
}  
# 108
return *this; 
# 109
} 
# 112
template< class _CharT, class _Traits> locale 
# 114
basic_ios< _CharT, _Traits> ::imbue(const locale &__loc) 
# 115
{ 
# 116
locale __old(this->getloc()); 
# 117
this->ios_base::imbue(__loc); 
# 118
_M_cache_locale(__loc); 
# 119
if (this->rdbuf() != 0) { 
# 120
this->rdbuf()->pubimbue(__loc); }  
# 121
return __old; 
# 122
} 
# 124
template< class _CharT, class _Traits> void 
# 126
basic_ios< _CharT, _Traits> ::init(basic_streambuf< _CharT, _Traits>  *__sb) 
# 127
{ 
# 129
this->ios_base::_M_init(); 
# 132
_M_cache_locale(_M_ios_locale); 
# 146 "/usr/include/c++/11/bits/basic_ios.tcc" 3
(_M_fill) = _CharT(); 
# 147
(_M_fill_init) = false; 
# 149
(_M_tie) = 0; 
# 150
(_M_exception) = goodbit; 
# 151
(_M_streambuf) = __sb; 
# 152
(_M_streambuf_state) = ((__sb) ? goodbit : badbit); 
# 153
} 
# 155
template< class _CharT, class _Traits> void 
# 157
basic_ios< _CharT, _Traits> ::_M_cache_locale(const locale &__loc) 
# 158
{ 
# 159
if (__builtin_expect(has_facet< __ctype_type> (__loc), true)) { 
# 160
(_M_ctype) = std::__addressof(use_facet< __ctype_type> (__loc)); } else { 
# 162
(_M_ctype) = 0; }  
# 164
if (__builtin_expect(has_facet< __num_put_type> (__loc), true)) { 
# 165
(_M_num_put) = std::__addressof(use_facet< __num_put_type> (__loc)); } else { 
# 167
(_M_num_put) = 0; }  
# 169
if (__builtin_expect(has_facet< __num_get_type> (__loc), true)) { 
# 170
(_M_num_get) = std::__addressof(use_facet< __num_get_type> (__loc)); } else { 
# 172
(_M_num_get) = 0; }  
# 173
} 
# 178
extern template class basic_ios< char> ;
# 181
extern template class basic_ios< wchar_t> ;
# 186
}
# 41 "/usr/include/c++/11/ostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/11/ostream" 3
template< class _CharT, class _Traits> 
# 58
class basic_ostream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_ostream __ostream_type; 
# 73
typedef num_put< _CharT, ostreambuf_iterator< _CharT, _Traits> >  __num_put_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 84 "/usr/include/c++/11/ostream" 3
explicit basic_ostream(__streambuf_type *__sb) 
# 85
{ this->init(__sb); } 
# 93
virtual ~basic_ostream() { } 
# 96
class sentry; 
# 97
friend class sentry; 
# 108 "/usr/include/c++/11/ostream" 3
__ostream_type &operator<<(__ostream_type &(*__pf)(__ostream_type &)) 
# 109
{ 
# 113
return __pf(*this); 
# 114
} 
# 117
__ostream_type &operator<<(__ios_type &(*__pf)(__ios_type &)) 
# 118
{ 
# 122
__pf(*this); 
# 123
return *this; 
# 124
} 
# 127
__ostream_type &operator<<(std::ios_base &(*__pf)(std::ios_base &)) 
# 128
{ 
# 132
__pf(*this); 
# 133
return *this; 
# 134
} 
# 166 "/usr/include/c++/11/ostream" 3
__ostream_type &operator<<(long __n) 
# 167
{ return _M_insert(__n); } 
# 170
__ostream_type &operator<<(unsigned long __n) 
# 171
{ return _M_insert(__n); } 
# 174
__ostream_type &operator<<(bool __n) 
# 175
{ return _M_insert(__n); } 
# 178
__ostream_type &operator<<(short __n); 
# 181
__ostream_type &operator<<(unsigned short __n) 
# 182
{ 
# 185
return _M_insert(static_cast< unsigned long>(__n)); 
# 186
} 
# 189
__ostream_type &operator<<(int __n); 
# 192
__ostream_type &operator<<(unsigned __n) 
# 193
{ 
# 196
return _M_insert(static_cast< unsigned long>(__n)); 
# 197
} 
# 201
__ostream_type &operator<<(long long __n) 
# 202
{ return _M_insert(__n); } 
# 205
__ostream_type &operator<<(unsigned long long __n) 
# 206
{ return _M_insert(__n); } 
# 220 "/usr/include/c++/11/ostream" 3
__ostream_type &operator<<(double __f) 
# 221
{ return _M_insert(__f); } 
# 224
__ostream_type &operator<<(float __f) 
# 225
{ 
# 228
return _M_insert(static_cast< double>(__f)); 
# 229
} 
# 232
__ostream_type &operator<<(long double __f) 
# 233
{ return _M_insert(__f); } 
# 245 "/usr/include/c++/11/ostream" 3
__ostream_type &operator<<(const void *__p) 
# 246
{ return _M_insert(__p); } 
# 250
__ostream_type &operator<<(std::nullptr_t) 
# 251
{ return (*this) << "nullptr"; } 
# 283 "/usr/include/c++/11/ostream" 3
__ostream_type &operator<<(__streambuf_type * __sb); 
# 316 "/usr/include/c++/11/ostream" 3
__ostream_type &put(char_type __c); 
# 324
void _M_write(const char_type *__s, std::streamsize __n) 
# 325
{ 
# 326
const std::streamsize __put = this->rdbuf()->sputn(__s, __n); 
# 327
if (__put != __n) { 
# 328
this->setstate(ios_base::badbit); }  
# 329
} 
# 348 "/usr/include/c++/11/ostream" 3
__ostream_type &write(const char_type * __s, std::streamsize __n); 
# 361 "/usr/include/c++/11/ostream" 3
__ostream_type &flush(); 
# 371 "/usr/include/c++/11/ostream" 3
pos_type tellp(); 
# 382 "/usr/include/c++/11/ostream" 3
__ostream_type &seekp(pos_type); 
# 394 "/usr/include/c++/11/ostream" 3
__ostream_type &seekp(off_type, std::ios_base::seekdir); 
# 397
protected: basic_ostream() 
# 398
{ this->init(0); } 
# 402
basic_ostream(basic_iostream< _CharT, _Traits>  &) { } 
# 404
basic_ostream(const basic_ostream &) = delete;
# 406
basic_ostream(basic_ostream &&__rhs) : __ios_type() 
# 408
{ __ios_type::move(__rhs); } 
# 412
basic_ostream &operator=(const basic_ostream &) = delete;
# 415
basic_ostream &operator=(basic_ostream &&__rhs) 
# 416
{ 
# 417
swap(__rhs); 
# 418
return *this; 
# 419
} 
# 422
void swap(basic_ostream &__rhs) 
# 423
{ __ios_type::swap(__rhs); } 
# 426
template< class _ValueT> __ostream_type &_M_insert(_ValueT __v); 
# 429
}; 
# 438 "/usr/include/c++/11/ostream" 3
template< class _CharT, class _Traits> 
# 439
class basic_ostream< _CharT, _Traits> ::sentry { 
# 442
bool _M_ok; 
# 443
basic_ostream &_M_os; 
# 458 "/usr/include/c++/11/ostream" 3
public: explicit sentry(basic_ostream & __os); 
# 460
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
# 469
~sentry() 
# 470
{ 
# 472
if (((bool)((_M_os).flags() & ios_base::unitbuf)) && (!uncaught_exception())) 
# 473
{ 
# 475
if ((_M_os).rdbuf() && ((_M_os).rdbuf()->pubsync() == (-1))) { 
# 476
(_M_os).setstate(ios_base::badbit); }  
# 477
}  
# 478
} 
#pragma GCC diagnostic pop
# 491 "/usr/include/c++/11/ostream" 3
explicit operator bool() const 
# 492
{ return _M_ok; } 
# 493
}; 
# 511 "/usr/include/c++/11/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 513
operator<<(basic_ostream< _CharT, _Traits>  &__out, _CharT __c) 
# 514
{ return __ostream_insert(__out, &__c, 1); } 
# 516
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 518
operator<<(basic_ostream< _CharT, _Traits>  &__out, char __c) 
# 519
{ return (__out << __out.widen(__c)); } 
# 522
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 524
operator<<(basic_ostream< char, _Traits>  &__out, char __c) 
# 525
{ return __ostream_insert(__out, &__c, 1); } 
# 528
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 530
operator<<(basic_ostream< char, _Traits>  &__out, signed char __c) 
# 531
{ return (__out << (static_cast< char>(__c))); } 
# 533
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 535
operator<<(basic_ostream< char, _Traits>  &__out, unsigned char __c) 
# 536
{ return (__out << (static_cast< char>(__c))); } 
# 592 "/usr/include/c++/11/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 594
operator<<(basic_ostream< _CharT, _Traits>  &__out, const _CharT *__s) 
# 595
{ 
# 596
if (!__s) { 
# 597
__out.setstate(ios_base::badbit); } else { 
# 599
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 601
return __out; 
# 602
} 
# 604
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __out, const char * __s); 
# 609
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 611
operator<<(basic_ostream< char, _Traits>  &__out, const char *__s) 
# 612
{ 
# 613
if (!__s) { 
# 614
__out.setstate(ios_base::badbit); } else { 
# 616
__ostream_insert(__out, __s, static_cast< streamsize>(_Traits::length(__s))); }  
# 618
return __out; 
# 619
} 
# 622
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 624
operator<<(basic_ostream< char, _Traits>  &__out, const signed char *__s) 
# 625
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 627
template< class _Traits> inline basic_ostream< char, _Traits>  &
# 629
operator<<(basic_ostream< char, _Traits>  &__out, const unsigned char *__s) 
# 630
{ return (__out << (reinterpret_cast< const char *>(__s))); } 
# 682 "/usr/include/c++/11/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 684
endl(basic_ostream< _CharT, _Traits>  &__os) 
# 685
{ return flush(__os.put(__os.widen('\n'))); } 
# 694 "/usr/include/c++/11/ostream" 3
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 696
ends(basic_ostream< _CharT, _Traits>  &__os) 
# 697
{ return __os.put(_CharT()); } 
# 704
template< class _CharT, class _Traits> inline basic_ostream< _CharT, _Traits>  &
# 706
flush(basic_ostream< _CharT, _Traits>  &__os) 
# 707
{ return __os.flush(); } 
# 726 "/usr/include/c++/11/ostream" 3
template< class _Tp> using _Require_derived_from_ios_base = _Require< is_class< _Tp> , __not_< is_same< _Tp, ios_base> > , is_convertible< typename add_pointer< _Tp> ::type, ios_base *> > ; 
# 731
template< class _Os, class _Tp, class 
# 732
 = _Require_derived_from_ios_base< _Os> , class 
# 734
 = __decltype((std::declval< _Os &> () << std::declval< const _Tp &> ()))> using __rvalue_stream_insertion_t = _Os &&; 
# 748 "/usr/include/c++/11/ostream" 3
template< class _Ostream, class _Tp> inline __rvalue_stream_insertion_t< _Ostream, _Tp>  
# 750
operator<<(_Ostream &&__os, const _Tp &__x) 
# 751
{ 
# 752
__os << __x; 
# 753
return std::move(__os); 
# 754
} 
# 827 "/usr/include/c++/11/ostream" 3
}
# 41 "/usr/include/c++/11/bits/ostream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_ostream< _CharT, _Traits> ::sentry::sentry(basic_ostream &__os) : _M_ok(false), _M_os(__os) 
# 49
{ 
# 51
if (__os.tie() && __os.good()) { 
# 52
__os.tie()->flush(); }  
# 54
if (__os.good()) { 
# 55
(_M_ok) = true; } else { 
# 57
__os.setstate(ios_base::failbit); }  
# 58
} 
# 60
template< class _CharT, class _Traits> 
# 61
template< class _ValueT> basic_ostream< _CharT, _Traits>  &
# 64
basic_ostream< _CharT, _Traits> ::_M_insert(_ValueT __v) 
# 65
{ 
# 66
sentry __cerb(*this); 
# 67
if (__cerb) 
# 68
{ 
# 69
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 70
try 
# 71
{ 
# 72
const __num_put_type &__np = __check_facet((this->_M_num_put)); 
# 73
if (__np.put(*this, *this, this->fill(), __v).failed()) { 
# 74
(__err |= std::ios_base::badbit); }  
# 75
} 
# 76
catch (__cxxabiv1::__forced_unwind &) 
# 77
{ 
# 78
this->_M_setstate(ios_base::badbit); 
# 79
throw; 
# 80
} 
# 81
catch (...) 
# 82
{ this->_M_setstate(ios_base::badbit); }  
# 83
if (__err) { 
# 84
this->setstate(__err); }  
# 85
}  
# 86
return *this; 
# 87
} 
# 89
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 92
basic_ostream< _CharT, _Traits> ::operator<<(short __n) 
# 93
{ 
# 96
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 97
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 98
return _M_insert(static_cast< long>(static_cast< unsigned short>(__n))); } else { 
# 100
return _M_insert(static_cast< long>(__n)); }  
# 101
} 
# 103
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 106
basic_ostream< _CharT, _Traits> ::operator<<(int __n) 
# 107
{ 
# 110
const std::ios_base::fmtflags __fmt = this->flags() & ios_base::basefield; 
# 111
if ((__fmt == std::ios_base::oct) || (__fmt == std::ios_base::hex)) { 
# 112
return _M_insert(static_cast< long>(static_cast< unsigned>(__n))); } else { 
# 114
return _M_insert(static_cast< long>(__n)); }  
# 115
} 
# 117
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 120
basic_ostream< _CharT, _Traits> ::operator<<(__streambuf_type *__sbin) 
# 121
{ 
# 122
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 123
sentry __cerb(*this); 
# 124
if (__cerb && __sbin) 
# 125
{ 
# 126
try 
# 127
{ 
# 128
if (!__copy_streambufs(__sbin, this->rdbuf())) { 
# 129
(__err |= std::ios_base::failbit); }  
# 130
} 
# 131
catch (__cxxabiv1::__forced_unwind &) 
# 132
{ 
# 133
this->_M_setstate(ios_base::badbit); 
# 134
throw; 
# 135
} 
# 136
catch (...) 
# 137
{ this->_M_setstate(ios_base::failbit); }  
# 138
} else { 
# 139
if (!__sbin) { 
# 140
(__err |= std::ios_base::badbit); }  }  
# 141
if (__err) { 
# 142
this->setstate(__err); }  
# 143
return *this; 
# 144
} 
# 146
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 149
basic_ostream< _CharT, _Traits> ::put(char_type __c) 
# 150
{ 
# 157
sentry __cerb(*this); 
# 158
if (__cerb) 
# 159
{ 
# 160
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 161
try 
# 162
{ 
# 163
const int_type __put = this->rdbuf()->sputc(__c); 
# 164
if (traits_type::eq_int_type(__put, traits_type::eof())) { 
# 165
(__err |= std::ios_base::badbit); }  
# 166
} 
# 167
catch (__cxxabiv1::__forced_unwind &) 
# 168
{ 
# 169
this->_M_setstate(ios_base::badbit); 
# 170
throw; 
# 171
} 
# 172
catch (...) 
# 173
{ this->_M_setstate(ios_base::badbit); }  
# 174
if (__err) { 
# 175
this->setstate(__err); }  
# 176
}  
# 177
return *this; 
# 178
} 
# 180
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 183
basic_ostream< _CharT, _Traits> ::write(const _CharT *__s, std::streamsize __n) 
# 184
{ 
# 192
sentry __cerb(*this); 
# 193
if (__cerb) 
# 194
{ 
# 195
try 
# 196
{ _M_write(__s, __n); } 
# 197
catch (__cxxabiv1::__forced_unwind &) 
# 198
{ 
# 199
this->_M_setstate(ios_base::badbit); 
# 200
throw; 
# 201
} 
# 202
catch (...) 
# 203
{ this->_M_setstate(ios_base::badbit); }  
# 204
}  
# 205
return *this; 
# 206
} 
# 208
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::__ostream_type &
# 211
basic_ostream< _CharT, _Traits> ::flush() 
# 212
{ 
# 216
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 217
try 
# 218
{ 
# 219
if (this->rdbuf() && (this->rdbuf()->pubsync() == (-1))) { 
# 220
(__err |= std::ios_base::badbit); }  
# 221
} 
# 222
catch (__cxxabiv1::__forced_unwind &) 
# 223
{ 
# 224
this->_M_setstate(ios_base::badbit); 
# 225
throw; 
# 226
} 
# 227
catch (...) 
# 228
{ this->_M_setstate(ios_base::badbit); }  
# 229
if (__err) { 
# 230
this->setstate(__err); }  
# 231
return *this; 
# 232
} 
# 234
template< class _CharT, class _Traits> typename basic_ostream< _CharT, _Traits> ::pos_type 
# 237
basic_ostream< _CharT, _Traits> ::tellp() 
# 238
{ 
# 239
pos_type __ret = ((pos_type)(-1)); 
# 240
try 
# 241
{ 
# 242
if (!this->fail()) { 
# 243
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out); }  
# 244
} 
# 245
catch (__cxxabiv1::__forced_unwind &) 
# 246
{ 
# 247
this->_M_setstate(ios_base::badbit); 
# 248
throw; 
# 249
} 
# 250
catch (...) 
# 251
{ this->_M_setstate(ios_base::badbit); }  
# 252
return __ret; 
# 253
} 
# 255
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 258
basic_ostream< _CharT, _Traits> ::seekp(pos_type __pos) 
# 259
{ 
# 260
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 261
try 
# 262
{ 
# 263
if (!this->fail()) 
# 264
{ 
# 267
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::out); 
# 271
if (__p == ((pos_type)((off_type)(-1)))) { 
# 272
(__err |= std::ios_base::failbit); }  
# 273
}  
# 274
} 
# 275
catch (__cxxabiv1::__forced_unwind &) 
# 276
{ 
# 277
this->_M_setstate(ios_base::badbit); 
# 278
throw; 
# 279
} 
# 280
catch (...) 
# 281
{ this->_M_setstate(ios_base::badbit); }  
# 282
if (__err) { 
# 283
this->setstate(__err); }  
# 284
return *this; 
# 285
} 
# 287
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 290
basic_ostream< _CharT, _Traits> ::seekp(off_type __off, std::ios_base::seekdir __dir) 
# 291
{ 
# 292
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 293
try 
# 294
{ 
# 295
if (!this->fail()) 
# 296
{ 
# 299
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::out); 
# 303
if (__p == ((pos_type)((off_type)(-1)))) { 
# 304
(__err |= std::ios_base::failbit); }  
# 305
}  
# 306
} 
# 307
catch (__cxxabiv1::__forced_unwind &) 
# 308
{ 
# 309
this->_M_setstate(ios_base::badbit); 
# 310
throw; 
# 311
} 
# 312
catch (...) 
# 313
{ this->_M_setstate(ios_base::badbit); }  
# 314
if (__err) { 
# 315
this->setstate(__err); }  
# 316
return *this; 
# 317
} 
# 319
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 321
operator<<(basic_ostream< _CharT, _Traits>  &__out, const char *__s) 
# 322
{ 
# 323
if (!__s) { 
# 324
__out.setstate(ios_base::badbit); } else 
# 326
{ 
# 329
const size_t __clen = char_traits< char> ::length(__s); 
# 330
try 
# 331
{ 
# 332
struct __ptr_guard { 
# 334
_CharT *__p; 
# 335
__ptr_guard(_CharT *__ip) : __p(__ip) { } 
# 336
~__ptr_guard() { delete [] (__p); } 
# 337
_CharT *__get() { return __p; } 
# 338
} __pg(new _CharT [__clen]); 
# 340
_CharT *__ws = __pg.__get(); 
# 341
for (size_t __i = (0); __i < __clen; ++__i) { 
# 342
(__ws[__i]) = __out.widen(__s[__i]); }  
# 343
__ostream_insert(__out, __ws, __clen); 
# 344
} 
# 345
catch (__cxxabiv1::__forced_unwind &) 
# 346
{ 
# 347
__out._M_setstate(ios_base::badbit); 
# 348
throw; 
# 349
} 
# 350
catch (...) 
# 351
{ __out._M_setstate(ios_base::badbit); }  
# 352
}  
# 353
return __out; 
# 354
} 
# 359
extern template class basic_ostream< char> ;
# 360
extern template basic_ostream< char>  &endl(basic_ostream< char>  & __os);
# 361
extern template basic_ostream< char>  &ends(basic_ostream< char>  & __os);
# 362
extern template basic_ostream< char>  &flush(basic_ostream< char>  & __os);
# 363
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, char __c);
# 364
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, unsigned char __c);
# 365
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, signed char __c);
# 366
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const char * __s);
# 367
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const unsigned char * __s);
# 368
extern template basic_ostream< char>  &operator<<(basic_ostream< char>  & __out, const signed char * __s);
# 370
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long __v);
# 371
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long __v);
# 372
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(bool __v);
# 374
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long long __v);
# 375
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(unsigned long long __v);
# 377
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(double __v);
# 378
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(long double __v);
# 379
extern template basic_ostream< char> ::__ostream_type &basic_ostream< char> ::_M_insert(const void * __v);
# 382
extern template class basic_ostream< wchar_t> ;
# 383
extern template basic_ostream< wchar_t>  &endl(basic_ostream< wchar_t>  & __os);
# 384
extern template basic_ostream< wchar_t>  &ends(basic_ostream< wchar_t>  & __os);
# 385
extern template basic_ostream< wchar_t>  &flush(basic_ostream< wchar_t>  & __os);
# 386
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, wchar_t __c);
# 387
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, char __c);
# 388
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const wchar_t * __s);
# 389
extern template basic_ostream< wchar_t>  &operator<<(basic_ostream< wchar_t>  & __out, const char * __s);
# 391
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long __v);
# 392
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long __v);
# 393
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(bool __v);
# 395
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long long __v);
# 396
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(unsigned long long __v);
# 398
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(double __v);
# 399
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(long double __v);
# 400
extern template basic_ostream< wchar_t> ::__ostream_type &basic_ostream< wchar_t> ::_M_insert(const void * __v);
# 405
}
# 41 "/usr/include/c++/11/istream" 3
namespace std __attribute((__visibility__("default"))) { 
# 57 "/usr/include/c++/11/istream" 3
template< class _CharT, class _Traits> 
# 58
class basic_istream : virtual public basic_ios< _CharT, _Traits>  { 
# 62
public: typedef _CharT char_type; 
# 63
typedef typename _Traits::int_type int_type; 
# 64
typedef typename _Traits::pos_type pos_type; 
# 65
typedef typename _Traits::off_type off_type; 
# 66
typedef _Traits traits_type; 
# 69
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 70
typedef basic_ios< _CharT, _Traits>  __ios_type; 
# 71
typedef basic_istream __istream_type; 
# 73
typedef num_get< _CharT, istreambuf_iterator< _CharT, _Traits> >  __num_get_type; 
# 74
typedef ctype< _CharT>  __ctype_type; 
# 82
protected: std::streamsize _M_gcount; 
# 93
public: explicit basic_istream(__streambuf_type *__sb) : _M_gcount(((std::streamsize)0)) 
# 95
{ this->init(__sb); } 
# 103
virtual ~basic_istream() 
# 104
{ (_M_gcount) = ((std::streamsize)0); } 
# 107
class sentry; 
# 108
friend class sentry; 
# 120 "/usr/include/c++/11/istream" 3
__istream_type &operator>>(__istream_type &(*__pf)(__istream_type &)) 
# 121
{ return __pf(*this); } 
# 124
__istream_type &operator>>(__ios_type &(*__pf)(__ios_type &)) 
# 125
{ 
# 126
__pf(*this); 
# 127
return *this; 
# 128
} 
# 131
__istream_type &operator>>(std::ios_base &(*__pf)(std::ios_base &)) 
# 132
{ 
# 133
__pf(*this); 
# 134
return *this; 
# 135
} 
# 168 "/usr/include/c++/11/istream" 3
__istream_type &operator>>(bool &__n) 
# 169
{ return _M_extract(__n); } 
# 172
__istream_type &operator>>(short & __n); 
# 175
__istream_type &operator>>(unsigned short &__n) 
# 176
{ return _M_extract(__n); } 
# 179
__istream_type &operator>>(int & __n); 
# 182
__istream_type &operator>>(unsigned &__n) 
# 183
{ return _M_extract(__n); } 
# 186
__istream_type &operator>>(long &__n) 
# 187
{ return _M_extract(__n); } 
# 190
__istream_type &operator>>(unsigned long &__n) 
# 191
{ return _M_extract(__n); } 
# 195
__istream_type &operator>>(long long &__n) 
# 196
{ return _M_extract(__n); } 
# 199
__istream_type &operator>>(unsigned long long &__n) 
# 200
{ return _M_extract(__n); } 
# 214 "/usr/include/c++/11/istream" 3
__istream_type &operator>>(float &__f) 
# 215
{ return _M_extract(__f); } 
# 218
__istream_type &operator>>(double &__f) 
# 219
{ return _M_extract(__f); } 
# 222
__istream_type &operator>>(long double &__f) 
# 223
{ return _M_extract(__f); } 
# 235 "/usr/include/c++/11/istream" 3
__istream_type &operator>>(void *&__p) 
# 236
{ return _M_extract(__p); } 
# 259 "/usr/include/c++/11/istream" 3
__istream_type &operator>>(__streambuf_type * __sb); 
# 269 "/usr/include/c++/11/istream" 3
std::streamsize gcount() const 
# 270
{ return _M_gcount; } 
# 302 "/usr/include/c++/11/istream" 3
int_type get(); 
# 316 "/usr/include/c++/11/istream" 3
__istream_type &get(char_type & __c); 
# 343 "/usr/include/c++/11/istream" 3
__istream_type &get(char_type * __s, std::streamsize __n, char_type __delim); 
# 354 "/usr/include/c++/11/istream" 3
__istream_type &get(char_type *__s, std::streamsize __n) 
# 355
{ return this->get(__s, __n, this->widen('\n')); } 
# 377 "/usr/include/c++/11/istream" 3
__istream_type &get(__streambuf_type & __sb, char_type __delim); 
# 387 "/usr/include/c++/11/istream" 3
__istream_type &get(__streambuf_type &__sb) 
# 388
{ return this->get(__sb, this->widen('\n')); } 
# 416 "/usr/include/c++/11/istream" 3
__istream_type &getline(char_type * __s, std::streamsize __n, char_type __delim); 
# 427 "/usr/include/c++/11/istream" 3
__istream_type &getline(char_type *__s, std::streamsize __n) 
# 428
{ return this->getline(__s, __n, this->widen('\n')); } 
# 451 "/usr/include/c++/11/istream" 3
__istream_type &ignore(std::streamsize __n, int_type __delim); 
# 454
__istream_type &ignore(std::streamsize __n); 
# 457
__istream_type &ignore(); 
# 468 "/usr/include/c++/11/istream" 3
int_type peek(); 
# 486 "/usr/include/c++/11/istream" 3
__istream_type &read(char_type * __s, std::streamsize __n); 
# 505 "/usr/include/c++/11/istream" 3
std::streamsize readsome(char_type * __s, std::streamsize __n); 
# 522 "/usr/include/c++/11/istream" 3
__istream_type &putback(char_type __c); 
# 538 "/usr/include/c++/11/istream" 3
__istream_type &unget(); 
# 556 "/usr/include/c++/11/istream" 3
int sync(); 
# 571 "/usr/include/c++/11/istream" 3
pos_type tellg(); 
# 586 "/usr/include/c++/11/istream" 3
__istream_type &seekg(pos_type); 
# 602 "/usr/include/c++/11/istream" 3
__istream_type &seekg(off_type, std::ios_base::seekdir); 
# 606
protected: basic_istream() : _M_gcount(((std::streamsize)0)) 
# 608
{ this->init(0); } 
# 611
basic_istream(const basic_istream &) = delete;
# 613
basic_istream(basic_istream &&__rhs) : __ios_type(), _M_gcount(__rhs._M_gcount) 
# 615
{ 
# 616
__ios_type::move(__rhs); 
# 617
(__rhs._M_gcount) = (0); 
# 618
} 
# 622
basic_istream &operator=(const basic_istream &) = delete;
# 625
basic_istream &operator=(basic_istream &&__rhs) 
# 626
{ 
# 627
swap(__rhs); 
# 628
return *this; 
# 629
} 
# 632
void swap(basic_istream &__rhs) 
# 633
{ 
# 634
__ios_type::swap(__rhs); 
# 635
std::swap(_M_gcount, __rhs._M_gcount); 
# 636
} 
# 639
template< class _ValueT> __istream_type &_M_extract(_ValueT & __v); 
# 642
}; 
# 648
template<> basic_istream< char>  &basic_istream< char> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 653
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n); 
# 658
template<> basic_istream< char>  &basic_istream< char> ::ignore(streamsize __n, int_type __delim); 
# 664
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::getline(char_type * __s, streamsize __n, char_type __delim); 
# 669
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n); 
# 674
template<> basic_istream< wchar_t>  &basic_istream< wchar_t> ::ignore(streamsize __n, int_type __delim); 
# 685 "/usr/include/c++/11/istream" 3
template< class _CharT, class _Traits> 
# 686
class basic_istream< _CharT, _Traits> ::sentry { 
# 689
bool _M_ok; 
# 693
public: typedef _Traits traits_type; 
# 694
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 695
typedef basic_istream __istream_type; 
# 696
typedef typename basic_istream< _CharT, _Traits> ::__ctype_type __ctype_type; 
# 697
typedef typename _Traits::int_type __int_type; 
# 722 "/usr/include/c++/11/istream" 3
explicit sentry(basic_istream & __is, bool __noskipws = false); 
# 734 "/usr/include/c++/11/istream" 3
explicit operator bool() const 
# 735
{ return _M_ok; } 
# 736
}; 
# 750 "/usr/include/c++/11/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __in, _CharT & __c); 
# 754
template< class _Traits> inline basic_istream< char, _Traits>  &
# 756
operator>>(basic_istream< char, _Traits>  &__in, unsigned char &__c) 
# 757
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 759
template< class _Traits> inline basic_istream< char, _Traits>  &
# 761
operator>>(basic_istream< char, _Traits>  &__in, signed char &__c) 
# 762
{ return (__in >> (reinterpret_cast< char &>(__c))); } 
# 766
template< class _CharT, class _Traits> void __istream_extract(basic_istream< _CharT, _Traits>  &, _CharT *, streamsize); 
# 770
void __istream_extract(istream &, char *, streamsize); 
# 800 "/usr/include/c++/11/istream" 3
template< class _CharT, class _Traits> 
# 801
__attribute((__nonnull__(2), __access__(__write_only__ , 2 ))) inline basic_istream< _CharT, _Traits>  &
# 803
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT *__s) 
# 804
{ 
# 834 "/usr/include/c++/11/istream" 3
{ 
# 836
streamsize __n = __gnu_cxx::__numeric_traits_integer< long> ::__max; 
# 837
__n /= sizeof(_CharT); 
# 838
std::__istream_extract(__in, __s, __n); 
# 839
} 
# 840
return __in; 
# 841
} 
# 843
template< class _Traits> 
# 844
__attribute((__nonnull__(2), __access__(__write_only__ , 2 ))) inline basic_istream< char, _Traits>  &
# 846
operator>>(basic_istream< char, _Traits>  &__in, unsigned char *__s) 
# 847
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 849
template< class _Traits> 
# 850
__attribute((__nonnull__(2), __access__(__write_only__ , 2 ))) inline basic_istream< char, _Traits>  &
# 852
operator>>(basic_istream< char, _Traits>  &__in, signed char *__s) 
# 853
{ return __in >> (reinterpret_cast< char *>(__s)); } 
# 889 "/usr/include/c++/11/istream" 3
template< class _CharT, class _Traits> 
# 890
class basic_iostream : public basic_istream< _CharT, _Traits> , public basic_ostream< _CharT, _Traits>  { 
# 898
public: typedef _CharT char_type; 
# 899
typedef typename _Traits::int_type int_type; 
# 900
typedef typename _Traits::pos_type pos_type; 
# 901
typedef typename _Traits::off_type off_type; 
# 902
typedef _Traits traits_type; 
# 905
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 906
typedef basic_ostream< _CharT, _Traits>  __ostream_type; 
# 915
explicit basic_iostream(basic_streambuf< _CharT, _Traits>  *__sb) : __istream_type(__sb), __ostream_type(__sb) 
# 916
{ } 
# 922
virtual ~basic_iostream() { } 
# 925
protected: basic_iostream() : __istream_type(), __ostream_type() 
# 926
{ } 
# 929
basic_iostream(const basic_iostream &) = delete;
# 931
basic_iostream(basic_iostream &&__rhs) : __istream_type(std::move(__rhs)), __ostream_type(*this) 
# 933
{ } 
# 937
basic_iostream &operator=(const basic_iostream &) = delete;
# 940
basic_iostream &operator=(basic_iostream &&__rhs) 
# 941
{ 
# 942
swap(__rhs); 
# 943
return *this; 
# 944
} 
# 947
void swap(basic_iostream &__rhs) 
# 948
{ __istream_type::swap(__rhs); } 
# 950
}; 
# 972 "/usr/include/c++/11/istream" 3
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &ws(basic_istream< _CharT, _Traits>  & __is); 
# 988 "/usr/include/c++/11/istream" 3
template< class _Is, class _Tp, class 
# 989
 = _Require_derived_from_ios_base< _Is> , class 
# 990
 = __decltype((std::declval< _Is &> () >> std::declval< _Tp> ()))> using __rvalue_stream_extraction_t = _Is &&; 
# 1004 "/usr/include/c++/11/istream" 3
template< class _Istream, class _Tp> inline __rvalue_stream_extraction_t< _Istream, _Tp>  
# 1006
operator>>(_Istream &&__is, _Tp &&__x) 
# 1007
{ 
# 1008
__is >> std::forward< _Tp> (__x); 
# 1009
return std::move(__is); 
# 1010
} 
# 1014
}
# 41 "/usr/include/c++/11/bits/istream.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 45
template< class _CharT, class _Traits> 
# 47
basic_istream< _CharT, _Traits> ::sentry::sentry(basic_istream &__in, bool __noskip) : _M_ok(false) 
# 48
{ 
# 49
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 50
if (__in.good()) { 
# 51
try 
# 52
{ 
# 53
if (__in.tie()) { 
# 54
__in.tie()->flush(); }  
# 55
if ((!__noskip) && ((bool)(__in.flags() & ios_base::skipws))) 
# 56
{ 
# 57
const __int_type __eof = traits_type::eof(); 
# 58
__streambuf_type *__sb = __in.rdbuf(); 
# 59
__int_type __c = __sb->sgetc(); 
# 61
const __ctype_type &__ct = __check_facet((__in._M_ctype)); 
# 62
while ((!traits_type::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, traits_type::to_char_type(__c))) { 
# 65
__c = __sb->snextc(); }  
# 70
if (traits_type::eq_int_type(__c, __eof)) { 
# 71
(__err |= std::ios_base::eofbit); }  
# 72
}  
# 73
} 
# 74
catch (__cxxabiv1::__forced_unwind &) 
# 75
{ 
# 76
__in._M_setstate(ios_base::badbit); 
# 77
throw; 
# 78
} 
# 79
catch (...) 
# 80
{ __in._M_setstate(ios_base::badbit); }  }  
# 82
if (__in.good() && (__err == std::ios_base::goodbit)) { 
# 83
(_M_ok) = true; } else 
# 85
{ 
# 86
(__err |= std::ios_base::failbit); 
# 87
__in.setstate(__err); 
# 88
}  
# 89
} 
# 91
template< class _CharT, class _Traits> 
# 92
template< class _ValueT> basic_istream< _CharT, _Traits>  &
# 95
basic_istream< _CharT, _Traits> ::_M_extract(_ValueT &__v) 
# 96
{ 
# 97
sentry __cerb(*this, false); 
# 98
if (__cerb) 
# 99
{ 
# 100
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 101
try 
# 102
{ 
# 103
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 104
__ng.get(*this, 0, *this, __err, __v); 
# 105
} 
# 106
catch (__cxxabiv1::__forced_unwind &) 
# 107
{ 
# 108
this->_M_setstate(ios_base::badbit); 
# 109
throw; 
# 110
} 
# 111
catch (...) 
# 112
{ this->_M_setstate(ios_base::badbit); }  
# 113
if (__err) { 
# 114
this->setstate(__err); }  
# 115
}  
# 116
return *this; 
# 117
} 
# 119
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 122
basic_istream< _CharT, _Traits> ::operator>>(short &__n) 
# 123
{ 
# 126
sentry __cerb(*this, false); 
# 127
if (__cerb) 
# 128
{ 
# 129
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 130
try 
# 131
{ 
# 132
long __l; 
# 133
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 134
__ng.get(*this, 0, *this, __err, __l); 
# 138
if (__l < __gnu_cxx::__numeric_traits_integer< short> ::__min) 
# 139
{ 
# 140
(__err |= std::ios_base::failbit); 
# 141
__n = __gnu_cxx::__numeric_traits_integer< short> ::__min; 
# 142
} else { 
# 143
if (__l > __gnu_cxx::__numeric_traits_integer< short> ::__max) 
# 144
{ 
# 145
(__err |= std::ios_base::failbit); 
# 146
__n = __gnu_cxx::__numeric_traits_integer< short> ::__max; 
# 147
} else { 
# 149
__n = ((short)__l); }  }  
# 150
} 
# 151
catch (__cxxabiv1::__forced_unwind &) 
# 152
{ 
# 153
this->_M_setstate(ios_base::badbit); 
# 154
throw; 
# 155
} 
# 156
catch (...) 
# 157
{ this->_M_setstate(ios_base::badbit); }  
# 158
if (__err) { 
# 159
this->setstate(__err); }  
# 160
}  
# 161
return *this; 
# 162
} 
# 164
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 167
basic_istream< _CharT, _Traits> ::operator>>(int &__n) 
# 168
{ 
# 171
sentry __cerb(*this, false); 
# 172
if (__cerb) 
# 173
{ 
# 174
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 175
try 
# 176
{ 
# 177
long __l; 
# 178
const __num_get_type &__ng = __check_facet((this->_M_num_get)); 
# 179
__ng.get(*this, 0, *this, __err, __l); 
# 183
if (__l < __gnu_cxx::__numeric_traits_integer< int> ::__min) 
# 184
{ 
# 185
(__err |= std::ios_base::failbit); 
# 186
__n = __gnu_cxx::__numeric_traits_integer< int> ::__min; 
# 187
} else { 
# 188
if (__l > __gnu_cxx::__numeric_traits_integer< int> ::__max) 
# 189
{ 
# 190
(__err |= std::ios_base::failbit); 
# 191
__n = __gnu_cxx::__numeric_traits_integer< int> ::__max; 
# 192
} else { 
# 194
__n = ((int)__l); }  }  
# 195
} 
# 196
catch (__cxxabiv1::__forced_unwind &) 
# 197
{ 
# 198
this->_M_setstate(ios_base::badbit); 
# 199
throw; 
# 200
} 
# 201
catch (...) 
# 202
{ this->_M_setstate(ios_base::badbit); }  
# 203
if (__err) { 
# 204
this->setstate(__err); }  
# 205
}  
# 206
return *this; 
# 207
} 
# 209
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 212
basic_istream< _CharT, _Traits> ::operator>>(__streambuf_type *__sbout) 
# 213
{ 
# 214
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 215
sentry __cerb(*this, false); 
# 216
if (__cerb && __sbout) 
# 217
{ 
# 218
try 
# 219
{ 
# 220
bool __ineof; 
# 221
if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof)) { 
# 222
(__err |= std::ios_base::failbit); }  
# 223
if (__ineof) { 
# 224
(__err |= std::ios_base::eofbit); }  
# 225
} 
# 226
catch (__cxxabiv1::__forced_unwind &) 
# 227
{ 
# 228
this->_M_setstate(ios_base::failbit); 
# 229
throw; 
# 230
} 
# 231
catch (...) 
# 232
{ this->_M_setstate(ios_base::failbit); }  
# 233
} else { 
# 234
if (!__sbout) { 
# 235
(__err |= std::ios_base::failbit); }  }  
# 236
if (__err) { 
# 237
this->setstate(__err); }  
# 238
return *this; 
# 239
} 
# 241
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 244
basic_istream< _CharT, _Traits> ::get() 
# 245
{ 
# 246
const int_type __eof = traits_type::eof(); 
# 247
int_type __c = __eof; 
# 248
(_M_gcount) = (0); 
# 249
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 250
sentry __cerb(*this, true); 
# 251
if (__cerb) 
# 252
{ 
# 253
try 
# 254
{ 
# 255
__c = this->rdbuf()->sbumpc(); 
# 257
if (!traits_type::eq_int_type(__c, __eof)) { 
# 258
(_M_gcount) = (1); } else { 
# 260
(__err |= std::ios_base::eofbit); }  
# 261
} 
# 262
catch (__cxxabiv1::__forced_unwind &) 
# 263
{ 
# 264
this->_M_setstate(ios_base::badbit); 
# 265
throw; 
# 266
} 
# 267
catch (...) 
# 268
{ this->_M_setstate(ios_base::badbit); }  
# 269
}  
# 270
if (!(_M_gcount)) { 
# 271
(__err |= std::ios_base::failbit); }  
# 272
if (__err) { 
# 273
this->setstate(__err); }  
# 274
return __c; 
# 275
} 
# 277
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 280
basic_istream< _CharT, _Traits> ::get(char_type &__c) 
# 281
{ 
# 282
(_M_gcount) = (0); 
# 283
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 284
sentry __cerb(*this, true); 
# 285
if (__cerb) 
# 286
{ 
# 287
try 
# 288
{ 
# 289
const int_type __cb = this->rdbuf()->sbumpc(); 
# 291
if (!traits_type::eq_int_type(__cb, traits_type::eof())) 
# 292
{ 
# 293
(_M_gcount) = (1); 
# 294
__c = traits_type::to_char_type(__cb); 
# 295
} else { 
# 297
(__err |= std::ios_base::eofbit); }  
# 298
} 
# 299
catch (__cxxabiv1::__forced_unwind &) 
# 300
{ 
# 301
this->_M_setstate(ios_base::badbit); 
# 302
throw; 
# 303
} 
# 304
catch (...) 
# 305
{ this->_M_setstate(ios_base::badbit); }  
# 306
}  
# 307
if (!(_M_gcount)) { 
# 308
(__err |= std::ios_base::failbit); }  
# 309
if (__err) { 
# 310
this->setstate(__err); }  
# 311
return *this; 
# 312
} 
# 314
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 317
basic_istream< _CharT, _Traits> ::get(char_type *__s, std::streamsize __n, char_type __delim) 
# 318
{ 
# 319
(_M_gcount) = (0); 
# 320
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 321
sentry __cerb(*this, true); 
# 322
if (__cerb) 
# 323
{ 
# 324
try 
# 325
{ 
# 326
const int_type __idelim = traits_type::to_int_type(__delim); 
# 327
const int_type __eof = traits_type::eof(); 
# 328
__streambuf_type *__sb = this->rdbuf(); 
# 329
int_type __c = __sb->sgetc(); 
# 331
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 334
{ 
# 335
(*(__s++)) = traits_type::to_char_type(__c); 
# 336
++(_M_gcount); 
# 337
__c = __sb->snextc(); 
# 338
}  
# 339
if (traits_type::eq_int_type(__c, __eof)) { 
# 340
(__err |= std::ios_base::eofbit); }  
# 341
} 
# 342
catch (__cxxabiv1::__forced_unwind &) 
# 343
{ 
# 344
this->_M_setstate(ios_base::badbit); 
# 345
throw; 
# 346
} 
# 347
catch (...) 
# 348
{ this->_M_setstate(ios_base::badbit); }  
# 349
}  
# 352
if (__n > (0)) { 
# 353
(*__s) = char_type(); }  
# 354
if (!(_M_gcount)) { 
# 355
(__err |= std::ios_base::failbit); }  
# 356
if (__err) { 
# 357
this->setstate(__err); }  
# 358
return *this; 
# 359
} 
# 361
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 364
basic_istream< _CharT, _Traits> ::get(__streambuf_type &__sb, char_type __delim) 
# 365
{ 
# 366
(_M_gcount) = (0); 
# 367
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 368
sentry __cerb(*this, true); 
# 369
if (__cerb) 
# 370
{ 
# 371
try 
# 372
{ 
# 373
const int_type __idelim = traits_type::to_int_type(__delim); 
# 374
const int_type __eof = traits_type::eof(); 
# 375
__streambuf_type *__this_sb = this->rdbuf(); 
# 376
int_type __c = __this_sb->sgetc(); 
# 377
char_type __c2 = traits_type::to_char_type(__c); 
# 378
unsigned long long __gcount = (0); 
# 380
while ((!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim)) && (!traits_type::eq_int_type(__sb.sputc(__c2), __eof))) 
# 383
{ 
# 384
++__gcount; 
# 385
__c = __this_sb->snextc(); 
# 386
__c2 = traits_type::to_char_type(__c); 
# 387
}  
# 388
if (traits_type::eq_int_type(__c, __eof)) { 
# 389
(__err |= std::ios_base::eofbit); }  
# 392
if (__gcount <= __gnu_cxx::__numeric_traits_integer< long> ::__max) { 
# 393
(_M_gcount) = __gcount; } else { 
# 395
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 396
} 
# 397
catch (__cxxabiv1::__forced_unwind &) 
# 398
{ 
# 399
this->_M_setstate(ios_base::badbit); 
# 400
throw; 
# 401
} 
# 402
catch (...) 
# 403
{ this->_M_setstate(ios_base::badbit); }  
# 404
}  
# 405
if (!(_M_gcount)) { 
# 406
(__err |= std::ios_base::failbit); }  
# 407
if (__err) { 
# 408
this->setstate(__err); }  
# 409
return *this; 
# 410
} 
# 412
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 415
basic_istream< _CharT, _Traits> ::getline(char_type *__s, std::streamsize __n, char_type __delim) 
# 416
{ 
# 417
(_M_gcount) = (0); 
# 418
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 419
sentry __cerb(*this, true); 
# 420
if (__cerb) 
# 421
{ 
# 422
try 
# 423
{ 
# 424
const int_type __idelim = traits_type::to_int_type(__delim); 
# 425
const int_type __eof = traits_type::eof(); 
# 426
__streambuf_type *__sb = this->rdbuf(); 
# 427
int_type __c = __sb->sgetc(); 
# 429
while ((((_M_gcount) + (1)) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __idelim))) 
# 432
{ 
# 433
(*(__s++)) = traits_type::to_char_type(__c); 
# 434
__c = __sb->snextc(); 
# 435
++(_M_gcount); 
# 436
}  
# 437
if (traits_type::eq_int_type(__c, __eof)) { 
# 438
(__err |= std::ios_base::eofbit); } else 
# 440
{ 
# 441
if (traits_type::eq_int_type(__c, __idelim)) 
# 442
{ 
# 443
__sb->sbumpc(); 
# 444
++(_M_gcount); 
# 445
} else { 
# 447
(__err |= std::ios_base::failbit); }  
# 448
}  
# 449
} 
# 450
catch (__cxxabiv1::__forced_unwind &) 
# 451
{ 
# 452
this->_M_setstate(ios_base::badbit); 
# 453
throw; 
# 454
} 
# 455
catch (...) 
# 456
{ this->_M_setstate(ios_base::badbit); }  
# 457
}  
# 460
if (__n > (0)) { 
# 461
(*__s) = char_type(); }  
# 462
if (!(_M_gcount)) { 
# 463
(__err |= std::ios_base::failbit); }  
# 464
if (__err) { 
# 465
this->setstate(__err); }  
# 466
return *this; 
# 467
} 
# 472
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 475
basic_istream< _CharT, _Traits> ::ignore() 
# 476
{ 
# 477
(_M_gcount) = (0); 
# 478
sentry __cerb(*this, true); 
# 479
if (__cerb) 
# 480
{ 
# 481
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 482
try 
# 483
{ 
# 484
const int_type __eof = traits_type::eof(); 
# 485
__streambuf_type *__sb = this->rdbuf(); 
# 487
if (traits_type::eq_int_type(__sb->sbumpc(), __eof)) { 
# 488
(__err |= std::ios_base::eofbit); } else { 
# 490
(_M_gcount) = (1); }  
# 491
} 
# 492
catch (__cxxabiv1::__forced_unwind &) 
# 493
{ 
# 494
this->_M_setstate(ios_base::badbit); 
# 495
throw; 
# 496
} 
# 497
catch (...) 
# 498
{ this->_M_setstate(ios_base::badbit); }  
# 499
if (__err) { 
# 500
this->setstate(__err); }  
# 501
}  
# 502
return *this; 
# 503
} 
# 505
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 508
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n) 
# 509
{ 
# 510
(_M_gcount) = (0); 
# 511
sentry __cerb(*this, true); 
# 512
if (__cerb && (__n > (0))) 
# 513
{ 
# 514
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 515
try 
# 516
{ 
# 517
const int_type __eof = traits_type::eof(); 
# 518
__streambuf_type *__sb = this->rdbuf(); 
# 519
int_type __c = __sb->sgetc(); 
# 528 "/usr/include/c++/11/bits/istream.tcc" 3
bool __large_ignore = false; 
# 529
while (true) 
# 530
{ 
# 531
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof))) 
# 533
{ 
# 534
++(_M_gcount); 
# 535
__c = __sb->snextc(); 
# 536
}  
# 537
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof))) 
# 539
{ 
# 540
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 542
__large_ignore = true; 
# 543
} else { 
# 545
break; }  
# 546
}  
# 548
if (__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) 
# 549
{ 
# 550
if (__large_ignore) { 
# 551
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 553
if (traits_type::eq_int_type(__c, __eof)) { 
# 554
(__err |= std::ios_base::eofbit); }  
# 555
} else { 
# 556
if ((_M_gcount) < __n) 
# 557
{ 
# 558
if (traits_type::eq_int_type(__c, __eof)) { 
# 559
(__err |= std::ios_base::eofbit); }  
# 560
}  }  
# 561
} 
# 562
catch (__cxxabiv1::__forced_unwind &) 
# 563
{ 
# 564
this->_M_setstate(ios_base::badbit); 
# 565
throw; 
# 566
} 
# 567
catch (...) 
# 568
{ this->_M_setstate(ios_base::badbit); }  
# 569
if (__err) { 
# 570
this->setstate(__err); }  
# 571
}  
# 572
return *this; 
# 573
} 
# 575
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 578
basic_istream< _CharT, _Traits> ::ignore(std::streamsize __n, int_type __delim) 
# 579
{ 
# 580
(_M_gcount) = (0); 
# 581
sentry __cerb(*this, true); 
# 582
if (__cerb && (__n > (0))) 
# 583
{ 
# 584
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 585
try 
# 586
{ 
# 587
const int_type __eof = traits_type::eof(); 
# 588
__streambuf_type *__sb = this->rdbuf(); 
# 589
int_type __c = __sb->sgetc(); 
# 592
bool __large_ignore = false; 
# 593
while (true) 
# 594
{ 
# 595
while (((_M_gcount) < __n) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 598
{ 
# 599
++(_M_gcount); 
# 600
__c = __sb->snextc(); 
# 601
}  
# 602
if ((__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) && (!traits_type::eq_int_type(__c, __eof)) && (!traits_type::eq_int_type(__c, __delim))) 
# 605
{ 
# 606
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__min; 
# 608
__large_ignore = true; 
# 609
} else { 
# 611
break; }  
# 612
}  
# 614
if (__n == __gnu_cxx::__numeric_traits_integer< long> ::__max) 
# 615
{ 
# 616
if (__large_ignore) { 
# 617
(_M_gcount) = __gnu_cxx::__numeric_traits_integer< long> ::__max; }  
# 619
if (traits_type::eq_int_type(__c, __eof)) { 
# 620
(__err |= std::ios_base::eofbit); } else 
# 622
{ 
# 623
if ((_M_gcount) != __n) { 
# 624
++(_M_gcount); }  
# 625
__sb->sbumpc(); 
# 626
}  
# 627
} else { 
# 628
if ((_M_gcount) < __n) 
# 629
{ 
# 630
if (traits_type::eq_int_type(__c, __eof)) { 
# 631
(__err |= std::ios_base::eofbit); } else 
# 633
{ 
# 634
++(_M_gcount); 
# 635
__sb->sbumpc(); 
# 636
}  
# 637
}  }  
# 638
} 
# 639
catch (__cxxabiv1::__forced_unwind &) 
# 640
{ 
# 641
this->_M_setstate(ios_base::badbit); 
# 642
throw; 
# 643
} 
# 644
catch (...) 
# 645
{ this->_M_setstate(ios_base::badbit); }  
# 646
if (__err) { 
# 647
this->setstate(__err); }  
# 648
}  
# 649
return *this; 
# 650
} 
# 652
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::int_type 
# 655
basic_istream< _CharT, _Traits> ::peek() 
# 656
{ 
# 657
int_type __c = traits_type::eof(); 
# 658
(_M_gcount) = (0); 
# 659
sentry __cerb(*this, true); 
# 660
if (__cerb) 
# 661
{ 
# 662
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 663
try 
# 664
{ 
# 665
__c = this->rdbuf()->sgetc(); 
# 666
if (traits_type::eq_int_type(__c, traits_type::eof())) { 
# 667
(__err |= std::ios_base::eofbit); }  
# 668
} 
# 669
catch (__cxxabiv1::__forced_unwind &) 
# 670
{ 
# 671
this->_M_setstate(ios_base::badbit); 
# 672
throw; 
# 673
} 
# 674
catch (...) 
# 675
{ this->_M_setstate(ios_base::badbit); }  
# 676
if (__err) { 
# 677
this->setstate(__err); }  
# 678
}  
# 679
return __c; 
# 680
} 
# 682
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 685
basic_istream< _CharT, _Traits> ::read(char_type *__s, std::streamsize __n) 
# 686
{ 
# 687
(_M_gcount) = (0); 
# 688
sentry __cerb(*this, true); 
# 689
if (__cerb) 
# 690
{ 
# 691
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 692
try 
# 693
{ 
# 694
(_M_gcount) = this->rdbuf()->sgetn(__s, __n); 
# 695
if ((_M_gcount) != __n) { 
# 696
(__err |= ((std::ios_base::eofbit | std::ios_base::failbit))); }  
# 697
} 
# 698
catch (__cxxabiv1::__forced_unwind &) 
# 699
{ 
# 700
this->_M_setstate(ios_base::badbit); 
# 701
throw; 
# 702
} 
# 703
catch (...) 
# 704
{ this->_M_setstate(ios_base::badbit); }  
# 705
if (__err) { 
# 706
this->setstate(__err); }  
# 707
}  
# 708
return *this; 
# 709
} 
# 711
template< class _CharT, class _Traits> streamsize 
# 714
basic_istream< _CharT, _Traits> ::readsome(char_type *__s, std::streamsize __n) 
# 715
{ 
# 716
(_M_gcount) = (0); 
# 717
sentry __cerb(*this, true); 
# 718
if (__cerb) 
# 719
{ 
# 720
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 721
try 
# 722
{ 
# 724
const std::streamsize __num = this->rdbuf()->in_avail(); 
# 725
if (__num > (0)) { 
# 726
(_M_gcount) = this->rdbuf()->sgetn(__s, std::min(__num, __n)); } else { 
# 727
if (__num == (-1)) { 
# 728
(__err |= std::ios_base::eofbit); }  }  
# 729
} 
# 730
catch (__cxxabiv1::__forced_unwind &) 
# 731
{ 
# 732
this->_M_setstate(ios_base::badbit); 
# 733
throw; 
# 734
} 
# 735
catch (...) 
# 736
{ this->_M_setstate(ios_base::badbit); }  
# 737
if (__err) { 
# 738
this->setstate(__err); }  
# 739
}  
# 740
return _M_gcount; 
# 741
} 
# 743
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 746
basic_istream< _CharT, _Traits> ::putback(char_type __c) 
# 747
{ 
# 750
(_M_gcount) = (0); 
# 752
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 753
sentry __cerb(*this, true); 
# 754
if (__cerb) 
# 755
{ 
# 756
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 757
try 
# 758
{ 
# 759
const int_type __eof = traits_type::eof(); 
# 760
__streambuf_type *__sb = this->rdbuf(); 
# 761
if ((!__sb) || traits_type::eq_int_type(__sb->sputbackc(__c), __eof)) { 
# 763
(__err |= std::ios_base::badbit); }  
# 764
} 
# 765
catch (__cxxabiv1::__forced_unwind &) 
# 766
{ 
# 767
this->_M_setstate(ios_base::badbit); 
# 768
throw; 
# 769
} 
# 770
catch (...) 
# 771
{ this->_M_setstate(ios_base::badbit); }  
# 772
if (__err) { 
# 773
this->setstate(__err); }  
# 774
}  
# 775
return *this; 
# 776
} 
# 778
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::__istream_type &
# 781
basic_istream< _CharT, _Traits> ::unget() 
# 782
{ 
# 785
(_M_gcount) = (0); 
# 787
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 788
sentry __cerb(*this, true); 
# 789
if (__cerb) 
# 790
{ 
# 791
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 792
try 
# 793
{ 
# 794
const int_type __eof = traits_type::eof(); 
# 795
__streambuf_type *__sb = this->rdbuf(); 
# 796
if ((!__sb) || traits_type::eq_int_type(__sb->sungetc(), __eof)) { 
# 798
(__err |= std::ios_base::badbit); }  
# 799
} 
# 800
catch (__cxxabiv1::__forced_unwind &) 
# 801
{ 
# 802
this->_M_setstate(ios_base::badbit); 
# 803
throw; 
# 804
} 
# 805
catch (...) 
# 806
{ this->_M_setstate(ios_base::badbit); }  
# 807
if (__err) { 
# 808
this->setstate(__err); }  
# 809
}  
# 810
return *this; 
# 811
} 
# 813
template< class _CharT, class _Traits> int 
# 816
basic_istream< _CharT, _Traits> ::sync() 
# 817
{ 
# 820
int __ret = (-1); 
# 821
sentry __cerb(*this, true); 
# 822
if (__cerb) 
# 823
{ 
# 824
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 825
try 
# 826
{ 
# 827
__streambuf_type *__sb = this->rdbuf(); 
# 828
if (__sb) 
# 829
{ 
# 830
if (__sb->pubsync() == (-1)) { 
# 831
(__err |= std::ios_base::badbit); } else { 
# 833
__ret = 0; }  
# 834
}  
# 835
} 
# 836
catch (__cxxabiv1::__forced_unwind &) 
# 837
{ 
# 838
this->_M_setstate(ios_base::badbit); 
# 839
throw; 
# 840
} 
# 841
catch (...) 
# 842
{ this->_M_setstate(ios_base::badbit); }  
# 843
if (__err) { 
# 844
this->setstate(__err); }  
# 845
}  
# 846
return __ret; 
# 847
} 
# 849
template< class _CharT, class _Traits> typename basic_istream< _CharT, _Traits> ::pos_type 
# 852
basic_istream< _CharT, _Traits> ::tellg() 
# 853
{ 
# 856
pos_type __ret = ((pos_type)(-1)); 
# 857
sentry __cerb(*this, true); 
# 858
if (__cerb) 
# 859
{ 
# 860
try 
# 861
{ 
# 862
if (!this->fail()) { 
# 863
__ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::in); }  
# 865
} 
# 866
catch (__cxxabiv1::__forced_unwind &) 
# 867
{ 
# 868
this->_M_setstate(ios_base::badbit); 
# 869
throw; 
# 870
} 
# 871
catch (...) 
# 872
{ this->_M_setstate(ios_base::badbit); }  
# 873
}  
# 874
return __ret; 
# 875
} 
# 877
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 880
basic_istream< _CharT, _Traits> ::seekg(pos_type __pos) 
# 881
{ 
# 885
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 886
sentry __cerb(*this, true); 
# 887
if (__cerb) 
# 888
{ 
# 889
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 890
try 
# 891
{ 
# 892
if (!this->fail()) 
# 893
{ 
# 895
const pos_type __p = this->rdbuf()->pubseekpos(__pos, ios_base::in); 
# 899
if (__p == ((pos_type)((off_type)(-1)))) { 
# 900
(__err |= std::ios_base::failbit); }  
# 901
}  
# 902
} 
# 903
catch (__cxxabiv1::__forced_unwind &) 
# 904
{ 
# 905
this->_M_setstate(ios_base::badbit); 
# 906
throw; 
# 907
} 
# 908
catch (...) 
# 909
{ this->_M_setstate(ios_base::badbit); }  
# 910
if (__err) { 
# 911
this->setstate(__err); }  
# 912
}  
# 913
return *this; 
# 914
} 
# 916
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 919
basic_istream< _CharT, _Traits> ::seekg(off_type __off, std::ios_base::seekdir __dir) 
# 920
{ 
# 924
this->clear(this->rdstate() & (~std::ios_base::eofbit)); 
# 925
sentry __cerb(*this, true); 
# 926
if (__cerb) 
# 927
{ 
# 928
std::ios_base::iostate __err = std::ios_base::goodbit; 
# 929
try 
# 930
{ 
# 931
if (!this->fail()) 
# 932
{ 
# 934
const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir, ios_base::in); 
# 938
if (__p == ((pos_type)((off_type)(-1)))) { 
# 939
(__err |= std::ios_base::failbit); }  
# 940
}  
# 941
} 
# 942
catch (__cxxabiv1::__forced_unwind &) 
# 943
{ 
# 944
this->_M_setstate(ios_base::badbit); 
# 945
throw; 
# 946
} 
# 947
catch (...) 
# 948
{ this->_M_setstate(ios_base::badbit); }  
# 949
if (__err) { 
# 950
this->setstate(__err); }  
# 951
}  
# 952
return *this; 
# 953
} 
# 956
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 958
operator>>(basic_istream< _CharT, _Traits>  &__in, _CharT &__c) 
# 959
{ 
# 960
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 961
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 963
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 964
if (__cerb) 
# 965
{ 
# 966
ios_base::iostate __err = ios_base::goodbit; 
# 967
try 
# 968
{ 
# 969
const __int_type __cb = __in.rdbuf()->sbumpc(); 
# 970
if (!_Traits::eq_int_type(__cb, _Traits::eof())) { 
# 971
__c = _Traits::to_char_type(__cb); } else { 
# 973
(__err |= ((ios_base::eofbit | ios_base::failbit))); }  
# 974
} 
# 975
catch (__cxxabiv1::__forced_unwind &) 
# 976
{ 
# 977
__in._M_setstate(ios_base::badbit); 
# 978
throw; 
# 979
} 
# 980
catch (...) 
# 981
{ __in._M_setstate(ios_base::badbit); }  
# 982
if (__err) { 
# 983
__in.setstate(__err); }  
# 984
}  
# 985
return __in; 
# 986
} 
# 988
template< class _CharT, class _Traits> void 
# 990
__istream_extract(basic_istream< _CharT, _Traits>  &__in, _CharT *__s, streamsize 
# 991
__num) 
# 992
{ 
# 993
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 994
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 995
typedef typename _Traits::int_type int_type; 
# 996
typedef _CharT char_type; 
# 997
typedef ctype< _CharT>  __ctype_type; 
# 999
streamsize __extracted = (0); 
# 1000
ios_base::iostate __err = ios_base::goodbit; 
# 1001
typename basic_istream< _CharT, _Traits> ::sentry __cerb(__in, false); 
# 1002
if (__cerb) 
# 1003
{ 
# 1004
try 
# 1005
{ 
# 1007
streamsize __width = __in.width(); 
# 1008
if (((0) < __width) && (__width < __num)) { 
# 1009
__num = __width; }  
# 1011
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1013
const int_type __eof = _Traits::eof(); 
# 1014
__streambuf_type *__sb = __in.rdbuf(); 
# 1015
int_type __c = __sb->sgetc(); 
# 1017
while ((__extracted < (__num - (1))) && (!_Traits::eq_int_type(__c, __eof)) && (!__ct.is(ctype_base::space, _Traits::to_char_type(__c)))) 
# 1021
{ 
# 1022
(*(__s++)) = _Traits::to_char_type(__c); 
# 1023
++__extracted; 
# 1024
__c = __sb->snextc(); 
# 1025
}  
# 1027
if ((__extracted < (__num - (1))) && _Traits::eq_int_type(__c, __eof)) { 
# 1029
(__err |= ios_base::eofbit); }  
# 1033
(*__s) = char_type(); 
# 1034
__in.width(0); 
# 1035
} 
# 1036
catch (__cxxabiv1::__forced_unwind &) 
# 1037
{ 
# 1038
__in._M_setstate(ios_base::badbit); 
# 1039
throw; 
# 1040
} 
# 1041
catch (...) 
# 1042
{ __in._M_setstate(ios_base::badbit); }  
# 1043
}  
# 1044
if (!__extracted) { 
# 1045
(__err |= ios_base::failbit); }  
# 1046
if (__err) { 
# 1047
__in.setstate(__err); }  
# 1048
} 
# 1051
template< class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1053
ws(basic_istream< _CharT, _Traits>  &__in) 
# 1054
{ 
# 1055
typedef basic_istream< _CharT, _Traits>  __istream_type; 
# 1056
typedef basic_streambuf< _CharT, _Traits>  __streambuf_type; 
# 1057
typedef typename basic_istream< _CharT, _Traits> ::int_type __int_type; 
# 1058
typedef ctype< _CharT>  __ctype_type; 
# 1060
const __ctype_type &__ct = use_facet< ctype< _CharT> > (__in.getloc()); 
# 1061
const __int_type __eof = _Traits::eof(); 
# 1062
__streambuf_type *__sb = __in.rdbuf(); 
# 1063
__int_type __c = __sb->sgetc(); 
# 1065
while ((!_Traits::eq_int_type(__c, __eof)) && __ct.is(ctype_base::space, _Traits::to_char_type(__c))) { 
# 1067
__c = __sb->snextc(); }  
# 1069
if (_Traits::eq_int_type(__c, __eof)) { 
# 1070
__in.setstate(ios_base::eofbit); }  
# 1071
return __in; 
# 1072
} 
# 1077
extern template class basic_istream< char> ;
# 1078
extern template basic_istream< char>  &ws(basic_istream< char>  & __is);
# 1079
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, char & __c);
# 1080
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, unsigned char & __c);
# 1081
extern template basic_istream< char>  &operator>>(basic_istream< char>  & __in, signed char & __c);
# 1083
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned short & __v);
# 1084
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned & __v);
# 1085
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long & __v);
# 1086
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long & __v);
# 1087
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(bool & __v);
# 1089
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long long & __v);
# 1090
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(unsigned long long & __v);
# 1092
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(float & __v);
# 1093
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(double & __v);
# 1094
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(long double & __v);
# 1095
extern template basic_istream< char> ::__istream_type &basic_istream< char> ::_M_extract(void *& __v);
# 1097
extern template class basic_iostream< char> ;
# 1100
extern template class basic_istream< wchar_t> ;
# 1101
extern template basic_istream< wchar_t>  &ws(basic_istream< wchar_t>  & __is);
# 1102
extern template basic_istream< wchar_t>  &operator>>(basic_istream< wchar_t>  & __in, wchar_t & __c);
# 1103
extern template void __istream_extract(basic_istream< wchar_t>  &, wchar_t *, streamsize);
# 1105
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned short & __v);
# 1106
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned & __v);
# 1107
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long & __v);
# 1108
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long & __v);
# 1109
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(bool & __v);
# 1111
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long long & __v);
# 1112
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(unsigned long long & __v);
# 1114
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(float & __v);
# 1115
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(double & __v);
# 1116
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(long double & __v);
# 1117
extern template basic_istream< wchar_t> ::__istream_type &basic_istream< wchar_t> ::_M_extract(void *& __v);
# 1119
extern template class basic_iostream< wchar_t> ;
# 1124
}
# 42 "/usr/include/c++/11/iostream" 3
namespace std __attribute((__visibility__("default"))) { 
# 60 "/usr/include/c++/11/iostream" 3
extern istream cin; 
# 61
extern ostream cout; 
# 62
extern ostream cerr; 
# 63
extern ostream clog; 
# 66
extern wistream wcin; 
# 67
extern wostream wcout; 
# 68
extern wostream wcerr; 
# 69
extern wostream wclog; 
# 74
static ios_base::Init __ioinit; 
# 77
}
# 70 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 80
template< bool _TrivialValueTypes> 
# 81
struct __uninitialized_copy { 
# 83
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 85
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 86
__result) 
# 87
{ 
# 88
_ForwardIterator __cur = __result; 
# 89
try 
# 90
{ 
# 91
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 92
std::_Construct(std::__addressof(*__cur), *__first); }  
# 93
return __cur; 
# 94
} 
# 95
catch (...) 
# 96
{ 
# 97
std::_Destroy(__result, __cur); 
# 98
throw; 
# 99
}  
# 100
} 
# 101
}; 
# 104
template<> struct __uninitialized_copy< true>  { 
# 106
template< class _InputIterator, class _ForwardIterator> static _ForwardIterator 
# 108
__uninit_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 109
__result) 
# 110
{ return std::copy(__first, __last, __result); } 
# 111
}; 
# 124 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 126
uninitialized_copy(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 127
__result) 
# 128
{ 
# 130
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType1; 
# 132
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 138
static_assert((is_constructible< typename iterator_traits< _ForwardIterator> ::value_type, __decltype((*__first))> ::value), "result type must be constructible from value type of input range");
# 141
typedef typename iterator_traits< _InputIterator> ::reference _RefType1; 
# 142
typedef typename iterator_traits< _ForwardIterator> ::reference _RefType2; 
# 145
const bool __assignable = (is_assignable< typename iterator_traits< _ForwardIterator> ::reference, typename iterator_traits< _InputIterator> ::reference> ::value); 
# 148
return std::template __uninitialized_copy< __is_trivial(_ValueType1) && __is_trivial(_ValueType2) && __assignable> ::__uninit_copy(__first, __last, __result); 
# 152
} 
# 156
template< bool _TrivialValueType> 
# 157
struct __uninitialized_fill { 
# 159
template< class _ForwardIterator, class _Tp> static void 
# 161
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 162
__x) 
# 163
{ 
# 164
_ForwardIterator __cur = __first; 
# 165
try 
# 166
{ 
# 167
for (; __cur != __last; ++__cur) { 
# 168
std::_Construct(std::__addressof(*__cur), __x); }  
# 169
} 
# 170
catch (...) 
# 171
{ 
# 172
std::_Destroy(__first, __cur); 
# 173
throw; 
# 174
}  
# 175
} 
# 176
}; 
# 179
template<> struct __uninitialized_fill< true>  { 
# 181
template< class _ForwardIterator, class _Tp> static void 
# 183
__uninit_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 184
__x) 
# 185
{ std::fill(__first, __last, __x); } 
# 186
}; 
# 199 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Tp> inline void 
# 201
uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 202
__x) 
# 203
{ 
# 205
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 211
static_assert((is_constructible< typename iterator_traits< _ForwardIterator> ::value_type, const _Tp &> ::value), "result type must be constructible from input type");
# 216
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 219
std::template __uninitialized_fill< __is_trivial(_ValueType) && __assignable> ::__uninit_fill(__first, __last, __x); 
# 221
} 
# 225
template< bool _TrivialValueType> 
# 226
struct __uninitialized_fill_n { 
# 228
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 230
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 231
__x) 
# 232
{ 
# 233
_ForwardIterator __cur = __first; 
# 234
try 
# 235
{ 
# 236
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 237
std::_Construct(std::__addressof(*__cur), __x); }  
# 238
return __cur; 
# 239
} 
# 240
catch (...) 
# 241
{ 
# 242
std::_Destroy(__first, __cur); 
# 243
throw; 
# 244
}  
# 245
} 
# 246
}; 
# 249
template<> struct __uninitialized_fill_n< true>  { 
# 251
template< class _ForwardIterator, class _Size, class _Tp> static _ForwardIterator 
# 253
__uninit_fill_n(_ForwardIterator __first, _Size __n, const _Tp &
# 254
__x) 
# 255
{ return std::fill_n(__first, __n, __x); } 
# 256
}; 
# 271 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 273
uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp &__x) 
# 274
{ 
# 276
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 288 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
static_assert((is_constructible< typename iterator_traits< _ForwardIterator> ::value_type, const _Tp &> ::value), "result type must be constructible from input type");
# 293
constexpr bool __can_fill = (__and_< is_integral< _Size> , is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> > ::value); 
# 296
return __uninitialized_fill_n< __is_trivial(_ValueType) && __can_fill> ::__uninit_fill_n(__first, __n, __x); 
# 298
} 
# 308 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator, class 
# 309
_Allocator> _ForwardIterator 
# 311
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 312
__result, _Allocator &__alloc) 
# 313
{ 
# 314
_ForwardIterator __cur = __result; 
# 315
try 
# 316
{ 
# 317
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 318
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 319
__traits::construct(__alloc, std::__addressof(*__cur), *__first); }  
# 320
return __cur; 
# 321
} 
# 322
catch (...) 
# 323
{ 
# 324
std::_Destroy(__result, __cur, __alloc); 
# 325
throw; 
# 326
}  
# 327
} 
# 329
template< class _InputIterator, class _ForwardIterator, class _Tp> inline _ForwardIterator 
# 331
__uninitialized_copy_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 332
__result, allocator< _Tp>  &) 
# 333
{ return std::uninitialized_copy(__first, __last, __result); } 
# 335
template< class _InputIterator, class _ForwardIterator, class 
# 336
_Allocator> inline _ForwardIterator 
# 338
__uninitialized_move_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 339
__result, _Allocator &__alloc) 
# 340
{ 
# 341
return std::__uninitialized_copy_a(std::make_move_iterator(__first), std::make_move_iterator(__last), __result, __alloc); 
# 344
} 
# 346
template< class _InputIterator, class _ForwardIterator, class 
# 347
_Allocator> inline _ForwardIterator 
# 349
__uninitialized_move_if_noexcept_a(_InputIterator __first, _InputIterator 
# 350
__last, _ForwardIterator 
# 351
__result, _Allocator &
# 352
__alloc) 
# 353
{ 
# 354
return std::__uninitialized_copy_a(std::__make_move_if_noexcept_iterator(__first), std::__make_move_if_noexcept_iterator(__last), __result, __alloc); 
# 357
} 
# 359
template< class _ForwardIterator, class _Tp, class _Allocator> void 
# 361
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 362
__x, _Allocator &__alloc) 
# 363
{ 
# 364
_ForwardIterator __cur = __first; 
# 365
try 
# 366
{ 
# 367
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 368
for (; __cur != __last; ++__cur) { 
# 369
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 370
} 
# 371
catch (...) 
# 372
{ 
# 373
std::_Destroy(__first, __cur, __alloc); 
# 374
throw; 
# 375
}  
# 376
} 
# 378
template< class _ForwardIterator, class _Tp, class _Tp2> inline void 
# 380
__uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last, const _Tp &
# 381
__x, allocator< _Tp2>  &) 
# 382
{ std::uninitialized_fill(__first, __last, __x); } 
# 384
template< class _ForwardIterator, class _Size, class _Tp, class 
# 385
_Allocator> _ForwardIterator 
# 387
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 388
__x, _Allocator &__alloc) 
# 389
{ 
# 390
_ForwardIterator __cur = __first; 
# 391
try 
# 392
{ 
# 393
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 394
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 395
__traits::construct(__alloc, std::__addressof(*__cur), __x); }  
# 396
return __cur; 
# 397
} 
# 398
catch (...) 
# 399
{ 
# 400
std::_Destroy(__first, __cur, __alloc); 
# 401
throw; 
# 402
}  
# 403
} 
# 405
template< class _ForwardIterator, class _Size, class _Tp, class 
# 406
_Tp2> inline _ForwardIterator 
# 408
__uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, const _Tp &
# 409
__x, allocator< _Tp2>  &) 
# 410
{ return std::uninitialized_fill_n(__first, __n, __x); } 
# 422 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator1, class _InputIterator2, class 
# 423
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 425
__uninitialized_copy_move(_InputIterator1 __first1, _InputIterator1 
# 426
__last1, _InputIterator2 
# 427
__first2, _InputIterator2 
# 428
__last2, _ForwardIterator 
# 429
__result, _Allocator &
# 430
__alloc) 
# 431
{ 
# 432
_ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1, __result, __alloc); 
# 435
try 
# 436
{ 
# 437
return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc); 
# 438
} 
# 439
catch (...) 
# 440
{ 
# 441
std::_Destroy(__result, __mid, __alloc); 
# 442
throw; 
# 443
}  
# 444
} 
# 450
template< class _InputIterator1, class _InputIterator2, class 
# 451
_ForwardIterator, class _Allocator> inline _ForwardIterator 
# 453
__uninitialized_move_copy(_InputIterator1 __first1, _InputIterator1 
# 454
__last1, _InputIterator2 
# 455
__first2, _InputIterator2 
# 456
__last2, _ForwardIterator 
# 457
__result, _Allocator &
# 458
__alloc) 
# 459
{ 
# 460
_ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1, __result, __alloc); 
# 463
try 
# 464
{ 
# 465
return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc); 
# 466
} 
# 467
catch (...) 
# 468
{ 
# 469
std::_Destroy(__result, __mid, __alloc); 
# 470
throw; 
# 471
}  
# 472
} 
# 477
template< class _ForwardIterator, class _Tp, class _InputIterator, class 
# 478
_Allocator> inline _ForwardIterator 
# 480
__uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid, const _Tp &
# 481
__x, _InputIterator __first, _InputIterator 
# 482
__last, _Allocator &__alloc) 
# 483
{ 
# 484
std::__uninitialized_fill_a(__result, __mid, __x, __alloc); 
# 485
try 
# 486
{ 
# 487
return std::__uninitialized_move_a(__first, __last, __mid, __alloc); 
# 488
} 
# 489
catch (...) 
# 490
{ 
# 491
std::_Destroy(__result, __mid, __alloc); 
# 492
throw; 
# 493
}  
# 494
} 
# 499
template< class _InputIterator, class _ForwardIterator, class _Tp, class 
# 500
_Allocator> inline void 
# 502
__uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1, _ForwardIterator 
# 503
__first2, _ForwardIterator 
# 504
__last2, const _Tp &__x, _Allocator &
# 505
__alloc) 
# 506
{ 
# 507
_ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1, __first2, __alloc); 
# 510
try 
# 511
{ 
# 512
std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc); 
# 513
} 
# 514
catch (...) 
# 515
{ 
# 516
std::_Destroy(__first2, __mid2, __alloc); 
# 517
throw; 
# 518
}  
# 519
} 
# 529 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< bool _TrivialValueType> 
# 530
struct __uninitialized_default_1 { 
# 532
template< class _ForwardIterator> static void 
# 534
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 535
{ 
# 536
_ForwardIterator __cur = __first; 
# 537
try 
# 538
{ 
# 539
for (; __cur != __last; ++__cur) { 
# 540
std::_Construct(std::__addressof(*__cur)); }  
# 541
} 
# 542
catch (...) 
# 543
{ 
# 544
std::_Destroy(__first, __cur); 
# 545
throw; 
# 546
}  
# 547
} 
# 548
}; 
# 551
template<> struct __uninitialized_default_1< true>  { 
# 553
template< class _ForwardIterator> static void 
# 555
__uninit_default(_ForwardIterator __first, _ForwardIterator __last) 
# 556
{ 
# 557
if (__first == __last) { 
# 558
return; }  
# 560
typename iterator_traits< _ForwardIterator> ::value_type *__val = std::__addressof(*__first); 
# 562
std::_Construct(__val); 
# 563
if ((++__first) != __last) { 
# 564
std::fill(__first, __last, *__val); }  
# 565
} 
# 566
}; 
# 568
template< bool _TrivialValueType> 
# 569
struct __uninitialized_default_n_1 { 
# 571
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 573
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 574
{ 
# 575
_ForwardIterator __cur = __first; 
# 576
try 
# 577
{ 
# 578
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 579
std::_Construct(std::__addressof(*__cur)); }  
# 580
return __cur; 
# 581
} 
# 582
catch (...) 
# 583
{ 
# 584
std::_Destroy(__first, __cur); 
# 585
throw; 
# 586
}  
# 587
} 
# 588
}; 
# 591
template<> struct __uninitialized_default_n_1< true>  { 
# 593
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 595
__uninit_default_n(_ForwardIterator __first, _Size __n) 
# 596
{ 
# 597
if (__n > 0) 
# 598
{ 
# 599
typename iterator_traits< _ForwardIterator> ::value_type *__val = std::__addressof(*__first); 
# 601
std::_Construct(__val); 
# 602
++__first; 
# 603
__first = std::fill_n(__first, __n - 1, *__val); 
# 604
}  
# 605
return __first; 
# 606
} 
# 607
}; 
# 611
template< class _ForwardIterator> inline void 
# 613
__uninitialized_default(_ForwardIterator __first, _ForwardIterator 
# 614
__last) 
# 615
{ 
# 617
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 619
const bool __assignable = (is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> ::value); 
# 621
std::template __uninitialized_default_1< __is_trivial(_ValueType) && __assignable> ::__uninit_default(__first, __last); 
# 624
} 
# 628
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 630
__uninitialized_default_n(_ForwardIterator __first, _Size __n) 
# 631
{ 
# 633
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 635
constexpr bool __can_fill = (__and_< is_integral< _Size> , is_copy_assignable< typename iterator_traits< _ForwardIterator> ::value_type> > ::value); 
# 638
return __uninitialized_default_n_1< __is_trivial(_ValueType) && __can_fill> ::__uninit_default_n(__first, __n); 
# 641
} 
# 647
template< class _ForwardIterator, class _Allocator> void 
# 649
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 650
__last, _Allocator &
# 651
__alloc) 
# 652
{ 
# 653
_ForwardIterator __cur = __first; 
# 654
try 
# 655
{ 
# 656
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 657
for (; __cur != __last; ++__cur) { 
# 658
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 659
} 
# 660
catch (...) 
# 661
{ 
# 662
std::_Destroy(__first, __cur, __alloc); 
# 663
throw; 
# 664
}  
# 665
} 
# 667
template< class _ForwardIterator, class _Tp> inline void 
# 669
__uninitialized_default_a(_ForwardIterator __first, _ForwardIterator 
# 670
__last, allocator< _Tp>  &) 
# 672
{ std::__uninitialized_default(__first, __last); } 
# 678
template< class _ForwardIterator, class _Size, class _Allocator> _ForwardIterator 
# 680
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, _Allocator &
# 681
__alloc) 
# 682
{ 
# 683
_ForwardIterator __cur = __first; 
# 684
try 
# 685
{ 
# 686
typedef __gnu_cxx::__alloc_traits< _Allocator>  __traits; 
# 687
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 688
__traits::construct(__alloc, std::__addressof(*__cur)); }  
# 689
return __cur; 
# 690
} 
# 691
catch (...) 
# 692
{ 
# 693
std::_Destroy(__first, __cur, __alloc); 
# 694
throw; 
# 695
}  
# 696
} 
# 700
template< class _ForwardIterator, class _Size, class _Tp> inline _ForwardIterator 
# 702
__uninitialized_default_n_a(_ForwardIterator __first, _Size __n, allocator< _Tp>  &) 
# 704
{ return std::__uninitialized_default_n(__first, __n); } 
# 706
template< bool _TrivialValueType> 
# 707
struct __uninitialized_default_novalue_1 { 
# 709
template< class _ForwardIterator> static void 
# 711
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 712
__last) 
# 713
{ 
# 714
_ForwardIterator __cur = __first; 
# 715
try 
# 716
{ 
# 717
for (; __cur != __last; ++__cur) { 
# 718
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 719
} 
# 720
catch (...) 
# 721
{ 
# 722
std::_Destroy(__first, __cur); 
# 723
throw; 
# 724
}  
# 725
} 
# 726
}; 
# 729
template<> struct __uninitialized_default_novalue_1< true>  { 
# 731
template< class _ForwardIterator> static void 
# 733
__uninit_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 734
__last) 
# 735
{ 
# 736
} 
# 737
}; 
# 739
template< bool _TrivialValueType> 
# 740
struct __uninitialized_default_novalue_n_1 { 
# 742
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 744
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 745
{ 
# 746
_ForwardIterator __cur = __first; 
# 747
try 
# 748
{ 
# 749
for (; __n > 0; (--__n), ((void)(++__cur))) { 
# 750
std::_Construct_novalue(std::__addressof(*__cur)); }  
# 751
return __cur; 
# 752
} 
# 753
catch (...) 
# 754
{ 
# 755
std::_Destroy(__first, __cur); 
# 756
throw; 
# 757
}  
# 758
} 
# 759
}; 
# 762
template<> struct __uninitialized_default_novalue_n_1< true>  { 
# 764
template< class _ForwardIterator, class _Size> static _ForwardIterator 
# 766
__uninit_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 767
{ return std::next(__first, __n); } 
# 768
}; 
# 772
template< class _ForwardIterator> inline void 
# 774
__uninitialized_default_novalue(_ForwardIterator __first, _ForwardIterator 
# 775
__last) 
# 776
{ 
# 778
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 780
std::template __uninitialized_default_novalue_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue(__first, __last); 
# 783
} 
# 787
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 789
__uninitialized_default_novalue_n(_ForwardIterator __first, _Size __n) 
# 790
{ 
# 792
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType; 
# 794
return __uninitialized_default_novalue_n_1< is_trivially_default_constructible< typename iterator_traits< _ForwardIterator> ::value_type> ::value> ::__uninit_default_novalue_n(__first, __n); 
# 797
} 
# 799
template< class _InputIterator, class _Size, class 
# 800
_ForwardIterator> _ForwardIterator 
# 802
__uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 803
__result, input_iterator_tag) 
# 804
{ 
# 805
_ForwardIterator __cur = __result; 
# 806
try 
# 807
{ 
# 808
for (; __n > 0; ((--__n), ((void)(++__first))), (++__cur)) { 
# 809
std::_Construct(std::__addressof(*__cur), *__first); }  
# 810
return __cur; 
# 811
} 
# 812
catch (...) 
# 813
{ 
# 814
std::_Destroy(__result, __cur); 
# 815
throw; 
# 816
}  
# 817
} 
# 819
template< class _RandomAccessIterator, class _Size, class 
# 820
_ForwardIterator> inline _ForwardIterator 
# 822
__uninitialized_copy_n(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 823
__result, random_access_iterator_tag) 
# 825
{ return std::uninitialized_copy(__first, __first + __n, __result); } 
# 827
template< class _InputIterator, class _Size, class 
# 828
_ForwardIterator> pair< _InputIterator, _ForwardIterator>  
# 830
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 831
__result, input_iterator_tag) 
# 832
{ 
# 833
_ForwardIterator __cur = __result; 
# 834
try 
# 835
{ 
# 836
for (; __n > 0; ((--__n), ((void)(++__first))), (++__cur)) { 
# 837
std::_Construct(std::__addressof(*__cur), *__first); }  
# 838
return {__first, __cur}; 
# 839
} 
# 840
catch (...) 
# 841
{ 
# 842
std::_Destroy(__result, __cur); 
# 843
throw; 
# 844
}  
# 845
} 
# 847
template< class _RandomAccessIterator, class _Size, class 
# 848
_ForwardIterator> inline pair< _RandomAccessIterator, _ForwardIterator>  
# 850
__uninitialized_copy_n_pair(_RandomAccessIterator __first, _Size __n, _ForwardIterator 
# 851
__result, random_access_iterator_tag) 
# 853
{ 
# 854
auto __second_res = uninitialized_copy(__first, __first + __n, __result); 
# 855
auto __first_res = std::next(__first, __n); 
# 856
return {__first_res, __second_res}; 
# 857
} 
# 870 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _Size, class _ForwardIterator> inline _ForwardIterator 
# 872
uninitialized_copy_n(_InputIterator __first, _Size __n, _ForwardIterator 
# 873
__result) 
# 874
{ return std::__uninitialized_copy_n(__first, __n, __result, std::__iterator_category(__first)); 
# 875
} 
# 878
template< class _InputIterator, class _Size, class _ForwardIterator> inline pair< _InputIterator, _ForwardIterator>  
# 880
__uninitialized_copy_n_pair(_InputIterator __first, _Size __n, _ForwardIterator 
# 881
__result) 
# 882
{ 
# 883
return std::__uninitialized_copy_n_pair(__first, __n, __result, std::__iterator_category(__first)); 
# 886
} 
# 898 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _ForwardIterator> inline void 
# 900
uninitialized_default_construct(_ForwardIterator __first, _ForwardIterator 
# 901
__last) 
# 902
{ 
# 903
__uninitialized_default_novalue(__first, __last); 
# 904
} 
# 912
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 914
uninitialized_default_construct_n(_ForwardIterator __first, _Size __count) 
# 915
{ 
# 916
return __uninitialized_default_novalue_n(__first, __count); 
# 917
} 
# 924
template< class _ForwardIterator> inline void 
# 926
uninitialized_value_construct(_ForwardIterator __first, _ForwardIterator 
# 927
__last) 
# 928
{ 
# 929
return __uninitialized_default(__first, __last); 
# 930
} 
# 938
template< class _ForwardIterator, class _Size> inline _ForwardIterator 
# 940
uninitialized_value_construct_n(_ForwardIterator __first, _Size __count) 
# 941
{ 
# 942
return __uninitialized_default_n(__first, __count); 
# 943
} 
# 952 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _ForwardIterator> inline _ForwardIterator 
# 954
uninitialized_move(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 955
__result) 
# 956
{ 
# 957
return std::uninitialized_copy(std::make_move_iterator(__first), std::make_move_iterator(__last), __result); 
# 960
} 
# 969 "/usr/include/c++/11/bits/stl_uninitialized.h" 3
template< class _InputIterator, class _Size, class _ForwardIterator> inline pair< _InputIterator, _ForwardIterator>  
# 971
uninitialized_move_n(_InputIterator __first, _Size __count, _ForwardIterator 
# 972
__result) 
# 973
{ 
# 974
auto __res = std::__uninitialized_copy_n_pair(std::make_move_iterator(__first), __count, __result); 
# 977
return {(__res.first).base(), (__res.second)}; 
# 978
} 
# 984
template< class _Tp, class _Up, class _Allocator> inline void 
# 986
__relocate_object_a(_Tp *__restrict__ __dest, _Up *__restrict__ __orig, _Allocator &
# 987
__alloc) noexcept(noexcept(std::template allocator_traits< _Allocator> ::construct(__alloc, __dest, std::move(*__orig))) && noexcept(std::template allocator_traits< _Allocator> ::destroy(__alloc, std::__addressof(*__orig)))) 
# 992
{ 
# 993
typedef allocator_traits< _Allocator>  __traits; 
# 994
__traits::construct(__alloc, __dest, std::move(*__orig)); 
# 995
__traits::destroy(__alloc, std::__addressof(*__orig)); 
# 996
} 
# 1000
template< class _Tp, class  = void> 
# 1001
struct __is_bitwise_relocatable : public is_trivial< _Tp>  { 
# 1002
}; 
# 1004
template< class _Tp, class _Up> inline __enable_if_t< __is_bitwise_relocatable< _Tp> ::value, _Tp *>  
# 1006
__relocate_a_1(_Tp *__first, _Tp *__last, _Tp *
# 1007
__result, allocator< _Up>  &) noexcept 
# 1008
{ 
# 1009
ptrdiff_t __count = __last - __first; 
# 1010
if (__count > (0)) { 
# 1011
__builtin_memmove(__result, __first, __count * sizeof(_Tp)); }  
# 1012
return __result + __count; 
# 1013
} 
# 1015
template< class _InputIterator, class _ForwardIterator, class 
# 1016
_Allocator> inline _ForwardIterator 
# 1018
__relocate_a_1(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1019
__result, _Allocator &__alloc) noexcept(noexcept(std::__relocate_object_a(std::addressof(*__result), std::addressof(*__first), __alloc))) 
# 1023
{ 
# 1025
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 1027
typedef typename iterator_traits< _ForwardIterator> ::value_type _ValueType2; 
# 1028
static_assert((std::template is_same< typename iterator_traits< _InputIterator> ::value_type, typename iterator_traits< _ForwardIterator> ::value_type> ::value), "relocation is only possible for values of the same type");
# 1030
_ForwardIterator __cur = __result; 
# 1031
for (; __first != __last; (++__first), ((void)(++__cur))) { 
# 1032
std::__relocate_object_a(std::__addressof(*__cur), std::__addressof(*__first), __alloc); }  
# 1034
return __cur; 
# 1035
} 
# 1037
template< class _InputIterator, class _ForwardIterator, class 
# 1038
_Allocator> inline _ForwardIterator 
# 1040
__relocate_a(_InputIterator __first, _InputIterator __last, _ForwardIterator 
# 1041
__result, _Allocator &__alloc) noexcept(noexcept(__relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc))) 
# 1045
{ 
# 1046
return __relocate_a_1(std::__niter_base(__first), std::__niter_base(__last), std::__niter_base(__result), __alloc); 
# 1049
} 
# 1057
}
# 77 "/usr/include/c++/11/bits/stl_vector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
template< class _Tp, class _Alloc> 
# 84
struct _Vector_base { 
# 87
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Tp> ::other _Tp_alloc_type; 
# 89
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::pointer pointer; 
# 91
struct _Vector_impl_data { 
# 93
pointer _M_start; 
# 94
pointer _M_finish; 
# 95
pointer _M_end_of_storage; 
# 97
_Vector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() 
# 99
{ } 
# 102
_Vector_impl_data(_Vector_impl_data &&__x) noexcept : _M_start(__x._M_start), _M_finish(__x._M_finish), _M_end_of_storage(__x._M_end_of_storage) 
# 105
{ (__x._M_start) = ((__x._M_finish) = ((__x._M_end_of_storage) = pointer())); } 
# 109
void _M_copy_data(const _Vector_impl_data &__x) noexcept 
# 110
{ 
# 111
(_M_start) = (__x._M_start); 
# 112
(_M_finish) = (__x._M_finish); 
# 113
(_M_end_of_storage) = (__x._M_end_of_storage); 
# 114
} 
# 117
void _M_swap_data(_Vector_impl_data &__x) noexcept 
# 118
{ 
# 121
_Vector_impl_data __tmp; 
# 122
__tmp._M_copy_data(*this); 
# 123
_M_copy_data(__x); 
# 124
__x._M_copy_data(__tmp); 
# 125
} 
# 126
}; 
# 128
struct _Vector_impl : public _Tp_alloc_type, public _Vector_impl_data { 
# 131
_Vector_impl() noexcept(is_nothrow_default_constructible< typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type> ::value) : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type() 
# 134
{ } 
# 136
_Vector_impl(const typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &__a) noexcept : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(__a) 
# 138
{ } 
# 143
_Vector_impl(_Vector_impl &&__x) noexcept : _Vector_base< _Tp, _Alloc> ::_Vector_impl_data(std::move(__x)), _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__x)) 
# 145
{ } 
# 147
_Vector_impl(typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a) noexcept : _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__a)) 
# 149
{ } 
# 151
_Vector_impl(typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type &&__a, _Vector_impl &&__rv) noexcept : _Vector_base< _Tp, _Alloc> ::_Vector_impl_data(std::move(__rv)), _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type(std::move(__a)) 
# 153
{ } 
# 270 "/usr/include/c++/11/bits/stl_vector.h" 3
}; 
# 273
typedef _Alloc allocator_type; 
# 276
_Tp_alloc_type &_M_get_Tp_allocator() noexcept 
# 277
{ return this->_M_impl; } 
# 280
const _Tp_alloc_type &_M_get_Tp_allocator() const noexcept 
# 281
{ return this->_M_impl; } 
# 284
allocator_type get_allocator() const noexcept 
# 285
{ return (allocator_type)_M_get_Tp_allocator(); } 
# 288
_Vector_base() = default;
# 293
_Vector_base(const allocator_type &__a) noexcept : _M_impl(__a) 
# 294
{ } 
# 298
_Vector_base(size_t __n) : _M_impl() 
# 300
{ _M_create_storage(__n); } 
# 303
_Vector_base(size_t __n, const allocator_type &__a) : _M_impl(__a) 
# 305
{ _M_create_storage(__n); } 
# 308
_Vector_base(_Vector_base &&) = default;
# 312
_Vector_base(_Tp_alloc_type &&__a) noexcept : _M_impl(std::move(__a)) 
# 313
{ } 
# 315
_Vector_base(_Vector_base &&__x, const allocator_type &__a) : _M_impl(__a) 
# 317
{ 
# 318
if (__x.get_allocator() == __a) { 
# 319
(this->_M_impl)._M_swap_data(__x._M_impl); } else 
# 321
{ 
# 322
size_t __n = ((__x._M_impl)._M_finish) - ((__x._M_impl)._M_start); 
# 323
_M_create_storage(__n); 
# 324
}  
# 325
} 
# 328
_Vector_base(const allocator_type &__a, _Vector_base &&__x) : _M_impl((_Tp_alloc_type)__a, std::move(__x._M_impl)) 
# 330
{ } 
# 333
~_Vector_base() noexcept 
# 334
{ 
# 335
_M_deallocate(((_M_impl)._M_start), ((_M_impl)._M_end_of_storage) - ((_M_impl)._M_start)); 
# 337
} 
# 340
_Vector_impl _M_impl; 
# 343
pointer _M_allocate(size_t __n) 
# 344
{ 
# 345
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Tr; 
# 346
return (__n != (0)) ? _Tr::allocate(_M_impl, __n) : pointer(); 
# 347
} 
# 350
void _M_deallocate(pointer __p, size_t __n) 
# 351
{ 
# 352
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Tr; 
# 353
if (__p) { 
# 354
_Tr::deallocate(_M_impl, __p, __n); }  
# 355
} 
# 359
protected: void _M_create_storage(size_t __n) 
# 360
{ 
# 361
((this->_M_impl)._M_start) = _M_allocate(__n); 
# 362
((this->_M_impl)._M_finish) = ((this->_M_impl)._M_start); 
# 363
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 364
} 
# 365
}; 
# 388 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Tp, class _Alloc = allocator< _Tp> > 
# 389
class vector : protected _Vector_base< _Tp, _Alloc>  { 
# 401 "/usr/include/c++/11/bits/stl_vector.h" 3
static_assert((is_same< typename remove_cv< _Tp> ::type, _Tp> ::value), "std::vector must have a non-const, non-volatile value_type");
# 409
typedef _Vector_base< _Tp, _Alloc>  _Base; 
# 410
typedef typename _Vector_base< _Tp, _Alloc> ::_Tp_alloc_type _Tp_alloc_type; 
# 411
typedef __gnu_cxx::__alloc_traits< _Tp_alloc_type>  _Alloc_traits; 
# 414
public: typedef _Tp value_type; 
# 415
typedef typename _Vector_base< _Tp, _Alloc> ::pointer pointer; 
# 416
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::const_pointer const_pointer; 
# 417
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::reference reference; 
# 418
typedef typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::const_reference const_reference; 
# 419
typedef __gnu_cxx::__normal_iterator< pointer, vector>  iterator; 
# 421
typedef __gnu_cxx::__normal_iterator< const_pointer, vector>  const_iterator; 
# 422
typedef std::reverse_iterator< const_iterator>  const_reverse_iterator; 
# 423
typedef std::reverse_iterator< iterator>  reverse_iterator; 
# 424
typedef std::size_t size_type; 
# 425
typedef std::ptrdiff_t difference_type; 
# 426
typedef _Alloc allocator_type; 
# 431
private: static constexpr bool _S_nothrow_relocate(std::true_type) 
# 432
{ 
# 433
return noexcept(std::__relocate_a(std::declval< pointer> (), std::declval< pointer> (), std::declval< pointer> (), std::declval< _Tp_alloc_type &> ())); 
# 437
} 
# 440
static constexpr bool _S_nothrow_relocate(std::false_type) 
# 441
{ return false; } 
# 444
static constexpr bool _S_use_relocate() 
# 445
{ 
# 449
return _S_nothrow_relocate(__is_move_insertable< _Tp_alloc_type> {}); 
# 450
} 
# 453
static pointer _S_do_relocate(pointer __first, pointer __last, pointer __result, _Tp_alloc_type &
# 454
__alloc, std::true_type) noexcept 
# 455
{ 
# 456
return std::__relocate_a(__first, __last, __result, __alloc); 
# 457
} 
# 460
static pointer _S_do_relocate(pointer, pointer, pointer __result, _Tp_alloc_type &, std::false_type) noexcept 
# 462
{ return __result; } 
# 465
static pointer _S_relocate(pointer __first, pointer __last, pointer __result, _Tp_alloc_type &
# 466
__alloc) noexcept 
# 467
{ 
# 468
using __do_it = std::__bool_constant< (&_S_use_relocate)()> ; 
# 469
return _S_do_relocate(__first, __last, __result, __alloc, __do_it{}); 
# 470
} 
# 474
protected: using _Vector_base< _Tp, _Alloc> ::_M_allocate;
# 475
using _Vector_base< _Tp, _Alloc> ::_M_deallocate;
# 476
using _Vector_base< _Tp, _Alloc> ::_M_impl;
# 477
using _Vector_base< _Tp, _Alloc> ::_M_get_Tp_allocator;
# 487
public: vector() = default;
# 497 "/usr/include/c++/11/bits/stl_vector.h" 3
explicit vector(const allocator_type &__a) noexcept : _Base(__a) 
# 498
{ } 
# 510 "/usr/include/c++/11/bits/stl_vector.h" 3
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : _Base((_S_check_init_len)(__n, __a), __a) 
# 512
{ _M_default_initialize(__n); } 
# 522 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(size_type __n, const value_type &__value, const allocator_type &
# 523
__a = allocator_type()) : _Base((_S_check_init_len)(__n, __a), __a) 
# 525
{ _M_fill_initialize(__n, __value); } 
# 553 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(const vector &__x) : _Base(__x.size(), _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator())) 
# 556
{ 
# 557
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 561
} 
# 572 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(vector &&) noexcept = default;
# 575
vector(const vector &__x, const allocator_type &__a) : _Base(__x.size(), __a) 
# 577
{ 
# 578
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__x.begin(), __x.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 582
} 
# 585
private: vector(vector &&__rv, const allocator_type &__m, std::true_type) noexcept : _Base(__m, std::move(__rv)) 
# 587
{ } 
# 589
vector(vector &&__rv, const allocator_type &__m, std::false_type) : _Base(__m) 
# 591
{ 
# 592
if (__rv.get_allocator() == __m) { 
# 593
(this->_M_impl)._M_swap_data((__rv._M_impl)); } else { 
# 594
if (!__rv.empty()) 
# 595
{ 
# 596
this->_M_create_storage(__rv.size()); 
# 597
((this->_M_impl)._M_finish) = std::__uninitialized_move_a(__rv.begin(), __rv.end(), ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 601
__rv.clear(); 
# 602
}  }  
# 603
} 
# 607
public: vector(vector &&__rv, const allocator_type &__m) noexcept(noexcept((vector(std::declval< vector &&> (), std::declval< const allocator_type &> (), std::declval< typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::is_always_equal> ())))) : vector(std::move(__rv), __m, typename __gnu_cxx::__alloc_traits< _Tp_alloc_type> ::is_always_equal{}) 
# 612
{ } 
# 625 "/usr/include/c++/11/bits/stl_vector.h" 3
vector(initializer_list< value_type>  __l, const allocator_type &
# 626
__a = allocator_type()) : _Base(__a) 
# 628
{ 
# 629
_M_range_initialize(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 631
} 
# 651 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 652
 = std::_RequireInputIter< _InputIterator> > 
# 653
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 654
__a = allocator_type()) : _Base(__a) 
# 656
{ 
# 657
_M_range_initialize(__first, __last, std::__iterator_category(__first)); 
# 659
} 
# 678 "/usr/include/c++/11/bits/stl_vector.h" 3
~vector() noexcept 
# 679
{ 
# 680
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 682
; 
# 683
} 
# 695 "/usr/include/c++/11/bits/stl_vector.h" 3
vector &operator=(const vector & __x); 
# 709 "/usr/include/c++/11/bits/stl_vector.h" 3
vector &operator=(vector &&__x) noexcept(_Alloc_traits::_S_nothrow_move()) 
# 710
{ 
# 711
constexpr bool __move_storage = (_Alloc_traits::_S_propagate_on_move_assign() || _Alloc_traits::_S_always_equal()); 
# 714
_M_move_assign(std::move(__x), std::__bool_constant< __move_storage> ()); 
# 715
return *this; 
# 716
} 
# 730 "/usr/include/c++/11/bits/stl_vector.h" 3
vector &operator=(initializer_list< value_type>  __l) 
# 731
{ 
# 732
this->_M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 734
return *this; 
# 735
} 
# 749 "/usr/include/c++/11/bits/stl_vector.h" 3
void assign(size_type __n, const value_type &__val) 
# 750
{ _M_fill_assign(__n, __val); } 
# 765 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 766
 = std::_RequireInputIter< _InputIterator> > void 
# 768
assign(_InputIterator __first, _InputIterator __last) 
# 769
{ _M_assign_dispatch(__first, __last, std::__false_type()); } 
# 794 "/usr/include/c++/11/bits/stl_vector.h" 3
void assign(initializer_list< value_type>  __l) 
# 795
{ 
# 796
this->_M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 798
} 
# 802
using _Vector_base< _Tp, _Alloc> ::get_allocator;
# 811
iterator begin() noexcept 
# 812
{ return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start))); } 
# 820
const_iterator begin() const noexcept 
# 821
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 829
iterator end() noexcept 
# 830
{ return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 838
const_iterator end() const noexcept 
# 839
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 847
reverse_iterator rbegin() noexcept 
# 848
{ return ((std::reverse_iterator< iterator> )(end())); } 
# 856
const_reverse_iterator rbegin() const noexcept 
# 857
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 865
reverse_iterator rend() noexcept 
# 866
{ return ((std::reverse_iterator< iterator> )(begin())); } 
# 874
const_reverse_iterator rend() const noexcept 
# 875
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 884
const_iterator cbegin() const noexcept 
# 885
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_start))); } 
# 893
const_iterator cend() const noexcept 
# 894
{ return ((__gnu_cxx::__normal_iterator< const_pointer, vector> )(((this->_M_impl)._M_finish))); } 
# 902
const_reverse_iterator crbegin() const noexcept 
# 903
{ return ((std::reverse_iterator< const_iterator> )(end())); } 
# 911
const_reverse_iterator crend() const noexcept 
# 912
{ return ((std::reverse_iterator< const_iterator> )(begin())); } 
# 918
size_type size() const noexcept 
# 919
{ return (size_type)(((this->_M_impl)._M_finish) - ((this->_M_impl)._M_start)); } 
# 923
size_type max_size() const noexcept 
# 924
{ return (_S_max_size)(_M_get_Tp_allocator()); } 
# 937 "/usr/include/c++/11/bits/stl_vector.h" 3
void resize(size_type __new_size) 
# 938
{ 
# 939
if (__new_size > size()) { 
# 940
_M_default_append(__new_size - size()); } else { 
# 941
if (__new_size < size()) { 
# 942
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 943
} 
# 957 "/usr/include/c++/11/bits/stl_vector.h" 3
void resize(size_type __new_size, const value_type &__x) 
# 958
{ 
# 959
if (__new_size > size()) { 
# 960
_M_fill_insert(end(), __new_size - size(), __x); } else { 
# 961
if (__new_size < size()) { 
# 962
_M_erase_at_end(((this->_M_impl)._M_start) + __new_size); }  }  
# 963
} 
# 989 "/usr/include/c++/11/bits/stl_vector.h" 3
void shrink_to_fit() 
# 990
{ _M_shrink_to_fit(); } 
# 998
size_type capacity() const noexcept 
# 999
{ return (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 1000
} 
# 1006
[[__nodiscard__]] bool 
# 1007
empty() const noexcept 
# 1008
{ return begin() == end(); } 
# 1028 "/usr/include/c++/11/bits/stl_vector.h" 3
void reserve(size_type __n); 
# 1043 "/usr/include/c++/11/bits/stl_vector.h" 3
reference operator[](size_type __n) noexcept 
# 1044
{ 
# 1045
; 
# 1046
return *(((this->_M_impl)._M_start) + __n); 
# 1047
} 
# 1061 "/usr/include/c++/11/bits/stl_vector.h" 3
const_reference operator[](size_type __n) const noexcept 
# 1062
{ 
# 1063
; 
# 1064
return *(((this->_M_impl)._M_start) + __n); 
# 1065
} 
# 1070
protected: void _M_range_check(size_type __n) const 
# 1071
{ 
# 1072
if (__n >= size()) { 
# 1073
__throw_out_of_range_fmt("vector::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 1077
} 
# 1092 "/usr/include/c++/11/bits/stl_vector.h" 3
public: reference at(size_type __n) 
# 1093
{ 
# 1094
_M_range_check(__n); 
# 1095
return (*this)[__n]; 
# 1096
} 
# 1110 "/usr/include/c++/11/bits/stl_vector.h" 3
const_reference at(size_type __n) const 
# 1111
{ 
# 1112
_M_range_check(__n); 
# 1113
return (*this)[__n]; 
# 1114
} 
# 1121
reference front() noexcept 
# 1122
{ 
# 1123
; 
# 1124
return *begin(); 
# 1125
} 
# 1132
const_reference front() const noexcept 
# 1133
{ 
# 1134
; 
# 1135
return *begin(); 
# 1136
} 
# 1143
reference back() noexcept 
# 1144
{ 
# 1145
; 
# 1146
return *(end() - 1); 
# 1147
} 
# 1154
const_reference back() const noexcept 
# 1155
{ 
# 1156
; 
# 1157
return *(end() - 1); 
# 1158
} 
# 1168 "/usr/include/c++/11/bits/stl_vector.h" 3
_Tp *data() noexcept 
# 1169
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 1172
const _Tp *data() const noexcept 
# 1173
{ return _M_data_ptr(((this->_M_impl)._M_start)); } 
# 1187 "/usr/include/c++/11/bits/stl_vector.h" 3
void push_back(const value_type &__x) 
# 1188
{ 
# 1189
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 1190
{ 
# 1191
; 
# 1192
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 1194
++((this->_M_impl)._M_finish); 
# 1195
; 
# 1196
} else { 
# 1198
_M_realloc_insert(end(), __x); }  
# 1199
} 
# 1203
void push_back(value_type &&__x) 
# 1204
{ emplace_back(std::move(__x)); } 
# 1206
template< class ..._Args> reference emplace_back(_Args && ...__args); 
# 1225 "/usr/include/c++/11/bits/stl_vector.h" 3
void pop_back() noexcept 
# 1226
{ 
# 1227
; 
# 1228
--((this->_M_impl)._M_finish); 
# 1229
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 1230
; 
# 1231
} 
# 1246 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class ..._Args> iterator 
# 1248
emplace(const_iterator __position, _Args &&...__args) 
# 1249
{ return _M_emplace_aux(__position, std::forward< _Args> (__args)...); } 
# 1263 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, const value_type & __x); 
# 1293 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, value_type &&__x) 
# 1294
{ return _M_insert_rval(__position, std::move(__x)); } 
# 1310 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, initializer_list< value_type>  __l) 
# 1311
{ 
# 1312
auto __offset = __position - cbegin(); 
# 1313
_M_range_insert(begin() + __offset, __l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 1315
return begin() + __offset; 
# 1316
} 
# 1335 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator insert(const_iterator __position, size_type __n, const value_type &__x) 
# 1336
{ 
# 1337
difference_type __offset = __position - cbegin(); 
# 1338
_M_fill_insert(begin() + __offset, __n, __x); 
# 1339
return begin() + __offset; 
# 1340
} 
# 1376 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator, class 
# 1377
 = std::_RequireInputIter< _InputIterator> > iterator 
# 1379
insert(const_iterator __position, _InputIterator __first, _InputIterator 
# 1380
__last) 
# 1381
{ 
# 1382
difference_type __offset = __position - cbegin(); 
# 1383
_M_insert_dispatch(begin() + __offset, __first, __last, std::__false_type()); 
# 1385
return begin() + __offset; 
# 1386
} 
# 1430 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator erase(const_iterator __position) 
# 1431
{ return _M_erase(begin() + (__position - cbegin())); } 
# 1457 "/usr/include/c++/11/bits/stl_vector.h" 3
iterator erase(const_iterator __first, const_iterator __last) 
# 1458
{ 
# 1459
const auto __beg = begin(); 
# 1460
const auto __cbeg = cbegin(); 
# 1461
return _M_erase(__beg + (__first - __cbeg), __beg + (__last - __cbeg)); 
# 1462
} 
# 1480 "/usr/include/c++/11/bits/stl_vector.h" 3
void swap(vector &__x) noexcept 
# 1481
{ 
# 1483
do { if (__builtin_is_constant_evaluated() && (!((bool)(_Alloc_traits::propagate_on_container_swap::value || (_M_get_Tp_allocator() == __x._M_get_Tp_allocator()))))) { __builtin_unreachable(); }  } while (false); 
# 1486
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 1487
_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 1489
} 
# 1498
void clear() noexcept 
# 1499
{ _M_erase_at_end(((this->_M_impl)._M_start)); } 
# 1508
protected: 
# 1506
template< class _ForwardIterator> pointer 
# 1508
_M_allocate_and_copy(size_type __n, _ForwardIterator 
# 1509
__first, _ForwardIterator __last) 
# 1510
{ 
# 1511
pointer __result = this->_M_allocate(__n); 
# 1512
try 
# 1513
{ 
# 1514
std::__uninitialized_copy_a(__first, __last, __result, _M_get_Tp_allocator()); 
# 1516
return __result; 
# 1517
} 
# 1518
catch (...) 
# 1519
{ 
# 1520
_M_deallocate(__result, __n); 
# 1521
throw; 
# 1522
}  
# 1523
} 
# 1556 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _InputIterator> void 
# 1558
_M_range_initialize(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1560
{ 
# 1561
try { 
# 1562
for (; __first != __last; ++__first) { 
# 1564
emplace_back(*__first); }  
# 1568
} catch (...) { 
# 1569
clear(); 
# 1570
throw; 
# 1571
}  
# 1572
} 
# 1575
template< class _ForwardIterator> void 
# 1577
_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1579
{ 
# 1580
const size_type __n = std::distance(__first, __last); 
# 1581
((this->_M_impl)._M_start) = this->_M_allocate((_S_check_init_len)(__n, _M_get_Tp_allocator())); 
# 1583
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 1584
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__first, __last, ((this->_M_impl)._M_start), _M_get_Tp_allocator()); 
# 1588
} 
# 1593
void _M_fill_initialize(size_type __n, const value_type &__value) 
# 1594
{ 
# 1595
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_start), __n, __value, _M_get_Tp_allocator()); 
# 1598
} 
# 1603
void _M_default_initialize(size_type __n) 
# 1604
{ 
# 1605
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_start), __n, _M_get_Tp_allocator()); 
# 1608
} 
# 1618 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Integer> void 
# 1620
_M_assign_dispatch(_Integer __n, _Integer __val, std::__true_type) 
# 1621
{ _M_fill_assign(__n, __val); } 
# 1624
template< class _InputIterator> void 
# 1626
_M_assign_dispatch(_InputIterator __first, _InputIterator __last, std::__false_type) 
# 1628
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 1631
template< class _InputIterator> void _M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1637
template< class _ForwardIterator> void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1645
void _M_fill_assign(size_type __n, const value_type & __val); 
# 1653
template< class _Integer> void 
# 1655
_M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val, std::__true_type) 
# 1657
{ _M_fill_insert(__pos, __n, __val); } 
# 1660
template< class _InputIterator> void 
# 1662
_M_insert_dispatch(iterator __pos, _InputIterator __first, _InputIterator 
# 1663
__last, std::__false_type) 
# 1664
{ 
# 1665
_M_range_insert(__pos, __first, __last, std::__iterator_category(__first)); 
# 1667
} 
# 1670
template< class _InputIterator> void _M_range_insert(iterator __pos, _InputIterator __first, _InputIterator __last, std::input_iterator_tag); 
# 1676
template< class _ForwardIterator> void _M_range_insert(iterator __pos, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1684
void _M_fill_insert(iterator __pos, size_type __n, const value_type & __x); 
# 1689
void _M_default_append(size_type __n); 
# 1692
bool _M_shrink_to_fit(); 
# 1705 "/usr/include/c++/11/bits/stl_vector.h" 3
struct _Temporary_value { 
# 1707
template< class ..._Args> explicit 
# 1709
_Temporary_value(vector *__vec, _Args &&...__args) : _M_this(__vec) 
# 1710
{ 
# 1711
_Alloc_traits::construct(((_M_this)->_M_impl), _M_ptr(), std::forward< _Args> (__args)...); 
# 1713
} 
# 1715
~_Temporary_value() 
# 1716
{ _Alloc_traits::destroy(((_M_this)->_M_impl), _M_ptr()); } 
# 1719
value_type &_M_val() { return *_M_ptr(); } 
# 1723
private: _Tp *_M_ptr() { return reinterpret_cast< _Tp *>(&(__buf)); } 
# 1725
vector *_M_this; 
# 1726
typename aligned_storage< sizeof(_Tp), __alignof__(_Tp)> ::type __buf; 
# 1727
}; 
# 1731
template< class _Arg> void _M_insert_aux(iterator __position, _Arg && __arg); 
# 1735
template< class ..._Args> void _M_realloc_insert(iterator __position, _Args && ...__args); 
# 1741
iterator _M_insert_rval(const_iterator __position, value_type && __v); 
# 1744
template< class ..._Args> iterator _M_emplace_aux(const_iterator __position, _Args && ...__args); 
# 1750
iterator _M_emplace_aux(const_iterator __position, value_type &&__v) 
# 1751
{ return _M_insert_rval(__position, std::move(__v)); } 
# 1756
size_type _M_check_len(size_type __n, const char *__s) const 
# 1757
{ 
# 1758
if ((max_size() - size()) < __n) { 
# 1759
__throw_length_error(__s); }  
# 1761
const size_type __len = size() + (std::max)(size(), __n); 
# 1762
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1763
} 
# 1767
static size_type _S_check_init_len(size_type __n, const allocator_type &__a) 
# 1768
{ 
# 1769
if (__n > (_S_max_size)((_Tp_alloc_type)__a)) { 
# 1770
__throw_length_error("cannot create std::vector larger than max_size()"); }  
# 1772
return __n; 
# 1773
} 
# 1776
static size_type _S_max_size(const _Tp_alloc_type &__a) noexcept 
# 1777
{ 
# 1781
const std::size_t __diffmax = (__gnu_cxx::__numeric_traits_integer< std::streamsize> ::__max / sizeof(_Tp)); 
# 1783
const std::size_t __allocmax = _Alloc_traits::max_size(__a); 
# 1784
return (std::min)(__diffmax, __allocmax); 
# 1785
} 
# 1792
void _M_erase_at_end(pointer __pos) noexcept 
# 1793
{ 
# 1794
if (size_type __n = ((this->_M_impl)._M_finish) - __pos) 
# 1795
{ 
# 1796
std::_Destroy(__pos, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 1798
((this->_M_impl)._M_finish) = __pos; 
# 1799
; 
# 1800
}  
# 1801
} 
# 1804
iterator _M_erase(iterator __position); 
# 1807
iterator _M_erase(iterator __first, iterator __last); 
# 1815
private: void _M_move_assign(vector &&__x, std::true_type) noexcept 
# 1816
{ 
# 1817
vector __tmp(get_allocator()); 
# 1818
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 1819
(__tmp._M_impl)._M_swap_data((__x._M_impl)); 
# 1820
std::__alloc_on_move(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 1821
} 
# 1826
void _M_move_assign(vector &&__x, std::false_type) 
# 1827
{ 
# 1828
if (__x._M_get_Tp_allocator() == this->_M_get_Tp_allocator()) { 
# 1829
_M_move_assign(std::move(__x), std::true_type()); } else 
# 1831
{ 
# 1834
this->_M_assign_aux(std::make_move_iterator(__x.begin()), std::make_move_iterator(__x.end()), std::random_access_iterator_tag()); 
# 1837
__x.clear(); 
# 1838
}  
# 1839
} 
# 1842
template< class _Up> _Up *
# 1844
_M_data_ptr(_Up *__ptr) const noexcept 
# 1845
{ return __ptr; } 
# 1848
template< class _Ptr> typename pointer_traits< _Ptr> ::element_type *
# 1850
_M_data_ptr(_Ptr __ptr) const 
# 1851
{ return (empty()) ? nullptr : std::__to_address(__ptr); } 
# 1868 "/usr/include/c++/11/bits/stl_vector.h" 3
}; 
# 1871
template< class _InputIterator, class _ValT = typename iterator_traits< _InputIterator> ::value_type, class 
# 1873
_Allocator = allocator< _ValT> , class 
# 1874
 = _RequireInputIter< _InputIterator> , class 
# 1875
 = _RequireAllocator< _Allocator> > 
# 1876
vector(_InputIterator, _InputIterator, _Allocator = _Allocator())->vector< _ValT, _Allocator> ; 
# 1890 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1892
operator==(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1893
{ return ((__x.size() == __y.size()) && std::equal(__x.begin(), __x.end(), __y.begin())); 
# 1894
} 
# 1928 "/usr/include/c++/11/bits/stl_vector.h" 3
template< class _Tp, class _Alloc> inline bool 
# 1930
operator<(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1931
{ return std::lexicographical_compare(__x.begin(), __x.end(), __y.begin(), __y.end()); 
# 1932
} 
# 1935
template< class _Tp, class _Alloc> inline bool 
# 1937
operator!=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1938
{ return !(__x == __y); } 
# 1941
template< class _Tp, class _Alloc> inline bool 
# 1943
operator>(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1944
{ return __y < __x; } 
# 1947
template< class _Tp, class _Alloc> inline bool 
# 1949
operator<=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1950
{ return !(__y < __x); } 
# 1953
template< class _Tp, class _Alloc> inline bool 
# 1955
operator>=(const vector< _Tp, _Alloc>  &__x, const vector< _Tp, _Alloc>  &__y) 
# 1956
{ return !(__x < __y); } 
# 1960
template< class _Tp, class _Alloc> inline void 
# 1962
swap(vector< _Tp, _Alloc>  &__x, vector< _Tp, _Alloc>  &__y) noexcept(noexcept(__x.swap(__y))) 
# 1964
{ __x.swap(__y); } 
# 1969
namespace __detail { namespace __variant { 
# 1971
template< class > struct _Never_valueless_alt; 
# 1975
template< class _Tp, class _Alloc> 
# 1976
struct _Never_valueless_alt< vector< _Tp, _Alloc> >  : public is_nothrow_move_assignable< vector< _Tp, _Alloc> >  { 
# 1978
}; 
# 1979
}}
# 1983
}
# 64 "/usr/include/c++/11/bits/stl_bvector.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 69
typedef unsigned long _Bit_type; 
# 70
enum { _S_word_bit = ((int)((8) * sizeof(_Bit_type)))}; 
# 72
struct _Bit_reference { 
# 74
_Bit_type *_M_p; 
# 75
_Bit_type _M_mask; 
# 77
_Bit_reference(_Bit_type *__x, _Bit_type __y) : _M_p(__x), _M_mask(__y) 
# 78
{ } 
# 80
_Bit_reference() noexcept : _M_p((0)), _M_mask((0)) { } 
# 83
_Bit_reference(const _Bit_reference &) = default;
# 86
operator bool() const noexcept 
# 87
{ return !(!((*(_M_p)) & (_M_mask))); } 
# 90
_Bit_reference &operator=(bool __x) noexcept 
# 91
{ 
# 92
if (__x) { 
# 93
(*(_M_p)) |= (_M_mask); } else { 
# 95
(*(_M_p)) &= (~(_M_mask)); }  
# 96
return *this; 
# 97
} 
# 100
_Bit_reference &operator=(const _Bit_reference &__x) noexcept 
# 101
{ return ((*this) = ((bool)__x)); } 
# 104
bool operator==(const _Bit_reference &__x) const 
# 105
{ return ((bool)(*this)) == ((bool)__x); } 
# 108
bool operator<(const _Bit_reference &__x) const 
# 109
{ return (!((bool)(*this))) && ((bool)__x); } 
# 112
void flip() noexcept 
# 113
{ (*(_M_p)) ^= (_M_mask); } 
# 114
}; 
# 118
inline void swap(_Bit_reference __x, _Bit_reference __y) noexcept 
# 119
{ 
# 120
bool __tmp = __x; 
# 121
(__x = __y); 
# 122
(__y = __tmp); 
# 123
} 
# 126
inline void swap(_Bit_reference __x, bool &__y) noexcept 
# 127
{ 
# 128
bool __tmp = __x; 
# 129
(__x = __y); 
# 130
__y = __tmp; 
# 131
} 
# 134
inline void swap(bool &__x, _Bit_reference __y) noexcept 
# 135
{ 
# 136
bool __tmp = __x; 
# 137
__x = __y; 
# 138
(__y = __tmp); 
# 139
} 
# 142
struct _Bit_iterator_base : public iterator< random_access_iterator_tag, bool>  { 
# 145
_Bit_type *_M_p; 
# 146
unsigned _M_offset; 
# 148
_Bit_iterator_base(_Bit_type *__x, unsigned __y) : _M_p(__x), _M_offset(__y) 
# 149
{ } 
# 152
void _M_bump_up() 
# 153
{ 
# 154
if (((_M_offset)++) == (((int)_S_word_bit) - 1)) 
# 155
{ 
# 156
(_M_offset) = (0); 
# 157
++(_M_p); 
# 158
}  
# 159
} 
# 162
void _M_bump_down() 
# 163
{ 
# 164
if (((_M_offset)--) == (0)) 
# 165
{ 
# 166
(_M_offset) = (((int)_S_word_bit) - 1); 
# 167
--(_M_p); 
# 168
}  
# 169
} 
# 172
void _M_incr(ptrdiff_t __i) 
# 173
{ 
# 174
difference_type __n = __i + (_M_offset); 
# 175
(_M_p) += (__n / ((int)_S_word_bit)); 
# 176
__n = (__n % ((int)_S_word_bit)); 
# 177
if (__n < (0)) 
# 178
{ 
# 179
__n += ((int)_S_word_bit); 
# 180
--(_M_p); 
# 181
}  
# 182
(_M_offset) = (static_cast< unsigned>(__n)); 
# 183
} 
# 186
friend inline bool operator==(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 187
{ return ((__x._M_p) == (__y._M_p)) && ((__x._M_offset) == (__y._M_offset)); } 
# 200 "/usr/include/c++/11/bits/stl_bvector.h" 3
friend inline bool operator<(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 201
{ 
# 202
return ((__x._M_p) < (__y._M_p)) || (((__x._M_p) == (__y._M_p)) && ((__x._M_offset) < (__y._M_offset))); 
# 204
} 
# 207
friend inline bool operator!=(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 208
{ return !(__x == __y); } 
# 211
friend inline bool operator>(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 212
{ return (__y < __x); } 
# 215
friend inline bool operator<=(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 216
{ return !(__y < __x); } 
# 219
friend inline bool operator>=(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 220
{ return !(__x < __y); } 
# 224
friend inline ptrdiff_t operator-(const _Bit_iterator_base &__x, const _Bit_iterator_base &__y) 
# 225
{ 
# 226
return (((((int)_S_word_bit) * ((__x._M_p) - (__y._M_p))) + (__x._M_offset)) - (__y._M_offset)); 
# 228
} 
# 229
}; 
# 231
struct _Bit_iterator : public _Bit_iterator_base { 
# 233
typedef _Bit_reference reference; 
# 237
typedef _Bit_reference *pointer; 
# 239
typedef _Bit_iterator iterator; 
# 241
_Bit_iterator() : _Bit_iterator_base(0, 0) { } 
# 243
_Bit_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 244
{ } 
# 247
iterator _M_const_cast() const 
# 248
{ return *this; } 
# 251
reference operator*() const 
# 252
{ return reference(_M_p, 1UL << (_M_offset)); } 
# 255
iterator &operator++() 
# 256
{ 
# 257
this->_M_bump_up(); 
# 258
return *this; 
# 259
} 
# 262
iterator operator++(int) 
# 263
{ 
# 264
iterator __tmp = *this; 
# 265
this->_M_bump_up(); 
# 266
return __tmp; 
# 267
} 
# 270
iterator &operator--() 
# 271
{ 
# 272
this->_M_bump_down(); 
# 273
return *this; 
# 274
} 
# 277
iterator operator--(int) 
# 278
{ 
# 279
iterator __tmp = *this; 
# 280
this->_M_bump_down(); 
# 281
return __tmp; 
# 282
} 
# 285
iterator &operator+=(difference_type __i) 
# 286
{ 
# 287
this->_M_incr(__i); 
# 288
return *this; 
# 289
} 
# 292
iterator &operator-=(difference_type __i) 
# 293
{ 
# 294
((*this) += (-__i)); 
# 295
return *this; 
# 296
} 
# 299
reference operator[](difference_type __i) const 
# 300
{ return (*(((*this) + __i))); } 
# 303
friend inline iterator operator+(const _Bit_iterator::iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 304
{ 
# 305
iterator __tmp = __x; 
# 306
(__tmp += __n); 
# 307
return __tmp; 
# 308
} 
# 311
friend inline iterator operator+(std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n, const _Bit_iterator::iterator &__x) 
# 312
{ return (__x + __n); } 
# 315
friend inline iterator operator-(const _Bit_iterator::iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 316
{ 
# 317
iterator __tmp = __x; 
# 318
(__tmp -= __n); 
# 319
return __tmp; 
# 320
} 
# 321
}; 
# 323
struct _Bit_const_iterator : public _Bit_iterator_base { 
# 325
typedef bool reference; 
# 326
typedef bool const_reference; 
# 330
typedef const bool *pointer; 
# 332
typedef _Bit_const_iterator const_iterator; 
# 334
_Bit_const_iterator() : _Bit_iterator_base(0, 0) { } 
# 336
_Bit_const_iterator(_Bit_type *__x, unsigned __y) : _Bit_iterator_base(__x, __y) 
# 337
{ } 
# 339
_Bit_const_iterator(const _Bit_iterator &__x) : _Bit_iterator_base(__x._M_p, __x._M_offset) 
# 340
{ } 
# 343
_Bit_iterator _M_const_cast() const 
# 344
{ return _Bit_iterator(_M_p, _M_offset); } 
# 347
const_reference operator*() const 
# 348
{ return _Bit_reference(_M_p, 1UL << (_M_offset)); } 
# 351
const_iterator &operator++() 
# 352
{ 
# 353
this->_M_bump_up(); 
# 354
return *this; 
# 355
} 
# 358
const_iterator operator++(int) 
# 359
{ 
# 360
const_iterator __tmp = *this; 
# 361
this->_M_bump_up(); 
# 362
return __tmp; 
# 363
} 
# 366
const_iterator &operator--() 
# 367
{ 
# 368
this->_M_bump_down(); 
# 369
return *this; 
# 370
} 
# 373
const_iterator operator--(int) 
# 374
{ 
# 375
const_iterator __tmp = *this; 
# 376
this->_M_bump_down(); 
# 377
return __tmp; 
# 378
} 
# 381
const_iterator &operator+=(difference_type __i) 
# 382
{ 
# 383
this->_M_incr(__i); 
# 384
return *this; 
# 385
} 
# 388
const_iterator &operator-=(difference_type __i) 
# 389
{ 
# 390
((*this) += (-__i)); 
# 391
return *this; 
# 392
} 
# 395
const_reference operator[](difference_type __i) const 
# 396
{ return (*(((*this) + __i))); } 
# 399
friend inline const_iterator operator+(const _Bit_const_iterator::const_iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 400
{ 
# 401
const_iterator __tmp = __x; 
# 402
(__tmp += __n); 
# 403
return __tmp; 
# 404
} 
# 407
friend inline const_iterator operator-(const _Bit_const_iterator::const_iterator &__x, std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n) 
# 408
{ 
# 409
const_iterator __tmp = __x; 
# 410
(__tmp -= __n); 
# 411
return __tmp; 
# 412
} 
# 415
friend inline const_iterator operator+(std::iterator< std::random_access_iterator_tag, bool> ::difference_type __n, const _Bit_const_iterator::const_iterator &__x) 
# 416
{ return (__x + __n); } 
# 417
}; 
# 419
template< class _Alloc> 
# 420
struct _Bvector_base { 
# 423
typedef typename __gnu_cxx::__alloc_traits< _Alloc> ::template rebind< _Bit_type> ::other _Bit_alloc_type; 
# 425
typedef __gnu_cxx::__alloc_traits< _Bit_alloc_type>  _Bit_alloc_traits; 
# 426
typedef typename __gnu_cxx::__alloc_traits< _Bit_alloc_type> ::pointer _Bit_pointer; 
# 428
struct _Bvector_impl_data { 
# 431
_Bit_iterator _M_start; 
# 440 "/usr/include/c++/11/bits/stl_bvector.h" 3
_Bit_iterator _M_finish; 
# 441
_Bit_pointer _M_end_of_storage; 
# 443
_Bvector_impl_data() noexcept : _M_start(), _M_finish(), _M_end_of_storage() 
# 445
{ } 
# 448
_Bvector_impl_data(const _Bvector_impl_data &) = default;
# 450
_Bvector_impl_data &operator=(const _Bvector_impl_data &) = default;
# 452
_Bvector_impl_data(_Bvector_impl_data &&__x) noexcept : _Bvector_impl_data(__x) 
# 454
{ __x._M_reset(); } 
# 457
void _M_move_data(_Bvector_impl_data &&__x) noexcept 
# 458
{ 
# 459
(*this) = __x; 
# 460
__x._M_reset(); 
# 461
} 
# 465
void _M_reset() noexcept 
# 466
{ (*this) = _Bvector_impl_data(); } 
# 469
void _M_swap_data(_Bvector_impl_data &__x) noexcept 
# 470
{ 
# 473
std::swap(*this, __x); 
# 474
} 
# 475
}; 
# 477
struct _Bvector_impl : public _Bit_alloc_type, public _Bvector_impl_data { 
# 480
_Bvector_impl() noexcept(is_nothrow_default_constructible< typename _Bvector_base< _Alloc> ::_Bit_alloc_type> ::value) : _Bvector_base< _Alloc> ::_Bit_alloc_type() 
# 483
{ } 
# 485
_Bvector_impl(const typename _Bvector_base< _Alloc> ::_Bit_alloc_type &__a) noexcept : _Bvector_base< _Alloc> ::_Bit_alloc_type(__a) 
# 487
{ } 
# 492
_Bvector_impl(_Bvector_impl &&__x) noexcept : _Bvector_base< _Alloc> ::_Bvector_impl_data(std::move(__x)), _Bvector_base< _Alloc> ::_Bit_alloc_type(std::move(__x)) 
# 494
{ } 
# 496
_Bvector_impl(typename _Bvector_base< _Alloc> ::_Bit_alloc_type &&__a, _Bvector_impl &&__x) noexcept : _Bvector_base< _Alloc> ::_Bvector_impl_data(std::move(__x)), _Bvector_base< _Alloc> ::_Bit_alloc_type(std::move(__a)) 
# 498
{ } 
# 502
std::_Bit_type *_M_end_addr() const noexcept 
# 503
{ 
# 504
if (this->_M_end_of_storage) { 
# 505
return std::__addressof((this->_M_end_of_storage)[-1]) + 1; }  
# 506
return 0; 
# 507
} 
# 508
}; 
# 511
typedef _Alloc allocator_type; 
# 514
_Bit_alloc_type &_M_get_Bit_allocator() noexcept 
# 515
{ return this->_M_impl; } 
# 518
const _Bit_alloc_type &_M_get_Bit_allocator() const noexcept 
# 519
{ return this->_M_impl; } 
# 522
allocator_type get_allocator() const noexcept 
# 523
{ return (allocator_type)_M_get_Bit_allocator(); } 
# 526
_Bvector_base() = default;
# 531
_Bvector_base(const allocator_type &__a) : _M_impl(__a) 
# 532
{ } 
# 535
_Bvector_base(_Bvector_base &&) = default;
# 537
_Bvector_base(_Bvector_base &&__x, const allocator_type &__a) noexcept : _M_impl((_Bit_alloc_type)__a, std::move(__x._M_impl)) 
# 539
{ } 
# 542
~_Bvector_base() 
# 543
{ _M_deallocate(); } 
# 546
protected: _Bvector_impl _M_impl; 
# 549
_Bit_pointer _M_allocate(size_t __n) 
# 550
{ return _Bit_alloc_traits::allocate(_M_impl, (_S_nword)(__n)); } 
# 553
void _M_deallocate() 
# 554
{ 
# 555
if (((_M_impl)._M_start)._M_p) 
# 556
{ 
# 557
const size_t __n = (_M_impl)._M_end_addr() - (((_M_impl)._M_start)._M_p); 
# 558
_Bit_alloc_traits::deallocate(_M_impl, ((_M_impl)._M_end_of_storage) - __n, __n); 
# 561
(_M_impl)._M_reset(); 
# 562
}  
# 563
} 
# 567
void _M_move_data(_Bvector_base &&__x) noexcept 
# 568
{ (_M_impl)._M_move_data(std::move(__x._M_impl)); } 
# 572
static size_t _S_nword(size_t __n) 
# 573
{ return ((__n + ((int)_S_word_bit)) - (1)) / ((int)_S_word_bit); } 
# 574
}; 
# 595 "/usr/include/c++/11/bits/stl_bvector.h" 3
template< class _Alloc> 
# 596
class vector< bool, _Alloc>  : protected _Bvector_base< _Alloc>  { 
# 598
typedef _Bvector_base< _Alloc>  _Base; 
# 599
typedef typename _Bvector_base< _Alloc> ::_Bit_pointer _Bit_pointer; 
# 600
typedef typename _Bvector_base< _Alloc> ::_Bit_alloc_traits _Bit_alloc_traits; 
# 603
friend struct hash< vector> ; 
# 607
public: typedef bool value_type; 
# 608
typedef std::size_t size_type; 
# 609
typedef std::ptrdiff_t difference_type; 
# 610
typedef std::_Bit_reference reference; 
# 611
typedef bool const_reference; 
# 612
typedef std::_Bit_reference *pointer; 
# 613
typedef const bool *const_pointer; 
# 614
typedef std::_Bit_iterator iterator; 
# 615
typedef std::_Bit_const_iterator const_iterator; 
# 616
typedef std::reverse_iterator< std::_Bit_const_iterator>  const_reverse_iterator; 
# 617
typedef std::reverse_iterator< std::_Bit_iterator>  reverse_iterator; 
# 618
typedef _Alloc allocator_type; 
# 621
allocator_type get_allocator() const 
# 622
{ return _Base::get_allocator(); } 
# 625
protected: using _Bvector_base< _Alloc> ::_M_allocate;
# 626
using _Bvector_base< _Alloc> ::_M_deallocate;
# 627
using _Bvector_base< _Alloc> ::_S_nword;
# 628
using _Bvector_base< _Alloc> ::_M_get_Bit_allocator;
# 632
public: vector() = default;
# 638
explicit vector(const allocator_type &__a) : _Base(__a) 
# 639
{ } 
# 643
explicit vector(size_type __n, const allocator_type &__a = allocator_type()) : vector(__n, false, __a) 
# 645
{ } 
# 647
vector(size_type __n, const bool &__value, const allocator_type &
# 648
__a = allocator_type()) : _Base(__a) 
# 655
{ 
# 656
_M_initialize(__n); 
# 657
_M_initialize_value(__value); 
# 658
} 
# 660
vector(const vector &__x) : _Base(_Bit_alloc_traits::_S_select_on_copy(__x._M_get_Bit_allocator())) 
# 662
{ 
# 663
_M_initialize(__x.size()); 
# 664
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 665
} 
# 668
vector(vector &&) = default;
# 671
private: vector(vector &&__x, const allocator_type &__a, std::true_type) noexcept : _Base(std::move(__x), __a) 
# 673
{ } 
# 675
vector(vector &&__x, const allocator_type &__a, std::false_type) : _Base(__a) 
# 677
{ 
# 678
if (__x.get_allocator() == __a) { 
# 679
this->_M_move_data(std::move(__x)); } else 
# 681
{ 
# 682
_M_initialize(__x.size()); 
# 683
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 684
__x.clear(); 
# 685
}  
# 686
} 
# 689
public: vector(vector &&__x, const allocator_type &__a) noexcept(_Bit_alloc_traits::_S_always_equal()) : vector(std::move(__x), __a, typename _Bvector_base< _Alloc> ::_Bit_alloc_traits::is_always_equal{}) 
# 693
{ } 
# 695
vector(const vector &__x, const allocator_type &__a) : _Base(__a) 
# 697
{ 
# 698
_M_initialize(__x.size()); 
# 699
_M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 700
} 
# 702
vector(std::initializer_list< bool>  __l, const allocator_type &
# 703
__a = allocator_type()) : _Base(__a) 
# 705
{ 
# 706
_M_initialize_range(__l.begin(), __l.end(), std::random_access_iterator_tag()); 
# 708
} 
# 712
template< class _InputIterator, class 
# 713
 = std::_RequireInputIter< _InputIterator> > 
# 714
vector(_InputIterator __first, _InputIterator __last, const allocator_type &
# 715
__a = allocator_type()) : _Base(__a) 
# 717
{ 
# 718
_M_initialize_range(__first, __last, std::__iterator_category(__first)); 
# 720
} 
# 733 "/usr/include/c++/11/bits/stl_bvector.h" 3
~vector() noexcept { } 
# 736
vector &operator=(const vector &__x) 
# 737
{ 
# 738
if ((&__x) == this) { 
# 739
return *this; }  
# 741
if (_Bit_alloc_traits::_S_propagate_on_copy_assign()) 
# 742
{ 
# 743
if (this->_M_get_Bit_allocator() != __x._M_get_Bit_allocator()) 
# 744
{ 
# 745
this->_M_deallocate(); 
# 746
std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 748
_M_initialize(__x.size()); 
# 749
} else { 
# 751
std::__alloc_on_copy(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); }  
# 753
}  
# 755
if (__x.size() > capacity()) 
# 756
{ 
# 757
this->_M_deallocate(); 
# 758
_M_initialize(__x.size()); 
# 759
}  
# 760
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 762
return *this; 
# 763
} 
# 767
vector &operator=(vector &&__x) noexcept(_Bit_alloc_traits::_S_nothrow_move()) 
# 768
{ 
# 769
if (_Bit_alloc_traits::_S_propagate_on_move_assign() || (this->_M_get_Bit_allocator() == __x._M_get_Bit_allocator())) 
# 771
{ 
# 772
this->_M_deallocate(); 
# 773
this->_M_move_data(std::move(__x)); 
# 774
std::__alloc_on_move(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 776
} else 
# 778
{ 
# 779
if (__x.size() > capacity()) 
# 780
{ 
# 781
this->_M_deallocate(); 
# 782
_M_initialize(__x.size()); 
# 783
}  
# 784
((this->_M_impl)._M_finish) = _M_copy_aligned(__x.begin(), __x.end(), begin()); 
# 786
__x.clear(); 
# 787
}  
# 788
return *this; 
# 789
} 
# 792
vector &operator=(std::initializer_list< bool>  __l) 
# 793
{ 
# 794
this->assign(__l.begin(), __l.end()); 
# 795
return *this; 
# 796
} 
# 804
void assign(size_type __n, const bool &__x) 
# 805
{ _M_fill_assign(__n, __x); } 
# 808
template< class _InputIterator, class 
# 809
 = std::_RequireInputIter< _InputIterator> > void 
# 811
assign(_InputIterator __first, _InputIterator __last) 
# 812
{ _M_assign_aux(__first, __last, std::__iterator_category(__first)); } 
# 826 "/usr/include/c++/11/bits/stl_bvector.h" 3
void assign(std::initializer_list< bool>  __l) 
# 827
{ _M_assign_aux(__l.begin(), __l.end(), std::random_access_iterator_tag()); } 
# 831
iterator begin() noexcept 
# 832
{ return iterator((((this->_M_impl)._M_start)._M_p), 0); } 
# 835
const_iterator begin() const noexcept 
# 836
{ return const_iterator((((this->_M_impl)._M_start)._M_p), 0); } 
# 839
iterator end() noexcept 
# 840
{ return (this->_M_impl)._M_finish; } 
# 843
const_iterator end() const noexcept 
# 844
{ return (this->_M_impl)._M_finish; } 
# 847
reverse_iterator rbegin() noexcept 
# 848
{ return ((std::reverse_iterator< std::_Bit_iterator> )(end())); } 
# 851
const_reverse_iterator rbegin() const noexcept 
# 852
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 855
reverse_iterator rend() noexcept 
# 856
{ return ((std::reverse_iterator< std::_Bit_iterator> )(begin())); } 
# 859
const_reverse_iterator rend() const noexcept 
# 860
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 864
const_iterator cbegin() const noexcept 
# 865
{ return const_iterator((((this->_M_impl)._M_start)._M_p), 0); } 
# 868
const_iterator cend() const noexcept 
# 869
{ return (this->_M_impl)._M_finish; } 
# 872
const_reverse_iterator crbegin() const noexcept 
# 873
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(end())); } 
# 876
const_reverse_iterator crend() const noexcept 
# 877
{ return ((std::reverse_iterator< std::_Bit_const_iterator> )(begin())); } 
# 881
size_type size() const noexcept 
# 882
{ return (size_type)((end()) - (begin())); } 
# 885
size_type max_size() const noexcept 
# 886
{ 
# 887
const size_type __isize = ((__gnu_cxx::__numeric_traits_integer< std::streamsize> ::__max - ((int)_S_word_bit)) + (1)); 
# 890
const size_type __asize = _Bit_alloc_traits::max_size(_M_get_Bit_allocator()); 
# 892
return (__asize <= (__isize / ((int)_S_word_bit))) ? __asize * ((int)_S_word_bit) : __isize; 
# 894
} 
# 897
size_type capacity() const noexcept 
# 898
{ return (size_type)(const_iterator((this->_M_impl)._M_end_addr(), 0) - (begin())); 
# 899
} 
# 901
[[__nodiscard__]] bool 
# 902
empty() const noexcept 
# 903
{ return ((begin()) == (end())); } 
# 906
reference operator[](size_type __n) 
# 907
{ return (begin())[__n]; } 
# 910
const_reference operator[](size_type __n) const 
# 911
{ return (begin())[__n]; } 
# 915
protected: void _M_range_check(size_type __n) const 
# 916
{ 
# 917
if (__n >= size()) { 
# 918
__throw_out_of_range_fmt("vector<bool>::_M_range_check: __n (which is %zu) >= this->size() (which is %zu)", __n, size()); }  
# 922
} 
# 926
public: reference at(size_type __n) 
# 927
{ _M_range_check(__n); return (*this)[__n]; } 
# 930
const_reference at(size_type __n) const 
# 931
{ _M_range_check(__n); return (*this)[__n]; } 
# 934
void reserve(size_type __n) 
# 935
{ 
# 936
if (__n > max_size()) { 
# 937
__throw_length_error("vector::reserve"); }  
# 938
if (capacity() < __n) { 
# 939
_M_reallocate(__n); }  
# 940
} 
# 943
reference front() 
# 944
{ return (*(begin())); } 
# 947
const_reference front() const 
# 948
{ return (*(begin())); } 
# 951
reference back() 
# 952
{ return (*(((end()) - (1)))); } 
# 955
const_reference back() const 
# 956
{ return (*(((end()) - (1)))); } 
# 964
void data() noexcept { } 
# 967
void push_back(bool __x) 
# 968
{ 
# 969
if ((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) { 
# 970
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 972
_M_insert_aux(end(), __x); }  
# 973
} 
# 976
void swap(vector &__x) noexcept 
# 977
{ 
# 979
do { if (__builtin_is_constant_evaluated() && (!((bool)(_Bit_alloc_traits::propagate_on_container_swap::value || (_M_get_Bit_allocator() == __x._M_get_Bit_allocator()))))) { __builtin_unreachable(); }  } while (false); 
# 982
(this->_M_impl)._M_swap_data((__x._M_impl)); 
# 983
_Bit_alloc_traits::_S_on_swap(_M_get_Bit_allocator(), __x._M_get_Bit_allocator()); 
# 985
} 
# 989
static void swap(reference __x, reference __y) noexcept 
# 990
{ 
# 991
bool __tmp = __x; 
# 992
(__x = __y); 
# 993
(__y = __tmp); 
# 994
} 
# 998
iterator insert(const_iterator __position, const bool &__x = ((bool)0)) 
# 1002
{ 
# 1003
const difference_type __n = (__position - (begin())); 
# 1004
if (((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) && (__position == (end()))) { 
# 1006
(*(((this->_M_impl)._M_finish)++)) = __x; } else { 
# 1008
_M_insert_aux(__position._M_const_cast(), __x); }  
# 1009
return ((begin()) + __n); 
# 1010
} 
# 1013
template< class _InputIterator, class 
# 1014
 = std::_RequireInputIter< _InputIterator> > iterator 
# 1016
insert(const_iterator __position, _InputIterator 
# 1017
__first, _InputIterator __last) 
# 1018
{ 
# 1019
difference_type __offset = __position - cbegin(); 
# 1020
_M_insert_range(__position._M_const_cast(), __first, __last, std::__iterator_category(__first)); 
# 1023
return ((begin()) + __offset); 
# 1024
} 
# 1039 "/usr/include/c++/11/bits/stl_bvector.h" 3
iterator insert(const_iterator __position, size_type __n, const bool &__x) 
# 1040
{ 
# 1041
difference_type __offset = __position - cbegin(); 
# 1042
_M_fill_insert(__position._M_const_cast(), __n, __x); 
# 1043
return ((begin()) + __offset); 
# 1044
} 
# 1053
iterator insert(const_iterator __p, std::initializer_list< bool>  __l) 
# 1054
{ return this->insert(__p, __l.begin(), __l.end()); } 
# 1058
void pop_back() 
# 1059
{ --((this->_M_impl)._M_finish); } 
# 1063
iterator erase(const_iterator __position) 
# 1067
{ return _M_erase(__position._M_const_cast()); } 
# 1071
iterator erase(const_iterator __first, const_iterator __last) 
# 1075
{ return _M_erase(__first._M_const_cast(), __last._M_const_cast()); } 
# 1078
void resize(size_type __new_size, bool __x = ((bool)0)) 
# 1079
{ 
# 1080
if (__new_size < size()) { 
# 1081
_M_erase_at_end(((begin()) + ((difference_type)__new_size))); } else { 
# 1083
insert(end(), __new_size - size(), __x); }  
# 1084
} 
# 1088
void shrink_to_fit() 
# 1089
{ _M_shrink_to_fit(); } 
# 1093
void flip() noexcept 
# 1094
{ 
# 1095
std::_Bit_type *const __end = (this->_M_impl)._M_end_addr(); 
# 1096
for (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p)); __p != __end; ++__p) { 
# 1097
(*__p) = (~(*__p)); }  
# 1098
} 
# 1101
void clear() noexcept 
# 1102
{ _M_erase_at_end(begin()); } 
# 1105
template< class ..._Args> reference 
# 1111
emplace_back(_Args &&...__args) 
# 1112
{ 
# 1113
push_back(bool(__args...)); 
# 1115
return back(); 
# 1117
} 
# 1119
template< class ..._Args> iterator 
# 1121
emplace(const_iterator __pos, _Args &&...__args) 
# 1122
{ return insert(__pos, bool(__args...)); } 
# 1128
protected: iterator _M_copy_aligned(const_iterator __first, const_iterator __last, iterator 
# 1129
__result) 
# 1130
{ 
# 1131
std::_Bit_type *__q = std::copy(__first._M_p, __last._M_p, __result._M_p); 
# 1132
return std::copy(const_iterator(__last._M_p, 0), __last, iterator(__q, 0)); 
# 1134
} 
# 1137
void _M_initialize(size_type __n) 
# 1138
{ 
# 1139
if (__n) 
# 1140
{ 
# 1141
_Bit_pointer __q = this->_M_allocate(__n); 
# 1142
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 1143
iterator __start = iterator(std::__addressof(*__q), 0); 
# 1144
((this->_M_impl)._M_start) = __start; 
# 1145
((this->_M_impl)._M_finish) = (__start + ((difference_type)__n)); 
# 1146
}  
# 1147
} 
# 1150
void _M_initialize_value(bool __x) 
# 1151
{ 
# 1152
if (std::_Bit_type *__p = ((((this->_M_impl)._M_start)._M_p))) { 
# 1153
__builtin_memset(__p, __x ? ~0 : 0, ((this->_M_impl)._M_end_addr() - __p) * sizeof(std::_Bit_type)); }  
# 1156
} 
# 1159
void _M_reallocate(size_type __n); 
# 1163
bool _M_shrink_to_fit(); 
# 1185 "/usr/include/c++/11/bits/stl_bvector.h" 3
template< class _InputIterator> void 
# 1187
_M_initialize_range(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1189
{ 
# 1190
for (; __first != __last; ++__first) { 
# 1191
push_back(*__first); }  
# 1192
} 
# 1194
template< class _ForwardIterator> void 
# 1196
_M_initialize_range(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1198
{ 
# 1199
const size_type __n = std::distance(__first, __last); 
# 1200
_M_initialize(__n); 
# 1201
std::copy(__first, __last, begin()); 
# 1202
} 
# 1220 "/usr/include/c++/11/bits/stl_bvector.h" 3
void _M_fill_assign(std::size_t __n, bool __x) 
# 1221
{ 
# 1222
if (__n > size()) 
# 1223
{ 
# 1224
_M_initialize_value(__x); 
# 1225
insert(end(), __n - size(), __x); 
# 1226
} else 
# 1228
{ 
# 1229
_M_erase_at_end(((begin()) + __n)); 
# 1230
_M_initialize_value(__x); 
# 1231
}  
# 1232
} 
# 1234
template< class _InputIterator> void 
# 1236
_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 1238
{ 
# 1239
iterator __cur = begin(); 
# 1240
for (; (__first != __last) && (__cur != (end())); (++__cur), ((void)(++__first))) { 
# 1241
(*__cur) = (*__first); }  
# 1242
if (__first == __last) { 
# 1243
_M_erase_at_end(__cur); } else { 
# 1245
insert(end(), __first, __last); }  
# 1246
} 
# 1248
template< class _ForwardIterator> void 
# 1250
_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 1252
{ 
# 1253
const size_type __len = std::distance(__first, __last); 
# 1254
if (__len < size()) { 
# 1255
_M_erase_at_end(std::copy(__first, __last, begin())); } else 
# 1257
{ 
# 1258
_ForwardIterator __mid = __first; 
# 1259
std::advance(__mid, size()); 
# 1260
std::copy(__first, __mid, begin()); 
# 1261
insert(end(), __mid, __last); 
# 1262
}  
# 1263
} 
# 1284 "/usr/include/c++/11/bits/stl_bvector.h" 3
void _M_fill_insert(iterator __position, size_type __n, bool __x); 
# 1286
template< class _InputIterator> void 
# 1288
_M_insert_range(iterator __pos, _InputIterator __first, _InputIterator 
# 1289
__last, std::input_iterator_tag) 
# 1290
{ 
# 1291
for (; __first != __last; ++__first) 
# 1292
{ 
# 1293
__pos = insert(__pos, *__first); 
# 1294
(++__pos); 
# 1295
}  
# 1296
} 
# 1298
template< class _ForwardIterator> void _M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag); 
# 1304
void _M_insert_aux(iterator __position, bool __x); 
# 1307
size_type _M_check_len(size_type __n, const char *__s) const 
# 1308
{ 
# 1309
if ((max_size() - size()) < __n) { 
# 1310
__throw_length_error(__s); }  
# 1312
const size_type __len = size() + std::max(size(), __n); 
# 1313
return ((__len < size()) || (__len > max_size())) ? max_size() : __len; 
# 1314
} 
# 1317
void _M_erase_at_end(iterator __pos) 
# 1318
{ ((this->_M_impl)._M_finish) = __pos; } 
# 1321
iterator _M_erase(iterator __pos); 
# 1324
iterator _M_erase(iterator __first, iterator __last); 
# 1325
}; 
# 1330
inline void __fill_bvector(_Bit_type *__v, unsigned 
# 1331
__first, unsigned __last, bool __x) 
# 1332
{ 
# 1333
using std::_Bit_type;
# 1334
using std::_S_word_bit;
# 1335
const _Bit_type __fmask = (~0UL) << __first; 
# 1336
const _Bit_type __lmask = (~0UL) >> ((_S_word_bit) - __last); 
# 1337
const _Bit_type __mask = __fmask & __lmask; 
# 1339
if (__x) { 
# 1340
(*__v) |= __mask; } else { 
# 1342
(*__v) &= (~__mask); }  
# 1343
} 
# 1346
inline void __fill_a1(_Bit_iterator __first, _Bit_iterator 
# 1347
__last, const bool &__x) 
# 1348
{ 
# 1349
using std::_Bit_type;
# 1350
using std::_S_word_bit;
# 1351
if ((__first._M_p) != (__last._M_p)) 
# 1352
{ 
# 1353
_Bit_type *__first_p = __first._M_p; 
# 1354
if ((__first._M_offset) != (0)) { 
# 1355
__fill_bvector(__first_p++, __first._M_offset, _S_word_bit, __x); }  
# 1357
__builtin_memset(__first_p, __x ? ~0 : 0, ((__last._M_p) - __first_p) * sizeof(_Bit_type)); 
# 1360
if ((__last._M_offset) != (0)) { 
# 1361
__fill_bvector(__last._M_p, 0, __last._M_offset, __x); }  
# 1362
} else { 
# 1363
if ((__first._M_offset) != (__last._M_offset)) { 
# 1364
__fill_bvector(__first._M_p, __first._M_offset, __last._M_offset, __x); }  }  
# 1365
} 
# 1370
template< class _Alloc> 
# 1371
struct hash< vector< bool, _Alloc> >  : public __hash_base< unsigned long, vector< bool, _Alloc> >  { 
# 1375
std::size_t operator()(const vector< bool, _Alloc>  &) const noexcept; 
# 1376
}; 
# 1380
}
# 59 "/usr/include/c++/11/bits/vector.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 64
template< class _Tp, class _Alloc> void 
# 67
vector< _Tp, _Alloc> ::reserve(size_type __n) 
# 68
{ 
# 69
if (__n > max_size()) { 
# 70
__throw_length_error("vector::reserve"); }  
# 71
if (capacity() < __n) 
# 72
{ 
# 73
const size_type __old_size = size(); 
# 74
pointer __tmp; 
# 76
if constexpr ((_S_use_relocate)()) 
# 77
{ 
# 78
__tmp = this->_M_allocate(__n); 
# 79
(_S_relocate)(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __tmp, _M_get_Tp_allocator()); 
# 81
} else 
# 84
{ 
# 85
__tmp = _M_allocate_and_copy(__n, std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_start)), std::__make_move_if_noexcept_iterator(((this->_M_impl)._M_finish))); 
# 88
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 90
}  
# 91
; 
# 92
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 95
((this->_M_impl)._M_start) = __tmp; 
# 96
((this->_M_impl)._M_finish) = (__tmp + __old_size); 
# 97
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __n); 
# 98
}  
# 99
} 
# 102
template< class _Tp, class _Alloc> 
# 103
template< class ..._Args> typename vector< _Tp, _Alloc> ::reference 
# 110
vector< _Tp, _Alloc> ::emplace_back(_Args &&...__args) 
# 111
{ 
# 112
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) 
# 113
{ 
# 114
; 
# 115
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 117
++((this->_M_impl)._M_finish); 
# 118
; 
# 119
} else { 
# 121
_M_realloc_insert(end(), std::forward< _Args> (__args)...); }  
# 123
return back(); 
# 125
} 
# 128
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 132
vector< _Tp, _Alloc> ::insert(const_iterator __position, const value_type &__x) 
# 136
{ 
# 137
const size_type __n = __position - begin(); 
# 138
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 139
if (__position == end()) 
# 140
{ 
# 141
; 
# 142
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), __x); 
# 144
++((this->_M_impl)._M_finish); 
# 145
; 
# 146
} else 
# 148
{ 
# 150
const auto __pos = begin() + (__position - cbegin()); 
# 153
_Temporary_value __x_copy(this, __x); 
# 154
_M_insert_aux(__pos, std::move(__x_copy._M_val())); 
# 158
}  } else { 
# 161
_M_realloc_insert(begin() + (__position - cbegin()), __x); }  
# 166
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 167
} 
# 169
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 172
vector< _Tp, _Alloc> ::_M_erase(iterator __position) 
# 173
{ 
# 174
if ((__position + 1) != end()) { 
# 175
std::move(__position + 1, end(), __position); }  
# 176
--((this->_M_impl)._M_finish); 
# 177
_Alloc_traits::destroy((this->_M_impl), ((this->_M_impl)._M_finish)); 
# 178
; 
# 179
return __position; 
# 180
} 
# 182
template< class _Tp, class _Alloc> typename vector< _Tp, _Alloc> ::iterator 
# 185
vector< _Tp, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 186
{ 
# 187
if (__first != __last) 
# 188
{ 
# 189
if (__last != end()) { 
# 190
std::move(__last, end(), __first); }  
# 191
_M_erase_at_end(__first.base() + (end() - __last)); 
# 192
}  
# 193
return __first; 
# 194
} 
# 196
template< class _Tp, class _Alloc> vector< _Tp, _Alloc>  &
# 199
vector< _Tp, _Alloc> ::operator=(const vector &__x) 
# 200
{ 
# 201
if ((&__x) != this) 
# 202
{ 
# 203
; 
# 205
if (_Alloc_traits::_S_propagate_on_copy_assign()) 
# 206
{ 
# 207
if ((!_Alloc_traits::_S_always_equal()) && (_M_get_Tp_allocator() != __x._M_get_Tp_allocator())) 
# 209
{ 
# 211
clear(); 
# 212
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 215
((this->_M_impl)._M_start) = nullptr; 
# 216
((this->_M_impl)._M_finish) = nullptr; 
# 217
((this->_M_impl)._M_end_of_storage) = nullptr; 
# 218
}  
# 219
std::__alloc_on_copy(_M_get_Tp_allocator(), __x._M_get_Tp_allocator()); 
# 221
}  
# 223
const size_type __xlen = __x.size(); 
# 224
if (__xlen > capacity()) 
# 225
{ 
# 226
pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(), __x.end()); 
# 228
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 230
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 233
((this->_M_impl)._M_start) = __tmp; 
# 234
((this->_M_impl)._M_end_of_storage) = (((this->_M_impl)._M_start) + __xlen); 
# 235
} else { 
# 236
if (size() >= __xlen) 
# 237
{ 
# 238
std::_Destroy(std::copy(__x.begin(), __x.end(), begin()), end(), _M_get_Tp_allocator()); 
# 240
} else 
# 242
{ 
# 243
std::copy(((__x._M_impl)._M_start), ((__x._M_impl)._M_start) + size(), ((this->_M_impl)._M_start)); 
# 245
std::__uninitialized_copy_a(((__x._M_impl)._M_start) + size(), ((__x._M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 249
}  }  
# 250
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __xlen); 
# 251
}  
# 252
return *this; 
# 253
} 
# 255
template< class _Tp, class _Alloc> void 
# 258
vector< _Tp, _Alloc> ::_M_fill_assign(std::size_t __n, const value_type &__val) 
# 259
{ 
# 260
if (__n > capacity()) 
# 261
{ 
# 262
vector __tmp(__n, __val, _M_get_Tp_allocator()); 
# 263
(__tmp._M_impl)._M_swap_data((this->_M_impl)); 
# 264
} else { 
# 265
if (__n > size()) 
# 266
{ 
# 267
std::fill(begin(), end(), __val); 
# 268
const size_type __add = __n - size(); 
# 269
; 
# 270
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __add, __val, _M_get_Tp_allocator()); 
# 273
; 
# 274
} else { 
# 276
_M_erase_at_end(std::fill_n(((this->_M_impl)._M_start), __n, __val)); }  }  
# 277
} 
# 279
template< class _Tp, class _Alloc> 
# 280
template< class _InputIterator> void 
# 283
vector< _Tp, _Alloc> ::_M_assign_aux(_InputIterator __first, _InputIterator __last, std::input_iterator_tag) 
# 285
{ 
# 286
pointer __cur(((this->_M_impl)._M_start)); 
# 287
for (; (__first != __last) && (__cur != ((this->_M_impl)._M_finish)); (++__cur), ((void)(++__first))) { 
# 289
(*__cur) = (*__first); }  
# 290
if (__first == __last) { 
# 291
_M_erase_at_end(__cur); } else { 
# 293
_M_range_insert(end(), __first, __last, std::__iterator_category(__first)); }  
# 295
} 
# 297
template< class _Tp, class _Alloc> 
# 298
template< class _ForwardIterator> void 
# 301
vector< _Tp, _Alloc> ::_M_assign_aux(_ForwardIterator __first, _ForwardIterator __last, std::forward_iterator_tag) 
# 303
{ 
# 304
const size_type __len = std::distance(__first, __last); 
# 306
if (__len > capacity()) 
# 307
{ 
# 308
(_S_check_init_len)(__len, _M_get_Tp_allocator()); 
# 309
pointer __tmp(_M_allocate_and_copy(__len, __first, __last)); 
# 310
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 312
; 
# 313
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 316
((this->_M_impl)._M_start) = __tmp; 
# 317
((this->_M_impl)._M_finish) = (((this->_M_impl)._M_start) + __len); 
# 318
((this->_M_impl)._M_end_of_storage) = ((this->_M_impl)._M_finish); 
# 319
} else { 
# 320
if (size() >= __len) { 
# 321
_M_erase_at_end(std::copy(__first, __last, ((this->_M_impl)._M_start))); } else 
# 323
{ 
# 324
_ForwardIterator __mid = __first; 
# 325
std::advance(__mid, size()); 
# 326
std::copy(__first, __mid, ((this->_M_impl)._M_start)); 
# 327
__attribute((__unused__)) const size_type __n = __len - size(); 
# 328
; 
# 329
((this->_M_impl)._M_finish) = std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 333
; 
# 334
}  }  
# 335
} 
# 338
template< class _Tp, class _Alloc> auto 
# 341
vector< _Tp, _Alloc> ::_M_insert_rval(const_iterator __position, value_type &&__v)->iterator 
# 342
{ 
# 343
const auto __n = __position - cbegin(); 
# 344
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 345
if (__position == cend()) 
# 346
{ 
# 347
; 
# 348
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(__v)); 
# 350
++((this->_M_impl)._M_finish); 
# 351
; 
# 352
} else { 
# 354
_M_insert_aux(begin() + __n, std::move(__v)); }  } else { 
# 356
_M_realloc_insert(begin() + __n, std::move(__v)); }  
# 358
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 359
} 
# 361
template< class _Tp, class _Alloc> 
# 362
template< class ..._Args> auto 
# 365
vector< _Tp, _Alloc> ::_M_emplace_aux(const_iterator __position, _Args &&...__args)->iterator 
# 367
{ 
# 368
const auto __n = __position - cbegin(); 
# 369
if (((this->_M_impl)._M_finish) != ((this->_M_impl)._M_end_of_storage)) { 
# 370
if (__position == cend()) 
# 371
{ 
# 372
; 
# 373
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::forward< _Args> (__args)...); 
# 375
++((this->_M_impl)._M_finish); 
# 376
; 
# 377
} else 
# 379
{ 
# 383
_Temporary_value __tmp(this, std::forward< _Args> (__args)...); 
# 384
_M_insert_aux(begin() + __n, std::move(__tmp._M_val())); 
# 385
}  } else { 
# 387
_M_realloc_insert(begin() + __n, std::forward< _Args> (__args)...); }  
# 389
return ((__gnu_cxx::__normal_iterator< pointer, vector> )(((this->_M_impl)._M_start) + __n)); 
# 390
} 
# 392
template< class _Tp, class _Alloc> 
# 393
template< class _Arg> void 
# 396
vector< _Tp, _Alloc> ::_M_insert_aux(iterator __position, _Arg &&__arg) 
# 403
{ 
# 404
; 
# 405
_Alloc_traits::construct((this->_M_impl), ((this->_M_impl)._M_finish), std::move(*(((this->_M_impl)._M_finish) - 1))); 
# 407
++((this->_M_impl)._M_finish); 
# 408
; 
# 412
std::move_backward(__position.base(), ((this->_M_impl)._M_finish) - 2, ((this->_M_impl)._M_finish) - 1); 
# 418
(*__position) = std::forward< _Arg> (__arg); 
# 420
} 
# 423
template< class _Tp, class _Alloc> 
# 424
template< class ..._Args> void 
# 427
vector< _Tp, _Alloc> ::_M_realloc_insert(iterator __position, _Args &&...__args) 
# 434
{ 
# 435
const size_type __len = _M_check_len((size_type)1, "vector::_M_realloc_insert"); 
# 437
pointer __old_start = (((this->_M_impl)._M_start)); 
# 438
pointer __old_finish = (((this->_M_impl)._M_finish)); 
# 439
const size_type __elems_before = __position - begin(); 
# 440
pointer __new_start(this->_M_allocate(__len)); 
# 441
pointer __new_finish(__new_start); 
# 442
try 
# 443
{ 
# 449
_Alloc_traits::construct((this->_M_impl), __new_start + __elems_before, std::forward< _Args> (__args)...); 
# 456
__new_finish = pointer(); 
# 459
if constexpr ((_S_use_relocate)()) 
# 460
{ 
# 461
__new_finish = (_S_relocate)(__old_start, __position.base(), __new_start, _M_get_Tp_allocator()); 
# 464
++__new_finish; 
# 466
__new_finish = (_S_relocate)(__position.base(), __old_finish, __new_finish, _M_get_Tp_allocator()); 
# 468
} else 
# 471
{ 
# 472
__new_finish = std::__uninitialized_move_if_noexcept_a(__old_start, __position.base(), __new_start, _M_get_Tp_allocator()); 
# 477
++__new_finish; 
# 479
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), __old_finish, __new_finish, _M_get_Tp_allocator()); 
# 483
}  
# 484
} 
# 485
catch (...) 
# 486
{ 
# 487
if (!__new_finish) { 
# 488
_Alloc_traits::destroy((this->_M_impl), __new_start + __elems_before); } else { 
# 491
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 492
_M_deallocate(__new_start, __len); 
# 493
throw; 
# 494
}  
# 496
if constexpr (!(_S_use_relocate)()) { 
# 498
std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator()); }  
# 499
; 
# 500
_M_deallocate(__old_start, ((this->_M_impl)._M_end_of_storage) - __old_start); 
# 502
((this->_M_impl)._M_start) = __new_start; 
# 503
((this->_M_impl)._M_finish) = __new_finish; 
# 504
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 505
} 
# 507
template< class _Tp, class _Alloc> void 
# 510
vector< _Tp, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, const value_type &__x) 
# 511
{ 
# 512
if (__n != (0)) 
# 513
{ 
# 514
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 516
{ 
# 520
_Temporary_value __tmp(this, __x); 
# 521
value_type &__x_copy = __tmp._M_val(); 
# 523
const size_type __elems_after = end() - __position; 
# 524
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 525
if (__elems_after > __n) 
# 526
{ 
# 527
; 
# 528
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 532
((this->_M_impl)._M_finish) += __n; 
# 533
; 
# 534
std::move_backward(__position.base(), __old_finish - __n, __old_finish); 
# 536
std::fill(__position.base(), __position.base() + __n, __x_copy); 
# 538
} else 
# 540
{ 
# 541
; 
# 542
((this->_M_impl)._M_finish) = std::__uninitialized_fill_n_a(((this->_M_impl)._M_finish), __n - __elems_after, __x_copy, _M_get_Tp_allocator()); 
# 547
; 
# 548
std::__uninitialized_move_a(__position.base(), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 551
((this->_M_impl)._M_finish) += __elems_after; 
# 552
; 
# 553
std::fill(__position.base(), __old_finish, __x_copy); 
# 554
}  
# 555
} else 
# 557
{ 
# 558
const size_type __len = _M_check_len(__n, "vector::_M_fill_insert"); 
# 560
const size_type __elems_before = __position - begin(); 
# 561
pointer __new_start(this->_M_allocate(__len)); 
# 562
pointer __new_finish(__new_start); 
# 563
try 
# 564
{ 
# 566
std::__uninitialized_fill_n_a(__new_start + __elems_before, __n, __x, _M_get_Tp_allocator()); 
# 569
__new_finish = pointer(); 
# 571
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 576
__new_finish += __n; 
# 578
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 582
} 
# 583
catch (...) 
# 584
{ 
# 585
if (!__new_finish) { 
# 586
std::_Destroy(__new_start + __elems_before, (__new_start + __elems_before) + __n, _M_get_Tp_allocator()); } else { 
# 590
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); }  
# 592
_M_deallocate(__new_start, __len); 
# 593
throw; 
# 594
}  
# 595
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 597
; 
# 598
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 601
((this->_M_impl)._M_start) = __new_start; 
# 602
((this->_M_impl)._M_finish) = __new_finish; 
# 603
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 604
}  
# 605
}  
# 606
} 
# 609
template< class _Tp, class _Alloc> void 
# 612
vector< _Tp, _Alloc> ::_M_default_append(size_type __n) 
# 613
{ 
# 614
if (__n != (0)) 
# 615
{ 
# 616
const size_type __size = size(); 
# 617
size_type __navail = (size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish)); 
# 620
if ((__size > max_size()) || (__navail > (max_size() - __size))) { 
# 621
__builtin_unreachable(); }  
# 623
if (__navail >= __n) 
# 624
{ 
# 625
; 
# 626
((this->_M_impl)._M_finish) = std::__uninitialized_default_n_a(((this->_M_impl)._M_finish), __n, _M_get_Tp_allocator()); 
# 629
; 
# 630
} else 
# 632
{ 
# 633
const size_type __len = _M_check_len(__n, "vector::_M_default_append"); 
# 635
pointer __new_start(this->_M_allocate(__len)); 
# 636
if constexpr ((_S_use_relocate)()) 
# 637
{ 
# 638
try 
# 639
{ 
# 640
std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator()); 
# 642
} 
# 643
catch (...) 
# 644
{ 
# 645
_M_deallocate(__new_start, __len); 
# 646
throw; 
# 647
}  
# 648
(_S_relocate)(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 650
} else 
# 652
{ 
# 653
pointer __destroy_from = pointer(); 
# 654
try 
# 655
{ 
# 656
std::__uninitialized_default_n_a(__new_start + __size, __n, _M_get_Tp_allocator()); 
# 658
__destroy_from = (__new_start + __size); 
# 659
std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), __new_start, _M_get_Tp_allocator()); 
# 662
} 
# 663
catch (...) 
# 664
{ 
# 665
if (__destroy_from) { 
# 666
std::_Destroy(__destroy_from, __destroy_from + __n, _M_get_Tp_allocator()); }  
# 668
_M_deallocate(__new_start, __len); 
# 669
throw; 
# 670
}  
# 671
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 673
}  
# 674
; 
# 675
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 678
((this->_M_impl)._M_start) = __new_start; 
# 679
((this->_M_impl)._M_finish) = ((__new_start + __size) + __n); 
# 680
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 681
}  
# 682
}  
# 683
} 
# 685
template< class _Tp, class _Alloc> bool 
# 688
vector< _Tp, _Alloc> ::_M_shrink_to_fit() 
# 689
{ 
# 690
if (capacity() == size()) { 
# 691
return false; }  
# 692
; 
# 693
return std::template __shrink_to_fit_aux< vector> ::_S_do_it(*this); 
# 694
} 
# 697
template< class _Tp, class _Alloc> 
# 698
template< class _InputIterator> void 
# 701
vector< _Tp, _Alloc> ::_M_range_insert(iterator __pos, _InputIterator __first, _InputIterator 
# 702
__last, std::input_iterator_tag) 
# 703
{ 
# 704
if (__pos == end()) 
# 705
{ 
# 706
for (; __first != __last; ++__first) { 
# 707
insert(end(), *__first); }  
# 708
} else { 
# 709
if (__first != __last) 
# 710
{ 
# 711
vector __tmp(__first, __last, _M_get_Tp_allocator()); 
# 712
insert(__pos, std::make_move_iterator(__tmp.begin()), std::make_move_iterator(__tmp.end())); 
# 715
}  }  
# 716
} 
# 718
template< class _Tp, class _Alloc> 
# 719
template< class _ForwardIterator> void 
# 722
vector< _Tp, _Alloc> ::_M_range_insert(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 723
__last, std::forward_iterator_tag) 
# 724
{ 
# 725
if (__first != __last) 
# 726
{ 
# 727
const size_type __n = std::distance(__first, __last); 
# 728
if (((size_type)(((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_finish))) >= __n) 
# 730
{ 
# 731
const size_type __elems_after = end() - __position; 
# 732
pointer __old_finish(((this->_M_impl)._M_finish)); 
# 733
if (__elems_after > __n) 
# 734
{ 
# 735
; 
# 736
std::__uninitialized_move_a(((this->_M_impl)._M_finish) - __n, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 740
((this->_M_impl)._M_finish) += __n; 
# 741
; 
# 742
std::move_backward(__position.base(), __old_finish - __n, __old_finish); 
# 744
std::copy(__first, __last, __position); 
# 745
} else 
# 747
{ 
# 748
_ForwardIterator __mid = __first; 
# 749
std::advance(__mid, __elems_after); 
# 750
; 
# 751
std::__uninitialized_copy_a(__mid, __last, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 754
((this->_M_impl)._M_finish) += (__n - __elems_after); 
# 755
; 
# 756
std::__uninitialized_move_a(__position.base(), __old_finish, ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 760
((this->_M_impl)._M_finish) += __elems_after; 
# 761
; 
# 762
std::copy(__first, __mid, __position); 
# 763
}  
# 764
} else 
# 766
{ 
# 767
const size_type __len = _M_check_len(__n, "vector::_M_range_insert"); 
# 769
pointer __new_start(this->_M_allocate(__len)); 
# 770
pointer __new_finish(__new_start); 
# 771
try 
# 772
{ 
# 773
__new_finish = std::__uninitialized_move_if_noexcept_a(((this->_M_impl)._M_start), __position.base(), __new_start, _M_get_Tp_allocator()); 
# 777
__new_finish = std::__uninitialized_copy_a(__first, __last, __new_finish, _M_get_Tp_allocator()); 
# 781
__new_finish = std::__uninitialized_move_if_noexcept_a(__position.base(), ((this->_M_impl)._M_finish), __new_finish, _M_get_Tp_allocator()); 
# 785
} 
# 786
catch (...) 
# 787
{ 
# 788
std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator()); 
# 790
_M_deallocate(__new_start, __len); 
# 791
throw; 
# 792
}  
# 793
std::_Destroy(((this->_M_impl)._M_start), ((this->_M_impl)._M_finish), _M_get_Tp_allocator()); 
# 795
; 
# 796
_M_deallocate(((this->_M_impl)._M_start), ((this->_M_impl)._M_end_of_storage) - ((this->_M_impl)._M_start)); 
# 799
((this->_M_impl)._M_start) = __new_start; 
# 800
((this->_M_impl)._M_finish) = __new_finish; 
# 801
((this->_M_impl)._M_end_of_storage) = (__new_start + __len); 
# 802
}  
# 803
}  
# 804
} 
# 808
template< class _Alloc> void 
# 811
vector< bool, _Alloc> ::_M_reallocate(size_type __n) 
# 812
{ 
# 813
_Bit_pointer __q = this->_M_allocate(__n); 
# 814
iterator __start(std::__addressof(*__q), 0); 
# 815
iterator __finish(_M_copy_aligned(begin(), end(), __start)); 
# 816
this->_M_deallocate(); 
# 817
((this->_M_impl)._M_start) = __start; 
# 818
((this->_M_impl)._M_finish) = __finish; 
# 819
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__n)); 
# 820
} 
# 822
template< class _Alloc> void 
# 825
vector< bool, _Alloc> ::_M_fill_insert(iterator __position, size_type __n, bool __x) 
# 826
{ 
# 827
if (__n == (0)) { 
# 828
return; }  
# 829
if ((capacity() - size()) >= __n) 
# 830
{ 
# 831
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 833
std::fill(__position, (__position + ((difference_type)__n)), __x); 
# 834
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 835
} else 
# 837
{ 
# 838
const size_type __len = _M_check_len(__n, "vector<bool>::_M_fill_insert"); 
# 840
_Bit_pointer __q = this->_M_allocate(__len); 
# 841
iterator __start(std::__addressof(*__q), 0); 
# 842
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 843
std::fill(__i, (__i + ((difference_type)__n)), __x); 
# 844
iterator __finish = std::copy(__position, end(), (__i + ((difference_type)__n))); 
# 846
this->_M_deallocate(); 
# 847
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 848
((this->_M_impl)._M_start) = __start; 
# 849
((this->_M_impl)._M_finish) = __finish; 
# 850
}  
# 851
} 
# 853
template< class _Alloc> 
# 854
template< class _ForwardIterator> void 
# 857
vector< bool, _Alloc> ::_M_insert_range(iterator __position, _ForwardIterator __first, _ForwardIterator 
# 858
__last, std::forward_iterator_tag) 
# 859
{ 
# 860
if (__first != __last) 
# 861
{ 
# 862
size_type __n = std::distance(__first, __last); 
# 863
if ((capacity() - size()) >= __n) 
# 864
{ 
# 865
std::copy_backward(__position, end(), ((this->_M_impl)._M_finish) + ((difference_type)__n)); 
# 868
std::copy(__first, __last, __position); 
# 869
((this->_M_impl)._M_finish) += ((difference_type)__n); 
# 870
} else 
# 872
{ 
# 873
const size_type __len = _M_check_len(__n, "vector<bool>::_M_insert_range"); 
# 875
_Bit_pointer __q = this->_M_allocate(__len); 
# 876
iterator __start(std::__addressof(*__q), 0); 
# 877
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 878
__i = std::copy(__first, __last, __i); 
# 879
iterator __finish = std::copy(__position, end(), __i); 
# 880
this->_M_deallocate(); 
# 881
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 882
((this->_M_impl)._M_start) = __start; 
# 883
((this->_M_impl)._M_finish) = __finish; 
# 884
}  
# 885
}  
# 886
} 
# 888
template< class _Alloc> void 
# 891
vector< bool, _Alloc> ::_M_insert_aux(iterator __position, bool __x) 
# 892
{ 
# 893
if ((((this->_M_impl)._M_finish)._M_p) != (this->_M_impl)._M_end_addr()) 
# 894
{ 
# 895
std::copy_backward(__position, ((this->_M_impl)._M_finish), ((this->_M_impl)._M_finish) + 1); 
# 897
(((*__position)) = __x); 
# 898
++((this->_M_impl)._M_finish); 
# 899
} else 
# 901
{ 
# 902
const size_type __len = _M_check_len((size_type)1, "vector<bool>::_M_insert_aux"); 
# 904
_Bit_pointer __q = this->_M_allocate(__len); 
# 905
iterator __start(std::__addressof(*__q), 0); 
# 906
iterator __i = _M_copy_aligned(begin(), __position, __start); 
# 907
(((*(__i++))) = __x); 
# 908
iterator __finish = std::copy(__position, end(), __i); 
# 909
this->_M_deallocate(); 
# 910
((this->_M_impl)._M_end_of_storage) = (__q + _S_nword(__len)); 
# 911
((this->_M_impl)._M_start) = __start; 
# 912
((this->_M_impl)._M_finish) = __finish; 
# 913
}  
# 914
} 
# 916
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 919
vector< bool, _Alloc> ::_M_erase(iterator __position) 
# 920
{ 
# 921
if ((((__position + (1))) != (end()))) { 
# 922
std::copy((__position + (1)), end(), __position); }  
# 923
--((this->_M_impl)._M_finish); 
# 924
return __position; 
# 925
} 
# 927
template< class _Alloc> typename vector< bool, _Alloc> ::iterator 
# 930
vector< bool, _Alloc> ::_M_erase(iterator __first, iterator __last) 
# 931
{ 
# 932
if ((__first != __last)) { 
# 933
_M_erase_at_end(std::copy(__last, end(), __first)); }  
# 934
return __first; 
# 935
} 
# 938
template< class _Alloc> bool 
# 941
vector< bool, _Alloc> ::_M_shrink_to_fit() 
# 942
{ 
# 943
if ((capacity() - size()) < ((int)_S_word_bit)) { 
# 944
return false; }  
# 945
try 
# 946
{ 
# 947
if (size_type __n = size()) { 
# 948
_M_reallocate(__n); } else 
# 950
{ 
# 951
this->_M_deallocate(); 
# 952
(this->_M_impl)._M_reset(); 
# 953
}  
# 954
return true; 
# 955
} 
# 956
catch (...) 
# 957
{ return false; }  
# 958
} 
# 963
}
# 967
namespace std __attribute((__visibility__("default"))) { 
# 971
template< class _Alloc> size_t 
# 974
hash< vector< bool, _Alloc> > ::operator()(const vector< bool, _Alloc>  &__b) const noexcept 
# 975
{ 
# 976
std::size_t __hash = (0); 
# 977
using std::_S_word_bit;
# 978
using std::_Bit_type;
# 980
const std::size_t __words = __b.size() / _S_word_bit; 
# 981
if (__words) 
# 982
{ 
# 983
const std::size_t __clength = (__words * sizeof(std::_Bit_type)); 
# 984
__hash = std::_Hash_impl::hash((((__b._M_impl)._M_start)._M_p), __clength); 
# 985
}  
# 987
const std::size_t __extrabits = __b.size() % _S_word_bit; 
# 988
if (__extrabits) 
# 989
{ 
# 990
std::_Bit_type __hiword = (*(((__b._M_impl)._M_finish)._M_p)); 
# 991
__hiword &= (~((~(static_cast< std::_Bit_type>(0))) << __extrabits)); 
# 993
const std::size_t __clength = (((__extrabits + (8)) - (1)) / (8)); 
# 995
if (__words) { 
# 996
__hash = std::_Hash_impl::hash(&__hiword, __clength, __hash); } else { 
# 998
__hash = std::_Hash_impl::hash(&__hiword, __clength); }  
# 999
}  
# 1001
return __hash; 
# 1002
} 
# 1005
}
# 80 "/usr/include/c++/11/vector" 3
namespace std __attribute((__visibility__("default"))) { 
# 83
namespace pmr { 
# 84
template< class _Tp> class polymorphic_allocator; 
# 85
template< class _Tp> using vector = std::vector< _Tp, polymorphic_allocator< _Tp> > ; 
# 87
}
# 96
}
# 41 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
namespace __detail { 
# 63
template< class _Tp> constexpr bool 
# 65
_Power_of_2(_Tp __x) 
# 66
{ 
# 67
return ((__x - 1) & __x) == 0; 
# 68
} 
# 69
}
# 76
template< class _IntType = int> 
# 77
class uniform_int_distribution { 
# 79
static_assert((std::template is_integral< _IntType> ::value), "template argument must be an integral type");
# 84
public: typedef _IntType result_type; 
# 86
struct param_type { 
# 88
typedef uniform_int_distribution distribution_type; 
# 90
param_type() : param_type(0) { } 
# 93
explicit param_type(_IntType __a, _IntType 
# 94
__b = __gnu_cxx::__int_traits< _IntType> ::__max) : _M_a(__a), _M_b(__b) 
# 96
{ 
# 97
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_a) <= (_M_b))))) { __builtin_unreachable(); }  } while (false); 
# 98
} 
# 101
result_type a() const 
# 102
{ return _M_a; } 
# 105
result_type b() const 
# 106
{ return _M_b; } 
# 109
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 110
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 113
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 114
{ return !(__p1 == __p2); } 
# 117
private: _IntType _M_a; 
# 118
_IntType _M_b; 
# 119
}; 
# 125
uniform_int_distribution() : uniform_int_distribution(0) { } 
# 131
explicit uniform_int_distribution(_IntType __a, _IntType 
# 132
__b = __gnu_cxx::__int_traits< _IntType> ::__max) : _M_param(__a, __b) 
# 135
{ } 
# 138
explicit uniform_int_distribution(const param_type &__p) : _M_param(__p) 
# 140
{ } 
# 148
void reset() { } 
# 151
result_type a() const 
# 152
{ return (_M_param).a(); } 
# 155
result_type b() const 
# 156
{ return (_M_param).b(); } 
# 162
param_type param() const 
# 163
{ return _M_param; } 
# 170
void param(const param_type &__param) 
# 171
{ (_M_param) = __param; } 
# 177
result_type min() const 
# 178
{ return a(); } 
# 184
result_type max() const 
# 185
{ return b(); } 
# 190
template< class _UniformRandomBitGenerator> result_type 
# 192
operator()(_UniformRandomBitGenerator &__urng) 
# 193
{ return this->operator()(__urng, _M_param); } 
# 195
template< class _UniformRandomBitGenerator> result_type operator()(_UniformRandomBitGenerator & __urng, const param_type & __p); 
# 200
template< class _ForwardIterator, class 
# 201
_UniformRandomBitGenerator> void 
# 203
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator &
# 204
__urng) 
# 205
{ this->__generate(__f, __t, __urng, _M_param); } 
# 207
template< class _ForwardIterator, class 
# 208
_UniformRandomBitGenerator> void 
# 210
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator &
# 211
__urng, const param_type &
# 212
__p) 
# 213
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 215
template< class _UniformRandomBitGenerator> void 
# 217
__generate(result_type *__f, result_type *__t, _UniformRandomBitGenerator &
# 218
__urng, const param_type &
# 219
__p) 
# 220
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 227
friend inline bool operator==(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 228
__d2) 
# 229
{ return (__d1._M_param) == (__d2._M_param); } 
# 232
private: template< class _ForwardIterator, class 
# 233
_UniformRandomBitGenerator> void 
# 232
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator & __urng, const param_type & __p); 
# 239
param_type _M_param; 
# 244
template< class _Wp, class _Urbg, class _Up> static _Up 
# 246
_S_nd(_Urbg &__g, _Up __range) 
# 247
{ 
# 248
using _Up_traits = __gnu_cxx::__int_traits< _Up> ; 
# 249
using _Wp_traits = __gnu_cxx::__int_traits< _Wp> ; 
# 250
static_assert((!_Up_traits::__is_signed), "U must be unsigned");
# 251
static_assert((!_Wp_traits::__is_signed), "W must be unsigned");
# 252
static_assert((_Wp_traits::__digits == (2 * _Up_traits::__digits)), "W must be twice as wide as U");
# 258
_Wp __product = ((_Wp)__g()) * ((_Wp)__range); 
# 259
_Up __low = (_Up)__product; 
# 260
if (__low < __range) 
# 261
{ 
# 262
_Up __threshold = (-__range) % __range; 
# 263
while (__low < __threshold) 
# 264
{ 
# 265
__product = (((_Wp)__g()) * ((_Wp)__range)); 
# 266
__low = ((_Up)__product); 
# 267
}  
# 268
}  
# 269
return __product >> _Up_traits::__digits; 
# 270
} 
# 271
}; 
# 273
template< class _IntType> 
# 274
template< class _UniformRandomBitGenerator> typename uniform_int_distribution< _IntType> ::result_type 
# 277
uniform_int_distribution< _IntType> ::operator()(_UniformRandomBitGenerator &__urng, const param_type &
# 278
__param) 
# 279
{ 
# 280
typedef typename _UniformRandomBitGenerator::result_type _Gresult_type; 
# 281
typedef typename make_unsigned< result_type> ::type __utype; 
# 282
typedef typename common_type< typename _UniformRandomBitGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 284
constexpr __uctype __urngmin = _UniformRandomBitGenerator::min(); 
# 285
constexpr __uctype __urngmax = _UniformRandomBitGenerator::max(); 
# 286
static_assert((__urngmin < __urngmax), "Uniform random bit generator must define min() < max()");
# 288
constexpr __uctype __urngrange = (__urngmax - __urngmin); 
# 290
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 293
__uctype __ret; 
# 294
if (__urngrange > __urange) 
# 295
{ 
# 298
const __uctype __uerange = __urange + 1; 
# 302
if constexpr (__urngrange == 18446744073709551615UL) 
# 303
{ 
# 306
unsigned long __u64erange = __uerange; 
# 307
__ret = _S_nd< unsigned __int128> (__urng, __u64erange); 
# 308
} else { 
# 311
if constexpr (__urngrange == 4294967295U) 
# 312
{ 
# 315
unsigned __u32erange = __uerange; 
# 316
__ret = _S_nd< unsigned long> (__urng, __u32erange); 
# 317
} else 
# 320
{ 
# 322
const __uctype __scaling = __urngrange / __uerange; 
# 323
const __uctype __past = __uerange * __scaling; 
# 324
do { 
# 325
__ret = (((__uctype)__urng()) - __urngmin); } 
# 326
while (__ret >= __past); 
# 327
__ret /= __scaling; 
# 328
}  }  
# 329
} else { 
# 330
if (__urngrange < __urange) 
# 331
{ 
# 347 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 348
do 
# 349
{ 
# 350
const __uctype __uerngrange = __urngrange + 1; 
# 351
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 353
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 354
} 
# 355
while ((__ret > __urange) || (__ret < __tmp)); 
# 356
} else { 
# 358
__ret = (((__uctype)__urng()) - __urngmin); }  }  
# 360
return __ret + __param.a(); 
# 361
} 
# 364
template< class _IntType> 
# 365
template< class _ForwardIterator, class 
# 366
_UniformRandomBitGenerator> void 
# 369
uniform_int_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomBitGenerator &
# 370
__urng, const param_type &
# 371
__param) 
# 372
{ 
# 374
typedef typename _UniformRandomBitGenerator::result_type _Gresult_type; 
# 375
typedef typename make_unsigned< result_type> ::type __utype; 
# 376
typedef typename common_type< typename _UniformRandomBitGenerator::result_type, typename make_unsigned< result_type> ::type> ::type __uctype; 
# 378
static_assert((__urng.min() < __urng.max()), "Uniform random bit generator must define min() < max()");
# 381
constexpr __uctype __urngmin = __urng.min(); 
# 382
constexpr __uctype __urngmax = __urng.max(); 
# 383
constexpr __uctype __urngrange = (__urngmax - __urngmin); 
# 384
const __uctype __urange = ((__uctype)__param.b()) - ((__uctype)__param.a()); 
# 387
__uctype __ret; 
# 389
if (__urngrange > __urange) 
# 390
{ 
# 391
if (__detail::_Power_of_2(__urngrange + 1) && __detail::_Power_of_2(__urange + 1)) 
# 393
{ 
# 394
while (__f != __t) 
# 395
{ 
# 396
__ret = (((__uctype)__urng()) - __urngmin); 
# 397
(*(__f++)) = ((__ret & __urange) + __param.a()); 
# 398
}  
# 399
} else 
# 401
{ 
# 403
const __uctype __uerange = __urange + 1; 
# 404
const __uctype __scaling = __urngrange / __uerange; 
# 405
const __uctype __past = __uerange * __scaling; 
# 406
while (__f != __t) 
# 407
{ 
# 408
do { 
# 409
__ret = (((__uctype)__urng()) - __urngmin); } 
# 410
while (__ret >= __past); 
# 411
(*(__f++)) = ((__ret / __scaling) + __param.a()); 
# 412
}  
# 413
}  
# 414
} else { 
# 415
if (__urngrange < __urange) 
# 416
{ 
# 432 "/usr/include/c++/11/bits/uniform_int_dist.h" 3
__uctype __tmp; 
# 433
while (__f != __t) 
# 434
{ 
# 435
do 
# 436
{ 
# 437
constexpr __uctype __uerngrange = (__urngrange + 1); 
# 438
__tmp = (__uerngrange * operator()(__urng, param_type(0, __urange / __uerngrange))); 
# 440
__ret = (__tmp + (((__uctype)__urng()) - __urngmin)); 
# 441
} 
# 442
while ((__ret > __urange) || (__ret < __tmp)); 
# 443
(*(__f++)) = __ret; 
# 444
}  
# 445
} else { 
# 447
while (__f != __t) { 
# 448
(*(__f++)) = ((((__uctype)__urng()) - __urngmin) + __param.a()); }  }  }  
# 449
} 
# 454
}
# 37 "/usr/include/c++/11/bits/random.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 58 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, size_t __bits, class 
# 59
_UniformRandomNumberGenerator> _RealType 
# 58
generate_canonical(_UniformRandomNumberGenerator & __g); 
# 65
namespace __detail { 
# 67
template< class _UIntType, size_t __w, bool 
# 68
 = __w < (static_cast< size_t>(std::template numeric_limits< _UIntType> ::digits))> 
# 70
struct _Shift { 
# 71
static const _UIntType __value = (0); }; 
# 73
template< class _UIntType, size_t __w> 
# 74
struct _Shift< _UIntType, __w, true>  { 
# 75
static const _UIntType __value = (((_UIntType)1) << __w); }; 
# 77
template< int __s, int 
# 78
__which = ((((__s) <= ((8) * sizeof(int))) + ((__s) <= ((8) * sizeof(long)))) + ((__s) <= ((8) * sizeof(long long)))) + (__s <= 128)> 
# 83
struct _Select_uint_least_t { 
# 85
static_assert((__which < 0), "sorry, would be too much trouble for a slow result");
# 87
}; 
# 89
template< int __s> 
# 90
struct _Select_uint_least_t< __s, 4>  { 
# 91
typedef unsigned type; }; 
# 93
template< int __s> 
# 94
struct _Select_uint_least_t< __s, 3>  { 
# 95
typedef unsigned long type; }; 
# 97
template< int __s> 
# 98
struct _Select_uint_least_t< __s, 2>  { 
# 99
typedef unsigned long long type; }; 
# 102
template< int __s> 
# 103
struct _Select_uint_least_t< __s, 1>  { 
# 104
typedef unsigned __int128 type; }; 
# 108
template< class _Tp, _Tp __m, _Tp __a, _Tp __c, bool 
# 109
__big_enough = (!(__m & (__m - 1))) || (((((_Tp)(-1)) - __c) / __a) >= (__m - 1)), bool 
# 111
__schrage_ok = (__m % __a) < (__m / __a)> 
# 112
struct _Mod { 
# 115
typedef typename _Select_uint_least_t< (std::__lg(__a) + std::__lg(__m)) + 2> ::type _Tp2; 
# 117
static _Tp __calc(_Tp __x) 
# 118
{ return static_cast< _Tp>(((((_Tp2)__a) * __x) + __c) % __m); } 
# 119
}; 
# 122
template< class _Tp, _Tp __m, _Tp __a, _Tp __c> 
# 123
struct _Mod< _Tp, __m, __a, __c, false, true>  { 
# 126
static _Tp __calc(_Tp __x); 
# 127
}; 
# 132
template< class _Tp, _Tp __m, _Tp __a, _Tp __c, bool __s> 
# 133
struct _Mod< _Tp, __m, __a, __c, true, __s>  { 
# 136
static _Tp __calc(_Tp __x) 
# 137
{ 
# 138
_Tp __res = (__a * __x) + __c; 
# 139
if (__m) { 
# 140
__res %= __m; }  
# 141
return __res; 
# 142
} 
# 143
}; 
# 145
template< class _Tp, _Tp __m, _Tp __a = 1, _Tp __c = 0> inline _Tp 
# 147
__mod(_Tp __x) 
# 148
{ 
# 149
if constexpr (__a == 0) { 
# 150
return __c; } else 
# 152
{ 
# 154
constexpr _Tp __a1 = ((__a) ? __a : 1); 
# 155
return _Mod< _Tp, __m, __a1, __c> ::__calc(__x); 
# 156
}  
# 157
} 
# 163
template< class _Engine, class _DInputType> 
# 164
struct _Adaptor { 
# 166
static_assert((std::template is_floating_point< _DInputType> ::value), "template argument must be a floating point type");
# 170
_Adaptor(_Engine &__g) : _M_g(__g) 
# 171
{ } 
# 174
_DInputType min() const 
# 175
{ return (_DInputType)0; } 
# 178
_DInputType max() const 
# 179
{ return (_DInputType)1; } 
# 187
_DInputType operator()() 
# 188
{ 
# 189
return std::generate_canonical< _DInputType, numeric_limits< _DInputType> ::digits, _Engine> (_M_g); 
# 192
} 
# 195
private: _Engine &_M_g; 
# 196
}; 
# 198
template< class _Sseq> using __seed_seq_generate_t = __decltype((std::declval< _Sseq &> ().generate(std::declval< unsigned *> (), std::declval< unsigned *> ()))); 
# 205
template< class _Sseq, class _Engine, class _Res, class 
# 206
_GenerateCheck = __seed_seq_generate_t< _Sseq> > using __is_seed_seq = __and_< __not_< is_same< __remove_cvref_t< _Sseq> , _Engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, _Res> > > ; 
# 213
}
# 254 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> 
# 255
class linear_congruential_engine { 
# 257
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 259
static_assert(((__m == 0U) || ((__a < __m) && (__c < __m))), "template argument substituting __m out of bounds");
# 262
template< class _Sseq> using _If_seed_seq = typename enable_if< __and_< __not_< is_same< __remove_cvref_t< _Sseq> , linear_congruential_engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, _UIntType> > > ::value> ::type; 
# 268
public: typedef _UIntType result_type; 
# 271
static constexpr inline result_type multiplier = (__a); 
# 273
static constexpr inline result_type increment = (__c); 
# 275
static constexpr inline result_type modulus = (__m); 
# 276
static constexpr inline result_type default_seed = (1U); 
# 282
linear_congruential_engine() : linear_congruential_engine(default_seed) 
# 283
{ } 
# 293 "/usr/include/c++/11/bits/random.h" 3
explicit linear_congruential_engine(result_type __s) 
# 294
{ seed(__s); } 
# 302
template< class _Sseq, class  = _If_seed_seq< _Sseq> > explicit 
# 304
linear_congruential_engine(_Sseq &__q) 
# 305
{ seed(__q); } 
# 314
void seed(result_type __s = default_seed); 
# 323 "/usr/include/c++/11/bits/random.h" 3
template< class _Sseq> _If_seed_seq< _Sseq>  seed(_Sseq & __q); 
# 334
static constexpr result_type min() 
# 335
{ return (__c == 0U) ? 1U : 0U; } 
# 341
static constexpr result_type max() 
# 342
{ return __m - 1U; } 
# 348
void discard(unsigned long long __z) 
# 349
{ 
# 350
for (; __z != 0ULL; --__z) { 
# 351
(*this)(); }  
# 352
} 
# 358
result_type operator()() 
# 359
{ 
# 360
(_M_x) = __detail::__mod< _UIntType, __m, __a, __c> (_M_x); 
# 361
return _M_x; 
# 362
} 
# 376 "/usr/include/c++/11/bits/random.h" 3
friend inline bool operator==(const linear_congruential_engine< _UIntType, __a, __c, __m>  &__lhs, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 377
__rhs) 
# 378
{ return (__lhs._M_x) == (__rhs._M_x); } 
# 388 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType1, _UIntType1 __a1, _UIntType1 __c1, _UIntType1 
# 389
__m1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 388
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1>  & __lcr); 
# 408 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType1, _UIntType1 __a1, _UIntType1 __c1, _UIntType1 
# 409
__m1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 408
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::linear_congruential_engine< _UIntType1, __a1, __c1, __m1>  & __lcr); 
# 416
private: _UIntType _M_x; 
# 417
}; 
# 430 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> inline bool 
# 432
operator!=(const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 433
__lhs, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 435
__rhs) 
# 436
{ return !(__lhs == __rhs); } 
# 467 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType, size_t __w, size_t 
# 468
__n, size_t __m, size_t __r, _UIntType 
# 469
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 470
__b, size_t __t, _UIntType 
# 471
__c, size_t __l, _UIntType __f> 
# 472
class mersenne_twister_engine { 
# 474
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 476
static_assert((((1U) <= __m) && (__m <= __n)), "template argument substituting __m out of bounds");
# 478
static_assert((__r <= __w), "template argument substituting __r out of bound");
# 480
static_assert((__u <= __w), "template argument substituting __u out of bound");
# 482
static_assert((__s <= __w), "template argument substituting __s out of bound");
# 484
static_assert((__t <= __w), "template argument substituting __t out of bound");
# 486
static_assert((__l <= __w), "template argument substituting __l out of bound");
# 488
static_assert((__w <= std::template numeric_limits< _UIntType> ::digits), "template argument substituting __w out of bound");
# 490
static_assert((__a <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __a out of bound");
# 492
static_assert((__b <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __b out of bound");
# 494
static_assert((__c <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __c out of bound");
# 496
static_assert((__d <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __d out of bound");
# 498
static_assert((__f <= (__detail::template _Shift< _UIntType, __w> ::__value - 1)), "template argument substituting __f out of bound");
# 501
template< class _Sseq> using _If_seed_seq = typename enable_if< __and_< __not_< is_same< __remove_cvref_t< _Sseq> , mersenne_twister_engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, _UIntType> > > ::value> ::type; 
# 507
public: typedef _UIntType result_type; 
# 510
static constexpr inline size_t word_size = __w; 
# 511
static constexpr inline size_t state_size = __n; 
# 512
static constexpr inline size_t shift_size = __m; 
# 513
static constexpr inline size_t mask_bits = __r; 
# 514
static constexpr inline result_type xor_mask = (__a); 
# 515
static constexpr inline size_t tempering_u = __u; 
# 516
static constexpr inline result_type tempering_d = (__d); 
# 517
static constexpr inline size_t tempering_s = __s; 
# 518
static constexpr inline result_type tempering_b = (__b); 
# 519
static constexpr inline size_t tempering_t = __t; 
# 520
static constexpr inline result_type tempering_c = (__c); 
# 521
static constexpr inline size_t tempering_l = __l; 
# 522
static constexpr inline result_type initialization_multiplier = (__f); 
# 523
static constexpr inline result_type default_seed = (5489U); 
# 527
mersenne_twister_engine() : mersenne_twister_engine(default_seed) { } 
# 530
explicit mersenne_twister_engine(result_type __sd) 
# 531
{ seed(__sd); } 
# 539
template< class _Sseq, class  = _If_seed_seq< _Sseq> > explicit 
# 541
mersenne_twister_engine(_Sseq &__q) 
# 542
{ seed(__q); } 
# 545
void seed(result_type __sd = default_seed); 
# 547
template< class _Sseq> _If_seed_seq< _Sseq>  seed(_Sseq & __q); 
# 555
static constexpr result_type min() 
# 556
{ return 0; } 
# 562
static constexpr result_type max() 
# 563
{ return __detail::template _Shift< _UIntType, __w> ::__value - 1; } 
# 569
void discard(unsigned long long __z); 
# 572
result_type operator()(); 
# 587 "/usr/include/c++/11/bits/random.h" 3
friend inline bool operator==(const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &__lhs, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 588
__rhs) 
# 589
{ return (std::equal(__lhs._M_x, (__lhs._M_x) + state_size, __rhs._M_x) && ((__lhs._M_p) == (__rhs._M_p))); 
# 590
} 
# 604 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType1, size_t 
# 605
__w1, size_t __n1, size_t 
# 606
__m1, size_t __r1, _UIntType1 
# 607
__a1, size_t __u1, _UIntType1 
# 608
__d1, size_t __s1, _UIntType1 
# 609
__b1, size_t __t1, _UIntType1 
# 610
__c1, size_t __l1, _UIntType1 __f1, class 
# 611
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 604
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::mersenne_twister_engine< _UIntType1, __w1, __n1, __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>  & __x); 
# 630 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType1, size_t 
# 631
__w1, size_t __n1, size_t 
# 632
__m1, size_t __r1, _UIntType1 
# 633
__a1, size_t __u1, _UIntType1 
# 634
__d1, size_t __s1, _UIntType1 
# 635
__b1, size_t __t1, _UIntType1 
# 636
__c1, size_t __l1, _UIntType1 __f1, class 
# 637
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 630
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::mersenne_twister_engine< _UIntType1, __w1, __n1, __m1, __r1, __a1, __u1, __d1, __s1, __b1, __t1, __c1, __l1, __f1>  & __x); 
# 645
private: void _M_gen_rand(); 
# 647
_UIntType _M_x[state_size]; 
# 648
size_t _M_p; 
# 649
}; 
# 663 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType, size_t __w, size_t 
# 664
__n, size_t __m, size_t __r, _UIntType 
# 665
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 666
__b, size_t __t, _UIntType 
# 667
__c, size_t __l, _UIntType __f> inline bool 
# 669
operator!=(const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 670
__lhs, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 672
__rhs) 
# 673
{ return !(__lhs == __rhs); } 
# 691 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType, size_t __w, size_t __s, size_t __r> 
# 692
class subtract_with_carry_engine { 
# 694
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 696
static_assert((((0U) < __s) && (__s < __r)), "0 < s < r");
# 698
static_assert((((0U) < __w) && (__w <= std::template numeric_limits< _UIntType> ::digits)), "template argument substituting __w out of bounds");
# 701
template< class _Sseq> using _If_seed_seq = typename enable_if< __and_< __not_< is_same< __remove_cvref_t< _Sseq> , subtract_with_carry_engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, _UIntType> > > ::value> ::type; 
# 707
public: typedef _UIntType result_type; 
# 710
static constexpr inline size_t word_size = __w; 
# 711
static constexpr inline size_t short_lag = __s; 
# 712
static constexpr inline size_t long_lag = __r; 
# 713
static constexpr inline result_type default_seed = (19780503U); 
# 715
subtract_with_carry_engine() : subtract_with_carry_engine(default_seed) 
# 716
{ } 
# 723
explicit subtract_with_carry_engine(result_type __sd) 
# 724
{ seed(__sd); } 
# 732
template< class _Sseq, class  = _If_seed_seq< _Sseq> > explicit 
# 734
subtract_with_carry_engine(_Sseq &__q) 
# 735
{ seed(__q); } 
# 750 "/usr/include/c++/11/bits/random.h" 3
void seed(result_type __sd = default_seed); 
# 756
template< class _Sseq> _If_seed_seq< _Sseq>  seed(_Sseq & __q); 
# 765
static constexpr result_type min() 
# 766
{ return 0; } 
# 773
static constexpr result_type max() 
# 774
{ return __detail::template _Shift< _UIntType, __w> ::__value - 1; } 
# 780
void discard(unsigned long long __z) 
# 781
{ 
# 782
for (; __z != 0ULL; --__z) { 
# 783
(*this)(); }  
# 784
} 
# 790
result_type operator()(); 
# 805 "/usr/include/c++/11/bits/random.h" 3
friend inline bool operator==(const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &__lhs, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 806
__rhs) 
# 807
{ return (std::equal(__lhs._M_x, (__lhs._M_x) + long_lag, __rhs._M_x) && ((__lhs._M_carry) == (__rhs._M_carry)) && ((__lhs._M_p) == (__rhs._M_p))); 
# 809
} 
# 823 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType1, size_t __w1, size_t __s1, size_t __r1, class 
# 824
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 823
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::subtract_with_carry_engine< _UIntType1, __w1, __s1, __r1>  & __x); 
# 842 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType1, size_t __w1, size_t __s1, size_t __r1, class 
# 843
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 842
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::subtract_with_carry_engine< _UIntType1, __w1, __s1, __r1>  & __x); 
# 851
private: _UIntType _M_x[long_lag]; 
# 852
_UIntType _M_carry; 
# 853
size_t _M_p; 
# 854
}; 
# 868 "/usr/include/c++/11/bits/random.h" 3
template< class _UIntType, size_t __w, size_t __s, size_t __r> inline bool 
# 870
operator!=(const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 871
__lhs, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 873
__rhs) 
# 874
{ return !(__lhs == __rhs); } 
# 883 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine, size_t __p, size_t __r> 
# 884
class discard_block_engine { 
# 886
static_assert((((1) <= __r) && (__r <= __p)), "template argument substituting __r out of bounds");
# 891
public: typedef typename _RandomNumberEngine::result_type result_type; 
# 893
template< class _Sseq> using _If_seed_seq = typename enable_if< __and_< __not_< is_same< __remove_cvref_t< _Sseq> , discard_block_engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, result_type> > > ::value> ::type; 
# 898
static constexpr inline size_t block_size = __p; 
# 899
static constexpr inline size_t used_block = __r; 
# 906
discard_block_engine() : _M_b(), _M_n((0)) 
# 907
{ } 
# 916
explicit discard_block_engine(const _RandomNumberEngine &__rng) : _M_b(__rng), _M_n((0)) 
# 917
{ } 
# 926
explicit discard_block_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)), _M_n((0)) 
# 927
{ } 
# 936
explicit discard_block_engine(result_type __s) : _M_b(__s), _M_n((0)) 
# 937
{ } 
# 944
template< class _Sseq, class  = _If_seed_seq< _Sseq> > explicit 
# 946
discard_block_engine(_Sseq &__q) : _M_b(__q), _M_n((0)) 
# 948
{ } 
# 955
void seed() 
# 956
{ 
# 957
(_M_b).seed(); 
# 958
(_M_n) = (0); 
# 959
} 
# 966
void seed(result_type __s) 
# 967
{ 
# 968
(_M_b).seed(__s); 
# 969
(_M_n) = (0); 
# 970
} 
# 977
template< class _Sseq> _If_seed_seq< _Sseq>  
# 979
seed(_Sseq &__q) 
# 980
{ 
# 981
(_M_b).seed(__q); 
# 982
(_M_n) = (0); 
# 983
} 
# 990
const _RandomNumberEngine &base() const noexcept 
# 991
{ return _M_b; } 
# 997
static constexpr result_type min() 
# 998
{ return _RandomNumberEngine::min(); } 
# 1004
static constexpr result_type max() 
# 1005
{ return _RandomNumberEngine::max(); } 
# 1011
void discard(unsigned long long __z) 
# 1012
{ 
# 1013
for (; __z != 0ULL; --__z) { 
# 1014
(*this)(); }  
# 1015
} 
# 1021
result_type operator()(); 
# 1035 "/usr/include/c++/11/bits/random.h" 3
friend inline bool operator==(const discard_block_engine< _RandomNumberEngine, __p, __r>  &__lhs, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1036
__rhs) 
# 1037
{ return ((__lhs._M_b) == (__rhs._M_b)) && ((__lhs._M_n) == (__rhs._M_n)); } 
# 1050 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __p1, size_t __r1, class 
# 1051
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 1050
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::discard_block_engine< _RandomNumberEngine1, __p1, __r1>  & __x); 
# 1068 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __p1, size_t __r1, class 
# 1069
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 1068
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::discard_block_engine< _RandomNumberEngine1, __p1, __r1>  & __x); 
# 1076
private: _RandomNumberEngine _M_b; 
# 1077
size_t _M_n; 
# 1078
}; 
# 1091 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine, size_t __p, size_t __r> inline bool 
# 1093
operator!=(const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1094
__lhs, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 1096
__rhs) 
# 1097
{ return !(__lhs == __rhs); } 
# 1104
template< class _RandomNumberEngine, size_t __w, class _UIntType> 
# 1105
class independent_bits_engine { 
# 1107
static_assert((std::template is_unsigned< _UIntType> ::value), "result_type must be an unsigned integral type");
# 1109
static_assert((((0U) < __w) && (__w <= std::template numeric_limits< _UIntType> ::digits)), "template argument substituting __w out of bounds");
# 1112
template< class _Sseq> using _If_seed_seq = typename enable_if< __and_< __not_< is_same< __remove_cvref_t< _Sseq> , independent_bits_engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, _UIntType> > > ::value> ::type; 
# 1118
public: typedef _UIntType result_type; 
# 1125
independent_bits_engine() : _M_b() 
# 1126
{ } 
# 1135
explicit independent_bits_engine(const _RandomNumberEngine &__rng) : _M_b(__rng) 
# 1136
{ } 
# 1145
explicit independent_bits_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)) 
# 1146
{ } 
# 1155
explicit independent_bits_engine(result_type __s) : _M_b(__s) 
# 1156
{ } 
# 1163
template< class _Sseq, class  = _If_seed_seq< _Sseq> > explicit 
# 1165
independent_bits_engine(_Sseq &__q) : _M_b(__q) 
# 1167
{ } 
# 1174
void seed() 
# 1175
{ (_M_b).seed(); } 
# 1182
void seed(result_type __s) 
# 1183
{ (_M_b).seed(__s); } 
# 1190
template< class _Sseq> _If_seed_seq< _Sseq>  
# 1192
seed(_Sseq &__q) 
# 1193
{ (_M_b).seed(__q); } 
# 1200
const _RandomNumberEngine &base() const noexcept 
# 1201
{ return _M_b; } 
# 1207
static constexpr result_type min() 
# 1208
{ return 0U; } 
# 1214
static constexpr result_type max() 
# 1215
{ return __detail::template _Shift< _UIntType, __w> ::__value - 1; } 
# 1221
void discard(unsigned long long __z) 
# 1222
{ 
# 1223
for (; __z != 0ULL; --__z) { 
# 1224
(*this)(); }  
# 1225
} 
# 1231
result_type operator()(); 
# 1246 "/usr/include/c++/11/bits/random.h" 3
friend inline bool operator==(const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &__lhs, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1247
__rhs) 
# 1248
{ return (__lhs._M_b) == (__rhs._M_b); } 
# 1262 "/usr/include/c++/11/bits/random.h" 3
template< class _CharT, class _Traits> friend inline basic_istream< _CharT, _Traits>  &
# 1264
operator>>(std::basic_istream< _CharT, _Traits>  &__is, independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1266
__x) 
# 1267
{ 
# 1268
__is >> (__x._M_b); 
# 1269
return __is; 
# 1270
} 
# 1273
private: _RandomNumberEngine _M_b; 
# 1274
}; 
# 1288 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine, size_t __w, class _UIntType> inline bool 
# 1290
operator!=(const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1291
__lhs, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1293
__rhs) 
# 1294
{ return !(__lhs == __rhs); } 
# 1306 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine, size_t __w, class _UIntType, class 
# 1307
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1309
operator<<(basic_ostream< _CharT, _Traits>  &__os, const independent_bits_engine< _RandomNumberEngine, __w, _UIntType>  &
# 1311
__x) 
# 1312
{ 
# 1313
__os << __x.base(); 
# 1314
return __os; 
# 1315
} 
# 1325 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine, size_t __k> 
# 1326
class shuffle_order_engine { 
# 1328
static_assert(((1U) <= __k), "template argument substituting __k out of bound");
# 1333
public: typedef typename _RandomNumberEngine::result_type result_type; 
# 1335
template< class _Sseq> using _If_seed_seq = typename enable_if< __and_< __not_< is_same< __remove_cvref_t< _Sseq> , shuffle_order_engine> > , is_unsigned< typename _Sseq::result_type> , __not_< is_convertible< _Sseq, result_type> > > ::value> ::type; 
# 1339
static constexpr inline size_t table_size = __k; 
# 1346
shuffle_order_engine() : _M_b() 
# 1348
{ _M_initialize(); } 
# 1357
explicit shuffle_order_engine(const _RandomNumberEngine &__rng) : _M_b(__rng) 
# 1359
{ _M_initialize(); } 
# 1368
explicit shuffle_order_engine(_RandomNumberEngine &&__rng) : _M_b(std::move(__rng)) 
# 1370
{ _M_initialize(); } 
# 1379
explicit shuffle_order_engine(result_type __s) : _M_b(__s) 
# 1381
{ _M_initialize(); } 
# 1388
template< class _Sseq, class  = _If_seed_seq< _Sseq> > explicit 
# 1390
shuffle_order_engine(_Sseq &__q) : _M_b(__q) 
# 1392
{ _M_initialize(); } 
# 1399
void seed() 
# 1400
{ 
# 1401
(_M_b).seed(); 
# 1402
_M_initialize(); 
# 1403
} 
# 1410
void seed(result_type __s) 
# 1411
{ 
# 1412
(_M_b).seed(__s); 
# 1413
_M_initialize(); 
# 1414
} 
# 1421
template< class _Sseq> _If_seed_seq< _Sseq>  
# 1423
seed(_Sseq &__q) 
# 1424
{ 
# 1425
(_M_b).seed(__q); 
# 1426
_M_initialize(); 
# 1427
} 
# 1433
const _RandomNumberEngine &base() const noexcept 
# 1434
{ return _M_b; } 
# 1440
static constexpr result_type min() 
# 1441
{ return _RandomNumberEngine::min(); } 
# 1447
static constexpr result_type max() 
# 1448
{ return _RandomNumberEngine::max(); } 
# 1454
void discard(unsigned long long __z) 
# 1455
{ 
# 1456
for (; __z != 0ULL; --__z) { 
# 1457
(*this)(); }  
# 1458
} 
# 1464
result_type operator()(); 
# 1478 "/usr/include/c++/11/bits/random.h" 3
friend inline bool operator==(const shuffle_order_engine< _RandomNumberEngine, __k>  &__lhs, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1479
__rhs) 
# 1480
{ return (((__lhs._M_b) == (__rhs._M_b)) && std::equal(__lhs._M_v, (__lhs._M_v) + __k, __rhs._M_v) && ((__lhs._M_y) == (__rhs._M_y))); 
# 1482
} 
# 1495 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __k1, class 
# 1496
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 1495
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::shuffle_order_engine< _RandomNumberEngine1, __k1>  & __x); 
# 1513 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine1, size_t __k1, class 
# 1514
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 1513
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::shuffle_order_engine< _RandomNumberEngine1, __k1>  & __x); 
# 1520
private: void _M_initialize() 
# 1521
{ 
# 1522
for (size_t __i = (0); __i < __k; ++__i) { 
# 1523
((_M_v)[__i]) = (_M_b)(); }  
# 1524
(_M_y) = (_M_b)(); 
# 1525
} 
# 1527
_RandomNumberEngine _M_b; 
# 1528
result_type _M_v[__k]; 
# 1529
result_type _M_y; 
# 1530
}; 
# 1543 "/usr/include/c++/11/bits/random.h" 3
template< class _RandomNumberEngine, size_t __k> inline bool 
# 1545
operator!=(const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1546
__lhs, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 1548
__rhs) 
# 1549
{ return !(__lhs == __rhs); } 
# 1556
typedef linear_congruential_engine< unsigned long, 16807UL, 0UL, 2147483647UL>  minstd_rand0; 
# 1562
typedef linear_congruential_engine< unsigned long, 48271UL, 0UL, 2147483647UL>  minstd_rand; 
# 1578 "/usr/include/c++/11/bits/random.h" 3
typedef mersenne_twister_engine< unsigned long, 32UL, 624UL, 397UL, 31UL, 2567483615UL, 11UL, 4294967295UL, 7UL, 2636928640UL, 15UL, 4022730752UL, 18UL, 1812433253UL>  mt19937; 
# 1590
typedef mersenne_twister_engine< unsigned long, 64UL, 312UL, 156UL, 31UL, 13043109905998158313UL, 29UL, 6148914691236517205UL, 17UL, 8202884508482404352UL, 37UL, 18444473444759240704UL, 43UL, 6364136223846793005UL>  mt19937_64; 
# 1593
typedef subtract_with_carry_engine< unsigned long, 24UL, 10UL, 24UL>  ranlux24_base; 
# 1596
typedef subtract_with_carry_engine< unsigned long, 48UL, 5UL, 12UL>  ranlux48_base; 
# 1598
typedef discard_block_engine< subtract_with_carry_engine< unsigned long, 24UL, 10UL, 24UL> , 223UL, 23UL>  ranlux24; 
# 1600
typedef discard_block_engine< subtract_with_carry_engine< unsigned long, 48UL, 5UL, 12UL> , 389UL, 11UL>  ranlux48; 
# 1602
typedef shuffle_order_engine< linear_congruential_engine< unsigned long, 16807UL, 0UL, 2147483647UL> , 256UL>  knuth_b; 
# 1604
typedef minstd_rand0 default_random_engine; 
# 1610
class random_device { 
# 1614
public: typedef unsigned result_type; 
# 1618
random_device() { this->_M_init("default"); } 
# 1621
explicit random_device(const string &__token) { this->_M_init(__token); } 
# 1624
~random_device() 
# 1625
{ this->_M_fini(); } 
# 1629
static constexpr result_type min() 
# 1630
{ return std::numeric_limits< unsigned> ::min(); } 
# 1633
static constexpr result_type max() 
# 1634
{ return std::numeric_limits< unsigned> ::max(); } 
# 1637
double entropy() const noexcept 
# 1638
{ 
# 1640
return this->_M_getentropy(); 
# 1644
} 
# 1647
result_type operator()() 
# 1648
{ return this->_M_getval(); } 
# 1651
random_device(const random_device &) = delete;
# 1652
void operator=(const random_device &) = delete;
# 1656
private: void _M_init(const string & __token); 
# 1657
void _M_init_pretr1(const string & __token); 
# 1658
void _M_fini(); 
# 1660
result_type _M_getval(); 
# 1661
result_type _M_getval_pretr1(); 
# 1662
double _M_getentropy() const noexcept; 
# 1664
void _M_init(const char *, size_t); 
# 1667
union { 
# 1669
struct { 
# 1670
void *_M_file; 
# 1671
result_type (*_M_func)(void *); 
# 1672
int _M_fd; 
# 1673
}; 
# 1674
mt19937 _M_mt; 
# 1675
}; 
# 1676
}; 
# 1698 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType> inline bool 
# 1700
operator!=(const uniform_int_distribution< _IntType>  &__d1, const uniform_int_distribution< _IntType>  &
# 1701
__d2) 
# 1702
{ return !(__d1 == __d2); } 
# 1714 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  &, const uniform_int_distribution< _IntType>  &); 
# 1728 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  &, uniform_int_distribution< _IntType>  &); 
# 1741 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 1742
class uniform_real_distribution { 
# 1744
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 1749
public: typedef _RealType result_type; 
# 1752
struct param_type { 
# 1754
typedef uniform_real_distribution distribution_type; 
# 1756
param_type() : param_type(0) { } 
# 1759
explicit param_type(_RealType __a, _RealType __b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 1761
{ 
# 1762
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_a) <= (_M_b))))) { __builtin_unreachable(); }  } while (false); 
# 1763
} 
# 1766
result_type a() const 
# 1767
{ return _M_a; } 
# 1770
result_type b() const 
# 1771
{ return _M_b; } 
# 1774
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 1775
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 1778
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 1779
{ return !(__p1 == __p2); } 
# 1782
private: _RealType _M_a; 
# 1783
_RealType _M_b; 
# 1784
}; 
# 1792
uniform_real_distribution() : uniform_real_distribution((0.0)) { } 
# 1801
explicit uniform_real_distribution(_RealType __a, _RealType __b = (_RealType)1) : _M_param(__a, __b) 
# 1803
{ } 
# 1806
explicit uniform_real_distribution(const param_type &__p) : _M_param(__p) 
# 1808
{ } 
# 1816
void reset() { } 
# 1819
result_type a() const 
# 1820
{ return (_M_param).a(); } 
# 1823
result_type b() const 
# 1824
{ return (_M_param).b(); } 
# 1830
param_type param() const 
# 1831
{ return _M_param; } 
# 1838
void param(const param_type &__param) 
# 1839
{ (_M_param) = __param; } 
# 1845
result_type min() const 
# 1846
{ return a(); } 
# 1852
result_type max() const 
# 1853
{ return b(); } 
# 1858
template< class _UniformRandomNumberGenerator> result_type 
# 1860
operator()(_UniformRandomNumberGenerator &__urng) 
# 1861
{ return this->operator()(__urng, _M_param); } 
# 1863
template< class _UniformRandomNumberGenerator> result_type 
# 1865
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1866
__p) 
# 1867
{ 
# 1869
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1870
return (__aurng() * (__p.b() - __p.a())) + __p.a(); 
# 1871
} 
# 1873
template< class _ForwardIterator, class 
# 1874
_UniformRandomNumberGenerator> void 
# 1876
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1877
__urng) 
# 1878
{ this->__generate(__f, __t, __urng, _M_param); } 
# 1880
template< class _ForwardIterator, class 
# 1881
_UniformRandomNumberGenerator> void 
# 1883
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1884
__urng, const param_type &
# 1885
__p) 
# 1886
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 1888
template< class _UniformRandomNumberGenerator> void 
# 1890
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 1891
__urng, const param_type &
# 1892
__p) 
# 1893
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 1900
friend inline bool operator==(const uniform_real_distribution< _RealType>  &__d1, const uniform_real_distribution< _RealType>  &
# 1901
__d2) 
# 1902
{ return (__d1._M_param) == (__d2._M_param); } 
# 1905
private: template< class _ForwardIterator, class 
# 1906
_UniformRandomNumberGenerator> void 
# 1905
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 1912
param_type _M_param; 
# 1913
}; 
# 1919
template< class _IntType> inline bool 
# 1921
operator!=(const uniform_real_distribution< _IntType>  &__d1, const uniform_real_distribution< _IntType>  &
# 1922
__d2) 
# 1923
{ return !(__d1 == __d2); } 
# 1935 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  &, const uniform_real_distribution< _RealType>  &); 
# 1949 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  &, uniform_real_distribution< _RealType>  &); 
# 1971 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 1972
class normal_distribution { 
# 1974
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 1979
public: typedef _RealType result_type; 
# 1982
struct param_type { 
# 1984
typedef normal_distribution distribution_type; 
# 1986
param_type() : param_type((0.0)) { } 
# 1989
explicit param_type(_RealType __mean, _RealType __stddev = (_RealType)1) : _M_mean(__mean), _M_stddev(__stddev) 
# 1991
{ 
# 1992
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_stddev) > ((_RealType)0))))) { __builtin_unreachable(); }  } while (false); 
# 1993
} 
# 1996
_RealType mean() const 
# 1997
{ return _M_mean; } 
# 2000
_RealType stddev() const 
# 2001
{ return _M_stddev; } 
# 2004
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2005
{ return (((__p1._M_mean) == (__p2._M_mean)) && ((__p1._M_stddev) == (__p2._M_stddev))); 
# 2006
} 
# 2009
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2010
{ return !(__p1 == __p2); } 
# 2013
private: _RealType _M_mean; 
# 2014
_RealType _M_stddev; 
# 2015
}; 
# 2018
normal_distribution() : normal_distribution((0.0)) { } 
# 2025
explicit normal_distribution(result_type __mean, result_type 
# 2026
__stddev = (result_type)1) : _M_param(__mean, __stddev) 
# 2028
{ } 
# 2031
explicit normal_distribution(const param_type &__p) : _M_param(__p) 
# 2033
{ } 
# 2039
void reset() 
# 2040
{ (_M_saved_available) = false; } 
# 2046
_RealType mean() const 
# 2047
{ return (_M_param).mean(); } 
# 2053
_RealType stddev() const 
# 2054
{ return (_M_param).stddev(); } 
# 2060
param_type param() const 
# 2061
{ return _M_param; } 
# 2068
void param(const param_type &__param) 
# 2069
{ (_M_param) = __param; } 
# 2075
result_type min() const 
# 2076
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 2082
result_type max() const 
# 2083
{ return std::template numeric_limits< result_type> ::max(); } 
# 2088
template< class _UniformRandomNumberGenerator> result_type 
# 2090
operator()(_UniformRandomNumberGenerator &__urng) 
# 2091
{ return this->operator()(__urng, _M_param); } 
# 2093
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2098
template< class _ForwardIterator, class 
# 2099
_UniformRandomNumberGenerator> void 
# 2101
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2102
__urng) 
# 2103
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2105
template< class _ForwardIterator, class 
# 2106
_UniformRandomNumberGenerator> void 
# 2108
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2109
__urng, const param_type &
# 2110
__p) 
# 2111
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2113
template< class _UniformRandomNumberGenerator> void 
# 2115
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2116
__urng, const param_type &
# 2117
__p) 
# 2118
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2125
template< class _RealType1> friend bool operator==(const std::normal_distribution< _RealType1>  & __d1, const std::normal_distribution< _RealType1>  & __d2); 
# 2140 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::normal_distribution< _RealType1>  & __x); 
# 2155 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::normal_distribution< _RealType1>  & __x); 
# 2161
private: template< class _ForwardIterator, class 
# 2162
_UniformRandomNumberGenerator> void 
# 2161
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2168
param_type _M_param; 
# 2169
result_type _M_saved = (0); 
# 2170
bool _M_saved_available = false; 
# 2171
}; 
# 2176
template< class _RealType> inline bool 
# 2178
operator!=(const normal_distribution< _RealType>  &__d1, const normal_distribution< _RealType>  &
# 2179
__d2) 
# 2180
{ return !(__d1 == __d2); } 
# 2192 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 2193
class lognormal_distribution { 
# 2195
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2200
public: typedef _RealType result_type; 
# 2203
struct param_type { 
# 2205
typedef lognormal_distribution distribution_type; 
# 2207
param_type() : param_type((0.0)) { } 
# 2210
explicit param_type(_RealType __m, _RealType __s = (_RealType)1) : _M_m(__m), _M_s(__s) 
# 2212
{ } 
# 2215
_RealType m() const 
# 2216
{ return _M_m; } 
# 2219
_RealType s() const 
# 2220
{ return _M_s; } 
# 2223
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2224
{ return ((__p1._M_m) == (__p2._M_m)) && ((__p1._M_s) == (__p2._M_s)); } 
# 2227
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2228
{ return !(__p1 == __p2); } 
# 2231
private: _RealType _M_m; 
# 2232
_RealType _M_s; 
# 2233
}; 
# 2235
lognormal_distribution() : lognormal_distribution((0.0)) { } 
# 2238
explicit lognormal_distribution(_RealType __m, _RealType __s = (_RealType)1) : _M_param(__m, __s), _M_nd() 
# 2240
{ } 
# 2243
explicit lognormal_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 2245
{ } 
# 2251
void reset() 
# 2252
{ (_M_nd).reset(); } 
# 2258
_RealType m() const 
# 2259
{ return (_M_param).m(); } 
# 2262
_RealType s() const 
# 2263
{ return (_M_param).s(); } 
# 2269
param_type param() const 
# 2270
{ return _M_param; } 
# 2277
void param(const param_type &__param) 
# 2278
{ (_M_param) = __param; } 
# 2284
result_type min() const 
# 2285
{ return (result_type)0; } 
# 2291
result_type max() const 
# 2292
{ return std::template numeric_limits< result_type> ::max(); } 
# 2297
template< class _UniformRandomNumberGenerator> result_type 
# 2299
operator()(_UniformRandomNumberGenerator &__urng) 
# 2300
{ return this->operator()(__urng, _M_param); } 
# 2302
template< class _UniformRandomNumberGenerator> result_type 
# 2304
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2305
__p) 
# 2306
{ return std::exp((__p.s() * (_M_nd)(__urng)) + __p.m()); } 
# 2308
template< class _ForwardIterator, class 
# 2309
_UniformRandomNumberGenerator> void 
# 2311
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2312
__urng) 
# 2313
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2315
template< class _ForwardIterator, class 
# 2316
_UniformRandomNumberGenerator> void 
# 2318
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2319
__urng, const param_type &
# 2320
__p) 
# 2321
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2323
template< class _UniformRandomNumberGenerator> void 
# 2325
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2326
__urng, const param_type &
# 2327
__p) 
# 2328
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2336
friend inline bool operator==(const lognormal_distribution< _RealType>  &__d1, const lognormal_distribution< _RealType>  &
# 2337
__d2) 
# 2338
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd))); 
# 2339
} 
# 2351 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::lognormal_distribution< _RealType1>  & __x); 
# 2366 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::lognormal_distribution< _RealType1>  & __x); 
# 2372
private: template< class _ForwardIterator, class 
# 2373
_UniformRandomNumberGenerator> void 
# 2372
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2379
param_type _M_param; 
# 2381
normal_distribution< result_type>  _M_nd; 
# 2382
}; 
# 2387
template< class _RealType> inline bool 
# 2389
operator!=(const lognormal_distribution< _RealType>  &__d1, const lognormal_distribution< _RealType>  &
# 2390
__d2) 
# 2391
{ return !(__d1 == __d2); } 
# 2403 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 2404
class gamma_distribution { 
# 2406
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2411
public: typedef _RealType result_type; 
# 2414
struct param_type { 
# 2416
typedef gamma_distribution distribution_type; 
# 2417
friend class gamma_distribution; 
# 2419
param_type() : param_type((1.0)) { } 
# 2422
explicit param_type(_RealType __alpha_val, _RealType __beta_val = (_RealType)1) : _M_alpha(__alpha_val), _M_beta(__beta_val) 
# 2424
{ 
# 2425
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_alpha) > ((_RealType)0))))) { __builtin_unreachable(); }  } while (false); 
# 2426
_M_initialize(); 
# 2427
} 
# 2430
_RealType alpha() const 
# 2431
{ return _M_alpha; } 
# 2434
_RealType beta() const 
# 2435
{ return _M_beta; } 
# 2438
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2439
{ return (((__p1._M_alpha) == (__p2._M_alpha)) && ((__p1._M_beta) == (__p2._M_beta))); 
# 2440
} 
# 2443
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2444
{ return !(__p1 == __p2); } 
# 2448
private: void _M_initialize(); 
# 2450
_RealType _M_alpha; 
# 2451
_RealType _M_beta; 
# 2453
_RealType _M_malpha, _M_a2; 
# 2454
}; 
# 2460
gamma_distribution() : gamma_distribution((1.0)) { } 
# 2467
explicit gamma_distribution(_RealType __alpha_val, _RealType 
# 2468
__beta_val = (_RealType)1) : _M_param(__alpha_val, __beta_val), _M_nd() 
# 2470
{ } 
# 2473
explicit gamma_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 2475
{ } 
# 2481
void reset() 
# 2482
{ (_M_nd).reset(); } 
# 2488
_RealType alpha() const 
# 2489
{ return (_M_param).alpha(); } 
# 2495
_RealType beta() const 
# 2496
{ return (_M_param).beta(); } 
# 2502
param_type param() const 
# 2503
{ return _M_param; } 
# 2510
void param(const param_type &__param) 
# 2511
{ (_M_param) = __param; } 
# 2517
result_type min() const 
# 2518
{ return (result_type)0; } 
# 2524
result_type max() const 
# 2525
{ return std::template numeric_limits< result_type> ::max(); } 
# 2530
template< class _UniformRandomNumberGenerator> result_type 
# 2532
operator()(_UniformRandomNumberGenerator &__urng) 
# 2533
{ return this->operator()(__urng, _M_param); } 
# 2535
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2540
template< class _ForwardIterator, class 
# 2541
_UniformRandomNumberGenerator> void 
# 2543
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2544
__urng) 
# 2545
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2547
template< class _ForwardIterator, class 
# 2548
_UniformRandomNumberGenerator> void 
# 2550
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2551
__urng, const param_type &
# 2552
__p) 
# 2553
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2555
template< class _UniformRandomNumberGenerator> void 
# 2557
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2558
__urng, const param_type &
# 2559
__p) 
# 2560
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2568
friend inline bool operator==(const gamma_distribution< _RealType>  &__d1, const gamma_distribution< _RealType>  &
# 2569
__d2) 
# 2570
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd))); 
# 2571
} 
# 2583 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::gamma_distribution< _RealType1>  & __x); 
# 2597 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::gamma_distribution< _RealType1>  & __x); 
# 2603
private: template< class _ForwardIterator, class 
# 2604
_UniformRandomNumberGenerator> void 
# 2603
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2610
param_type _M_param; 
# 2612
normal_distribution< result_type>  _M_nd; 
# 2613
}; 
# 2618
template< class _RealType> inline bool 
# 2620
operator!=(const gamma_distribution< _RealType>  &__d1, const gamma_distribution< _RealType>  &
# 2621
__d2) 
# 2622
{ return !(__d1 == __d2); } 
# 2631 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 2632
class chi_squared_distribution { 
# 2634
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2639
public: typedef _RealType result_type; 
# 2642
struct param_type { 
# 2644
typedef chi_squared_distribution distribution_type; 
# 2646
param_type() : param_type(1) { } 
# 2649
explicit param_type(_RealType __n) : _M_n(__n) 
# 2651
{ } 
# 2654
_RealType n() const 
# 2655
{ return _M_n; } 
# 2658
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2659
{ return (__p1._M_n) == (__p2._M_n); } 
# 2662
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2663
{ return !(__p1 == __p2); } 
# 2666
private: _RealType _M_n; 
# 2667
}; 
# 2669
chi_squared_distribution() : chi_squared_distribution(1) { } 
# 2672
explicit chi_squared_distribution(_RealType __n) : _M_param(__n), _M_gd(__n / 2) 
# 2674
{ } 
# 2677
explicit chi_squared_distribution(const param_type &__p) : _M_param(__p), _M_gd(__p.n() / 2) 
# 2679
{ } 
# 2685
void reset() 
# 2686
{ (_M_gd).reset(); } 
# 2692
_RealType n() const 
# 2693
{ return (_M_param).n(); } 
# 2699
param_type param() const 
# 2700
{ return _M_param; } 
# 2707
void param(const param_type &__param) 
# 2708
{ 
# 2709
(_M_param) = __param; 
# 2711
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 2712
(_M_gd).param(param_type{__param.n() / 2}); 
# 2713
} 
# 2719
result_type min() const 
# 2720
{ return (result_type)0; } 
# 2726
result_type max() const 
# 2727
{ return std::template numeric_limits< result_type> ::max(); } 
# 2732
template< class _UniformRandomNumberGenerator> result_type 
# 2734
operator()(_UniformRandomNumberGenerator &__urng) 
# 2735
{ return 2 * (_M_gd)(__urng); } 
# 2737
template< class _UniformRandomNumberGenerator> result_type 
# 2739
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2740
__p) 
# 2741
{ 
# 2743
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 2744
return 2 * (_M_gd)(__urng, (param_type)(__p.n() / 2)); 
# 2745
} 
# 2747
template< class _ForwardIterator, class 
# 2748
_UniformRandomNumberGenerator> void 
# 2750
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2751
__urng) 
# 2752
{ this->__generate_impl(__f, __t, __urng); } 
# 2754
template< class _ForwardIterator, class 
# 2755
_UniformRandomNumberGenerator> void 
# 2757
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2758
__urng, const param_type &
# 2759
__p) 
# 2760
{ 
# 2761
typename gamma_distribution< result_type> ::param_type __p2(__p.n() / 2); 
# 2762
this->__generate_impl(__f, __t, __urng, __p2); } 
# 2764
template< class _UniformRandomNumberGenerator> void 
# 2766
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2767
__urng) 
# 2768
{ this->__generate_impl(__f, __t, __urng); } 
# 2770
template< class _UniformRandomNumberGenerator> void 
# 2772
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2773
__urng, const param_type &
# 2774
__p) 
# 2775
{ 
# 2776
typename gamma_distribution< result_type> ::param_type __p2(__p.n() / 2); 
# 2777
this->__generate_impl(__f, __t, __urng, __p2); } 
# 2785
friend inline bool operator==(const chi_squared_distribution< _RealType>  &__d1, const chi_squared_distribution< _RealType>  &
# 2786
__d2) 
# 2787
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd) == (__d2._M_gd)); } 
# 2799 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::chi_squared_distribution< _RealType1>  & __x); 
# 2814 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::chi_squared_distribution< _RealType1>  & __x); 
# 2820
private: template< class _ForwardIterator, class 
# 2821
_UniformRandomNumberGenerator> void 
# 2820
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 2826
template< class _ForwardIterator, class 
# 2827
_UniformRandomNumberGenerator> void 
# 2826
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const typename gamma_distribution< result_type> ::param_type & __p); 
# 2834
param_type _M_param; 
# 2836
gamma_distribution< result_type>  _M_gd; 
# 2837
}; 
# 2842
template< class _RealType> inline bool 
# 2844
operator!=(const chi_squared_distribution< _RealType>  &__d1, const chi_squared_distribution< _RealType>  &
# 2845
__d2) 
# 2846
{ return !(__d1 == __d2); } 
# 2855 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 2856
class cauchy_distribution { 
# 2858
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 2863
public: typedef _RealType result_type; 
# 2866
struct param_type { 
# 2868
typedef cauchy_distribution distribution_type; 
# 2870
param_type() : param_type(0) { } 
# 2873
explicit param_type(_RealType __a, _RealType __b = (_RealType)1) : _M_a(__a), _M_b(__b) 
# 2875
{ } 
# 2878
_RealType a() const 
# 2879
{ return _M_a; } 
# 2882
_RealType b() const 
# 2883
{ return _M_b; } 
# 2886
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 2887
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 2890
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 2891
{ return !(__p1 == __p2); } 
# 2894
private: _RealType _M_a; 
# 2895
_RealType _M_b; 
# 2896
}; 
# 2898
cauchy_distribution() : cauchy_distribution((0.0)) { } 
# 2901
explicit cauchy_distribution(_RealType __a, _RealType __b = (1.0)) : _M_param(__a, __b) 
# 2903
{ } 
# 2906
explicit cauchy_distribution(const param_type &__p) : _M_param(__p) 
# 2908
{ } 
# 2914
void reset() 
# 2915
{ } 
# 2921
_RealType a() const 
# 2922
{ return (_M_param).a(); } 
# 2925
_RealType b() const 
# 2926
{ return (_M_param).b(); } 
# 2932
param_type param() const 
# 2933
{ return _M_param; } 
# 2940
void param(const param_type &__param) 
# 2941
{ (_M_param) = __param; } 
# 2947
result_type min() const 
# 2948
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 2954
result_type max() const 
# 2955
{ return std::template numeric_limits< result_type> ::max(); } 
# 2960
template< class _UniformRandomNumberGenerator> result_type 
# 2962
operator()(_UniformRandomNumberGenerator &__urng) 
# 2963
{ return this->operator()(__urng, _M_param); } 
# 2965
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 2970
template< class _ForwardIterator, class 
# 2971
_UniformRandomNumberGenerator> void 
# 2973
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2974
__urng) 
# 2975
{ this->__generate(__f, __t, __urng, _M_param); } 
# 2977
template< class _ForwardIterator, class 
# 2978
_UniformRandomNumberGenerator> void 
# 2980
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2981
__urng, const param_type &
# 2982
__p) 
# 2983
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2985
template< class _UniformRandomNumberGenerator> void 
# 2987
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 2988
__urng, const param_type &
# 2989
__p) 
# 2990
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 2997
friend inline bool operator==(const cauchy_distribution< _RealType>  &__d1, const cauchy_distribution< _RealType>  &
# 2998
__d2) 
# 2999
{ return (__d1._M_param) == (__d2._M_param); } 
# 3002
private: template< class _ForwardIterator, class 
# 3003
_UniformRandomNumberGenerator> void 
# 3002
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3009
param_type _M_param; 
# 3010
}; 
# 3016
template< class _RealType> inline bool 
# 3018
operator!=(const cauchy_distribution< _RealType>  &__d1, const cauchy_distribution< _RealType>  &
# 3019
__d2) 
# 3020
{ return !(__d1 == __d2); } 
# 3032 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const cauchy_distribution< _RealType>  & __x); 
# 3047 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, cauchy_distribution< _RealType>  & __x); 
# 3063 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 3064
class fisher_f_distribution { 
# 3066
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 3071
public: typedef _RealType result_type; 
# 3074
struct param_type { 
# 3076
typedef fisher_f_distribution distribution_type; 
# 3078
param_type() : param_type(1) { } 
# 3081
explicit param_type(_RealType __m, _RealType __n = (_RealType)1) : _M_m(__m), _M_n(__n) 
# 3083
{ } 
# 3086
_RealType m() const 
# 3087
{ return _M_m; } 
# 3090
_RealType n() const 
# 3091
{ return _M_n; } 
# 3094
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3095
{ return ((__p1._M_m) == (__p2._M_m)) && ((__p1._M_n) == (__p2._M_n)); } 
# 3098
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3099
{ return !(__p1 == __p2); } 
# 3102
private: _RealType _M_m; 
# 3103
_RealType _M_n; 
# 3104
}; 
# 3106
fisher_f_distribution() : fisher_f_distribution((1.0)) { } 
# 3109
explicit fisher_f_distribution(_RealType __m, _RealType 
# 3110
__n = (_RealType)1) : _M_param(__m, __n), _M_gd_x(__m / 2), _M_gd_y(__n / 2) 
# 3112
{ } 
# 3115
explicit fisher_f_distribution(const param_type &__p) : _M_param(__p), _M_gd_x(__p.m() / 2), _M_gd_y(__p.n() / 2) 
# 3117
{ } 
# 3123
void reset() 
# 3124
{ 
# 3125
(_M_gd_x).reset(); 
# 3126
(_M_gd_y).reset(); 
# 3127
} 
# 3133
_RealType m() const 
# 3134
{ return (_M_param).m(); } 
# 3137
_RealType n() const 
# 3138
{ return (_M_param).n(); } 
# 3144
param_type param() const 
# 3145
{ return _M_param; } 
# 3152
void param(const param_type &__param) 
# 3153
{ (_M_param) = __param; } 
# 3159
result_type min() const 
# 3160
{ return (result_type)0; } 
# 3166
result_type max() const 
# 3167
{ return std::template numeric_limits< result_type> ::max(); } 
# 3172
template< class _UniformRandomNumberGenerator> result_type 
# 3174
operator()(_UniformRandomNumberGenerator &__urng) 
# 3175
{ return ((_M_gd_x)(__urng) * n()) / ((_M_gd_y)(__urng) * m()); } 
# 3177
template< class _UniformRandomNumberGenerator> result_type 
# 3179
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3180
__p) 
# 3181
{ 
# 3183
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 3184
return (((_M_gd_x)(__urng, (param_type)(__p.m() / 2)) * n()) / ((_M_gd_y)(__urng, (param_type)(__p.n() / 2)) * m())); 
# 3186
} 
# 3188
template< class _ForwardIterator, class 
# 3189
_UniformRandomNumberGenerator> void 
# 3191
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3192
__urng) 
# 3193
{ this->__generate_impl(__f, __t, __urng); } 
# 3195
template< class _ForwardIterator, class 
# 3196
_UniformRandomNumberGenerator> void 
# 3198
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3199
__urng, const param_type &
# 3200
__p) 
# 3201
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3203
template< class _UniformRandomNumberGenerator> void 
# 3205
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3206
__urng) 
# 3207
{ this->__generate_impl(__f, __t, __urng); } 
# 3209
template< class _UniformRandomNumberGenerator> void 
# 3211
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3212
__urng, const param_type &
# 3213
__p) 
# 3214
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3222
friend inline bool operator==(const fisher_f_distribution< _RealType>  &__d1, const fisher_f_distribution< _RealType>  &
# 3223
__d2) 
# 3224
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd_x) == (__d2._M_gd_x)) && ((__d1._M_gd_y) == (__d2._M_gd_y))); 
# 3226
} 
# 3238 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::fisher_f_distribution< _RealType1>  & __x); 
# 3253 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::fisher_f_distribution< _RealType1>  & __x); 
# 3259
private: template< class _ForwardIterator, class 
# 3260
_UniformRandomNumberGenerator> void 
# 3259
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 3265
template< class _ForwardIterator, class 
# 3266
_UniformRandomNumberGenerator> void 
# 3265
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3272
param_type _M_param; 
# 3274
gamma_distribution< result_type>  _M_gd_x, _M_gd_y; 
# 3275
}; 
# 3280
template< class _RealType> inline bool 
# 3282
operator!=(const fisher_f_distribution< _RealType>  &__d1, const fisher_f_distribution< _RealType>  &
# 3283
__d2) 
# 3284
{ return !(__d1 == __d2); } 
# 3295 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 3296
class student_t_distribution { 
# 3298
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 3303
public: typedef _RealType result_type; 
# 3306
struct param_type { 
# 3308
typedef student_t_distribution distribution_type; 
# 3310
param_type() : param_type(1) { } 
# 3313
explicit param_type(_RealType __n) : _M_n(__n) 
# 3315
{ } 
# 3318
_RealType n() const 
# 3319
{ return _M_n; } 
# 3322
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3323
{ return (__p1._M_n) == (__p2._M_n); } 
# 3326
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3327
{ return !(__p1 == __p2); } 
# 3330
private: _RealType _M_n; 
# 3331
}; 
# 3333
student_t_distribution() : student_t_distribution((1.0)) { } 
# 3336
explicit student_t_distribution(_RealType __n) : _M_param(__n), _M_nd(), _M_gd(__n / 2, 2) 
# 3338
{ } 
# 3341
explicit student_t_distribution(const param_type &__p) : _M_param(__p), _M_nd(), _M_gd(__p.n() / 2, 2) 
# 3343
{ } 
# 3349
void reset() 
# 3350
{ 
# 3351
(_M_nd).reset(); 
# 3352
(_M_gd).reset(); 
# 3353
} 
# 3359
_RealType n() const 
# 3360
{ return (_M_param).n(); } 
# 3366
param_type param() const 
# 3367
{ return _M_param; } 
# 3374
void param(const param_type &__param) 
# 3375
{ (_M_param) = __param; } 
# 3381
result_type min() const 
# 3382
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 3388
result_type max() const 
# 3389
{ return std::template numeric_limits< result_type> ::max(); } 
# 3394
template< class _UniformRandomNumberGenerator> result_type 
# 3396
operator()(_UniformRandomNumberGenerator &__urng) 
# 3397
{ return (_M_nd)(__urng) * std::sqrt(n() / (_M_gd)(__urng)); } 
# 3399
template< class _UniformRandomNumberGenerator> result_type 
# 3401
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3402
__p) 
# 3403
{ 
# 3405
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 3407
const result_type __g = (_M_gd)(__urng, param_type(__p.n() / 2, 2)); 
# 3408
return (_M_nd)(__urng) * std::sqrt(__p.n() / __g); 
# 3409
} 
# 3411
template< class _ForwardIterator, class 
# 3412
_UniformRandomNumberGenerator> void 
# 3414
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3415
__urng) 
# 3416
{ this->__generate_impl(__f, __t, __urng); } 
# 3418
template< class _ForwardIterator, class 
# 3419
_UniformRandomNumberGenerator> void 
# 3421
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3422
__urng, const param_type &
# 3423
__p) 
# 3424
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3426
template< class _UniformRandomNumberGenerator> void 
# 3428
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3429
__urng) 
# 3430
{ this->__generate_impl(__f, __t, __urng); } 
# 3432
template< class _UniformRandomNumberGenerator> void 
# 3434
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3435
__urng, const param_type &
# 3436
__p) 
# 3437
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3445
friend inline bool operator==(const student_t_distribution< _RealType>  &__d1, const student_t_distribution< _RealType>  &
# 3446
__d2) 
# 3447
{ return (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)) && ((__d1._M_gd) == (__d2._M_gd))); 
# 3448
} 
# 3460 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::student_t_distribution< _RealType1>  & __x); 
# 3475 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::student_t_distribution< _RealType1>  & __x); 
# 3481
private: template< class _ForwardIterator, class 
# 3482
_UniformRandomNumberGenerator> void 
# 3481
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 3486
template< class _ForwardIterator, class 
# 3487
_UniformRandomNumberGenerator> void 
# 3486
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3493
param_type _M_param; 
# 3495
normal_distribution< result_type>  _M_nd; 
# 3496
gamma_distribution< result_type>  _M_gd; 
# 3497
}; 
# 3502
template< class _RealType> inline bool 
# 3504
operator!=(const student_t_distribution< _RealType>  &__d1, const student_t_distribution< _RealType>  &
# 3505
__d2) 
# 3506
{ return !(__d1 == __d2); } 
# 3523 "/usr/include/c++/11/bits/random.h" 3
class bernoulli_distribution { 
# 3527
public: typedef bool result_type; 
# 3530
struct param_type { 
# 3532
typedef bernoulli_distribution distribution_type; 
# 3534
param_type() : param_type((0.5)) { } 
# 3537
explicit param_type(double __p) : _M_p(__p) 
# 3539
{ 
# 3540
do { if (__builtin_is_constant_evaluated() && (!((bool)(((_M_p) >= (0.0)) && ((_M_p) <= (1.0)))))) { __builtin_unreachable(); }  } while (false); 
# 3541
} 
# 3544
double p() const 
# 3545
{ return _M_p; } 
# 3548
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3549
{ return (__p1._M_p) == (__p2._M_p); } 
# 3552
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3553
{ return !(__p1 == __p2); } 
# 3556
private: double _M_p; 
# 3557
}; 
# 3563
bernoulli_distribution() : bernoulli_distribution((0.5)) { } 
# 3572
explicit bernoulli_distribution(double __p) : _M_param(__p) 
# 3574
{ } 
# 3577
explicit bernoulli_distribution(const param_type &__p) : _M_param(__p) 
# 3579
{ } 
# 3587
void reset() { } 
# 3593
double p() const 
# 3594
{ return (_M_param).p(); } 
# 3600
param_type param() const 
# 3601
{ return _M_param; } 
# 3608
void param(const param_type &__param) 
# 3609
{ (_M_param) = __param; } 
# 3615
result_type min() const 
# 3616
{ return std::numeric_limits< bool> ::min(); } 
# 3622
result_type max() const 
# 3623
{ return std::numeric_limits< bool> ::max(); } 
# 3628
template< class _UniformRandomNumberGenerator> result_type 
# 3630
operator()(_UniformRandomNumberGenerator &__urng) 
# 3631
{ return this->operator()(__urng, _M_param); } 
# 3633
template< class _UniformRandomNumberGenerator> result_type 
# 3635
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3636
__p) 
# 3637
{ 
# 3639
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 3640
if ((__aurng() - __aurng.min()) < (__p.p() * (__aurng.max() - __aurng.min()))) { 
# 3642
return true; }  
# 3643
return false; 
# 3644
} 
# 3646
template< class _ForwardIterator, class 
# 3647
_UniformRandomNumberGenerator> void 
# 3649
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3650
__urng) 
# 3651
{ this->__generate(__f, __t, __urng, _M_param); } 
# 3653
template< class _ForwardIterator, class 
# 3654
_UniformRandomNumberGenerator> void 
# 3656
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3657
__urng, const param_type &__p) 
# 3658
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3660
template< class _UniformRandomNumberGenerator> void 
# 3662
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3663
__urng, const param_type &
# 3664
__p) 
# 3665
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3672
friend inline bool operator==(const bernoulli_distribution &__d1, const bernoulli_distribution &
# 3673
__d2) 
# 3674
{ return ((__d1._M_param) == (__d2._M_param)); } 
# 3677
private: template< class _ForwardIterator, class 
# 3678
_UniformRandomNumberGenerator> void 
# 3677
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3684
param_type _M_param; 
# 3685
}; 
# 3692
inline bool operator!=(const bernoulli_distribution &__d1, const bernoulli_distribution &
# 3693
__d2) 
# 3694
{ return !(__d1 == __d2); } 
# 3706 "/usr/include/c++/11/bits/random.h" 3
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const bernoulli_distribution & __x); 
# 3720 "/usr/include/c++/11/bits/random.h" 3
template< class _CharT, class _Traits> inline basic_istream< _CharT, _Traits>  &
# 3722
operator>>(basic_istream< _CharT, _Traits>  &__is, bernoulli_distribution &
# 3723
__x) 
# 3724
{ 
# 3725
double __p; 
# 3726
if (__is >> __p) { 
# 3727
__x.param(((bernoulli_distribution::param_type)(__p))); }  
# 3728
return __is; 
# 3729
} 
# 3739 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType = int> 
# 3740
class binomial_distribution { 
# 3742
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 3747
public: typedef _IntType result_type; 
# 3750
struct param_type { 
# 3752
typedef binomial_distribution distribution_type; 
# 3753
friend class binomial_distribution; 
# 3755
param_type() : param_type(1) { } 
# 3758
explicit param_type(_IntType __t, double __p = (0.5)) : _M_t(__t), _M_p(__p) 
# 3760
{ 
# 3761
do { if (__builtin_is_constant_evaluated() && (!((bool)(((_M_t) >= ((_IntType)0)) && ((_M_p) >= (0.0)) && ((_M_p) <= (1.0)))))) { __builtin_unreachable(); }  } while (false); 
# 3764
_M_initialize(); 
# 3765
} 
# 3768
_IntType t() const 
# 3769
{ return _M_t; } 
# 3772
double p() const 
# 3773
{ return _M_p; } 
# 3776
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 3777
{ return ((__p1._M_t) == (__p2._M_t)) && ((__p1._M_p) == (__p2._M_p)); } 
# 3780
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 3781
{ return !(__p1 == __p2); } 
# 3785
private: void _M_initialize(); 
# 3787
_IntType _M_t; 
# 3788
double _M_p; 
# 3790
double _M_q; 
# 3792
double _M_d1, _M_d2, _M_s1, _M_s2, _M_c, 
# 3793
_M_a1, _M_a123, _M_s, _M_lf, _M_lp1p; 
# 3795
bool _M_easy; 
# 3796
}; 
# 3800
binomial_distribution() : binomial_distribution(1) { } 
# 3803
explicit binomial_distribution(_IntType __t, double __p = (0.5)) : _M_param(__t, __p), _M_nd() 
# 3805
{ } 
# 3808
explicit binomial_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 3810
{ } 
# 3816
void reset() 
# 3817
{ (_M_nd).reset(); } 
# 3823
_IntType t() const 
# 3824
{ return (_M_param).t(); } 
# 3830
double p() const 
# 3831
{ return (_M_param).p(); } 
# 3837
param_type param() const 
# 3838
{ return _M_param; } 
# 3845
void param(const param_type &__param) 
# 3846
{ (_M_param) = __param; } 
# 3852
result_type min() const 
# 3853
{ return 0; } 
# 3859
result_type max() const 
# 3860
{ return (_M_param).t(); } 
# 3865
template< class _UniformRandomNumberGenerator> result_type 
# 3867
operator()(_UniformRandomNumberGenerator &__urng) 
# 3868
{ return this->operator()(__urng, _M_param); } 
# 3870
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3875
template< class _ForwardIterator, class 
# 3876
_UniformRandomNumberGenerator> void 
# 3878
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3879
__urng) 
# 3880
{ this->__generate(__f, __t, __urng, _M_param); } 
# 3882
template< class _ForwardIterator, class 
# 3883
_UniformRandomNumberGenerator> void 
# 3885
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3886
__urng, const param_type &
# 3887
__p) 
# 3888
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3890
template< class _UniformRandomNumberGenerator> void 
# 3892
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 3893
__urng, const param_type &
# 3894
__p) 
# 3895
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 3903
friend inline bool operator==(const binomial_distribution< _IntType>  &__d1, const binomial_distribution< _IntType>  &
# 3904
__d2) 
# 3906
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)); } 
# 3921 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class 
# 3922
_CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &
# 3921
operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::binomial_distribution< _IntType1>  & __x); 
# 3937 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class 
# 3938
_CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &
# 3937
operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::binomial_distribution< _IntType1>  & __x); 
# 3944
private: template< class _ForwardIterator, class 
# 3945
_UniformRandomNumberGenerator> void 
# 3944
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 3951
template< class _UniformRandomNumberGenerator> result_type _M_waiting(_UniformRandomNumberGenerator & __urng, _IntType __t, double __q); 
# 3956
param_type _M_param; 
# 3959
normal_distribution< double>  _M_nd; 
# 3960
}; 
# 3965
template< class _IntType> inline bool 
# 3967
operator!=(const binomial_distribution< _IntType>  &__d1, const binomial_distribution< _IntType>  &
# 3968
__d2) 
# 3969
{ return !(__d1 == __d2); } 
# 3979 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType = int> 
# 3980
class geometric_distribution { 
# 3982
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 3987
public: typedef _IntType result_type; 
# 3990
struct param_type { 
# 3992
typedef geometric_distribution distribution_type; 
# 3993
friend class geometric_distribution; 
# 3995
param_type() : param_type((0.5)) { } 
# 3998
explicit param_type(double __p) : _M_p(__p) 
# 4000
{ 
# 4001
do { if (__builtin_is_constant_evaluated() && (!((bool)(((_M_p) > (0.0)) && ((_M_p) < (1.0)))))) { __builtin_unreachable(); }  } while (false); 
# 4002
_M_initialize(); 
# 4003
} 
# 4006
double p() const 
# 4007
{ return _M_p; } 
# 4010
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4011
{ return (__p1._M_p) == (__p2._M_p); } 
# 4014
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4015
{ return !(__p1 == __p2); } 
# 4019
private: void _M_initialize() 
# 4020
{ (_M_log_1_p) = std::log((1.0) - (_M_p)); } 
# 4022
double _M_p; 
# 4024
double _M_log_1_p; 
# 4025
}; 
# 4029
geometric_distribution() : geometric_distribution((0.5)) { } 
# 4032
explicit geometric_distribution(double __p) : _M_param(__p) 
# 4034
{ } 
# 4037
explicit geometric_distribution(const param_type &__p) : _M_param(__p) 
# 4039
{ } 
# 4047
void reset() { } 
# 4053
double p() const 
# 4054
{ return (_M_param).p(); } 
# 4060
param_type param() const 
# 4061
{ return _M_param; } 
# 4068
void param(const param_type &__param) 
# 4069
{ (_M_param) = __param; } 
# 4075
result_type min() const 
# 4076
{ return 0; } 
# 4082
result_type max() const 
# 4083
{ return std::template numeric_limits< result_type> ::max(); } 
# 4088
template< class _UniformRandomNumberGenerator> result_type 
# 4090
operator()(_UniformRandomNumberGenerator &__urng) 
# 4091
{ return this->operator()(__urng, _M_param); } 
# 4093
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4098
template< class _ForwardIterator, class 
# 4099
_UniformRandomNumberGenerator> void 
# 4101
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4102
__urng) 
# 4103
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4105
template< class _ForwardIterator, class 
# 4106
_UniformRandomNumberGenerator> void 
# 4108
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4109
__urng, const param_type &
# 4110
__p) 
# 4111
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4113
template< class _UniformRandomNumberGenerator> void 
# 4115
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4116
__urng, const param_type &
# 4117
__p) 
# 4118
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4125
friend inline bool operator==(const geometric_distribution< _IntType>  &__d1, const geometric_distribution< _IntType>  &
# 4126
__d2) 
# 4127
{ return (__d1._M_param) == (__d2._M_param); } 
# 4130
private: template< class _ForwardIterator, class 
# 4131
_UniformRandomNumberGenerator> void 
# 4130
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4137
param_type _M_param; 
# 4138
}; 
# 4144
template< class _IntType> inline bool 
# 4146
operator!=(const geometric_distribution< _IntType>  &__d1, const geometric_distribution< _IntType>  &
# 4147
__d2) 
# 4148
{ return !(__d1 == __d2); } 
# 4160 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType, class 
# 4161
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 4160
operator<<(basic_ostream< _CharT, _Traits>  & __os, const geometric_distribution< _IntType>  & __x); 
# 4175 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType, class 
# 4176
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 4175
operator>>(basic_istream< _CharT, _Traits>  & __is, geometric_distribution< _IntType>  & __x); 
# 4189 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType = int> 
# 4190
class negative_binomial_distribution { 
# 4192
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 4197
public: typedef _IntType result_type; 
# 4200
struct param_type { 
# 4202
typedef negative_binomial_distribution distribution_type; 
# 4204
param_type() : param_type(1) { } 
# 4207
explicit param_type(_IntType __k, double __p = (0.5)) : _M_k(__k), _M_p(__p) 
# 4209
{ 
# 4210
do { if (__builtin_is_constant_evaluated() && (!((bool)(((_M_k) > 0) && ((_M_p) > (0.0)) && ((_M_p) <= (1.0)))))) { __builtin_unreachable(); }  } while (false); 
# 4211
} 
# 4214
_IntType k() const 
# 4215
{ return _M_k; } 
# 4218
double p() const 
# 4219
{ return _M_p; } 
# 4222
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4223
{ return ((__p1._M_k) == (__p2._M_k)) && ((__p1._M_p) == (__p2._M_p)); } 
# 4226
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4227
{ return !(__p1 == __p2); } 
# 4230
private: _IntType _M_k; 
# 4231
double _M_p; 
# 4232
}; 
# 4234
negative_binomial_distribution() : negative_binomial_distribution(1) { } 
# 4237
explicit negative_binomial_distribution(_IntType __k, double __p = (0.5)) : _M_param(__k, __p), _M_gd(__k, ((1.0) - __p) / __p) 
# 4239
{ } 
# 4242
explicit negative_binomial_distribution(const param_type &__p) : _M_param(__p), _M_gd(__p.k(), ((1.0) - __p.p()) / __p.p()) 
# 4244
{ } 
# 4250
void reset() 
# 4251
{ (_M_gd).reset(); } 
# 4257
_IntType k() const 
# 4258
{ return (_M_param).k(); } 
# 4264
double p() const 
# 4265
{ return (_M_param).p(); } 
# 4271
param_type param() const 
# 4272
{ return _M_param; } 
# 4279
void param(const param_type &__param) 
# 4280
{ (_M_param) = __param; } 
# 4286
result_type min() const 
# 4287
{ return (result_type)0; } 
# 4293
result_type max() const 
# 4294
{ return std::template numeric_limits< result_type> ::max(); } 
# 4299
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng); 
# 4303
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4308
template< class _ForwardIterator, class 
# 4309
_UniformRandomNumberGenerator> void 
# 4311
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4312
__urng) 
# 4313
{ this->__generate_impl(__f, __t, __urng); } 
# 4315
template< class _ForwardIterator, class 
# 4316
_UniformRandomNumberGenerator> void 
# 4318
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4319
__urng, const param_type &
# 4320
__p) 
# 4321
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4323
template< class _UniformRandomNumberGenerator> void 
# 4325
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4326
__urng) 
# 4327
{ this->__generate_impl(__f, __t, __urng); } 
# 4329
template< class _UniformRandomNumberGenerator> void 
# 4331
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4332
__urng, const param_type &
# 4333
__p) 
# 4334
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4342
friend inline bool operator==(const negative_binomial_distribution< _IntType>  &__d1, const negative_binomial_distribution< _IntType>  &
# 4343
__d2) 
# 4344
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_gd) == (__d2._M_gd)); } 
# 4357 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::negative_binomial_distribution< _IntType1>  & __x); 
# 4372 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::negative_binomial_distribution< _IntType1>  & __x); 
# 4378
private: template< class _ForwardIterator, class 
# 4379
_UniformRandomNumberGenerator> void 
# 4378
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng); 
# 4383
template< class _ForwardIterator, class 
# 4384
_UniformRandomNumberGenerator> void 
# 4383
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4390
param_type _M_param; 
# 4392
gamma_distribution< double>  _M_gd; 
# 4393
}; 
# 4398
template< class _IntType> inline bool 
# 4400
operator!=(const negative_binomial_distribution< _IntType>  &__d1, const negative_binomial_distribution< _IntType>  &
# 4401
__d2) 
# 4402
{ return !(__d1 == __d2); } 
# 4420 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType = int> 
# 4421
class poisson_distribution { 
# 4423
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 4428
public: typedef _IntType result_type; 
# 4431
struct param_type { 
# 4433
typedef poisson_distribution distribution_type; 
# 4434
friend class poisson_distribution; 
# 4436
param_type() : param_type((1.0)) { } 
# 4439
explicit param_type(double __mean) : _M_mean(__mean) 
# 4441
{ 
# 4442
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_mean) > (0.0))))) { __builtin_unreachable(); }  } while (false); 
# 4443
_M_initialize(); 
# 4444
} 
# 4447
double mean() const 
# 4448
{ return _M_mean; } 
# 4451
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4452
{ return (__p1._M_mean) == (__p2._M_mean); } 
# 4455
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4456
{ return !(__p1 == __p2); } 
# 4461
private: void _M_initialize(); 
# 4463
double _M_mean; 
# 4465
double _M_lm_thr; 
# 4467
double _M_lfm, _M_sm, _M_d, _M_scx, _M_1cx, _M_c2b, _M_cb; 
# 4469
}; 
# 4473
poisson_distribution() : poisson_distribution((1.0)) { } 
# 4476
explicit poisson_distribution(double __mean) : _M_param(__mean), _M_nd() 
# 4478
{ } 
# 4481
explicit poisson_distribution(const param_type &__p) : _M_param(__p), _M_nd() 
# 4483
{ } 
# 4489
void reset() 
# 4490
{ (_M_nd).reset(); } 
# 4496
double mean() const 
# 4497
{ return (_M_param).mean(); } 
# 4503
param_type param() const 
# 4504
{ return _M_param; } 
# 4511
void param(const param_type &__param) 
# 4512
{ (_M_param) = __param; } 
# 4518
result_type min() const 
# 4519
{ return 0; } 
# 4525
result_type max() const 
# 4526
{ return std::template numeric_limits< result_type> ::max(); } 
# 4531
template< class _UniformRandomNumberGenerator> result_type 
# 4533
operator()(_UniformRandomNumberGenerator &__urng) 
# 4534
{ return this->operator()(__urng, _M_param); } 
# 4536
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4541
template< class _ForwardIterator, class 
# 4542
_UniformRandomNumberGenerator> void 
# 4544
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4545
__urng) 
# 4546
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4548
template< class _ForwardIterator, class 
# 4549
_UniformRandomNumberGenerator> void 
# 4551
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4552
__urng, const param_type &
# 4553
__p) 
# 4554
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4556
template< class _UniformRandomNumberGenerator> void 
# 4558
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4559
__urng, const param_type &
# 4560
__p) 
# 4561
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4569
friend inline bool operator==(const poisson_distribution< _IntType>  &__d1, const poisson_distribution< _IntType>  &
# 4570
__d2) 
# 4572
{ return ((__d1._M_param) == (__d2._M_param)) && ((__d1._M_nd) == (__d2._M_nd)); } 
# 4587 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::poisson_distribution< _IntType1>  & __x); 
# 4602 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::poisson_distribution< _IntType1>  & __x); 
# 4608
private: template< class _ForwardIterator, class 
# 4609
_UniformRandomNumberGenerator> void 
# 4608
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4615
param_type _M_param; 
# 4618
normal_distribution< double>  _M_nd; 
# 4619
}; 
# 4624
template< class _IntType> inline bool 
# 4626
operator!=(const poisson_distribution< _IntType>  &__d1, const poisson_distribution< _IntType>  &
# 4627
__d2) 
# 4628
{ return !(__d1 == __d2); } 
# 4646 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 4647
class exponential_distribution { 
# 4649
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 4654
public: typedef _RealType result_type; 
# 4657
struct param_type { 
# 4659
typedef exponential_distribution distribution_type; 
# 4661
param_type() : param_type((1.0)) { } 
# 4664
explicit param_type(_RealType __lambda) : _M_lambda(__lambda) 
# 4666
{ 
# 4667
do { if (__builtin_is_constant_evaluated() && (!((bool)((_M_lambda) > ((_RealType)0))))) { __builtin_unreachable(); }  } while (false); 
# 4668
} 
# 4671
_RealType lambda() const 
# 4672
{ return _M_lambda; } 
# 4675
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4676
{ return (__p1._M_lambda) == (__p2._M_lambda); } 
# 4679
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4680
{ return !(__p1 == __p2); } 
# 4683
private: _RealType _M_lambda; 
# 4684
}; 
# 4691
exponential_distribution() : exponential_distribution((1.0)) { } 
# 4698
explicit exponential_distribution(_RealType __lambda) : _M_param(__lambda) 
# 4700
{ } 
# 4703
explicit exponential_distribution(const param_type &__p) : _M_param(__p) 
# 4705
{ } 
# 4713
void reset() { } 
# 4719
_RealType lambda() const 
# 4720
{ return (_M_param).lambda(); } 
# 4726
param_type param() const 
# 4727
{ return _M_param; } 
# 4734
void param(const param_type &__param) 
# 4735
{ (_M_param) = __param; } 
# 4741
result_type min() const 
# 4742
{ return (result_type)0; } 
# 4748
result_type max() const 
# 4749
{ return std::template numeric_limits< result_type> ::max(); } 
# 4754
template< class _UniformRandomNumberGenerator> result_type 
# 4756
operator()(_UniformRandomNumberGenerator &__urng) 
# 4757
{ return this->operator()(__urng, _M_param); } 
# 4759
template< class _UniformRandomNumberGenerator> result_type 
# 4761
operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 4762
__p) 
# 4763
{ 
# 4765
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 4766
return (-std::log(((result_type)1) - __aurng())) / __p.lambda(); 
# 4767
} 
# 4769
template< class _ForwardIterator, class 
# 4770
_UniformRandomNumberGenerator> void 
# 4772
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4773
__urng) 
# 4774
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4776
template< class _ForwardIterator, class 
# 4777
_UniformRandomNumberGenerator> void 
# 4779
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4780
__urng, const param_type &
# 4781
__p) 
# 4782
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4784
template< class _UniformRandomNumberGenerator> void 
# 4786
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4787
__urng, const param_type &
# 4788
__p) 
# 4789
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4796
friend inline bool operator==(const exponential_distribution< _RealType>  &__d1, const exponential_distribution< _RealType>  &
# 4797
__d2) 
# 4798
{ return (__d1._M_param) == (__d2._M_param); } 
# 4801
private: template< class _ForwardIterator, class 
# 4802
_UniformRandomNumberGenerator> void 
# 4801
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4808
param_type _M_param; 
# 4809
}; 
# 4815
template< class _RealType> inline bool 
# 4817
operator!=(const exponential_distribution< _RealType>  &__d1, const exponential_distribution< _RealType>  &
# 4818
__d2) 
# 4819
{ return !(__d1 == __d2); } 
# 4831 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const exponential_distribution< _RealType>  & __x); 
# 4846 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, exponential_distribution< _RealType>  & __x); 
# 4861 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 4862
class weibull_distribution { 
# 4864
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 4869
public: typedef _RealType result_type; 
# 4872
struct param_type { 
# 4874
typedef weibull_distribution distribution_type; 
# 4876
param_type() : param_type((1.0)) { } 
# 4879
explicit param_type(_RealType __a, _RealType __b = (_RealType)(1.0)) : _M_a(__a), _M_b(__b) 
# 4881
{ } 
# 4884
_RealType a() const 
# 4885
{ return _M_a; } 
# 4888
_RealType b() const 
# 4889
{ return _M_b; } 
# 4892
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 4893
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 4896
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 4897
{ return !(__p1 == __p2); } 
# 4900
private: _RealType _M_a; 
# 4901
_RealType _M_b; 
# 4902
}; 
# 4904
weibull_distribution() : weibull_distribution((1.0)) { } 
# 4907
explicit weibull_distribution(_RealType __a, _RealType __b = (_RealType)1) : _M_param(__a, __b) 
# 4909
{ } 
# 4912
explicit weibull_distribution(const param_type &__p) : _M_param(__p) 
# 4914
{ } 
# 4920
void reset() 
# 4921
{ } 
# 4927
_RealType a() const 
# 4928
{ return (_M_param).a(); } 
# 4934
_RealType b() const 
# 4935
{ return (_M_param).b(); } 
# 4941
param_type param() const 
# 4942
{ return _M_param; } 
# 4949
void param(const param_type &__param) 
# 4950
{ (_M_param) = __param; } 
# 4956
result_type min() const 
# 4957
{ return (result_type)0; } 
# 4963
result_type max() const 
# 4964
{ return std::template numeric_limits< result_type> ::max(); } 
# 4969
template< class _UniformRandomNumberGenerator> result_type 
# 4971
operator()(_UniformRandomNumberGenerator &__urng) 
# 4972
{ return this->operator()(__urng, _M_param); } 
# 4974
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 4979
template< class _ForwardIterator, class 
# 4980
_UniformRandomNumberGenerator> void 
# 4982
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4983
__urng) 
# 4984
{ this->__generate(__f, __t, __urng, _M_param); } 
# 4986
template< class _ForwardIterator, class 
# 4987
_UniformRandomNumberGenerator> void 
# 4989
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 4990
__urng, const param_type &
# 4991
__p) 
# 4992
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 4994
template< class _UniformRandomNumberGenerator> void 
# 4996
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 4997
__urng, const param_type &
# 4998
__p) 
# 4999
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5006
friend inline bool operator==(const weibull_distribution< _RealType>  &__d1, const weibull_distribution< _RealType>  &
# 5007
__d2) 
# 5008
{ return (__d1._M_param) == (__d2._M_param); } 
# 5011
private: template< class _ForwardIterator, class 
# 5012
_UniformRandomNumberGenerator> void 
# 5011
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5018
param_type _M_param; 
# 5019
}; 
# 5025
template< class _RealType> inline bool 
# 5027
operator!=(const weibull_distribution< _RealType>  &__d1, const weibull_distribution< _RealType>  &
# 5028
__d2) 
# 5029
{ return !(__d1 == __d2); } 
# 5041 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const weibull_distribution< _RealType>  & __x); 
# 5056 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, weibull_distribution< _RealType>  & __x); 
# 5071 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 5072
class extreme_value_distribution { 
# 5074
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 5079
public: typedef _RealType result_type; 
# 5082
struct param_type { 
# 5084
typedef extreme_value_distribution distribution_type; 
# 5086
param_type() : param_type((0.0)) { } 
# 5089
explicit param_type(_RealType __a, _RealType __b = (_RealType)(1.0)) : _M_a(__a), _M_b(__b) 
# 5091
{ } 
# 5094
_RealType a() const 
# 5095
{ return _M_a; } 
# 5098
_RealType b() const 
# 5099
{ return _M_b; } 
# 5102
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5103
{ return ((__p1._M_a) == (__p2._M_a)) && ((__p1._M_b) == (__p2._M_b)); } 
# 5106
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5107
{ return !(__p1 == __p2); } 
# 5110
private: _RealType _M_a; 
# 5111
_RealType _M_b; 
# 5112
}; 
# 5114
extreme_value_distribution() : extreme_value_distribution((0.0)) { } 
# 5117
explicit extreme_value_distribution(_RealType __a, _RealType __b = (_RealType)1) : _M_param(__a, __b) 
# 5119
{ } 
# 5122
explicit extreme_value_distribution(const param_type &__p) : _M_param(__p) 
# 5124
{ } 
# 5130
void reset() 
# 5131
{ } 
# 5137
_RealType a() const 
# 5138
{ return (_M_param).a(); } 
# 5144
_RealType b() const 
# 5145
{ return (_M_param).b(); } 
# 5151
param_type param() const 
# 5152
{ return _M_param; } 
# 5159
void param(const param_type &__param) 
# 5160
{ (_M_param) = __param; } 
# 5166
result_type min() const 
# 5167
{ return std::template numeric_limits< result_type> ::lowest(); } 
# 5173
result_type max() const 
# 5174
{ return std::template numeric_limits< result_type> ::max(); } 
# 5179
template< class _UniformRandomNumberGenerator> result_type 
# 5181
operator()(_UniformRandomNumberGenerator &__urng) 
# 5182
{ return this->operator()(__urng, _M_param); } 
# 5184
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5189
template< class _ForwardIterator, class 
# 5190
_UniformRandomNumberGenerator> void 
# 5192
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5193
__urng) 
# 5194
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5196
template< class _ForwardIterator, class 
# 5197
_UniformRandomNumberGenerator> void 
# 5199
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5200
__urng, const param_type &
# 5201
__p) 
# 5202
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5204
template< class _UniformRandomNumberGenerator> void 
# 5206
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5207
__urng, const param_type &
# 5208
__p) 
# 5209
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5216
friend inline bool operator==(const extreme_value_distribution< _RealType>  &__d1, const extreme_value_distribution< _RealType>  &
# 5217
__d2) 
# 5218
{ return (__d1._M_param) == (__d2._M_param); } 
# 5221
private: template< class _ForwardIterator, class 
# 5222
_UniformRandomNumberGenerator> void 
# 5221
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5228
param_type _M_param; 
# 5229
}; 
# 5235
template< class _RealType> inline bool 
# 5237
operator!=(const extreme_value_distribution< _RealType>  &__d1, const extreme_value_distribution< _RealType>  &
# 5238
__d2) 
# 5239
{ return !(__d1 == __d2); } 
# 5251 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &operator<<(basic_ostream< _CharT, _Traits>  & __os, const extreme_value_distribution< _RealType>  & __x); 
# 5266 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &operator>>(basic_istream< _CharT, _Traits>  & __is, extreme_value_distribution< _RealType>  & __x); 
# 5278 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType = int> 
# 5279
class discrete_distribution { 
# 5281
static_assert((std::template is_integral< _IntType> ::value), "result_type must be an integral type");
# 5286
public: typedef _IntType result_type; 
# 5289
struct param_type { 
# 5291
typedef discrete_distribution distribution_type; 
# 5292
friend class discrete_distribution; 
# 5294
param_type() : _M_prob(), _M_cp() 
# 5296
{ } 
# 5298
template< class _InputIterator> 
# 5299
param_type(_InputIterator __wbegin, _InputIterator 
# 5300
__wend) : _M_prob(__wbegin, __wend), _M_cp() 
# 5302
{ _M_initialize(); } 
# 5304
param_type(initializer_list< double>  __wil) : _M_prob(__wil.begin(), __wil.end()), _M_cp() 
# 5306
{ _M_initialize(); } 
# 5308
template< class _Func> param_type(size_t __nw, double __xmin, double __xmax, _Func __fw); 
# 5313
param_type(const param_type &) = default;
# 5314
param_type &operator=(const param_type &) = default;
# 5317
vector< double>  probabilities() const 
# 5318
{ return ((_M_prob).empty() ? vector< double> (1, (1.0)) : (_M_prob)); } 
# 5321
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5322
{ return ((__p1._M_prob) == (__p2._M_prob)); } 
# 5325
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5326
{ return !(__p1 == __p2); } 
# 5330
private: void _M_initialize(); 
# 5332
vector< double>  _M_prob; 
# 5333
vector< double>  _M_cp; 
# 5334
}; 
# 5336
discrete_distribution() : _M_param() 
# 5338
{ } 
# 5340
template< class _InputIterator> 
# 5341
discrete_distribution(_InputIterator __wbegin, _InputIterator 
# 5342
__wend) : _M_param(__wbegin, __wend) 
# 5344
{ } 
# 5346
discrete_distribution(initializer_list< double>  __wl) : _M_param(__wl) 
# 5348
{ } 
# 5350
template< class _Func> 
# 5351
discrete_distribution(size_t __nw, double __xmin, double __xmax, _Func 
# 5352
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5354
{ } 
# 5357
explicit discrete_distribution(const param_type &__p) : _M_param(__p) 
# 5359
{ } 
# 5365
void reset() 
# 5366
{ } 
# 5372
vector< double>  probabilities() const 
# 5373
{ 
# 5374
return (((_M_param)._M_prob).empty()) ? vector< double> (1, (1.0)) : ((_M_param)._M_prob); 
# 5376
} 
# 5382
param_type param() const 
# 5383
{ return _M_param; } 
# 5390
void param(const param_type &__param) 
# 5391
{ (_M_param) = __param; } 
# 5397
result_type min() const 
# 5398
{ return (result_type)0; } 
# 5404
result_type max() const 
# 5405
{ 
# 5406
return (((_M_param)._M_prob).empty()) ? (result_type)0 : ((result_type)(((_M_param)._M_prob).size() - 1)); 
# 5408
} 
# 5413
template< class _UniformRandomNumberGenerator> result_type 
# 5415
operator()(_UniformRandomNumberGenerator &__urng) 
# 5416
{ return this->operator()(__urng, _M_param); } 
# 5418
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5423
template< class _ForwardIterator, class 
# 5424
_UniformRandomNumberGenerator> void 
# 5426
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5427
__urng) 
# 5428
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5430
template< class _ForwardIterator, class 
# 5431
_UniformRandomNumberGenerator> void 
# 5433
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5434
__urng, const param_type &
# 5435
__p) 
# 5436
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5438
template< class _UniformRandomNumberGenerator> void 
# 5440
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5441
__urng, const param_type &
# 5442
__p) 
# 5443
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5450
friend inline bool operator==(const discrete_distribution< _IntType>  &__d1, const discrete_distribution< _IntType>  &
# 5451
__d2) 
# 5452
{ return (__d1._M_param) == (__d2._M_param); } 
# 5464 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::discrete_distribution< _IntType1>  & __x); 
# 5480 "/usr/include/c++/11/bits/random.h" 3
template< class _IntType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::discrete_distribution< _IntType1>  & __x); 
# 5486
private: template< class _ForwardIterator, class 
# 5487
_UniformRandomNumberGenerator> void 
# 5486
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5493
param_type _M_param; 
# 5494
}; 
# 5500
template< class _IntType> inline bool 
# 5502
operator!=(const discrete_distribution< _IntType>  &__d1, const discrete_distribution< _IntType>  &
# 5503
__d2) 
# 5504
{ return !(__d1 == __d2); } 
# 5513 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 5514
class piecewise_constant_distribution { 
# 5516
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 5521
public: typedef _RealType result_type; 
# 5524
struct param_type { 
# 5526
typedef piecewise_constant_distribution distribution_type; 
# 5527
friend class piecewise_constant_distribution; 
# 5529
param_type() : _M_int(), _M_den(), _M_cp() 
# 5531
{ } 
# 5533
template< class _InputIteratorB, class _InputIteratorW> param_type(_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin); 
# 5538
template< class _Func> param_type(initializer_list< _RealType>  __bi, _Func __fw); 
# 5541
template< class _Func> param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw); 
# 5546
param_type(const param_type &) = default;
# 5547
param_type &operator=(const param_type &) = default;
# 5550
vector< _RealType>  intervals() const 
# 5551
{ 
# 5552
if ((_M_int).empty()) 
# 5553
{ 
# 5554
vector< _RealType>  __tmp(2); 
# 5555
(__tmp[1]) = ((_RealType)1); 
# 5556
return __tmp; 
# 5557
} else { 
# 5559
return _M_int; }  
# 5560
} 
# 5563
vector< double>  densities() const 
# 5564
{ return ((_M_den).empty() ? vector< double> (1, (1.0)) : (_M_den)); } 
# 5567
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5568
{ return ((__p1._M_int) == (__p2._M_int)) && ((__p1._M_den) == (__p2._M_den)); } 
# 5571
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5572
{ return !(__p1 == __p2); } 
# 5576
private: void _M_initialize(); 
# 5578
vector< _RealType>  _M_int; 
# 5579
vector< double>  _M_den; 
# 5580
vector< double>  _M_cp; 
# 5581
}; 
# 5583
piecewise_constant_distribution() : _M_param() 
# 5585
{ } 
# 5587
template< class _InputIteratorB, class _InputIteratorW> 
# 5588
piecewise_constant_distribution(_InputIteratorB __bfirst, _InputIteratorB 
# 5589
__bend, _InputIteratorW 
# 5590
__wbegin) : _M_param(__bfirst, __bend, __wbegin) 
# 5592
{ } 
# 5594
template< class _Func> 
# 5595
piecewise_constant_distribution(initializer_list< _RealType>  __bl, _Func 
# 5596
__fw) : _M_param(__bl, __fw) 
# 5598
{ } 
# 5600
template< class _Func> 
# 5601
piecewise_constant_distribution(size_t __nw, _RealType 
# 5602
__xmin, _RealType __xmax, _Func 
# 5603
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5605
{ } 
# 5608
explicit piecewise_constant_distribution(const param_type &__p) : _M_param(__p) 
# 5610
{ } 
# 5616
void reset() 
# 5617
{ } 
# 5623
vector< _RealType>  intervals() const 
# 5624
{ 
# 5625
if (((_M_param)._M_int).empty()) 
# 5626
{ 
# 5627
vector< _RealType>  __tmp(2); 
# 5628
(__tmp[1]) = ((_RealType)1); 
# 5629
return __tmp; 
# 5630
} else { 
# 5632
return (_M_param)._M_int; }  
# 5633
} 
# 5639
vector< double>  densities() const 
# 5640
{ 
# 5641
return (((_M_param)._M_den).empty()) ? vector< double> (1, (1.0)) : ((_M_param)._M_den); 
# 5643
} 
# 5649
param_type param() const 
# 5650
{ return _M_param; } 
# 5657
void param(const param_type &__param) 
# 5658
{ (_M_param) = __param; } 
# 5664
result_type min() const 
# 5665
{ 
# 5666
return (((_M_param)._M_int).empty()) ? (result_type)0 : ((_M_param)._M_int).front(); 
# 5668
} 
# 5674
result_type max() const 
# 5675
{ 
# 5676
return (((_M_param)._M_int).empty()) ? (result_type)1 : ((_M_param)._M_int).back(); 
# 5678
} 
# 5683
template< class _UniformRandomNumberGenerator> result_type 
# 5685
operator()(_UniformRandomNumberGenerator &__urng) 
# 5686
{ return this->operator()(__urng, _M_param); } 
# 5688
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5693
template< class _ForwardIterator, class 
# 5694
_UniformRandomNumberGenerator> void 
# 5696
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5697
__urng) 
# 5698
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5700
template< class _ForwardIterator, class 
# 5701
_UniformRandomNumberGenerator> void 
# 5703
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5704
__urng, const param_type &
# 5705
__p) 
# 5706
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5708
template< class _UniformRandomNumberGenerator> void 
# 5710
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5711
__urng, const param_type &
# 5712
__p) 
# 5713
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5720
friend inline bool operator==(const piecewise_constant_distribution< _RealType>  &__d1, const piecewise_constant_distribution< _RealType>  &
# 5721
__d2) 
# 5722
{ return (__d1._M_param) == (__d2._M_param); } 
# 5735 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::piecewise_constant_distribution< _RealType1>  & __x); 
# 5751 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::piecewise_constant_distribution< _RealType1>  & __x); 
# 5757
private: template< class _ForwardIterator, class 
# 5758
_UniformRandomNumberGenerator> void 
# 5757
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5764
param_type _M_param; 
# 5765
}; 
# 5771
template< class _RealType> inline bool 
# 5773
operator!=(const piecewise_constant_distribution< _RealType>  &__d1, const piecewise_constant_distribution< _RealType>  &
# 5774
__d2) 
# 5775
{ return !(__d1 == __d2); } 
# 5784 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType = double> 
# 5785
class piecewise_linear_distribution { 
# 5787
static_assert((std::template is_floating_point< _RealType> ::value), "result_type must be a floating point type");
# 5792
public: typedef _RealType result_type; 
# 5795
struct param_type { 
# 5797
typedef piecewise_linear_distribution distribution_type; 
# 5798
friend class piecewise_linear_distribution; 
# 5800
param_type() : _M_int(), _M_den(), _M_cp(), _M_m() 
# 5802
{ } 
# 5804
template< class _InputIteratorB, class _InputIteratorW> param_type(_InputIteratorB __bfirst, _InputIteratorB __bend, _InputIteratorW __wbegin); 
# 5809
template< class _Func> param_type(initializer_list< _RealType>  __bl, _Func __fw); 
# 5812
template< class _Func> param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw); 
# 5817
param_type(const param_type &) = default;
# 5818
param_type &operator=(const param_type &) = default;
# 5821
vector< _RealType>  intervals() const 
# 5822
{ 
# 5823
if ((_M_int).empty()) 
# 5824
{ 
# 5825
vector< _RealType>  __tmp(2); 
# 5826
(__tmp[1]) = ((_RealType)1); 
# 5827
return __tmp; 
# 5828
} else { 
# 5830
return _M_int; }  
# 5831
} 
# 5834
vector< double>  densities() const 
# 5835
{ return ((_M_den).empty() ? vector< double> (2, (1.0)) : (_M_den)); } 
# 5838
friend inline bool operator==(const param_type &__p1, const param_type &__p2) 
# 5839
{ return ((__p1._M_int) == (__p2._M_int)) && ((__p1._M_den) == (__p2._M_den)); } 
# 5842
friend inline bool operator!=(const param_type &__p1, const param_type &__p2) 
# 5843
{ return !(__p1 == __p2); } 
# 5847
private: void _M_initialize(); 
# 5849
vector< _RealType>  _M_int; 
# 5850
vector< double>  _M_den; 
# 5851
vector< double>  _M_cp; 
# 5852
vector< double>  _M_m; 
# 5853
}; 
# 5855
piecewise_linear_distribution() : _M_param() 
# 5857
{ } 
# 5859
template< class _InputIteratorB, class _InputIteratorW> 
# 5860
piecewise_linear_distribution(_InputIteratorB __bfirst, _InputIteratorB 
# 5861
__bend, _InputIteratorW 
# 5862
__wbegin) : _M_param(__bfirst, __bend, __wbegin) 
# 5864
{ } 
# 5866
template< class _Func> 
# 5867
piecewise_linear_distribution(initializer_list< _RealType>  __bl, _Func 
# 5868
__fw) : _M_param(__bl, __fw) 
# 5870
{ } 
# 5872
template< class _Func> 
# 5873
piecewise_linear_distribution(size_t __nw, _RealType 
# 5874
__xmin, _RealType __xmax, _Func 
# 5875
__fw) : _M_param(__nw, __xmin, __xmax, __fw) 
# 5877
{ } 
# 5880
explicit piecewise_linear_distribution(const param_type &__p) : _M_param(__p) 
# 5882
{ } 
# 5888
void reset() 
# 5889
{ } 
# 5895
vector< _RealType>  intervals() const 
# 5896
{ 
# 5897
if (((_M_param)._M_int).empty()) 
# 5898
{ 
# 5899
vector< _RealType>  __tmp(2); 
# 5900
(__tmp[1]) = ((_RealType)1); 
# 5901
return __tmp; 
# 5902
} else { 
# 5904
return (_M_param)._M_int; }  
# 5905
} 
# 5912
vector< double>  densities() const 
# 5913
{ 
# 5914
return (((_M_param)._M_den).empty()) ? vector< double> (2, (1.0)) : ((_M_param)._M_den); 
# 5916
} 
# 5922
param_type param() const 
# 5923
{ return _M_param; } 
# 5930
void param(const param_type &__param) 
# 5931
{ (_M_param) = __param; } 
# 5937
result_type min() const 
# 5938
{ 
# 5939
return (((_M_param)._M_int).empty()) ? (result_type)0 : ((_M_param)._M_int).front(); 
# 5941
} 
# 5947
result_type max() const 
# 5948
{ 
# 5949
return (((_M_param)._M_int).empty()) ? (result_type)1 : ((_M_param)._M_int).back(); 
# 5951
} 
# 5956
template< class _UniformRandomNumberGenerator> result_type 
# 5958
operator()(_UniformRandomNumberGenerator &__urng) 
# 5959
{ return this->operator()(__urng, _M_param); } 
# 5961
template< class _UniformRandomNumberGenerator> result_type operator()(_UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 5966
template< class _ForwardIterator, class 
# 5967
_UniformRandomNumberGenerator> void 
# 5969
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5970
__urng) 
# 5971
{ this->__generate(__f, __t, __urng, _M_param); } 
# 5973
template< class _ForwardIterator, class 
# 5974
_UniformRandomNumberGenerator> void 
# 5976
__generate(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 5977
__urng, const param_type &
# 5978
__p) 
# 5979
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5981
template< class _UniformRandomNumberGenerator> void 
# 5983
__generate(result_type *__f, result_type *__t, _UniformRandomNumberGenerator &
# 5984
__urng, const param_type &
# 5985
__p) 
# 5986
{ this->__generate_impl(__f, __t, __urng, __p); } 
# 5993
friend inline bool operator==(const piecewise_linear_distribution< _RealType>  &__d1, const piecewise_linear_distribution< _RealType>  &
# 5994
__d2) 
# 5995
{ return (__d1._M_param) == (__d2._M_param); } 
# 6008 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_ostream< _CharT, _Traits>  &operator<<(std::basic_ostream< _CharT, _Traits>  & __os, const std::piecewise_linear_distribution< _RealType1>  & __x); 
# 6024 "/usr/include/c++/11/bits/random.h" 3
template< class _RealType1, class _CharT, class _Traits> friend basic_istream< _CharT, _Traits>  &operator>>(std::basic_istream< _CharT, _Traits>  & __is, std::piecewise_linear_distribution< _RealType1>  & __x); 
# 6030
private: template< class _ForwardIterator, class 
# 6031
_UniformRandomNumberGenerator> void 
# 6030
__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator & __urng, const param_type & __p); 
# 6037
param_type _M_param; 
# 6038
}; 
# 6044
template< class _RealType> inline bool 
# 6046
operator!=(const piecewise_linear_distribution< _RealType>  &__d1, const piecewise_linear_distribution< _RealType>  &
# 6047
__d2) 
# 6048
{ return !(__d1 == __d2); } 
# 6065 "/usr/include/c++/11/bits/random.h" 3
class seed_seq { 
# 6069
public: typedef uint_least32_t result_type; 
# 6072
seed_seq() noexcept : _M_v() 
# 6074
{ } 
# 6076
template< class _IntType, class  = _Require< is_integral< _IntType> > > seed_seq(initializer_list< _IntType>  __il); 
# 6079
template< class _InputIterator> seed_seq(_InputIterator __begin, _InputIterator __end); 
# 6083
template< class _RandomAccessIterator> void generate(_RandomAccessIterator __begin, _RandomAccessIterator __end); 
# 6088
size_t size() const noexcept 
# 6089
{ return (_M_v).size(); } 
# 6091
template< class _OutputIterator> void 
# 6093
param(_OutputIterator __dest) const 
# 6094
{ std::copy((_M_v).begin(), (_M_v).end(), __dest); } 
# 6097
seed_seq(const seed_seq &) = delete;
# 6098
seed_seq &operator=(const seed_seq &) = delete;
# 6101
private: vector< unsigned>  _M_v; 
# 6102
}; 
# 6109
}
# 41 "/usr/include/x86_64-linux-gnu/c++/11/bits/opt_random.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 218 "/usr/include/x86_64-linux-gnu/c++/11/bits/opt_random.h" 3
}
# 64 "/usr/include/c++/11/bits/stl_numeric.h" 3
namespace std __attribute((__visibility__("default"))) { 
# 85 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _ForwardIterator, class _Tp> void 
# 88
iota(_ForwardIterator __first, _ForwardIterator __last, _Tp __value) 
# 89
{ 
# 95
; 
# 97
for (; __first != __last; ++__first) 
# 98
{ 
# 99
(*__first) = __value; 
# 100
++__value; 
# 101
}  
# 102
} 
# 131 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator, class _Tp> inline _Tp 
# 134
accumulate(_InputIterator __first, _InputIterator __last, _Tp __init) 
# 135
{ 
# 138
; 
# 140
for (; __first != __last; ++__first) { 
# 141
__init = (__init + (*__first)); }  
# 142
return __init; 
# 143
} 
# 158 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator, class _Tp, class _BinaryOperation> inline _Tp 
# 161
accumulate(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation 
# 162
__binary_op) 
# 163
{ 
# 166
; 
# 168
for (; __first != __last; ++__first) { 
# 169
__init = __binary_op(__init, *__first); }  
# 170
return __init; 
# 171
} 
# 187 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator1, class _InputIterator2, class _Tp> inline _Tp 
# 190
inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 191
__first2, _Tp __init) 
# 192
{ 
# 196
; 
# 198
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 199
__init = (__init + ((*__first1) * (*__first2))); }  
# 200
return __init; 
# 201
} 
# 219 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator1, class _InputIterator2, class _Tp, class 
# 220
_BinaryOperation1, class _BinaryOperation2> inline _Tp 
# 223
inner_product(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 224
__first2, _Tp __init, _BinaryOperation1 
# 225
__binary_op1, _BinaryOperation2 
# 226
__binary_op2) 
# 227
{ 
# 231
; 
# 233
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 234
__init = __binary_op1(__init, __binary_op2(*__first1, *__first2)); }  
# 236
return __init; 
# 237
} 
# 253 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator> _OutputIterator 
# 256
partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 257
__result) 
# 258
{ 
# 259
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 265
; 
# 267
if (__first == __last) { 
# 268
return __result; }  
# 269
_ValueType __value = (*__first); 
# 270
(*__result) = __value; 
# 271
while ((++__first) != __last) 
# 272
{ 
# 273
__value = (__value + (*__first)); 
# 274
(*(++__result)) = __value; 
# 275
}  
# 276
return ++__result; 
# 277
} 
# 294 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 295
_BinaryOperation> _OutputIterator 
# 298
partial_sum(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 299
__result, _BinaryOperation __binary_op) 
# 300
{ 
# 301
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 307
; 
# 309
if (__first == __last) { 
# 310
return __result; }  
# 311
_ValueType __value = (*__first); 
# 312
(*__result) = __value; 
# 313
while ((++__first) != __last) 
# 314
{ 
# 315
__value = __binary_op(__value, *__first); 
# 316
(*(++__result)) = __value; 
# 317
}  
# 318
return ++__result; 
# 319
} 
# 335 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator> _OutputIterator 
# 338
adjacent_difference(_InputIterator __first, _InputIterator 
# 339
__last, _OutputIterator __result) 
# 340
{ 
# 341
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 347
; 
# 349
if (__first == __last) { 
# 350
return __result; }  
# 351
_ValueType __value = (*__first); 
# 352
(*__result) = __value; 
# 353
while ((++__first) != __last) 
# 354
{ 
# 355
_ValueType __tmp = (*__first); 
# 356
(*(++__result)) = (__tmp - __value); 
# 357
__value = std::move(__tmp); 
# 358
}  
# 359
return ++__result; 
# 360
} 
# 378 "/usr/include/c++/11/bits/stl_numeric.h" 3
template< class _InputIterator, class _OutputIterator, class 
# 379
_BinaryOperation> _OutputIterator 
# 382
adjacent_difference(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 383
__result, _BinaryOperation __binary_op) 
# 384
{ 
# 385
typedef typename iterator_traits< _InputIterator> ::value_type _ValueType; 
# 391
; 
# 393
if (__first == __last) { 
# 394
return __result; }  
# 395
_ValueType __value = (*__first); 
# 396
(*__result) = __value; 
# 397
while ((++__first) != __last) 
# 398
{ 
# 399
_ValueType __tmp = (*__first); 
# 400
(*(++__result)) = __binary_op(__tmp, __value); 
# 401
__value = std::move(__tmp); 
# 402
}  
# 403
return ++__result; 
# 404
} 
# 411
}
# 55 "/usr/include/c++/11/bit" 3
namespace std __attribute((__visibility__("default"))) { 
# 87 "/usr/include/c++/11/bit" 3
template< class _Tp> constexpr _Tp 
# 89
__rotl(_Tp __x, int __s) noexcept 
# 90
{ 
# 91
constexpr auto _Nd = (__gnu_cxx::__int_traits< _Tp> ::__digits); 
# 92
if constexpr ((_Nd & (_Nd - 1)) == 0) 
# 93
{ 
# 96
constexpr unsigned __uNd = (_Nd); 
# 97
const unsigned __r = __s; 
# 98
return (__x << (__r % __uNd)) | (__x >> ((-__r) % __uNd)); 
# 99
}  
# 100
const int __r = __s % _Nd; 
# 101
if (__r == 0) { 
# 102
return __x; } else { 
# 103
if (__r > 0) { 
# 104
return (__x << __r) | (__x >> ((_Nd - __r) % _Nd)); } else { 
# 106
return (__x >> (-__r)) | (__x << ((_Nd + __r) % _Nd)); }  }  
# 107
} 
# 109
template< class _Tp> constexpr _Tp 
# 111
__rotr(_Tp __x, int __s) noexcept 
# 112
{ 
# 113
constexpr auto _Nd = (__gnu_cxx::__int_traits< _Tp> ::__digits); 
# 114
if constexpr ((_Nd & (_Nd - 1)) == 0) 
# 115
{ 
# 118
constexpr unsigned __uNd = (_Nd); 
# 119
const unsigned __r = __s; 
# 120
return (__x >> (__r % __uNd)) | (__x << ((-__r) % __uNd)); 
# 121
}  
# 122
const int __r = __s % _Nd; 
# 123
if (__r == 0) { 
# 124
return __x; } else { 
# 125
if (__r > 0) { 
# 126
return (__x >> __r) | (__x << ((_Nd - __r) % _Nd)); } else { 
# 128
return (__x << (-__r)) | (__x >> ((_Nd + __r) % _Nd)); }  }  
# 129
} 
# 131
template< class _Tp> constexpr int 
# 133
__countl_zero(_Tp __x) noexcept 
# 134
{ 
# 135
using __gnu_cxx::__int_traits;
# 136
constexpr auto _Nd = (__int_traits< _Tp> ::__digits); 
# 138
if (__x == 0) { 
# 139
return _Nd; }  
# 141
constexpr auto _Nd_ull = __gnu_cxx::__numeric_traits_integer< unsigned long long> ::__digits; 
# 142
constexpr auto _Nd_ul = __gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits; 
# 143
constexpr auto _Nd_u = __gnu_cxx::__numeric_traits_integer< unsigned> ::__digits; 
# 145
if constexpr (_Nd <= _Nd_u) 
# 146
{ 
# 147
constexpr int __diff = (_Nd_u - _Nd); 
# 148
return __builtin_clz(__x) - __diff; 
# 149
} else { 
# 150
if constexpr (_Nd <= _Nd_ul) 
# 151
{ 
# 152
constexpr int __diff = (_Nd_ul - _Nd); 
# 153
return __builtin_clzl(__x) - __diff; 
# 154
} else { 
# 155
if constexpr (_Nd <= _Nd_ull) 
# 156
{ 
# 157
constexpr int __diff = (_Nd_ull - _Nd); 
# 158
return __builtin_clzll(__x) - __diff; 
# 159
} else 
# 161
{ 
# 162
static_assert((_Nd <= (2 * _Nd_ull)), "Maximum supported integer size is 128-bit");
# 165
unsigned long long __high = __x >> _Nd_ull; 
# 166
if (__high != (0)) 
# 167
{ 
# 168
constexpr int __diff = ((2 * _Nd_ull) - _Nd); 
# 169
return __builtin_clzll(__high) - __diff; 
# 170
}  
# 171
constexpr auto __max_ull = __gnu_cxx::__numeric_traits_integer< unsigned long long> ::__max; 
# 172
unsigned long long __low = __x & __max_ull; 
# 173
return (_Nd - _Nd_ull) + __builtin_clzll(__low); 
# 174
}  }  }  
# 175
} 
# 177
template< class _Tp> constexpr int 
# 179
__countl_one(_Tp __x) noexcept 
# 180
{ 
# 181
return std::__countl_zero< _Tp> ((_Tp)(~__x)); 
# 182
} 
# 184
template< class _Tp> constexpr int 
# 186
__countr_zero(_Tp __x) noexcept 
# 187
{ 
# 188
using __gnu_cxx::__int_traits;
# 189
constexpr auto _Nd = (__int_traits< _Tp> ::__digits); 
# 191
if (__x == 0) { 
# 192
return _Nd; }  
# 194
constexpr auto _Nd_ull = __gnu_cxx::__numeric_traits_integer< unsigned long long> ::__digits; 
# 195
constexpr auto _Nd_ul = __gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits; 
# 196
constexpr auto _Nd_u = __gnu_cxx::__numeric_traits_integer< unsigned> ::__digits; 
# 198
if constexpr (_Nd <= _Nd_u) { 
# 199
return __builtin_ctz(__x); } else { 
# 200
if constexpr (_Nd <= _Nd_ul) { 
# 201
return __builtin_ctzl(__x); } else { 
# 202
if constexpr (_Nd <= _Nd_ull) { 
# 203
return __builtin_ctzll(__x); } else 
# 205
{ 
# 206
static_assert((_Nd <= (2 * _Nd_ull)), "Maximum supported integer size is 128-bit");
# 209
constexpr auto __max_ull = __gnu_cxx::__numeric_traits_integer< unsigned long long> ::__max; 
# 210
unsigned long long __low = __x & __max_ull; 
# 211
if (__low != (0)) { 
# 212
return __builtin_ctzll(__low); }  
# 213
unsigned long long __high = __x >> _Nd_ull; 
# 214
return __builtin_ctzll(__high) + _Nd_ull; 
# 215
}  }  }  
# 216
} 
# 218
template< class _Tp> constexpr int 
# 220
__countr_one(_Tp __x) noexcept 
# 221
{ 
# 222
return std::__countr_zero((_Tp)(~__x)); 
# 223
} 
# 225
template< class _Tp> constexpr int 
# 227
__popcount(_Tp __x) noexcept 
# 228
{ 
# 229
using __gnu_cxx::__int_traits;
# 230
constexpr auto _Nd = (__int_traits< _Tp> ::__digits); 
# 232
constexpr auto _Nd_ull = __gnu_cxx::__numeric_traits_integer< unsigned long long> ::__digits; 
# 233
constexpr auto _Nd_ul = __gnu_cxx::__numeric_traits_integer< unsigned long> ::__digits; 
# 234
constexpr auto _Nd_u = __gnu_cxx::__numeric_traits_integer< unsigned> ::__digits; 
# 236
if constexpr (_Nd <= _Nd_u) { 
# 237
return __builtin_popcount(__x); } else { 
# 238
if constexpr (_Nd <= _Nd_ul) { 
# 239
return __builtin_popcountl(__x); } else { 
# 240
if constexpr (_Nd <= _Nd_ull) { 
# 241
return __builtin_popcountll(__x); } else 
# 243
{ 
# 244
static_assert((_Nd <= (2 * _Nd_ull)), "Maximum supported integer size is 128-bit");
# 247
constexpr auto __max_ull = __gnu_cxx::__numeric_traits_integer< unsigned long long> ::__max; 
# 248
unsigned long long __low = __x & __max_ull; 
# 249
unsigned long long __high = __x >> _Nd_ull; 
# 250
return __builtin_popcountll(__low) + __builtin_popcountll(__high); 
# 251
}  }  }  
# 252
} 
# 254
template< class _Tp> constexpr bool 
# 256
__has_single_bit(_Tp __x) noexcept 
# 257
{ return std::__popcount(__x) == 1; } 
# 259
template< class _Tp> constexpr _Tp 
# 261
__bit_ceil(_Tp __x) noexcept 
# 262
{ 
# 263
using __gnu_cxx::__int_traits;
# 264
constexpr auto _Nd = (__int_traits< _Tp> ::__digits); 
# 265
if ((__x == 0) || (__x == 1)) { 
# 266
return 1; }  
# 267
auto __shift_exponent = _Nd - std::__countl_zero((_Tp)(__x - 1U)); 
# 273
if (!__builtin_is_constant_evaluated()) 
# 274
{ 
# 275
do { if (__builtin_is_constant_evaluated() && (!((bool)(__shift_exponent != __int_traits< _Tp> ::__digits)))) { __builtin_unreachable(); }  } while (false); 
# 276
}  
# 278
using __promoted_type = __decltype((__x << 1)); 
# 279
if constexpr (!is_same< __decltype((__x << 1)), _Tp> ::value) 
# 280
{ 
# 286
const int __extra_exp = ((sizeof(__promoted_type) / sizeof(_Tp)) / (2)); 
# 287
__shift_exponent |= ((__shift_exponent & _Nd) << __extra_exp); 
# 288
}  
# 289
return ((_Tp)1U) << __shift_exponent; 
# 290
} 
# 292
template< class _Tp> constexpr _Tp 
# 294
__bit_floor(_Tp __x) noexcept 
# 295
{ 
# 296
constexpr auto _Nd = (__gnu_cxx::__int_traits< _Tp> ::__digits); 
# 297
if (__x == 0) { 
# 298
return 0; }  
# 299
return ((_Tp)1U) << (_Nd - std::__countl_zero((_Tp)(__x >> 1))); 
# 300
} 
# 302
template< class _Tp> constexpr _Tp 
# 304
__bit_width(_Tp __x) noexcept 
# 305
{ 
# 306
constexpr auto _Nd = (__gnu_cxx::__int_traits< _Tp> ::__digits); 
# 307
return _Nd - std::__countl_zero(__x); 
# 308
} 
# 410 "/usr/include/c++/11/bit" 3
}
# 90 "/usr/include/c++/11/numeric" 3
namespace std __attribute((__visibility__("default"))) { 
# 95
namespace __detail { 
# 99
template< class _Res, class _Tp> constexpr _Res 
# 101
__abs_r(_Tp __val) 
# 102
{ 
# 103
static_assert((sizeof(_Res) >= sizeof(_Tp)), "result type must be at least as wide as the input type");
# 106
if (__val >= 0) { 
# 107
return __val; }  
# 112
return -(static_cast< _Res>(__val)); 
# 113
} 
# 115
template < typename > void __abs_r ( bool ) = delete;
# 118
template< class _Tp> constexpr _Tp 
# 120
__gcd(_Tp __m, _Tp __n) 
# 121
{ 
# 122
static_assert((is_unsigned< _Tp> ::value), "type must be unsigned");
# 124
if (__m == 0) { 
# 125
return __n; }  
# 126
if (__n == 0) { 
# 127
return __m; }  
# 129
const int __i = std::__countr_zero(__m); 
# 130
__m >>= __i; 
# 131
const int __j = std::__countr_zero(__n); 
# 132
__n >>= __j; 
# 133
const int __k = ((__i < __j) ? __i : __j); 
# 135
while (true) 
# 136
{ 
# 137
if (__m > __n) 
# 138
{ 
# 139
_Tp __tmp = __m; 
# 140
__m = __n; 
# 141
__n = __tmp; 
# 142
}  
# 144
__n -= __m; 
# 146
if (__n == 0) { 
# 147
return __m << __k; }  
# 149
__n >>= std::__countr_zero(__n); 
# 150
}  
# 151
} 
# 152
}
# 162 "/usr/include/c++/11/numeric" 3
template< class _Mn, class _Nn> constexpr common_type_t< _Mn, _Nn>  
# 164
gcd(_Mn __m, _Nn __n) noexcept 
# 165
{ 
# 166
static_assert((is_integral_v< _Mn>  && is_integral_v< _Nn> ), "std::gcd arguments must be integers");
# 168
static_assert(((((_Mn)2) == 2) && (((_Nn)2) == 2)), "std::gcd arguments must not be bool");
# 170
using _Ct = common_type_t< _Mn, _Nn> ; 
# 171
const _Ct __m2 = __detail::__abs_r< common_type_t< _Mn, _Nn> > (__m); 
# 172
const _Ct __n2 = __detail::__abs_r< common_type_t< _Mn, _Nn> > (__n); 
# 173
return __detail::__gcd< make_unsigned_t< common_type_t< _Mn, _Nn> > > (__m2, __n2); 
# 174
} 
# 177
template< class _Mn, class _Nn> constexpr common_type_t< _Mn, _Nn>  
# 179
lcm(_Mn __m, _Nn __n) noexcept 
# 180
{ 
# 181
static_assert((is_integral_v< _Mn>  && is_integral_v< _Nn> ), "std::lcm arguments must be integers");
# 183
static_assert(((((_Mn)2) == 2) && (((_Nn)2) == 2)), "std::lcm arguments must not be bool");
# 185
using _Ct = common_type_t< _Mn, _Nn> ; 
# 186
const _Ct __m2 = __detail::__abs_r< common_type_t< _Mn, _Nn> > (__m); 
# 187
const _Ct __n2 = __detail::__abs_r< common_type_t< _Mn, _Nn> > (__n); 
# 188
if ((__m2 == 0) || (__n2 == 0)) { 
# 189
return 0; }  
# 190
_Ct __r = __m2 / __detail::__gcd< make_unsigned_t< common_type_t< _Mn, _Nn> > > (__m2, __n2); 
# 193
if constexpr (is_signed_v< common_type_t< _Mn, _Nn> > ) { 
# 194
if (__builtin_is_constant_evaluated()) { 
# 195
return __r * __n2; }  }  
# 198
bool __overflow = __builtin_mul_overflow(__r, __n2, &__r); 
# 199
do { if (__builtin_is_constant_evaluated() && (!((bool)(!__overflow)))) { __builtin_unreachable(); }  } while (false); 
# 200
return __r; 
# 201
} 
# 286 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _Tp, class _BinaryOperation> _Tp 
# 289
reduce(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation 
# 290
__binary_op) 
# 291
{ 
# 292
using __ref = typename iterator_traits< _InputIterator> ::reference; 
# 293
static_assert((is_invocable_r_v< _Tp, _BinaryOperation &, _Tp &, typename iterator_traits< _InputIterator> ::reference> ));
# 294
static_assert((is_invocable_r_v< _Tp, _BinaryOperation &, typename iterator_traits< _InputIterator> ::reference, _Tp &> ));
# 295
static_assert((is_invocable_r_v< _Tp, _BinaryOperation &, _Tp &, _Tp &> ));
# 296
static_assert((is_invocable_r_v< _Tp, _BinaryOperation &, typename iterator_traits< _InputIterator> ::reference, typename iterator_traits< _InputIterator> ::reference> ));
# 297
if constexpr (__is_random_access_iter< _InputIterator> ::value) 
# 298
{ 
# 299
while ((__last - __first) >= 4) 
# 300
{ 
# 301
_Tp __v1 = __binary_op(__first[0], __first[1]); 
# 302
_Tp __v2 = __binary_op(__first[2], __first[3]); 
# 303
_Tp __v3 = __binary_op(__v1, __v2); 
# 304
__init = __binary_op(__init, __v3); 
# 305
__first += 4; 
# 306
}  
# 307
}  
# 308
for (; __first != __last; ++__first) { 
# 309
__init = __binary_op(__init, *__first); }  
# 310
return __init; 
# 311
} 
# 324 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _Tp> inline _Tp 
# 327
reduce(_InputIterator __first, _InputIterator __last, _Tp __init) 
# 328
{ return std::reduce(__first, __last, std::move(__init), plus<> ()); } 
# 341 "/usr/include/c++/11/numeric" 3
template< class _InputIterator> inline typename iterator_traits< _InputIterator> ::value_type 
# 344
reduce(_InputIterator __first, _InputIterator __last) 
# 345
{ 
# 346
using value_type = typename iterator_traits< _InputIterator> ::value_type; 
# 347
return std::reduce(__first, __last, value_type{}, plus<> ()); 
# 348
} 
# 368 "/usr/include/c++/11/numeric" 3
template< class _InputIterator1, class _InputIterator2, class _Tp, class 
# 369
_BinaryOperation1, class _BinaryOperation2> _Tp 
# 372
transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 373
__first2, _Tp __init, _BinaryOperation1 
# 374
__binary_op1, _BinaryOperation2 
# 375
__binary_op2) 
# 376
{ 
# 377
if constexpr (__and_v< __is_random_access_iter< _InputIterator1> , __is_random_access_iter< _InputIterator2> > ) 
# 379
{ 
# 380
while ((__last1 - __first1) >= 4) 
# 381
{ 
# 382
_Tp __v1 = __binary_op1(__binary_op2(__first1[0], __first2[0]), __binary_op2(__first1[1], __first2[1])); 
# 384
_Tp __v2 = __binary_op1(__binary_op2(__first1[2], __first2[2]), __binary_op2(__first1[3], __first2[3])); 
# 386
_Tp __v3 = __binary_op1(__v1, __v2); 
# 387
__init = __binary_op1(__init, __v3); 
# 388
__first1 += 4; 
# 389
__first2 += 4; 
# 390
}  
# 391
}  
# 392
for (; __first1 != __last1; (++__first1), ((void)(++__first2))) { 
# 393
__init = __binary_op1(__init, __binary_op2(*__first1, *__first2)); }  
# 394
return __init; 
# 395
} 
# 412 "/usr/include/c++/11/numeric" 3
template< class _InputIterator1, class _InputIterator2, class _Tp> inline _Tp 
# 415
transform_reduce(_InputIterator1 __first1, _InputIterator1 __last1, _InputIterator2 
# 416
__first2, _Tp __init) 
# 417
{ 
# 418
return std::transform_reduce(__first1, __last1, __first2, std::move(__init), plus<> (), multiplies<> ()); 
# 421
} 
# 437 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _Tp, class 
# 438
_BinaryOperation, class _UnaryOperation> _Tp 
# 441
transform_reduce(_InputIterator __first, _InputIterator __last, _Tp __init, _BinaryOperation 
# 442
__binary_op, _UnaryOperation __unary_op) 
# 443
{ 
# 444
if constexpr (__is_random_access_iter< _InputIterator> ::value) 
# 445
{ 
# 446
while ((__last - __first) >= 4) 
# 447
{ 
# 448
_Tp __v1 = __binary_op(__unary_op(__first[0]), __unary_op(__first[1])); 
# 450
_Tp __v2 = __binary_op(__unary_op(__first[2]), __unary_op(__first[3])); 
# 452
_Tp __v3 = __binary_op(__v1, __v2); 
# 453
__init = __binary_op(__init, __v3); 
# 454
__first += 4; 
# 455
}  
# 456
}  
# 457
for (; __first != __last; ++__first) { 
# 458
__init = __binary_op(__init, __unary_op(*__first)); }  
# 459
return __init; 
# 460
} 
# 480 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class _Tp, class 
# 481
_BinaryOperation> _OutputIterator 
# 484
exclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 485
__result, _Tp __init, _BinaryOperation 
# 486
__binary_op) 
# 487
{ 
# 488
while (__first != __last) 
# 489
{ 
# 490
auto __v = __init; 
# 491
__init = __binary_op(__init, *__first); 
# 492
++__first; 
# 493
(*(__result++)) = std::move(__v); 
# 494
}  
# 495
return __result; 
# 496
} 
# 515 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class _Tp> inline _OutputIterator 
# 518
exclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 519
__result, _Tp __init) 
# 520
{ 
# 521
return std::exclusive_scan(__first, __last, __result, std::move(__init), plus<> ()); 
# 523
} 
# 543 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class 
# 544
_BinaryOperation, class _Tp> _OutputIterator 
# 547
inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 548
__result, _BinaryOperation __binary_op, _Tp 
# 549
__init) 
# 550
{ 
# 551
for (; __first != __last; ++__first) { 
# 552
(*(__result++)) = (__init = __binary_op(__init, *__first)); }  
# 553
return __result; 
# 554
} 
# 572 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class 
# 573
_BinaryOperation> _OutputIterator 
# 576
inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 577
__result, _BinaryOperation __binary_op) 
# 578
{ 
# 579
if (__first != __last) 
# 580
{ 
# 581
auto __init = (*__first); 
# 582
(*(__result++)) = __init; 
# 583
++__first; 
# 584
if (__first != __last) { 
# 585
__result = std::inclusive_scan(__first, __last, __result, __binary_op, std::move(__init)); }  
# 587
}  
# 588
return __result; 
# 589
} 
# 606 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator> inline _OutputIterator 
# 609
inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 610
__result) 
# 611
{ return std::inclusive_scan(__first, __last, __result, plus<> ()); } 
# 633 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class _Tp, class 
# 634
_BinaryOperation, class _UnaryOperation> _OutputIterator 
# 637
transform_exclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 638
__result, _Tp __init, _BinaryOperation 
# 639
__binary_op, _UnaryOperation 
# 640
__unary_op) 
# 641
{ 
# 642
while (__first != __last) 
# 643
{ 
# 644
auto __v = __init; 
# 645
__init = __binary_op(__init, __unary_op(*__first)); 
# 646
++__first; 
# 647
(*(__result++)) = std::move(__v); 
# 648
}  
# 649
return __result; 
# 650
} 
# 672 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class 
# 673
_BinaryOperation, class _UnaryOperation, class _Tp> _OutputIterator 
# 676
transform_inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 677
__result, _BinaryOperation 
# 678
__binary_op, _UnaryOperation 
# 679
__unary_op, _Tp 
# 680
__init) 
# 681
{ 
# 682
for (; __first != __last; ++__first) { 
# 683
(*(__result++)) = (__init = __binary_op(__init, __unary_op(*__first))); }  
# 684
return __result; 
# 685
} 
# 706 "/usr/include/c++/11/numeric" 3
template< class _InputIterator, class _OutputIterator, class 
# 707
_BinaryOperation, class _UnaryOperation> _OutputIterator 
# 710
transform_inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 711
__result, _BinaryOperation 
# 712
__binary_op, _UnaryOperation 
# 713
__unary_op) 
# 714
{ 
# 715
if (__first != __last) 
# 716
{ 
# 717
auto __init = __unary_op(*__first); 
# 718
(*(__result++)) = __init; 
# 719
++__first; 
# 720
if (__first != __last) { 
# 721
__result = std::transform_inclusive_scan(__first, __last, __result, __binary_op, __unary_op, std::move(__init)); }  
# 724
}  
# 725
return __result; 
# 726
} 
# 732
}
# 15 "/usr/include/c++/11/pstl/execution_defs.h" 3
namespace __pstl { 
# 17
namespace execution { 
# 19
inline namespace v1 { 
# 23
class sequenced_policy { 
# 28
public: static constexpr std::false_type __allow_unsequenced() 
# 29
{ 
# 30
return std::false_type{}; 
# 31
} 
# 33
static constexpr std::false_type __allow_vector() 
# 34
{ 
# 35
return std::false_type{}; 
# 36
} 
# 38
static constexpr std::false_type __allow_parallel() 
# 39
{ 
# 40
return std::false_type{}; 
# 41
} 
# 42
}; 
# 45
class parallel_policy { 
# 50
public: static constexpr std::false_type __allow_unsequenced() 
# 51
{ 
# 52
return std::false_type{}; 
# 53
} 
# 55
static constexpr std::false_type __allow_vector() 
# 56
{ 
# 57
return std::false_type{}; 
# 58
} 
# 60
static constexpr std::true_type __allow_parallel() 
# 61
{ 
# 62
return std::true_type{}; 
# 63
} 
# 64
}; 
# 67
class parallel_unsequenced_policy { 
# 72
public: static constexpr std::true_type __allow_unsequenced() 
# 73
{ 
# 74
return std::true_type{}; 
# 75
} 
# 77
static constexpr std::true_type __allow_vector() 
# 78
{ 
# 79
return std::true_type{}; 
# 80
} 
# 82
static constexpr std::true_type __allow_parallel() 
# 83
{ 
# 84
return std::true_type{}; 
# 85
} 
# 86
}; 
# 88
class unsequenced_policy { 
# 93
public: static constexpr std::true_type __allow_unsequenced() 
# 94
{ 
# 95
return std::true_type{}; 
# 96
} 
# 98
static constexpr std::true_type __allow_vector() 
# 99
{ 
# 100
return std::true_type{}; 
# 101
} 
# 103
static constexpr std::false_type __allow_parallel() 
# 104
{ 
# 105
return std::false_type{}; 
# 106
} 
# 107
}; 
# 110
constexpr sequenced_policy seq{}; 
# 111
constexpr parallel_policy par{}; 
# 112
constexpr parallel_unsequenced_policy par_unseq{}; 
# 113
constexpr unsequenced_policy unseq{}; 
# 116
template< class _Tp> 
# 117
struct is_execution_policy : public std::false_type { 
# 119
}; 
# 122
template<> struct is_execution_policy< sequenced_policy>  : public std::true_type { 
# 124
}; 
# 126
template<> struct is_execution_policy< parallel_policy>  : public std::true_type { 
# 128
}; 
# 130
template<> struct is_execution_policy< parallel_unsequenced_policy>  : public std::true_type { 
# 132
}; 
# 134
template<> struct is_execution_policy< unsequenced_policy>  : public std::true_type { 
# 136
}; 
# 139
template< class _Tp> constexpr bool 
# 140
is_execution_policy_v = (__pstl::execution::template is_execution_policy< _Tp> ::value); 
# 143
}
# 144
}
# 146
namespace __internal { 
# 148
template< class _ExecPolicy, class _Tp> using __enable_if_execution_policy = typename std::enable_if< execution::v1::is_execution_policy< std::__remove_cvref_t< _ExecPolicy> > ::value, _Tp> ::type; 
# 158
}
# 160
}
# 15 "/usr/include/c++/11/pstl/glue_numeric_defs.h" 3
namespace std { 
# 19
template< class _ExecutionPolicy, class _ForwardIterator, class _Tp, class _BinaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _Tp>  reduce(_ExecutionPolicy && __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op); 
# 24
template< class _ExecutionPolicy, class _ForwardIterator, class _Tp> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _Tp>  reduce(_ExecutionPolicy && __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init); 
# 28
template< class _ExecutionPolicy, class _ForwardIterator> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, typename iterator_traits< _ForwardIterator> ::value_type>  reduce(_ExecutionPolicy && __exec, _ForwardIterator __first, _ForwardIterator __last); 
# 33
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _Tp>  transform_reduce(_ExecutionPolicy && __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init); 
# 38
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp, class _BinaryOperation1, class 
# 39
_BinaryOperation2> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _Tp>  
# 38
transform_reduce(_ExecutionPolicy && __exec, _ForwardIterator1 __first1, _ForwardIterator1 __last1, _ForwardIterator2 __first2, _Tp __init, _BinaryOperation1 __binary_op1, _BinaryOperation2 __binary_op2); 
# 45
template< class _ExecutionPolicy, class _ForwardIterator, class _Tp, class _BinaryOperation, class _UnaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _Tp>  transform_reduce(_ExecutionPolicy && __exec, _ForwardIterator __first, _ForwardIterator __last, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op); 
# 52
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  exclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init); 
# 57
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp, class _BinaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  exclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init, _BinaryOperation __binary_op); 
# 64
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  inclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result); 
# 69
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  inclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op); 
# 74
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp, class _BinaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  inclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _Tp __init); 
# 81
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _Tp, class _BinaryOperation, class 
# 82
_UnaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  
# 81
transform_exclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _Tp __init, _BinaryOperation __binary_op, _UnaryOperation __unary_op); 
# 90
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryOperation, class 
# 91
_UnaryOperation, class _Tp> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  
# 90
transform_inclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _UnaryOperation __unary_op, _Tp __init); 
# 97
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _UnaryOperation, class 
# 98
_BinaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  
# 97
transform_inclusive_scan(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __result, _BinaryOperation __binary_op, _UnaryOperation __unary_op); 
# 105
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2, class _BinaryOperation> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  adjacent_difference(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first, _BinaryOperation op); 
# 110
template< class _ExecutionPolicy, class _ForwardIterator1, class _ForwardIterator2> __pstl::__internal::__enable_if_execution_policy< _ExecutionPolicy, _ForwardIterator2>  adjacent_difference(_ExecutionPolicy && __exec, _ForwardIterator1 __first, _ForwardIterator1 __last, _ForwardIterator2 __d_first); 
# 115
}
# 35 "/usr/include/c++/11/bits/random.tcc" 3
namespace std __attribute((__visibility__("default"))) { 
# 41
namespace __detail { 
# 49
template< class _Tp, _Tp __m, _Tp __a, _Tp __c> _Tp 
# 52
_Mod< _Tp, __m, __a, __c, false, true> ::__calc(_Tp __x) 
# 53
{ 
# 54
if (__a == 1) { 
# 55
__x %= __m; } else 
# 57
{ 
# 58
static const _Tp __q = (__m / __a); 
# 59
static const _Tp __r = (__m % __a); 
# 61
_Tp __t1 = __a * (__x % __q); 
# 62
_Tp __t2 = __r * (__x / __q); 
# 63
if (__t1 >= __t2) { 
# 64
__x = (__t1 - __t2); } else { 
# 66
__x = ((__m - __t2) + __t1); }  
# 67
}  
# 69
if (__c != 0) 
# 70
{ 
# 71
const _Tp __d = __m - __x; 
# 72
if (__d > __c) { 
# 73
__x += __c; } else { 
# 75
__x = (__c - __d); }  
# 76
}  
# 77
return __x; 
# 78
} 
# 80
template< class _InputIterator, class _OutputIterator, class 
# 81
_Tp> _OutputIterator 
# 83
__normalize(_InputIterator __first, _InputIterator __last, _OutputIterator 
# 84
__result, const _Tp &__factor) 
# 85
{ 
# 86
for (; __first != __last; (++__first), (++__result)) { 
# 87
(*__result) = ((*__first) / __factor); }  
# 88
return __result; 
# 89
} 
# 91
}
# 94
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr inline _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::multiplier; 
# 98
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr inline _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::increment; 
# 102
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr inline _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::modulus; 
# 106
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> constexpr inline _UIntType linear_congruential_engine< _UIntType, __a, __c, __m> ::default_seed; 
# 114
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> void 
# 117
linear_congruential_engine< _UIntType, __a, __c, __m> ::seed(result_type __s) 
# 118
{ 
# 119
if ((__detail::__mod< _UIntType, __m> (__c) == 0) && (__detail::__mod< _UIntType, __m> (__s) == 0)) { 
# 121
(_M_x) = 1; } else { 
# 123
(_M_x) = __detail::__mod< _UIntType, __m> (__s); }  
# 124
} 
# 129
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m> 
# 130
template< class _Sseq> auto 
# 133
linear_congruential_engine< _UIntType, __a, __c, __m> ::seed(_Sseq &__q)->_If_seed_seq< _Sseq>  
# 135
{ 
# 136
const _UIntType __k0 = (__m == 0) ? std::template numeric_limits< _UIntType> ::digits : std::__lg(__m); 
# 138
const _UIntType __k = (__k0 + 31) / 32; 
# 139
uint_least32_t __arr[__k + 3]; 
# 140
__q.generate(__arr + 0, (__arr + __k) + 3); 
# 141
_UIntType __factor = (1U); 
# 142
_UIntType __sum = (0U); 
# 143
for (size_t __j = (0); __j < __k; ++__j) 
# 144
{ 
# 145
__sum += ((__arr[__j + (3)]) * __factor); 
# 146
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 147
}  
# 148
seed(__sum); 
# 149
} 
# 151
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class 
# 152
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 154
operator<<(basic_ostream< _CharT, _Traits>  &__os, const linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 156
__lcr) 
# 157
{ 
# 158
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 160
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 161
const _CharT __fill = __os.fill(); 
# 162
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 163
__os.fill(__os.widen(' ')); 
# 165
__os << (__lcr._M_x); 
# 167
__os.flags(__flags); 
# 168
__os.fill(__fill); 
# 169
return __os; 
# 170
} 
# 172
template< class _UIntType, _UIntType __a, _UIntType __c, _UIntType __m, class 
# 173
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 175
operator>>(basic_istream< _CharT, _Traits>  &__is, linear_congruential_engine< _UIntType, __a, __c, __m>  &
# 176
__lcr) 
# 177
{ 
# 178
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 180
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 181
__is.flags(__ios_base::dec); 
# 183
__is >> (__lcr._M_x); 
# 185
__is.flags(__flags); 
# 186
return __is; 
# 187
} 
# 190
template< class _UIntType, size_t 
# 191
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 192
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 193
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 194
__f> constexpr inline size_t 
# 190
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::word_size; 
# 199
template< class _UIntType, size_t 
# 200
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 201
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 202
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 203
__f> constexpr inline size_t 
# 199
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::state_size; 
# 208
template< class _UIntType, size_t 
# 209
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 210
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 211
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 212
__f> constexpr inline size_t 
# 208
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::shift_size; 
# 217
template< class _UIntType, size_t 
# 218
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 219
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 220
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 221
__f> constexpr inline size_t 
# 217
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::mask_bits; 
# 226
template< class _UIntType, size_t 
# 227
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 228
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 229
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 230
__f> constexpr inline _UIntType 
# 226
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::xor_mask; 
# 235
template< class _UIntType, size_t 
# 236
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 237
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 238
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 239
__f> constexpr inline size_t 
# 235
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_u; 
# 244
template< class _UIntType, size_t 
# 245
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 246
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 247
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 248
__f> constexpr inline _UIntType 
# 244
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_d; 
# 253
template< class _UIntType, size_t 
# 254
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 255
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 256
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 257
__f> constexpr inline size_t 
# 253
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_s; 
# 262
template< class _UIntType, size_t 
# 263
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 264
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 265
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 266
__f> constexpr inline _UIntType 
# 262
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_b; 
# 271
template< class _UIntType, size_t 
# 272
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 273
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 274
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 275
__f> constexpr inline size_t 
# 271
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_t; 
# 280
template< class _UIntType, size_t 
# 281
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 282
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 283
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 284
__f> constexpr inline _UIntType 
# 280
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_c; 
# 289
template< class _UIntType, size_t 
# 290
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 291
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 292
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 293
__f> constexpr inline size_t 
# 289
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::tempering_l; 
# 298
template< class _UIntType, size_t 
# 299
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 300
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 301
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 302
__f> constexpr inline _UIntType 
# 298
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::initialization_multiplier; 
# 308
template< class _UIntType, size_t 
# 309
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 310
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 311
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 312
__f> constexpr inline _UIntType 
# 308
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::default_seed; 
# 317
template< class _UIntType, size_t 
# 318
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 319
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 320
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 321
__f> void 
# 325
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::seed(result_type __sd) 
# 326
{ 
# 327
((_M_x)[0]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sd); 
# 330
for (size_t __i = (1); __i < state_size; ++__i) 
# 331
{ 
# 332
_UIntType __x = (_M_x)[__i - (1)]; 
# 333
__x ^= (__x >> (__w - (2))); 
# 334
__x *= __f; 
# 335
__x += __detail::__mod< _UIntType, __n> (__i); 
# 336
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__x); 
# 338
}  
# 339
(_M_p) = state_size; 
# 340
} 
# 342
template< class _UIntType, size_t 
# 343
__w, size_t __n, size_t __m, size_t __r, _UIntType 
# 344
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 345
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 346
__f> 
# 347
template< class _Sseq> auto 
# 351
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::seed(_Sseq &__q)->_If_seed_seq< _Sseq>  
# 353
{ 
# 354
const _UIntType __upper_mask = ((~_UIntType()) << __r); 
# 355
const size_t __k = ((__w + (31)) / (32)); 
# 356
uint_least32_t __arr[__n * __k]; 
# 357
__q.generate(__arr + 0, __arr + (__n * __k)); 
# 359
bool __zero = true; 
# 360
for (size_t __i = (0); __i < state_size; ++__i) 
# 361
{ 
# 362
_UIntType __factor = (1U); 
# 363
_UIntType __sum = (0U); 
# 364
for (size_t __j = (0); __j < __k; ++__j) 
# 365
{ 
# 366
__sum += ((__arr[(__k * __i) + __j]) * __factor); 
# 367
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 368
}  
# 369
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 372
if (__zero) 
# 373
{ 
# 374
if (__i == (0)) 
# 375
{ 
# 376
if ((((_M_x)[0]) & __upper_mask) != 0U) { 
# 377
__zero = false; }  
# 378
} else { 
# 379
if (((_M_x)[__i]) != 0U) { 
# 380
__zero = false; }  }  
# 381
}  
# 382
}  
# 383
if (__zero) { 
# 384
((_M_x)[0]) = __detail::template _Shift< _UIntType, __w - (1)> ::__value; }  
# 385
(_M_p) = state_size; 
# 386
} 
# 388
template< class _UIntType, size_t __w, size_t 
# 389
__n, size_t __m, size_t __r, _UIntType 
# 390
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 391
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 392
__f> void 
# 396
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::_M_gen_rand() 
# 397
{ 
# 398
const _UIntType __upper_mask = ((~_UIntType()) << __r); 
# 399
const _UIntType __lower_mask = (~__upper_mask); 
# 401
for (size_t __k = (0); __k < (__n - __m); ++__k) 
# 402
{ 
# 403
_UIntType __y = (((_M_x)[__k]) & __upper_mask) | (((_M_x)[__k + (1)]) & __lower_mask); 
# 405
((_M_x)[__k]) = ((((_M_x)[__k + __m]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 407
}  
# 409
for (size_t __k = (__n - __m); __k < (__n - (1)); ++__k) 
# 410
{ 
# 411
_UIntType __y = (((_M_x)[__k]) & __upper_mask) | (((_M_x)[__k + (1)]) & __lower_mask); 
# 413
((_M_x)[__k]) = ((((_M_x)[__k + (__m - __n)]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 415
}  
# 417
_UIntType __y = ((((_M_x)[__n - (1)]) & __upper_mask) | (((_M_x)[0]) & __lower_mask)); 
# 419
((_M_x)[__n - (1)]) = ((((_M_x)[__m - (1)]) ^ (__y >> 1)) ^ ((__y & 1) ? __a : 0)); 
# 421
(_M_p) = (0); 
# 422
} 
# 424
template< class _UIntType, size_t __w, size_t 
# 425
__n, size_t __m, size_t __r, _UIntType 
# 426
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 427
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 428
__f> void 
# 432
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::discard(unsigned long long __z) 
# 433
{ 
# 434
while (__z > (state_size - (_M_p))) 
# 435
{ 
# 436
__z -= (state_size - (_M_p)); 
# 437
_M_gen_rand(); 
# 438
}  
# 439
(_M_p) += __z; 
# 440
} 
# 442
template< class _UIntType, size_t __w, size_t 
# 443
__n, size_t __m, size_t __r, _UIntType 
# 444
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 445
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 446
__f> typename mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::result_type 
# 452
mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f> ::operator()() 
# 453
{ 
# 455
if ((_M_p) >= state_size) { 
# 456
_M_gen_rand(); }  
# 459
result_type __z = (_M_x)[(_M_p)++]; 
# 460
__z ^= ((__z >> __u) & __d); 
# 461
__z ^= ((__z << __s) & __b); 
# 462
__z ^= ((__z << __t) & __c); 
# 463
__z ^= (__z >> __l); 
# 465
return __z; 
# 466
} 
# 468
template< class _UIntType, size_t __w, size_t 
# 469
__n, size_t __m, size_t __r, _UIntType 
# 470
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 471
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 472
__f, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 474
operator<<(basic_ostream< _CharT, _Traits>  &__os, const mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 476
__x) 
# 477
{ 
# 478
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 480
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 481
const _CharT __fill = __os.fill(); 
# 482
const _CharT __space = __os.widen(' '); 
# 483
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 484
__os.fill(__space); 
# 486
for (size_t __i = (0); __i < __n; ++__i) { 
# 487
(__os << ((__x._M_x)[__i])) << __space; }  
# 488
__os << (__x._M_p); 
# 490
__os.flags(__flags); 
# 491
__os.fill(__fill); 
# 492
return __os; 
# 493
} 
# 495
template< class _UIntType, size_t __w, size_t 
# 496
__n, size_t __m, size_t __r, _UIntType 
# 497
__a, size_t __u, _UIntType __d, size_t __s, _UIntType 
# 498
__b, size_t __t, _UIntType __c, size_t __l, _UIntType 
# 499
__f, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 501
operator>>(basic_istream< _CharT, _Traits>  &__is, mersenne_twister_engine< _UIntType, __w, __n, __m, __r, __a, __u, __d, __s, __b, __t, __c, __l, __f>  &
# 503
__x) 
# 504
{ 
# 505
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 507
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 508
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 510
for (size_t __i = (0); __i < __n; ++__i) { 
# 511
__is >> ((__x._M_x)[__i]); }  
# 512
__is >> (__x._M_p); 
# 514
__is.flags(__flags); 
# 515
return __is; 
# 516
} 
# 519
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr inline size_t subtract_with_carry_engine< _UIntType, __w, __s, __r> ::word_size; 
# 523
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr inline size_t subtract_with_carry_engine< _UIntType, __w, __s, __r> ::short_lag; 
# 527
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr inline size_t subtract_with_carry_engine< _UIntType, __w, __s, __r> ::long_lag; 
# 531
template< class _UIntType, size_t __w, size_t __s, size_t __r> constexpr inline _UIntType subtract_with_carry_engine< _UIntType, __w, __s, __r> ::default_seed; 
# 535
template< class _UIntType, size_t __w, size_t __s, size_t __r> void 
# 538
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::seed(result_type __value) 
# 539
{ 
# 541
linear_congruential_engine< result_type, 40014U, 0U, 2147483563U>  __lcg((__value == 0U) ? default_seed : __value); 
# 543
const size_t __n = ((__w + (31)) / (32)); 
# 545
for (size_t __i = (0); __i < long_lag; ++__i) 
# 546
{ 
# 547
_UIntType __sum = (0U); 
# 548
_UIntType __factor = (1U); 
# 549
for (size_t __j = (0); __j < __n; ++__j) 
# 550
{ 
# 551
__sum += (__detail::__mod< uint_least32_t, __detail::_Shift< unsigned, 32> ::__value> (__lcg()) * __factor); 
# 554
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 555
}  
# 556
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 558
}  
# 559
(_M_carry) = ((((_M_x)[long_lag - (1)]) == 0) ? 1 : 0); 
# 560
(_M_p) = (0); 
# 561
} 
# 563
template< class _UIntType, size_t __w, size_t __s, size_t __r> 
# 564
template< class _Sseq> auto 
# 567
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::seed(_Sseq &__q)->_If_seed_seq< _Sseq>  
# 569
{ 
# 570
const size_t __k = ((__w + (31)) / (32)); 
# 571
uint_least32_t __arr[__r * __k]; 
# 572
__q.generate(__arr + 0, __arr + (__r * __k)); 
# 574
for (size_t __i = (0); __i < long_lag; ++__i) 
# 575
{ 
# 576
_UIntType __sum = (0U); 
# 577
_UIntType __factor = (1U); 
# 578
for (size_t __j = (0); __j < __k; ++__j) 
# 579
{ 
# 580
__sum += ((__arr[(__k * __i) + __j]) * __factor); 
# 581
__factor *= __detail::template _Shift< _UIntType, 32> ::__value; 
# 582
}  
# 583
((_M_x)[__i]) = __detail::__mod< _UIntType, __detail::_Shift< _UIntType, __w> ::__value> (__sum); 
# 585
}  
# 586
(_M_carry) = ((((_M_x)[long_lag - (1)]) == 0) ? 1 : 0); 
# 587
(_M_p) = (0); 
# 588
} 
# 590
template< class _UIntType, size_t __w, size_t __s, size_t __r> typename subtract_with_carry_engine< _UIntType, __w, __s, __r> ::result_type 
# 594
subtract_with_carry_engine< _UIntType, __w, __s, __r> ::operator()() 
# 595
{ 
# 597
long __ps = ((_M_p) - short_lag); 
# 598
if (__ps < (0)) { 
# 599
__ps += long_lag; }  
# 604
_UIntType __xi; 
# 605
if (((_M_x)[__ps]) >= (((_M_x)[_M_p]) + (_M_carry))) 
# 606
{ 
# 607
__xi = ((((_M_x)[__ps]) - ((_M_x)[_M_p])) - (_M_carry)); 
# 608
(_M_carry) = 0; 
# 609
} else 
# 611
{ 
# 612
__xi = (((__detail::template _Shift< _UIntType, __w> ::__value - ((_M_x)[_M_p])) - (_M_carry)) + ((_M_x)[__ps])); 
# 614
(_M_carry) = 1; 
# 615
}  
# 616
((_M_x)[_M_p]) = __xi; 
# 619
if ((++(_M_p)) >= long_lag) { 
# 620
(_M_p) = (0); }  
# 622
return __xi; 
# 623
} 
# 625
template< class _UIntType, size_t __w, size_t __s, size_t __r, class 
# 626
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 628
operator<<(basic_ostream< _CharT, _Traits>  &__os, const subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 630
__x) 
# 631
{ 
# 632
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 634
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 635
const _CharT __fill = __os.fill(); 
# 636
const _CharT __space = __os.widen(' '); 
# 637
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 638
__os.fill(__space); 
# 640
for (size_t __i = (0); __i < __r; ++__i) { 
# 641
(__os << ((__x._M_x)[__i])) << __space; }  
# 642
((__os << (__x._M_carry)) << __space) << (__x._M_p); 
# 644
__os.flags(__flags); 
# 645
__os.fill(__fill); 
# 646
return __os; 
# 647
} 
# 649
template< class _UIntType, size_t __w, size_t __s, size_t __r, class 
# 650
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 652
operator>>(basic_istream< _CharT, _Traits>  &__is, subtract_with_carry_engine< _UIntType, __w, __s, __r>  &
# 653
__x) 
# 654
{ 
# 655
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 657
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 658
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 660
for (size_t __i = (0); __i < __r; ++__i) { 
# 661
__is >> ((__x._M_x)[__i]); }  
# 662
__is >> (__x._M_carry); 
# 663
__is >> (__x._M_p); 
# 665
__is.flags(__flags); 
# 666
return __is; 
# 667
} 
# 670
template< class _RandomNumberEngine, size_t __p, size_t __r> constexpr inline size_t discard_block_engine< _RandomNumberEngine, __p, __r> ::block_size; 
# 674
template< class _RandomNumberEngine, size_t __p, size_t __r> constexpr inline size_t discard_block_engine< _RandomNumberEngine, __p, __r> ::used_block; 
# 678
template< class _RandomNumberEngine, size_t __p, size_t __r> typename discard_block_engine< _RandomNumberEngine, __p, __r> ::result_type 
# 682
discard_block_engine< _RandomNumberEngine, __p, __r> ::operator()() 
# 683
{ 
# 684
if ((_M_n) >= used_block) 
# 685
{ 
# 686
(_M_b).discard(block_size - (_M_n)); 
# 687
(_M_n) = (0); 
# 688
}  
# 689
++(_M_n); 
# 690
return (_M_b)(); 
# 691
} 
# 693
template< class _RandomNumberEngine, size_t __p, size_t __r, class 
# 694
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 696
operator<<(basic_ostream< _CharT, _Traits>  &__os, const discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 698
__x) 
# 699
{ 
# 700
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 702
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 703
const _CharT __fill = __os.fill(); 
# 704
const _CharT __space = __os.widen(' '); 
# 705
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 706
__os.fill(__space); 
# 708
((__os << __x.base()) << __space) << (__x._M_n); 
# 710
__os.flags(__flags); 
# 711
__os.fill(__fill); 
# 712
return __os; 
# 713
} 
# 715
template< class _RandomNumberEngine, size_t __p, size_t __r, class 
# 716
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 718
operator>>(basic_istream< _CharT, _Traits>  &__is, discard_block_engine< _RandomNumberEngine, __p, __r>  &
# 719
__x) 
# 720
{ 
# 721
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 723
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 724
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 726
(__is >> (__x._M_b)) >> (__x._M_n); 
# 728
__is.flags(__flags); 
# 729
return __is; 
# 730
} 
# 733
template< class _RandomNumberEngine, size_t __w, class _UIntType> typename independent_bits_engine< _RandomNumberEngine, __w, _UIntType> ::result_type 
# 737
independent_bits_engine< _RandomNumberEngine, __w, _UIntType> ::operator()() 
# 738
{ 
# 739
typedef typename _RandomNumberEngine::result_type _Eresult_type; 
# 740
const _Eresult_type __r = (((_M_b).max() - (_M_b).min()) < std::template numeric_limits< typename _RandomNumberEngine::result_type> ::max()) ? ((_M_b).max() - (_M_b).min()) + 1 : 0; 
# 743
const unsigned __edig = (std::template numeric_limits< typename _RandomNumberEngine::result_type> ::digits); 
# 744
const unsigned __m = (__r) ? std::__lg(__r) : __edig; 
# 747
typedef typename common_type< typename _RandomNumberEngine::result_type, result_type> ::type __ctype; 
# 748
const unsigned __cdig = (std::template numeric_limits< typename common_type< typename _RandomNumberEngine::result_type, result_type> ::type> ::digits); 
# 750
unsigned __n, __n0; 
# 751
__ctype __s0, __s1, __y0, __y1; 
# 753
for (size_t __i = (0); __i < (2); ++__i) 
# 754
{ 
# 755
__n = ((((__w + __m) - (1)) / __m) + __i); 
# 756
__n0 = (__n - (__w % __n)); 
# 757
const unsigned __w0 = __w / __n; 
# 759
__s0 = 0; 
# 760
__s1 = 0; 
# 761
if (__w0 < __cdig) 
# 762
{ 
# 763
__s0 = (((__ctype)1) << __w0); 
# 764
__s1 = (__s0 << 1); 
# 765
}  
# 767
__y0 = 0; 
# 768
__y1 = 0; 
# 769
if (__r) 
# 770
{ 
# 771
__y0 = (__s0 * (__r / __s0)); 
# 772
if (__s1) { 
# 773
__y1 = (__s1 * (__r / __s1)); }  
# 775
if ((__r - __y0) <= (__y0 / __n)) { 
# 776
break; }  
# 777
} else { 
# 779
break; }  
# 780
}  
# 782
result_type __sum = (0); 
# 783
for (size_t __k = (0); __k < __n0; ++__k) 
# 784
{ 
# 785
__ctype __u; 
# 786
do { 
# 787
__u = ((_M_b)() - (_M_b).min()); } 
# 788
while (__y0 && (__u >= __y0)); 
# 789
__sum = ((__s0 * __sum) + ((__s0) ? __u % __s0 : __u)); 
# 790
}  
# 791
for (size_t __k = __n0; __k < __n; ++__k) 
# 792
{ 
# 793
__ctype __u; 
# 794
do { 
# 795
__u = ((_M_b)() - (_M_b).min()); } 
# 796
while (__y1 && (__u >= __y1)); 
# 797
__sum = ((__s1 * __sum) + ((__s1) ? __u % __s1 : __u)); 
# 798
}  
# 799
return __sum; 
# 800
} 
# 803
template< class _RandomNumberEngine, size_t __k> constexpr inline size_t shuffle_order_engine< _RandomNumberEngine, __k> ::table_size; 
# 807
namespace __detail { 
# 810
template< class _Tp> constexpr bool 
# 812
__representable_as_double(_Tp __x) noexcept 
# 813
{ 
# 814
static_assert((numeric_limits< _Tp> ::is_integer), "");
# 815
static_assert((!numeric_limits< _Tp> ::is_signed), "");
# 817
return (__x <= (1ULL << 53)) || ((!(__x & 1)) && __detail::__representable_as_double(__x >> 1)); 
# 820
} 
# 823
template< class _Tp> constexpr bool 
# 825
__p1_representable_as_double(_Tp __x) noexcept 
# 826
{ 
# 827
static_assert((numeric_limits< _Tp> ::is_integer), "");
# 828
static_assert((!numeric_limits< _Tp> ::is_signed), "");
# 829
return (numeric_limits< _Tp> ::digits < 53) || (((bool)(__x + 1U)) && __detail::__representable_as_double(__x + 1U)); 
# 832
} 
# 833
}
# 835
template< class _RandomNumberEngine, size_t __k> typename shuffle_order_engine< _RandomNumberEngine, __k> ::result_type 
# 838
shuffle_order_engine< _RandomNumberEngine, __k> ::operator()() 
# 839
{ 
# 840
constexpr result_type __range = ((max)() - (min)()); 
# 841
size_t __j = __k; 
# 842
const result_type __y = (_M_y) - (min)(); 
# 844
if constexpr (__detail::__p1_representable_as_double(__range)) { 
# 845
__j *= (__y / (__range + (1.0))); } else { 
# 847
__j *= (__y / (__range + (1.0L))); }  
# 848
(_M_y) = ((_M_v)[__j]); 
# 849
((_M_v)[__j]) = (_M_b)(); 
# 851
return _M_y; 
# 852
} 
# 854
template< class _RandomNumberEngine, size_t __k, class 
# 855
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 857
operator<<(basic_ostream< _CharT, _Traits>  &__os, const shuffle_order_engine< _RandomNumberEngine, __k>  &
# 858
__x) 
# 859
{ 
# 860
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 862
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 863
const _CharT __fill = __os.fill(); 
# 864
const _CharT __space = __os.widen(' '); 
# 865
__os.flags((__ios_base::dec | __ios_base::fixed) | __ios_base::left); 
# 866
__os.fill(__space); 
# 868
__os << __x.base(); 
# 869
for (size_t __i = (0); __i < __k; ++__i) { 
# 870
(__os << __space) << ((__x._M_v)[__i]); }  
# 871
(__os << __space) << (__x._M_y); 
# 873
__os.flags(__flags); 
# 874
__os.fill(__fill); 
# 875
return __os; 
# 876
} 
# 878
template< class _RandomNumberEngine, size_t __k, class 
# 879
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 881
operator>>(basic_istream< _CharT, _Traits>  &__is, shuffle_order_engine< _RandomNumberEngine, __k>  &
# 882
__x) 
# 883
{ 
# 884
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 886
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 887
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 889
__is >> (__x._M_b); 
# 890
for (size_t __i = (0); __i < __k; ++__i) { 
# 891
__is >> ((__x._M_v)[__i]); }  
# 892
__is >> (__x._M_y); 
# 894
__is.flags(__flags); 
# 895
return __is; 
# 896
} 
# 899
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 901
operator<<(basic_ostream< _CharT, _Traits>  &__os, const uniform_int_distribution< _IntType>  &
# 902
__x) 
# 903
{ 
# 904
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 906
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 907
const _CharT __fill = __os.fill(); 
# 908
const _CharT __space = __os.widen(' '); 
# 909
__os.flags(__ios_base::scientific | __ios_base::left); 
# 910
__os.fill(__space); 
# 912
((__os << __x.a()) << __space) << __x.b(); 
# 914
__os.flags(__flags); 
# 915
__os.fill(__fill); 
# 916
return __os; 
# 917
} 
# 919
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 921
operator>>(basic_istream< _CharT, _Traits>  &__is, uniform_int_distribution< _IntType>  &
# 922
__x) 
# 923
{ 
# 924
using param_type = typename uniform_int_distribution< _IntType> ::param_type; 
# 926
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 928
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 929
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 931
_IntType __a, __b; 
# 932
if ((__is >> __a) >> __b) { 
# 933
__x.param(param_type(__a, __b)); }  
# 935
__is.flags(__flags); 
# 936
return __is; 
# 937
} 
# 940
template< class _RealType> 
# 941
template< class _ForwardIterator, class 
# 942
_UniformRandomNumberGenerator> void 
# 945
uniform_real_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 946
__urng, const param_type &
# 947
__p) 
# 948
{ 
# 951
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 952
auto __range = __p.b() - __p.a(); 
# 953
while (__f != __t) { 
# 954
(*(__f++)) = ((__aurng() * __range) + __p.a()); }  
# 955
} 
# 957
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 959
operator<<(basic_ostream< _CharT, _Traits>  &__os, const uniform_real_distribution< _RealType>  &
# 960
__x) 
# 961
{ 
# 962
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 964
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 965
const _CharT __fill = __os.fill(); 
# 966
const streamsize __precision = __os.precision(); 
# 967
const _CharT __space = __os.widen(' '); 
# 968
__os.flags(__ios_base::scientific | __ios_base::left); 
# 969
__os.fill(__space); 
# 970
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 972
((__os << __x.a()) << __space) << __x.b(); 
# 974
__os.flags(__flags); 
# 975
__os.fill(__fill); 
# 976
__os.precision(__precision); 
# 977
return __os; 
# 978
} 
# 980
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 982
operator>>(basic_istream< _CharT, _Traits>  &__is, uniform_real_distribution< _RealType>  &
# 983
__x) 
# 984
{ 
# 985
using param_type = typename uniform_real_distribution< _RealType> ::param_type; 
# 987
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 989
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 990
__is.flags(__ios_base::skipws); 
# 992
_RealType __a, __b; 
# 993
if ((__is >> __a) >> __b) { 
# 994
__x.param(param_type(__a, __b)); }  
# 996
__is.flags(__flags); 
# 997
return __is; 
# 998
} 
# 1001
template< class _ForwardIterator, class 
# 1002
_UniformRandomNumberGenerator> void 
# 1005
bernoulli_distribution::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1006
__urng, const param_type &
# 1007
__p) 
# 1008
{ 
# 1011
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1012
auto __limit = __p.p() * (__aurng.max() - __aurng.min()); 
# 1014
while (__f != __t) { 
# 1015
(*(__f++)) = ((__aurng() - __aurng.min()) < __limit); }  
# 1016
} 
# 1018
template< class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1020
operator<<(basic_ostream< _CharT, _Traits>  &__os, const bernoulli_distribution &
# 1021
__x) 
# 1022
{ 
# 1023
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1025
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1026
const _CharT __fill = __os.fill(); 
# 1027
const streamsize __precision = __os.precision(); 
# 1028
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1029
__os.fill(__os.widen(' ')); 
# 1030
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1032
__os << __x.p(); 
# 1034
__os.flags(__flags); 
# 1035
__os.fill(__fill); 
# 1036
__os.precision(__precision); 
# 1037
return __os; 
# 1038
} 
# 1041
template< class _IntType> 
# 1042
template< class _UniformRandomNumberGenerator> typename geometric_distribution< _IntType> ::result_type 
# 1045
geometric_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1046
__param) 
# 1047
{ 
# 1050
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1053
const double __thr = std::template numeric_limits< result_type> ::max() + __naf; 
# 1056
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1058
double __cand; 
# 1059
do { 
# 1060
__cand = std::floor(std::log((1.0) - __aurng()) / (__param._M_log_1_p)); } 
# 1061
while (__cand >= __thr); 
# 1063
return (result_type)(__cand + __naf); 
# 1064
} 
# 1066
template< class _IntType> 
# 1067
template< class _ForwardIterator, class 
# 1068
_UniformRandomNumberGenerator> void 
# 1071
geometric_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1072
__urng, const param_type &
# 1073
__param) 
# 1074
{ 
# 1078
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1081
const double __thr = std::template numeric_limits< result_type> ::max() + __naf; 
# 1084
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1086
while (__f != __t) 
# 1087
{ 
# 1088
double __cand; 
# 1089
do { 
# 1090
__cand = std::floor(std::log((1.0) - __aurng()) / (__param._M_log_1_p)); } 
# 1092
while (__cand >= __thr); 
# 1094
(*(__f++)) = (__cand + __naf); 
# 1095
}  
# 1096
} 
# 1098
template< class _IntType, class 
# 1099
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1101
operator<<(basic_ostream< _CharT, _Traits>  &__os, const geometric_distribution< _IntType>  &
# 1102
__x) 
# 1103
{ 
# 1104
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1106
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1107
const _CharT __fill = __os.fill(); 
# 1108
const streamsize __precision = __os.precision(); 
# 1109
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1110
__os.fill(__os.widen(' ')); 
# 1111
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1113
__os << __x.p(); 
# 1115
__os.flags(__flags); 
# 1116
__os.fill(__fill); 
# 1117
__os.precision(__precision); 
# 1118
return __os; 
# 1119
} 
# 1121
template< class _IntType, class 
# 1122
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1124
operator>>(basic_istream< _CharT, _Traits>  &__is, geometric_distribution< _IntType>  &
# 1125
__x) 
# 1126
{ 
# 1127
using param_type = typename geometric_distribution< _IntType> ::param_type; 
# 1128
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 1130
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1131
__is.flags(__ios_base::skipws); 
# 1133
double __p; 
# 1134
if (__is >> __p) { 
# 1135
__x.param((param_type)__p); }  
# 1137
__is.flags(__flags); 
# 1138
return __is; 
# 1139
} 
# 1142
template< class _IntType> 
# 1143
template< class _UniformRandomNumberGenerator> typename negative_binomial_distribution< _IntType> ::result_type 
# 1146
negative_binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng) 
# 1147
{ 
# 1148
const double __y = (_M_gd)(__urng); 
# 1151
poisson_distribution< result_type>  __poisson(__y); 
# 1152
return __poisson(__urng); 
# 1153
} 
# 1155
template< class _IntType> 
# 1156
template< class _UniformRandomNumberGenerator> typename negative_binomial_distribution< _IntType> ::result_type 
# 1159
negative_binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1160
__p) 
# 1161
{ 
# 1163
typedef gamma_distribution< double> ::param_type param_type; 
# 1165
const double __y = (_M_gd)(__urng, param_type(__p.k(), ((1.0) - __p.p()) / __p.p())); 
# 1168
poisson_distribution< result_type>  __poisson(__y); 
# 1169
return __poisson(__urng); 
# 1170
} 
# 1172
template< class _IntType> 
# 1173
template< class _ForwardIterator, class 
# 1174
_UniformRandomNumberGenerator> void 
# 1177
negative_binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1178
__urng) 
# 1179
{ 
# 1181
while (__f != __t) 
# 1182
{ 
# 1183
const double __y = (_M_gd)(__urng); 
# 1186
poisson_distribution< _IntType>  __poisson(__y); 
# 1187
(*(__f++)) = __poisson(__urng); 
# 1188
}  
# 1189
} 
# 1191
template< class _IntType> 
# 1192
template< class _ForwardIterator, class 
# 1193
_UniformRandomNumberGenerator> void 
# 1196
negative_binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1197
__urng, const param_type &
# 1198
__p) 
# 1199
{ 
# 1202
typename gamma_distribution< result_type> ::param_type __p2(__p.k(), ((1.0) - __p.p()) / __p.p()); 
# 1204
while (__f != __t) 
# 1205
{ 
# 1206
const double __y = (_M_gd)(__urng, __p2); 
# 1208
poisson_distribution< _IntType>  __poisson(__y); 
# 1209
(*(__f++)) = __poisson(__urng); 
# 1210
}  
# 1211
} 
# 1213
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1215
operator<<(basic_ostream< _CharT, _Traits>  &__os, const negative_binomial_distribution< _IntType>  &
# 1216
__x) 
# 1217
{ 
# 1218
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1220
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1221
const _CharT __fill = __os.fill(); 
# 1222
const streamsize __precision = __os.precision(); 
# 1223
const _CharT __space = __os.widen(' '); 
# 1224
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1225
__os.fill(__os.widen(' ')); 
# 1226
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1228
((((__os << __x.k()) << __space) << __x.p()) << __space) << (__x._M_gd); 
# 1231
__os.flags(__flags); 
# 1232
__os.fill(__fill); 
# 1233
__os.precision(__precision); 
# 1234
return __os; 
# 1235
} 
# 1237
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1239
operator>>(basic_istream< _CharT, _Traits>  &__is, negative_binomial_distribution< _IntType>  &
# 1240
__x) 
# 1241
{ 
# 1242
using param_type = typename negative_binomial_distribution< _IntType> ::param_type; 
# 1244
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 1246
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1247
__is.flags(__ios_base::skipws); 
# 1249
_IntType __k; 
# 1250
double __p; 
# 1251
if (((__is >> __k) >> __p) >> (__x._M_gd)) { 
# 1252
__x.param(param_type(__k, __p)); }  
# 1254
__is.flags(__flags); 
# 1255
return __is; 
# 1256
} 
# 1259
template< class _IntType> void 
# 1262
poisson_distribution< _IntType> ::param_type::_M_initialize() 
# 1263
{ 
# 1265
if ((_M_mean) >= (12)) 
# 1266
{ 
# 1267
const double __m = std::floor(_M_mean); 
# 1268
(_M_lm_thr) = std::log(_M_mean); 
# 1269
(_M_lfm) = std::lgamma(__m + (1)); 
# 1270
(_M_sm) = std::sqrt(__m); 
# 1272
const double __pi_4 = ((0.78539816339744830963L)); 
# 1273
const double __dx = std::sqrt(((2) * __m) * std::log(((32) * __m) / __pi_4)); 
# 1275
(_M_d) = std::round(std::max< double> ((6.0), std::min(__m, __dx))); 
# 1276
const double __cx = (((2) * __m) + (_M_d)); 
# 1277
(_M_scx) = std::sqrt(__cx / (2)); 
# 1278
(_M_1cx) = ((1) / __cx); 
# 1280
(_M_c2b) = (std::sqrt(__pi_4 * __cx) * std::exp(_M_1cx)); 
# 1281
(_M_cb) = ((((2) * __cx) * std::exp(((-(_M_d)) * (_M_1cx)) * ((1) + ((_M_d) / (2))))) / (_M_d)); 
# 1283
} else { 
# 1286
(_M_lm_thr) = std::exp(-(_M_mean)); }  
# 1287
} 
# 1299 "/usr/include/c++/11/bits/random.tcc" 3
template< class _IntType> 
# 1300
template< class _UniformRandomNumberGenerator> typename poisson_distribution< _IntType> ::result_type 
# 1303
poisson_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1304
__param) 
# 1305
{ 
# 1307
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1309
if (__param.mean() >= 12) 
# 1310
{ 
# 1311
double __x; 
# 1314
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1316
const double __thr = std::template numeric_limits< _IntType> ::max() + __naf; 
# 1319
const double __m = std::floor(__param.mean()); 
# 1321
const double __spi_2 = ((1.2533141373155002512L)); 
# 1322
const double __c1 = (__param._M_sm) * __spi_2; 
# 1323
const double __c2 = (__param._M_c2b) + __c1; 
# 1324
const double __c3 = (__c2 + (1)); 
# 1325
const double __c4 = (__c3 + (1)); 
# 1327
const double __178 = ((0.012820512820512820513L)); 
# 1329
const double __e178 = ((1.0129030479320018583L)); 
# 1330
const double __c5 = (__c4 + __e178); 
# 1331
const double __c = (__param._M_cb) + __c5; 
# 1332
const double __2cx = (2 * (((2) * __m) + (__param._M_d))); 
# 1334
bool __reject = true; 
# 1335
do 
# 1336
{ 
# 1337
const double __u = __c * __aurng(); 
# 1338
const double __e = (-std::log((1.0) - __aurng())); 
# 1340
double __w = (0.0); 
# 1342
if (__u <= __c1) 
# 1343
{ 
# 1344
const double __n = (_M_nd)(__urng); 
# 1345
const double __y = ((-std::abs(__n)) * (__param._M_sm)) - 1; 
# 1346
__x = std::floor(__y); 
# 1347
__w = (((-__n) * __n) / (2)); 
# 1348
if (__x < (-__m)) { 
# 1349
continue; }  
# 1350
} else { 
# 1351
if (__u <= __c2) 
# 1352
{ 
# 1353
const double __n = (_M_nd)(__urng); 
# 1354
const double __y = 1 + (std::abs(__n) * (__param._M_scx)); 
# 1355
__x = std::ceil(__y); 
# 1356
__w = ((__y * ((2) - __y)) * (__param._M_1cx)); 
# 1357
if (__x > (__param._M_d)) { 
# 1358
continue; }  
# 1359
} else { 
# 1360
if (__u <= __c3) { 
# 1363
__x = (-1); } else { 
# 1364
if (__u <= __c4) { 
# 1365
__x = (0); } else { 
# 1366
if (__u <= __c5) 
# 1367
{ 
# 1368
__x = (1); 
# 1370
__w = __178; 
# 1371
} else 
# 1373
{ 
# 1374
const double __v = (-std::log((1.0) - __aurng())); 
# 1375
const double __y = ((__param._M_d) + ((__v * __2cx) / (__param._M_d))); 
# 1377
__x = std::ceil(__y); 
# 1378
__w = (((-(__param._M_d)) * (__param._M_1cx)) * ((1) + (__y / (2)))); 
# 1379
}  }  }  }  }  
# 1381
__reject = (((__w - __e) - (__x * (__param._M_lm_thr))) > ((__param._M_lfm) - std::lgamma((__x + __m) + (1)))); 
# 1384
__reject |= ((__x + __m) >= __thr); 
# 1386
}  while (__reject); 
# 1388
return (result_type)((__x + __m) + __naf); 
# 1389
} else 
# 1392
{ 
# 1393
_IntType __x = (0); 
# 1394
double __prod = (1.0); 
# 1396
do 
# 1397
{ 
# 1398
__prod *= __aurng(); 
# 1399
__x += 1; 
# 1400
} 
# 1401
while (__prod > (__param._M_lm_thr)); 
# 1403
return __x - 1; 
# 1404
}  
# 1405
} 
# 1407
template< class _IntType> 
# 1408
template< class _ForwardIterator, class 
# 1409
_UniformRandomNumberGenerator> void 
# 1412
poisson_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1413
__urng, const param_type &
# 1414
__param) 
# 1415
{ 
# 1418
while (__f != __t) { 
# 1419
(*(__f++)) = this->operator()(__urng, __param); }  
# 1420
} 
# 1422
template< class _IntType, class 
# 1423
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1425
operator<<(basic_ostream< _CharT, _Traits>  &__os, const poisson_distribution< _IntType>  &
# 1426
__x) 
# 1427
{ 
# 1428
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1430
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1431
const _CharT __fill = __os.fill(); 
# 1432
const streamsize __precision = __os.precision(); 
# 1433
const _CharT __space = __os.widen(' '); 
# 1434
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1435
__os.fill(__space); 
# 1436
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1438
((__os << __x.mean()) << __space) << (__x._M_nd); 
# 1440
__os.flags(__flags); 
# 1441
__os.fill(__fill); 
# 1442
__os.precision(__precision); 
# 1443
return __os; 
# 1444
} 
# 1446
template< class _IntType, class 
# 1447
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1449
operator>>(basic_istream< _CharT, _Traits>  &__is, poisson_distribution< _IntType>  &
# 1450
__x) 
# 1451
{ 
# 1452
using param_type = typename poisson_distribution< _IntType> ::param_type; 
# 1453
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 1455
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1456
__is.flags(__ios_base::skipws); 
# 1458
double __mean; 
# 1459
if ((__is >> __mean) >> (__x._M_nd)) { 
# 1460
__x.param((param_type)__mean); }  
# 1462
__is.flags(__flags); 
# 1463
return __is; 
# 1464
} 
# 1467
template< class _IntType> void 
# 1470
binomial_distribution< _IntType> ::param_type::_M_initialize() 
# 1471
{ 
# 1472
const double __p12 = ((_M_p) <= (0.5)) ? _M_p : ((1.0) - (_M_p)); 
# 1474
(_M_easy) = true; 
# 1477
if (((_M_t) * __p12) >= 8) 
# 1478
{ 
# 1479
(_M_easy) = false; 
# 1480
const double __np = std::floor((_M_t) * __p12); 
# 1481
const double __pa = __np / (_M_t); 
# 1482
const double __1p = ((1) - __pa); 
# 1484
const double __pi_4 = ((0.78539816339744830963L)); 
# 1485
const double __d1x = std::sqrt((__np * __1p) * std::log(((32) * __np) / (((81) * __pi_4) * __1p))); 
# 1488
(_M_d1) = std::round(std::max< double> ((1.0), __d1x)); 
# 1489
const double __d2x = std::sqrt((__np * __1p) * std::log(((32 * (_M_t)) * __1p) / (__pi_4 * __pa))); 
# 1492
(_M_d2) = std::round(std::max< double> ((1.0), __d2x)); 
# 1495
const double __spi_2 = ((1.2533141373155002512L)); 
# 1496
(_M_s1) = (std::sqrt(__np * __1p) * ((1) + ((_M_d1) / ((4) * __np)))); 
# 1497
(_M_s2) = (std::sqrt(__np * __1p) * (1 + ((_M_d2) / ((4 * (_M_t)) * __1p)))); 
# 1498
(_M_c) = (((2) * (_M_d1)) / __np); 
# 1499
(_M_a1) = ((std::exp(_M_c) * (_M_s1)) * __spi_2); 
# 1500
const double __a12 = (_M_a1) + ((_M_s2) * __spi_2); 
# 1501
const double __s1s = (_M_s1) * (_M_s1); 
# 1502
(_M_a123) = (__a12 + ((((std::exp((_M_d1) / ((_M_t) * __1p)) * 2) * __s1s) / (_M_d1)) * std::exp(((-(_M_d1)) * (_M_d1)) / ((2) * __s1s)))); 
# 1505
const double __s2s = (_M_s2) * (_M_s2); 
# 1506
(_M_s) = ((_M_a123) + ((((2) * __s2s) / (_M_d2)) * std::exp(((-(_M_d2)) * (_M_d2)) / ((2) * __s2s)))); 
# 1508
(_M_lf) = (std::lgamma(__np + (1)) + std::lgamma(((_M_t) - __np) + 1)); 
# 1510
(_M_lp1p) = std::log(__pa / __1p); 
# 1512
(_M_q) = (-std::log((1) - ((__p12 - __pa) / __1p))); 
# 1513
} else { 
# 1516
(_M_q) = (-std::log((1) - __p12)); }  
# 1517
} 
# 1519
template< class _IntType> 
# 1520
template< class _UniformRandomNumberGenerator> typename binomial_distribution< _IntType> ::result_type 
# 1523
binomial_distribution< _IntType> ::_M_waiting(_UniformRandomNumberGenerator &__urng, _IntType 
# 1524
__t, double __q) 
# 1525
{ 
# 1526
_IntType __x = (0); 
# 1527
double __sum = (0.0); 
# 1529
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1531
do 
# 1532
{ 
# 1533
if (__t == __x) { 
# 1534
return __x; }  
# 1535
const double __e = (-std::log((1.0) - __aurng())); 
# 1536
__sum += (__e / (__t - __x)); 
# 1537
__x += 1; 
# 1538
} 
# 1539
while (__sum <= __q); 
# 1541
return __x - 1; 
# 1542
} 
# 1554 "/usr/include/c++/11/bits/random.tcc" 3
template< class _IntType> 
# 1555
template< class _UniformRandomNumberGenerator> typename binomial_distribution< _IntType> ::result_type 
# 1558
binomial_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1559
__param) 
# 1560
{ 
# 1561
result_type __ret; 
# 1562
const _IntType __t = __param.t(); 
# 1563
const double __p = __param.p(); 
# 1564
const double __p12 = ((__p <= (0.5)) ? __p : ((1.0) - __p)); 
# 1566
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 1569
if (!(__param._M_easy)) 
# 1570
{ 
# 1571
double __x; 
# 1574
const double __naf = (((1) - std::numeric_limits< double> ::epsilon()) / (2)); 
# 1576
const double __thr = std::template numeric_limits< _IntType> ::max() + __naf; 
# 1579
const double __np = std::floor(__t * __p12); 
# 1582
const double __spi_2 = ((1.2533141373155002512L)); 
# 1583
const double __a1 = ((__param._M_a1)); 
# 1584
const double __a12 = __a1 + ((__param._M_s2) * __spi_2); 
# 1585
const double __a123 = ((__param._M_a123)); 
# 1586
const double __s1s = (__param._M_s1) * (__param._M_s1); 
# 1587
const double __s2s = (__param._M_s2) * (__param._M_s2); 
# 1589
bool __reject; 
# 1590
do 
# 1591
{ 
# 1592
const double __u = (__param._M_s) * __aurng(); 
# 1594
double __v; 
# 1596
if (__u <= __a1) 
# 1597
{ 
# 1598
const double __n = (_M_nd)(__urng); 
# 1599
const double __y = (__param._M_s1) * std::abs(__n); 
# 1600
__reject = (__y >= (__param._M_d1)); 
# 1601
if (!__reject) 
# 1602
{ 
# 1603
const double __e = (-std::log((1.0) - __aurng())); 
# 1604
__x = std::floor(__y); 
# 1605
__v = (((-__e) - ((__n * __n) / (2))) + (__param._M_c)); 
# 1606
}  
# 1607
} else { 
# 1608
if (__u <= __a12) 
# 1609
{ 
# 1610
const double __n = (_M_nd)(__urng); 
# 1611
const double __y = (__param._M_s2) * std::abs(__n); 
# 1612
__reject = (__y >= (__param._M_d2)); 
# 1613
if (!__reject) 
# 1614
{ 
# 1615
const double __e = (-std::log((1.0) - __aurng())); 
# 1616
__x = std::floor(-__y); 
# 1617
__v = ((-__e) - ((__n * __n) / (2))); 
# 1618
}  
# 1619
} else { 
# 1620
if (__u <= __a123) 
# 1621
{ 
# 1622
const double __e1 = (-std::log((1.0) - __aurng())); 
# 1623
const double __e2 = (-std::log((1.0) - __aurng())); 
# 1625
const double __y = ((__param._M_d1) + ((((2) * __s1s) * __e1) / (__param._M_d1))); 
# 1627
__x = std::floor(__y); 
# 1628
__v = ((-__e2) + ((__param._M_d1) * ((1 / (__t - __np)) - (__y / ((2) * __s1s))))); 
# 1630
__reject = false; 
# 1631
} else 
# 1633
{ 
# 1634
const double __e1 = (-std::log((1.0) - __aurng())); 
# 1635
const double __e2 = (-std::log((1.0) - __aurng())); 
# 1637
const double __y = ((__param._M_d2) + ((((2) * __s2s) * __e1) / (__param._M_d2))); 
# 1639
__x = std::floor(-__y); 
# 1640
__v = ((-__e2) - (((__param._M_d2) * __y) / ((2) * __s2s))); 
# 1641
__reject = false; 
# 1642
}  }  }  
# 1644
__reject = ((__reject || (__x < (-__np))) || (__x > (__t - __np))); 
# 1645
if (!__reject) 
# 1646
{ 
# 1647
const double __lfx = std::lgamma((__np + __x) + (1)) + std::lgamma((__t - (__np + __x)) + 1); 
# 1650
__reject = (__v > (((__param._M_lf) - __lfx) + (__x * (__param._M_lp1p)))); 
# 1652
}  
# 1654
__reject |= ((__x + __np) >= __thr); 
# 1655
} 
# 1656
while (__reject); 
# 1658
__x += (__np + __naf); 
# 1660
const _IntType __z = _M_waiting(__urng, __t - ((_IntType)__x), (__param._M_q)); 
# 1662
__ret = (((_IntType)__x) + __z); 
# 1663
} else { 
# 1666
__ret = _M_waiting(__urng, __t, (__param._M_q)); }  
# 1668
if (__p12 != __p) { 
# 1669
__ret = (__t - __ret); }  
# 1670
return __ret; 
# 1671
} 
# 1673
template< class _IntType> 
# 1674
template< class _ForwardIterator, class 
# 1675
_UniformRandomNumberGenerator> void 
# 1678
binomial_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1679
__urng, const param_type &
# 1680
__param) 
# 1681
{ 
# 1684
while (__f != __t) { 
# 1685
(*(__f++)) = this->operator()(__urng, __param); }  
# 1686
} 
# 1688
template< class _IntType, class 
# 1689
_CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1691
operator<<(basic_ostream< _CharT, _Traits>  &__os, const binomial_distribution< _IntType>  &
# 1692
__x) 
# 1693
{ 
# 1694
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1696
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1697
const _CharT __fill = __os.fill(); 
# 1698
const streamsize __precision = __os.precision(); 
# 1699
const _CharT __space = __os.widen(' '); 
# 1700
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1701
__os.fill(__space); 
# 1702
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 1704
((((__os << __x.t()) << __space) << __x.p()) << __space) << (__x._M_nd); 
# 1707
__os.flags(__flags); 
# 1708
__os.fill(__fill); 
# 1709
__os.precision(__precision); 
# 1710
return __os; 
# 1711
} 
# 1713
template< class _IntType, class 
# 1714
_CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1716
operator>>(basic_istream< _CharT, _Traits>  &__is, binomial_distribution< _IntType>  &
# 1717
__x) 
# 1718
{ 
# 1719
using param_type = typename binomial_distribution< _IntType> ::param_type; 
# 1720
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 1722
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1723
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1725
_IntType __t; 
# 1726
double __p; 
# 1727
if (((__is >> __t) >> __p) >> (__x._M_nd)) { 
# 1728
__x.param(param_type(__t, __p)); }  
# 1730
__is.flags(__flags); 
# 1731
return __is; 
# 1732
} 
# 1735
template< class _RealType> 
# 1736
template< class _ForwardIterator, class 
# 1737
_UniformRandomNumberGenerator> void 
# 1740
exponential_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1741
__urng, const param_type &
# 1742
__p) 
# 1743
{ 
# 1746
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1747
while (__f != __t) { 
# 1748
(*(__f++)) = ((-std::log(((result_type)1) - __aurng())) / __p.lambda()); }  
# 1749
} 
# 1751
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1753
operator<<(basic_ostream< _CharT, _Traits>  &__os, const exponential_distribution< _RealType>  &
# 1754
__x) 
# 1755
{ 
# 1756
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1758
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1759
const _CharT __fill = __os.fill(); 
# 1760
const streamsize __precision = __os.precision(); 
# 1761
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1762
__os.fill(__os.widen(' ')); 
# 1763
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 1765
__os << __x.lambda(); 
# 1767
__os.flags(__flags); 
# 1768
__os.fill(__fill); 
# 1769
__os.precision(__precision); 
# 1770
return __os; 
# 1771
} 
# 1773
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1775
operator>>(basic_istream< _CharT, _Traits>  &__is, exponential_distribution< _RealType>  &
# 1776
__x) 
# 1777
{ 
# 1778
using param_type = typename exponential_distribution< _RealType> ::param_type; 
# 1780
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 1782
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1783
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1785
_RealType __lambda; 
# 1786
if (__is >> __lambda) { 
# 1787
__x.param((param_type)__lambda); }  
# 1789
__is.flags(__flags); 
# 1790
return __is; 
# 1791
} 
# 1800 "/usr/include/c++/11/bits/random.tcc" 3
template< class _RealType> 
# 1801
template< class _UniformRandomNumberGenerator> typename normal_distribution< _RealType> ::result_type 
# 1804
normal_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 1805
__param) 
# 1806
{ 
# 1807
result_type __ret; 
# 1809
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1811
if (_M_saved_available) 
# 1812
{ 
# 1813
(_M_saved_available) = false; 
# 1814
__ret = (_M_saved); 
# 1815
} else 
# 1817
{ 
# 1818
result_type __x, __y, __r2; 
# 1819
do 
# 1820
{ 
# 1821
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1822
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1823
__r2 = ((__x * __x) + (__y * __y)); 
# 1824
} 
# 1825
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1827
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1828
(_M_saved) = (__x * __mult); 
# 1829
(_M_saved_available) = true; 
# 1830
__ret = (__y * __mult); 
# 1831
}  
# 1833
__ret = ((__ret * __param.stddev()) + __param.mean()); 
# 1834
return __ret; 
# 1835
} 
# 1837
template< class _RealType> 
# 1838
template< class _ForwardIterator, class 
# 1839
_UniformRandomNumberGenerator> void 
# 1842
normal_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1843
__urng, const param_type &
# 1844
__param) 
# 1845
{ 
# 1848
if (__f == __t) { 
# 1849
return; }  
# 1851
if (_M_saved_available) 
# 1852
{ 
# 1853
(_M_saved_available) = false; 
# 1854
(*(__f++)) = (((_M_saved) * __param.stddev()) + __param.mean()); 
# 1856
if (__f == __t) { 
# 1857
return; }  
# 1858
}  
# 1861
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 1863
while ((__f + 1) < __t) 
# 1864
{ 
# 1865
result_type __x, __y, __r2; 
# 1866
do 
# 1867
{ 
# 1868
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1869
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1870
__r2 = ((__x * __x) + (__y * __y)); 
# 1871
} 
# 1872
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1874
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1875
(*(__f++)) = (((__y * __mult) * __param.stddev()) + __param.mean()); 
# 1876
(*(__f++)) = (((__x * __mult) * __param.stddev()) + __param.mean()); 
# 1877
}  
# 1879
if (__f != __t) 
# 1880
{ 
# 1881
result_type __x, __y, __r2; 
# 1882
do 
# 1883
{ 
# 1884
__x = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1885
__y = ((((result_type)(2.0)) * __aurng()) - (1.0)); 
# 1886
__r2 = ((__x * __x) + (__y * __y)); 
# 1887
} 
# 1888
while ((__r2 > (1.0)) || (__r2 == (0.0))); 
# 1890
const result_type __mult = std::sqrt(((-2) * std::log(__r2)) / __r2); 
# 1891
(_M_saved) = (__x * __mult); 
# 1892
(_M_saved_available) = true; 
# 1893
(*__f) = (((__y * __mult) * __param.stddev()) + __param.mean()); 
# 1894
}  
# 1895
} 
# 1897
template< class _RealType> bool 
# 1899
operator==(const normal_distribution< _RealType>  &__d1, const normal_distribution< _RealType>  &
# 1900
__d2) 
# 1901
{ 
# 1902
if (((__d1._M_param) == (__d2._M_param)) && ((__d1._M_saved_available) == (__d2._M_saved_available))) 
# 1904
{ 
# 1905
if ((__d1._M_saved_available) && ((__d1._M_saved) == (__d2._M_saved))) { 
# 1907
return true; } else { 
# 1908
if (!(__d1._M_saved_available)) { 
# 1909
return true; } else { 
# 1911
return false; }  }  
# 1912
} else { 
# 1914
return false; }  
# 1915
} 
# 1917
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1919
operator<<(basic_ostream< _CharT, _Traits>  &__os, const normal_distribution< _RealType>  &
# 1920
__x) 
# 1921
{ 
# 1922
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1924
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1925
const _CharT __fill = __os.fill(); 
# 1926
const streamsize __precision = __os.precision(); 
# 1927
const _CharT __space = __os.widen(' '); 
# 1928
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1929
__os.fill(__space); 
# 1930
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 1932
((((__os << __x.mean()) << __space) << __x.stddev()) << __space) << (__x._M_saved_available); 
# 1934
if (__x._M_saved_available) { 
# 1935
(__os << __space) << (__x._M_saved); }  
# 1937
__os.flags(__flags); 
# 1938
__os.fill(__fill); 
# 1939
__os.precision(__precision); 
# 1940
return __os; 
# 1941
} 
# 1943
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 1945
operator>>(basic_istream< _CharT, _Traits>  &__is, normal_distribution< _RealType>  &
# 1946
__x) 
# 1947
{ 
# 1948
using param_type = typename normal_distribution< _RealType> ::param_type; 
# 1949
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 1951
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 1952
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 1954
double __mean, __stddev; 
# 1955
bool __saved_avail; 
# 1956
if (((__is >> __mean) >> __stddev) >> __saved_avail) 
# 1957
{ 
# 1958
if ((!__saved_avail) || (__is >> (__x._M_saved))) 
# 1959
{ 
# 1960
(__x._M_saved_available) = __saved_avail; 
# 1961
__x.param(param_type(__mean, __stddev)); 
# 1962
}  
# 1963
}  
# 1965
__is.flags(__flags); 
# 1966
return __is; 
# 1967
} 
# 1970
template< class _RealType> 
# 1971
template< class _ForwardIterator, class 
# 1972
_UniformRandomNumberGenerator> void 
# 1975
lognormal_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 1976
__urng, const param_type &
# 1977
__p) 
# 1978
{ 
# 1980
while (__f != __t) { 
# 1981
(*(__f++)) = std::exp((__p.s() * (_M_nd)(__urng)) + __p.m()); }  
# 1982
} 
# 1984
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 1986
operator<<(basic_ostream< _CharT, _Traits>  &__os, const lognormal_distribution< _RealType>  &
# 1987
__x) 
# 1988
{ 
# 1989
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 1991
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 1992
const _CharT __fill = __os.fill(); 
# 1993
const streamsize __precision = __os.precision(); 
# 1994
const _CharT __space = __os.widen(' '); 
# 1995
__os.flags(__ios_base::scientific | __ios_base::left); 
# 1996
__os.fill(__space); 
# 1997
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 1999
((((__os << __x.m()) << __space) << __x.s()) << __space) << (__x._M_nd); 
# 2002
__os.flags(__flags); 
# 2003
__os.fill(__fill); 
# 2004
__os.precision(__precision); 
# 2005
return __os; 
# 2006
} 
# 2008
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2010
operator>>(basic_istream< _CharT, _Traits>  &__is, lognormal_distribution< _RealType>  &
# 2011
__x) 
# 2012
{ 
# 2013
using param_type = typename lognormal_distribution< _RealType> ::param_type; 
# 2015
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2017
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2018
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2020
_RealType __m, __s; 
# 2021
if (((__is >> __m) >> __s) >> (__x._M_nd)) { 
# 2022
__x.param(param_type(__m, __s)); }  
# 2024
__is.flags(__flags); 
# 2025
return __is; 
# 2026
} 
# 2028
template< class _RealType> 
# 2029
template< class _ForwardIterator, class 
# 2030
_UniformRandomNumberGenerator> void 
# 2033
chi_squared_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2034
__urng) 
# 2035
{ 
# 2037
while (__f != __t) { 
# 2038
(*(__f++)) = (2 * (_M_gd)(__urng)); }  
# 2039
} 
# 2041
template< class _RealType> 
# 2042
template< class _ForwardIterator, class 
# 2043
_UniformRandomNumberGenerator> void 
# 2046
chi_squared_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2047
__urng, const typename gamma_distribution< result_type> ::param_type &
# 2049
__p) 
# 2050
{ 
# 2052
while (__f != __t) { 
# 2053
(*(__f++)) = (2 * (_M_gd)(__urng, __p)); }  
# 2054
} 
# 2056
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2058
operator<<(basic_ostream< _CharT, _Traits>  &__os, const chi_squared_distribution< _RealType>  &
# 2059
__x) 
# 2060
{ 
# 2061
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2063
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2064
const _CharT __fill = __os.fill(); 
# 2065
const streamsize __precision = __os.precision(); 
# 2066
const _CharT __space = __os.widen(' '); 
# 2067
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2068
__os.fill(__space); 
# 2069
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2071
((__os << __x.n()) << __space) << (__x._M_gd); 
# 2073
__os.flags(__flags); 
# 2074
__os.fill(__fill); 
# 2075
__os.precision(__precision); 
# 2076
return __os; 
# 2077
} 
# 2079
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2081
operator>>(basic_istream< _CharT, _Traits>  &__is, chi_squared_distribution< _RealType>  &
# 2082
__x) 
# 2083
{ 
# 2084
using param_type = typename chi_squared_distribution< _RealType> ::param_type; 
# 2086
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2088
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2089
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2091
_RealType __n; 
# 2092
if ((__is >> __n) >> (__x._M_gd)) { 
# 2093
__x.param((param_type)__n); }  
# 2095
__is.flags(__flags); 
# 2096
return __is; 
# 2097
} 
# 2100
template< class _RealType> 
# 2101
template< class _UniformRandomNumberGenerator> typename cauchy_distribution< _RealType> ::result_type 
# 2104
cauchy_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2105
__p) 
# 2106
{ 
# 2108
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2109
_RealType __u; 
# 2110
do { 
# 2111
__u = __aurng(); } 
# 2112
while (__u == (0.5)); 
# 2114
const _RealType __pi = ((3.1415926535897932385L)); 
# 2115
return __p.a() + (__p.b() * std::tan(__pi * __u)); 
# 2116
} 
# 2118
template< class _RealType> 
# 2119
template< class _ForwardIterator, class 
# 2120
_UniformRandomNumberGenerator> void 
# 2123
cauchy_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2124
__urng, const param_type &
# 2125
__p) 
# 2126
{ 
# 2128
const _RealType __pi = ((3.1415926535897932385L)); 
# 2130
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2131
while (__f != __t) 
# 2132
{ 
# 2133
_RealType __u; 
# 2134
do { 
# 2135
__u = __aurng(); } 
# 2136
while (__u == (0.5)); 
# 2138
(*(__f++)) = (__p.a() + (__p.b() * std::tan(__pi * __u))); 
# 2139
}  
# 2140
} 
# 2142
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2144
operator<<(basic_ostream< _CharT, _Traits>  &__os, const cauchy_distribution< _RealType>  &
# 2145
__x) 
# 2146
{ 
# 2147
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2149
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2150
const _CharT __fill = __os.fill(); 
# 2151
const streamsize __precision = __os.precision(); 
# 2152
const _CharT __space = __os.widen(' '); 
# 2153
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2154
__os.fill(__space); 
# 2155
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2157
((__os << __x.a()) << __space) << __x.b(); 
# 2159
__os.flags(__flags); 
# 2160
__os.fill(__fill); 
# 2161
__os.precision(__precision); 
# 2162
return __os; 
# 2163
} 
# 2165
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2167
operator>>(basic_istream< _CharT, _Traits>  &__is, cauchy_distribution< _RealType>  &
# 2168
__x) 
# 2169
{ 
# 2170
using param_type = typename cauchy_distribution< _RealType> ::param_type; 
# 2171
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2173
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2174
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2176
_RealType __a, __b; 
# 2177
if ((__is >> __a) >> __b) { 
# 2178
__x.param(param_type(__a, __b)); }  
# 2180
__is.flags(__flags); 
# 2181
return __is; 
# 2182
} 
# 2185
template< class _RealType> 
# 2186
template< class _ForwardIterator, class 
# 2187
_UniformRandomNumberGenerator> void 
# 2190
fisher_f_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2191
__urng) 
# 2192
{ 
# 2194
while (__f != __t) { 
# 2195
(*(__f++)) = (((_M_gd_x)(__urng) * n()) / ((_M_gd_y)(__urng) * m())); }  
# 2196
} 
# 2198
template< class _RealType> 
# 2199
template< class _ForwardIterator, class 
# 2200
_UniformRandomNumberGenerator> void 
# 2203
fisher_f_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2204
__urng, const param_type &
# 2205
__p) 
# 2206
{ 
# 2209
typedef typename gamma_distribution< result_type> ::param_type param_type; 
# 2210
param_type __p1(__p.m() / 2); 
# 2211
param_type __p2(__p.n() / 2); 
# 2212
while (__f != __t) { 
# 2213
(*(__f++)) = (((_M_gd_x)(__urng, __p1) * n()) / ((_M_gd_y)(__urng, __p2) * m())); }  
# 2215
} 
# 2217
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2219
operator<<(basic_ostream< _CharT, _Traits>  &__os, const fisher_f_distribution< _RealType>  &
# 2220
__x) 
# 2221
{ 
# 2222
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2224
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2225
const _CharT __fill = __os.fill(); 
# 2226
const streamsize __precision = __os.precision(); 
# 2227
const _CharT __space = __os.widen(' '); 
# 2228
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2229
__os.fill(__space); 
# 2230
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2232
((((((__os << __x.m()) << __space) << __x.n()) << __space) << (__x._M_gd_x)) << __space) << (__x._M_gd_y); 
# 2235
__os.flags(__flags); 
# 2236
__os.fill(__fill); 
# 2237
__os.precision(__precision); 
# 2238
return __os; 
# 2239
} 
# 2241
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2243
operator>>(basic_istream< _CharT, _Traits>  &__is, fisher_f_distribution< _RealType>  &
# 2244
__x) 
# 2245
{ 
# 2246
using param_type = typename fisher_f_distribution< _RealType> ::param_type; 
# 2248
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2250
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2251
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2253
_RealType __m, __n; 
# 2254
if ((((__is >> __m) >> __n) >> (__x._M_gd_x)) >> (__x._M_gd_y)) { 
# 2255
__x.param(param_type(__m, __n)); }  
# 2257
__is.flags(__flags); 
# 2258
return __is; 
# 2259
} 
# 2262
template< class _RealType> 
# 2263
template< class _ForwardIterator, class 
# 2264
_UniformRandomNumberGenerator> void 
# 2267
student_t_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2268
__urng) 
# 2269
{ 
# 2271
while (__f != __t) { 
# 2272
(*(__f++)) = ((_M_nd)(__urng) * std::sqrt(n() / (_M_gd)(__urng))); }  
# 2273
} 
# 2275
template< class _RealType> 
# 2276
template< class _ForwardIterator, class 
# 2277
_UniformRandomNumberGenerator> void 
# 2280
student_t_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2281
__urng, const param_type &
# 2282
__p) 
# 2283
{ 
# 2286
typename gamma_distribution< result_type> ::param_type __p2(__p.n() / 2, 2); 
# 2287
while (__f != __t) { 
# 2288
(*(__f++)) = ((_M_nd)(__urng) * std::sqrt(__p.n() / (_M_gd)(__urng, __p2))); }  
# 2289
} 
# 2291
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2293
operator<<(basic_ostream< _CharT, _Traits>  &__os, const student_t_distribution< _RealType>  &
# 2294
__x) 
# 2295
{ 
# 2296
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2298
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2299
const _CharT __fill = __os.fill(); 
# 2300
const streamsize __precision = __os.precision(); 
# 2301
const _CharT __space = __os.widen(' '); 
# 2302
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2303
__os.fill(__space); 
# 2304
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2306
((((__os << __x.n()) << __space) << (__x._M_nd)) << __space) << (__x._M_gd); 
# 2308
__os.flags(__flags); 
# 2309
__os.fill(__fill); 
# 2310
__os.precision(__precision); 
# 2311
return __os; 
# 2312
} 
# 2314
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2316
operator>>(basic_istream< _CharT, _Traits>  &__is, student_t_distribution< _RealType>  &
# 2317
__x) 
# 2318
{ 
# 2319
using param_type = typename student_t_distribution< _RealType> ::param_type; 
# 2321
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2323
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2324
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2326
_RealType __n; 
# 2327
if (((__is >> __n) >> (__x._M_nd)) >> (__x._M_gd)) { 
# 2328
__x.param((param_type)__n); }  
# 2330
__is.flags(__flags); 
# 2331
return __is; 
# 2332
} 
# 2335
template< class _RealType> void 
# 2338
gamma_distribution< _RealType> ::param_type::_M_initialize() 
# 2339
{ 
# 2340
(_M_malpha) = (((_M_alpha) < (1.0)) ? (_M_alpha) + ((_RealType)(1.0)) : (_M_alpha)); 
# 2342
const _RealType __a1 = ((_M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0)))); 
# 2343
(_M_a2) = (((_RealType)(1.0)) / std::sqrt(((_RealType)(9.0)) * __a1)); 
# 2344
} 
# 2351
template< class _RealType> 
# 2352
template< class _UniformRandomNumberGenerator> typename gamma_distribution< _RealType> ::result_type 
# 2355
gamma_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2356
__param) 
# 2357
{ 
# 2359
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2361
result_type __u, __v, __n; 
# 2362
const result_type __a1 = ((__param._M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0)))); 
# 2365
do 
# 2366
{ 
# 2367
do 
# 2368
{ 
# 2369
__n = (_M_nd)(__urng); 
# 2370
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2371
} 
# 2372
while (__v <= (0.0)); 
# 2374
__v = ((__v * __v) * __v); 
# 2375
__u = __aurng(); 
# 2376
} 
# 2377
while ((__u > (((result_type)(1.0)) - (((((0.0331) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2381
if (__param.alpha() == (__param._M_malpha)) { 
# 2382
return (__a1 * __v) * __param.beta(); } else 
# 2384
{ 
# 2385
do { 
# 2386
__u = __aurng(); } 
# 2387
while (__u == (0.0)); 
# 2389
return (((std::pow(__u, ((result_type)(1.0)) / __param.alpha()) * __a1) * __v) * __param.beta()); 
# 2391
}  
# 2392
} 
# 2394
template< class _RealType> 
# 2395
template< class _ForwardIterator, class 
# 2396
_UniformRandomNumberGenerator> void 
# 2399
gamma_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2400
__urng, const param_type &
# 2401
__param) 
# 2402
{ 
# 2405
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2407
result_type __u, __v, __n; 
# 2408
const result_type __a1 = ((__param._M_malpha) - (((_RealType)(1.0)) / ((_RealType)(3.0)))); 
# 2411
if (__param.alpha() == (__param._M_malpha)) { 
# 2412
while (__f != __t) 
# 2413
{ 
# 2414
do 
# 2415
{ 
# 2416
do 
# 2417
{ 
# 2418
__n = (_M_nd)(__urng); 
# 2419
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2420
} 
# 2421
while (__v <= (0.0)); 
# 2423
__v = ((__v * __v) * __v); 
# 2424
__u = __aurng(); 
# 2425
} 
# 2426
while ((__u > (((result_type)(1.0)) - (((((0.0331) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2430
(*(__f++)) = ((__a1 * __v) * __param.beta()); 
# 2431
}  } else { 
# 2433
while (__f != __t) 
# 2434
{ 
# 2435
do 
# 2436
{ 
# 2437
do 
# 2438
{ 
# 2439
__n = (_M_nd)(__urng); 
# 2440
__v = (((result_type)(1.0)) + ((__param._M_a2) * __n)); 
# 2441
} 
# 2442
while (__v <= (0.0)); 
# 2444
__v = ((__v * __v) * __v); 
# 2445
__u = __aurng(); 
# 2446
} 
# 2447
while ((__u > (((result_type)(1.0)) - (((((0.0331) * __n) * __n) * __n) * __n))) && (std::log(__u) > ((((0.5) * __n) * __n) + (__a1 * (((1.0) - __v) + std::log(__v)))))); 
# 2451
do { 
# 2452
__u = __aurng(); } 
# 2453
while (__u == (0.0)); 
# 2455
(*(__f++)) = (((std::pow(__u, ((result_type)(1.0)) / __param.alpha()) * __a1) * __v) * __param.beta()); 
# 2457
}  }  
# 2458
} 
# 2460
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2462
operator<<(basic_ostream< _CharT, _Traits>  &__os, const gamma_distribution< _RealType>  &
# 2463
__x) 
# 2464
{ 
# 2465
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2467
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2468
const _CharT __fill = __os.fill(); 
# 2469
const streamsize __precision = __os.precision(); 
# 2470
const _CharT __space = __os.widen(' '); 
# 2471
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2472
__os.fill(__space); 
# 2473
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2475
((((__os << __x.alpha()) << __space) << __x.beta()) << __space) << (__x._M_nd); 
# 2478
__os.flags(__flags); 
# 2479
__os.fill(__fill); 
# 2480
__os.precision(__precision); 
# 2481
return __os; 
# 2482
} 
# 2484
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2486
operator>>(basic_istream< _CharT, _Traits>  &__is, gamma_distribution< _RealType>  &
# 2487
__x) 
# 2488
{ 
# 2489
using param_type = typename gamma_distribution< _RealType> ::param_type; 
# 2490
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2492
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2493
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2495
_RealType __alpha_val, __beta_val; 
# 2496
if (((__is >> __alpha_val) >> __beta_val) >> (__x._M_nd)) { 
# 2497
__x.param(param_type(__alpha_val, __beta_val)); }  
# 2499
__is.flags(__flags); 
# 2500
return __is; 
# 2501
} 
# 2504
template< class _RealType> 
# 2505
template< class _UniformRandomNumberGenerator> typename weibull_distribution< _RealType> ::result_type 
# 2508
weibull_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2509
__p) 
# 2510
{ 
# 2512
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2513
return __p.b() * std::pow(-std::log(((result_type)1) - __aurng()), ((result_type)1) / __p.a()); 
# 2515
} 
# 2517
template< class _RealType> 
# 2518
template< class _ForwardIterator, class 
# 2519
_UniformRandomNumberGenerator> void 
# 2522
weibull_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2523
__urng, const param_type &
# 2524
__p) 
# 2525
{ 
# 2528
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2529
auto __inv_a = ((result_type)1) / __p.a(); 
# 2531
while (__f != __t) { 
# 2532
(*(__f++)) = (__p.b() * std::pow(-std::log(((result_type)1) - __aurng()), __inv_a)); }  
# 2534
} 
# 2536
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2538
operator<<(basic_ostream< _CharT, _Traits>  &__os, const weibull_distribution< _RealType>  &
# 2539
__x) 
# 2540
{ 
# 2541
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2543
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2544
const _CharT __fill = __os.fill(); 
# 2545
const streamsize __precision = __os.precision(); 
# 2546
const _CharT __space = __os.widen(' '); 
# 2547
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2548
__os.fill(__space); 
# 2549
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2551
((__os << __x.a()) << __space) << __x.b(); 
# 2553
__os.flags(__flags); 
# 2554
__os.fill(__fill); 
# 2555
__os.precision(__precision); 
# 2556
return __os; 
# 2557
} 
# 2559
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2561
operator>>(basic_istream< _CharT, _Traits>  &__is, weibull_distribution< _RealType>  &
# 2562
__x) 
# 2563
{ 
# 2564
using param_type = typename weibull_distribution< _RealType> ::param_type; 
# 2565
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2567
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2568
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2570
_RealType __a, __b; 
# 2571
if ((__is >> __a) >> __b) { 
# 2572
__x.param(param_type(__a, __b)); }  
# 2574
__is.flags(__flags); 
# 2575
return __is; 
# 2576
} 
# 2579
template< class _RealType> 
# 2580
template< class _UniformRandomNumberGenerator> typename extreme_value_distribution< _RealType> ::result_type 
# 2583
extreme_value_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2584
__p) 
# 2585
{ 
# 2587
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2588
return __p.a() - (__p.b() * std::log(-std::log(((result_type)1) - __aurng()))); 
# 2590
} 
# 2592
template< class _RealType> 
# 2593
template< class _ForwardIterator, class 
# 2594
_UniformRandomNumberGenerator> void 
# 2597
extreme_value_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2598
__urng, const param_type &
# 2599
__p) 
# 2600
{ 
# 2603
__detail::_Adaptor< _UniformRandomNumberGenerator, result_type>  __aurng(__urng); 
# 2605
while (__f != __t) { 
# 2606
(*(__f++)) = (__p.a() - (__p.b() * std::log(-std::log(((result_type)1) - __aurng())))); }  
# 2608
} 
# 2610
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2612
operator<<(basic_ostream< _CharT, _Traits>  &__os, const extreme_value_distribution< _RealType>  &
# 2613
__x) 
# 2614
{ 
# 2615
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2617
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2618
const _CharT __fill = __os.fill(); 
# 2619
const streamsize __precision = __os.precision(); 
# 2620
const _CharT __space = __os.widen(' '); 
# 2621
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2622
__os.fill(__space); 
# 2623
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2625
((__os << __x.a()) << __space) << __x.b(); 
# 2627
__os.flags(__flags); 
# 2628
__os.fill(__fill); 
# 2629
__os.precision(__precision); 
# 2630
return __os; 
# 2631
} 
# 2633
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2635
operator>>(basic_istream< _CharT, _Traits>  &__is, extreme_value_distribution< _RealType>  &
# 2636
__x) 
# 2637
{ 
# 2638
using param_type = typename extreme_value_distribution< _RealType> ::param_type; 
# 2640
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2642
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2643
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2645
_RealType __a, __b; 
# 2646
if ((__is >> __a) >> __b) { 
# 2647
__x.param(param_type(__a, __b)); }  
# 2649
__is.flags(__flags); 
# 2650
return __is; 
# 2651
} 
# 2654
template< class _IntType> void 
# 2657
discrete_distribution< _IntType> ::param_type::_M_initialize() 
# 2658
{ 
# 2659
if ((_M_prob).size() < (2)) 
# 2660
{ 
# 2661
(_M_prob).clear(); 
# 2662
return; 
# 2663
}  
# 2665
const double __sum = std::accumulate((_M_prob).begin(), (_M_prob).end(), (0.0)); 
# 2667
do { if (__builtin_is_constant_evaluated() && (!((bool)(__sum > (0))))) { __builtin_unreachable(); }  } while (false); 
# 2669
__detail::__normalize((_M_prob).begin(), (_M_prob).end(), (_M_prob).begin(), __sum); 
# 2672
(_M_cp).reserve((_M_prob).size()); 
# 2673
std::partial_sum((_M_prob).begin(), (_M_prob).end(), std::back_inserter(_M_cp)); 
# 2676
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 2677
} 
# 2679
template< class _IntType> 
# 2680
template< class _Func> 
# 2682
discrete_distribution< _IntType> ::param_type::param_type(size_t __nw, double __xmin, double __xmax, _Func __fw) : _M_prob(), _M_cp() 
# 2684
{ 
# 2685
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 2686
const double __delta = (__xmax - __xmin) / __n; 
# 2688
(_M_prob).reserve(__n); 
# 2689
for (size_t __k = (0); __k < __nw; ++__k) { 
# 2690
(_M_prob).push_back(__fw((__xmin + (__k * __delta)) + ((0.5) * __delta))); }  
# 2692
_M_initialize(); 
# 2693
} 
# 2695
template< class _IntType> 
# 2696
template< class _UniformRandomNumberGenerator> typename discrete_distribution< _IntType> ::result_type 
# 2699
discrete_distribution< _IntType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2700
__param) 
# 2701
{ 
# 2702
if ((__param._M_cp).empty()) { 
# 2703
return (result_type)0; }  
# 2706
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2708
const double __p = __aurng(); 
# 2709
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2712
return __pos - (__param._M_cp).begin(); 
# 2713
} 
# 2715
template< class _IntType> 
# 2716
template< class _ForwardIterator, class 
# 2717
_UniformRandomNumberGenerator> void 
# 2720
discrete_distribution< _IntType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2721
__urng, const param_type &
# 2722
__param) 
# 2723
{ 
# 2726
if ((__param._M_cp).empty()) 
# 2727
{ 
# 2728
while (__f != __t) { 
# 2729
(*(__f++)) = ((result_type)0); }  
# 2730
return; 
# 2731
}  
# 2734
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2736
while (__f != __t) 
# 2737
{ 
# 2738
const double __p = __aurng(); 
# 2739
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2742
(*(__f++)) = (__pos - (__param._M_cp).begin()); 
# 2743
}  
# 2744
} 
# 2746
template< class _IntType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2748
operator<<(basic_ostream< _CharT, _Traits>  &__os, const discrete_distribution< _IntType>  &
# 2749
__x) 
# 2750
{ 
# 2751
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2753
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2754
const _CharT __fill = __os.fill(); 
# 2755
const streamsize __precision = __os.precision(); 
# 2756
const _CharT __space = __os.widen(' '); 
# 2757
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2758
__os.fill(__space); 
# 2759
__os.precision(std::numeric_limits< double> ::max_digits10); 
# 2761
vector< double>  __prob = __x.probabilities(); 
# 2762
__os << __prob.size(); 
# 2763
for (auto __dit = __prob.begin(); __dit != (__prob.end()); ++__dit) { 
# 2764
(__os << __space) << (*__dit); }  
# 2766
__os.flags(__flags); 
# 2767
__os.fill(__fill); 
# 2768
__os.precision(__precision); 
# 2769
return __os; 
# 2770
} 
# 2772
namespace __detail { 
# 2774
template< class _ValT, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2776
__extract_params(basic_istream< _CharT, _Traits>  &__is, vector< _ValT>  &
# 2777
__vals, size_t __n) 
# 2778
{ 
# 2779
__vals.reserve(__n); 
# 2780
while (__n--) 
# 2781
{ 
# 2782
_ValT __val; 
# 2783
if (__is >> __val) { 
# 2784
__vals.push_back(__val); } else { 
# 2786
break; }  
# 2787
}  
# 2788
return __is; 
# 2789
} 
# 2790
}
# 2792
template< class _IntType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 2794
operator>>(basic_istream< _CharT, _Traits>  &__is, discrete_distribution< _IntType>  &
# 2795
__x) 
# 2796
{ 
# 2797
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 2799
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 2800
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 2802
size_t __n; 
# 2803
if (__is >> __n) 
# 2804
{ 
# 2805
vector< double>  __prob_vec; 
# 2806
if (__detail::__extract_params(__is, __prob_vec, __n)) { 
# 2807
__x.param({__prob_vec.begin(), __prob_vec.end()}); }  
# 2808
}  
# 2810
__is.flags(__flags); 
# 2811
return __is; 
# 2812
} 
# 2815
template< class _RealType> void 
# 2818
piecewise_constant_distribution< _RealType> ::param_type::_M_initialize() 
# 2819
{ 
# 2820
if (((_M_int).size() < 2) || (((_M_int).size() == 2) && (((_M_int)[0]) == ((_RealType)0)) && (((_M_int)[1]) == ((_RealType)1)))) 
# 2824
{ 
# 2825
(_M_int).clear(); 
# 2826
(_M_den).clear(); 
# 2827
return; 
# 2828
}  
# 2830
const double __sum = std::accumulate((_M_den).begin(), (_M_den).end(), (0.0)); 
# 2832
do { if (__builtin_is_constant_evaluated() && (!((bool)(__sum > (0))))) { __builtin_unreachable(); }  } while (false); 
# 2834
__detail::__normalize((_M_den).begin(), (_M_den).end(), (_M_den).begin(), __sum); 
# 2837
(_M_cp).reserve((_M_den).size()); 
# 2838
std::partial_sum((_M_den).begin(), (_M_den).end(), std::back_inserter(_M_cp)); 
# 2842
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 2844
for (size_t __k = (0); __k < (_M_den).size(); ++__k) { 
# 2845
(_M_den)[__k] /= (((_M_int)[__k + (1)]) - ((_M_int)[__k])); }  
# 2846
} 
# 2848
template< class _RealType> 
# 2849
template< class _InputIteratorB, class _InputIteratorW> 
# 2851
piecewise_constant_distribution< _RealType> ::param_type::param_type(_InputIteratorB __bbegin, _InputIteratorB 
# 2852
__bend, _InputIteratorW 
# 2853
__wbegin) : _M_int(), _M_den(), _M_cp() 
# 2855
{ 
# 2856
if (__bbegin != __bend) 
# 2857
{ 
# 2858
for (; ;) 
# 2859
{ 
# 2860
(_M_int).push_back(*__bbegin); 
# 2861
++__bbegin; 
# 2862
if (__bbegin == __bend) { 
# 2863
break; }  
# 2865
(_M_den).push_back(*__wbegin); 
# 2866
++__wbegin; 
# 2867
}  
# 2868
}  
# 2870
_M_initialize(); 
# 2871
} 
# 2873
template< class _RealType> 
# 2874
template< class _Func> 
# 2876
piecewise_constant_distribution< _RealType> ::param_type::param_type(initializer_list< _RealType>  __bl, _Func __fw) : _M_int(), _M_den(), _M_cp() 
# 2878
{ 
# 2879
(_M_int).reserve(__bl.size()); 
# 2880
for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter) { 
# 2881
(_M_int).push_back(*__biter); }  
# 2883
(_M_den).reserve((_M_int).size() - 1); 
# 2884
for (size_t __k = (0); __k < ((_M_int).size() - 1); ++__k) { 
# 2885
(_M_den).push_back(__fw((0.5) * (((_M_int)[__k + (1)]) + ((_M_int)[__k])))); }  
# 2887
_M_initialize(); 
# 2888
} 
# 2890
template< class _RealType> 
# 2891
template< class _Func> 
# 2893
piecewise_constant_distribution< _RealType> ::param_type::param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw) : _M_int(), _M_den(), _M_cp() 
# 2895
{ 
# 2896
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 2897
const _RealType __delta = (__xmax - __xmin) / __n; 
# 2899
(_M_int).reserve(__n + (1)); 
# 2900
for (size_t __k = (0); __k <= __nw; ++__k) { 
# 2901
(_M_int).push_back(__xmin + (__k * __delta)); }  
# 2903
(_M_den).reserve(__n); 
# 2904
for (size_t __k = (0); __k < __nw; ++__k) { 
# 2905
(_M_den).push_back(__fw(((_M_int)[__k]) + ((0.5) * __delta))); }  
# 2907
_M_initialize(); 
# 2908
} 
# 2910
template< class _RealType> 
# 2911
template< class _UniformRandomNumberGenerator> typename piecewise_constant_distribution< _RealType> ::result_type 
# 2914
piecewise_constant_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 2915
__param) 
# 2916
{ 
# 2918
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2920
const double __p = __aurng(); 
# 2921
if ((__param._M_cp).empty()) { 
# 2922
return __p; }  
# 2924
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2926
const size_t __i = __pos - (__param._M_cp).begin(); 
# 2928
const double __pref = ((__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0)); 
# 2930
return ((__param._M_int)[__i]) + ((__p - __pref) / ((__param._M_den)[__i])); 
# 2931
} 
# 2933
template< class _RealType> 
# 2934
template< class _ForwardIterator, class 
# 2935
_UniformRandomNumberGenerator> void 
# 2938
piecewise_constant_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 2939
__urng, const param_type &
# 2940
__param) 
# 2941
{ 
# 2944
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 2946
if ((__param._M_cp).empty()) 
# 2947
{ 
# 2948
while (__f != __t) { 
# 2949
(*(__f++)) = __aurng(); }  
# 2950
return; 
# 2951
}  
# 2953
while (__f != __t) 
# 2954
{ 
# 2955
const double __p = __aurng(); 
# 2957
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 2959
const size_t __i = __pos - (__param._M_cp).begin(); 
# 2961
const double __pref = ((__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0)); 
# 2963
(*(__f++)) = (((__param._M_int)[__i]) + ((__p - __pref) / ((__param._M_den)[__i]))); 
# 2965
}  
# 2966
} 
# 2968
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 2970
operator<<(basic_ostream< _CharT, _Traits>  &__os, const piecewise_constant_distribution< _RealType>  &
# 2971
__x) 
# 2972
{ 
# 2973
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 2975
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 2976
const _CharT __fill = __os.fill(); 
# 2977
const streamsize __precision = __os.precision(); 
# 2978
const _CharT __space = __os.widen(' '); 
# 2979
__os.flags(__ios_base::scientific | __ios_base::left); 
# 2980
__os.fill(__space); 
# 2981
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 2983
vector< _RealType>  __int = __x.intervals(); 
# 2984
__os << (__int.size() - 1); 
# 2986
for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit) { 
# 2987
(__os << __space) << (*__xit); }  
# 2989
vector< double>  __den = __x.densities(); 
# 2990
for (auto __dit = __den.begin(); __dit != (__den.end()); ++__dit) { 
# 2991
(__os << __space) << (*__dit); }  
# 2993
__os.flags(__flags); 
# 2994
__os.fill(__fill); 
# 2995
__os.precision(__precision); 
# 2996
return __os; 
# 2997
} 
# 2999
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 3001
operator>>(basic_istream< _CharT, _Traits>  &__is, piecewise_constant_distribution< _RealType>  &
# 3002
__x) 
# 3003
{ 
# 3004
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 3006
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 3007
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 3009
size_t __n; 
# 3010
if (__is >> __n) 
# 3011
{ 
# 3012
vector< _RealType>  __int_vec; 
# 3013
if (__detail::__extract_params(__is, __int_vec, __n + (1))) 
# 3014
{ 
# 3015
vector< double>  __den_vec; 
# 3016
if (__detail::__extract_params(__is, __den_vec, __n)) 
# 3017
{ 
# 3018
__x.param({__int_vec.begin(), __int_vec.end(), __den_vec.begin()}); 
# 3020
}  
# 3021
}  
# 3022
}  
# 3024
__is.flags(__flags); 
# 3025
return __is; 
# 3026
} 
# 3029
template< class _RealType> void 
# 3032
piecewise_linear_distribution< _RealType> ::param_type::_M_initialize() 
# 3033
{ 
# 3034
if (((_M_int).size() < 2) || (((_M_int).size() == 2) && (((_M_int)[0]) == ((_RealType)0)) && (((_M_int)[1]) == ((_RealType)1)) && ((_M_den)[0] == (_M_den)[1]))) 
# 3039
{ 
# 3040
(_M_int).clear(); 
# 3041
(_M_den).clear(); 
# 3042
return; 
# 3043
}  
# 3045
double __sum = (0.0); 
# 3046
(_M_cp).reserve((_M_int).size() - 1); 
# 3047
(_M_m).reserve((_M_int).size() - 1); 
# 3048
for (size_t __k = (0); __k < ((_M_int).size() - 1); ++__k) 
# 3049
{ 
# 3050
const _RealType __delta = ((_M_int)[__k + (1)]) - ((_M_int)[__k]); 
# 3051
__sum += (((0.5) * ((_M_den)[__k + (1)] + (_M_den)[__k])) * __delta); 
# 3052
(_M_cp).push_back(__sum); 
# 3053
(_M_m).push_back(((_M_den)[__k + (1)] - (_M_den)[__k]) / __delta); 
# 3054
}  
# 3055
do { if (__builtin_is_constant_evaluated() && (!((bool)(__sum > (0))))) { __builtin_unreachable(); }  } while (false); 
# 3058
__detail::__normalize((_M_den).begin(), (_M_den).end(), (_M_den).begin(), __sum); 
# 3061
__detail::__normalize((_M_cp).begin(), (_M_cp).end(), (_M_cp).begin(), __sum); 
# 3063
__detail::__normalize((_M_m).begin(), (_M_m).end(), (_M_m).begin(), __sum); 
# 3066
(_M_cp)[(_M_cp).size() - (1)] = (1.0); 
# 3067
} 
# 3069
template< class _RealType> 
# 3070
template< class _InputIteratorB, class _InputIteratorW> 
# 3072
piecewise_linear_distribution< _RealType> ::param_type::param_type(_InputIteratorB __bbegin, _InputIteratorB 
# 3073
__bend, _InputIteratorW 
# 3074
__wbegin) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3076
{ 
# 3077
for (; __bbegin != __bend; (++__bbegin), (++__wbegin)) 
# 3078
{ 
# 3079
(_M_int).push_back(*__bbegin); 
# 3080
(_M_den).push_back(*__wbegin); 
# 3081
}  
# 3083
_M_initialize(); 
# 3084
} 
# 3086
template< class _RealType> 
# 3087
template< class _Func> 
# 3089
piecewise_linear_distribution< _RealType> ::param_type::param_type(initializer_list< _RealType>  __bl, _Func __fw) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3091
{ 
# 3092
(_M_int).reserve(__bl.size()); 
# 3093
(_M_den).reserve(__bl.size()); 
# 3094
for (auto __biter = __bl.begin(); __biter != __bl.end(); ++__biter) 
# 3095
{ 
# 3096
(_M_int).push_back(*__biter); 
# 3097
(_M_den).push_back(__fw(*__biter)); 
# 3098
}  
# 3100
_M_initialize(); 
# 3101
} 
# 3103
template< class _RealType> 
# 3104
template< class _Func> 
# 3106
piecewise_linear_distribution< _RealType> ::param_type::param_type(size_t __nw, _RealType __xmin, _RealType __xmax, _Func __fw) : _M_int(), _M_den(), _M_cp(), _M_m() 
# 3108
{ 
# 3109
const size_t __n = (__nw == (0)) ? 1 : __nw; 
# 3110
const _RealType __delta = (__xmax - __xmin) / __n; 
# 3112
(_M_int).reserve(__n + (1)); 
# 3113
(_M_den).reserve(__n + (1)); 
# 3114
for (size_t __k = (0); __k <= __nw; ++__k) 
# 3115
{ 
# 3116
(_M_int).push_back(__xmin + (__k * __delta)); 
# 3117
(_M_den).push_back(__fw(((_M_int)[__k]) + __delta)); 
# 3118
}  
# 3120
_M_initialize(); 
# 3121
} 
# 3123
template< class _RealType> 
# 3124
template< class _UniformRandomNumberGenerator> typename piecewise_linear_distribution< _RealType> ::result_type 
# 3127
piecewise_linear_distribution< _RealType> ::operator()(_UniformRandomNumberGenerator &__urng, const param_type &
# 3128
__param) 
# 3129
{ 
# 3131
__detail::_Adaptor< _UniformRandomNumberGenerator, double>  __aurng(__urng); 
# 3133
const double __p = __aurng(); 
# 3134
if ((__param._M_cp).empty()) { 
# 3135
return __p; }  
# 3137
auto __pos = std::lower_bound((__param._M_cp).begin(), (__param._M_cp).end(), __p); 
# 3139
const size_t __i = __pos - (__param._M_cp).begin(); 
# 3141
const double __pref = ((__i > (0)) ? (__param._M_cp)[__i - (1)] : (0.0)); 
# 3143
const double __a = (0.5) * ((__param._M_m)[__i]); 
# 3144
const double __b = (__param._M_den)[__i]; 
# 3145
const double __cm = (__p - __pref); 
# 3147
_RealType __x = (__param._M_int)[__i]; 
# 3148
if (__a == (0)) { 
# 3149
__x += (__cm / __b); } else 
# 3151
{ 
# 3152
const double __d = ((__b * __b) + (((4.0) * __a) * __cm)); 
# 3153
__x += (((0.5) * (std::sqrt(__d) - __b)) / __a); 
# 3154
}  
# 3156
return __x; 
# 3157
} 
# 3159
template< class _RealType> 
# 3160
template< class _ForwardIterator, class 
# 3161
_UniformRandomNumberGenerator> void 
# 3164
piecewise_linear_distribution< _RealType> ::__generate_impl(_ForwardIterator __f, _ForwardIterator __t, _UniformRandomNumberGenerator &
# 3165
__urng, const param_type &
# 3166
__param) 
# 3167
{ 
# 3170
while (__f != __t) { 
# 3171
(*(__f++)) = this->operator()(__urng, __param); }  
# 3172
} 
# 3174
template< class _RealType, class _CharT, class _Traits> basic_ostream< _CharT, _Traits>  &
# 3176
operator<<(basic_ostream< _CharT, _Traits>  &__os, const piecewise_linear_distribution< _RealType>  &
# 3177
__x) 
# 3178
{ 
# 3179
using __ios_base = typename basic_ostream< _CharT, _Traits> ::ios_base; 
# 3181
const typename basic_ostream< _CharT, _Traits> ::ios_base::fmtflags __flags = __os.flags(); 
# 3182
const _CharT __fill = __os.fill(); 
# 3183
const streamsize __precision = __os.precision(); 
# 3184
const _CharT __space = __os.widen(' '); 
# 3185
__os.flags(__ios_base::scientific | __ios_base::left); 
# 3186
__os.fill(__space); 
# 3187
__os.precision(std::template numeric_limits< _RealType> ::max_digits10); 
# 3189
vector< _RealType>  __int = __x.intervals(); 
# 3190
__os << (__int.size() - 1); 
# 3192
for (auto __xit = __int.begin(); __xit != __int.end(); ++__xit) { 
# 3193
(__os << __space) << (*__xit); }  
# 3195
vector< double>  __den = __x.densities(); 
# 3196
for (auto __dit = __den.begin(); __dit != (__den.end()); ++__dit) { 
# 3197
(__os << __space) << (*__dit); }  
# 3199
__os.flags(__flags); 
# 3200
__os.fill(__fill); 
# 3201
__os.precision(__precision); 
# 3202
return __os; 
# 3203
} 
# 3205
template< class _RealType, class _CharT, class _Traits> basic_istream< _CharT, _Traits>  &
# 3207
operator>>(basic_istream< _CharT, _Traits>  &__is, piecewise_linear_distribution< _RealType>  &
# 3208
__x) 
# 3209
{ 
# 3210
using __ios_base = typename basic_istream< _CharT, _Traits> ::ios_base; 
# 3212
const typename basic_istream< _CharT, _Traits> ::ios_base::fmtflags __flags = __is.flags(); 
# 3213
__is.flags(__ios_base::dec | __ios_base::skipws); 
# 3215
size_t __n; 
# 3216
if (__is >> __n) 
# 3217
{ 
# 3218
vector< _RealType>  __int_vec; 
# 3219
if (__detail::__extract_params(__is, __int_vec, __n + (1))) 
# 3220
{ 
# 3221
vector< double>  __den_vec; 
# 3222
if (__detail::__extract_params(__is, __den_vec, __n + (1))) 
# 3223
{ 
# 3224
__x.param({__int_vec.begin(), __int_vec.end(), __den_vec.begin()}); 
# 3226
}  
# 3227
}  
# 3228
}  
# 3229
__is.flags(__flags); 
# 3230
return __is; 
# 3231
} 
# 3234
template< class _IntType, class > 
# 3235
seed_seq::seed_seq(initializer_list< _IntType>  __il) 
# 3236
{ 
# 3237
(_M_v).reserve(__il.size()); 
# 3238
for (auto __iter = __il.begin(); __iter != __il.end(); ++__iter) { 
# 3239
(_M_v).push_back(__detail::__mod< result_type, __detail::_Shift< unsigned, 32> ::__value> (*__iter)); }  
# 3241
} 
# 3243
template< class _InputIterator> 
# 3244
seed_seq::seed_seq(_InputIterator __begin, _InputIterator __end) 
# 3245
{ 
# 3246
if constexpr (__is_random_access_iter< _InputIterator> ::value) { 
# 3247
(_M_v).reserve(std::distance(__begin, __end)); }  
# 3249
for (_InputIterator __iter = __begin; __iter != __end; ++__iter) { 
# 3250
(_M_v).push_back(__detail::__mod< result_type, __detail::_Shift< unsigned, 32> ::__value> (*__iter)); }  
# 3252
} 
# 3254
template< class _RandomAccessIterator> void 
# 3256
seed_seq::generate(_RandomAccessIterator __begin, _RandomAccessIterator 
# 3257
__end) 
# 3258
{ 
# 3260
typedef typename iterator_traits< _RandomAccessIterator> ::value_type _Type; 
# 3262
if (__begin == __end) { 
# 3263
return; }  
# 3265
std::fill(__begin, __end, (_Type)2341178251U); 
# 3267
const size_t __n = __end - __begin; 
# 3268
const size_t __s = (_M_v).size(); 
# 3269
const size_t __t = ((__n >= (623)) ? 11 : ((__n >= (68)) ? 7 : ((__n >= (39)) ? 5 : ((__n >= (7)) ? 3 : ((__n - (1)) / (2)))))); 
# 3274
const size_t __p = ((__n - __t) / (2)); 
# 3275
const size_t __q = (__p + __t); 
# 3276
const size_t __m = std::max((size_t)(__s + (1)), __n); 
# 3291 "/usr/include/c++/11/bits/random.tcc" 3
{ 
# 3292
uint32_t __r1 = 1371501266U; 
# 3293
uint32_t __r2 = __r1 + __s; 
# 3294
(__begin[__p]) += __r1; 
# 3295
(__begin[__q]) = (((uint32_t)(__begin[__q])) + __r2); 
# 3296
(__begin[0]) = __r2; 
# 3297
} 
# 3299
for (size_t __k = (1); __k <= __s; ++__k) 
# 3300
{ 
# 3301
const size_t __kn = __k % __n; 
# 3302
const size_t __kpn = (__k + __p) % __n; 
# 3303
const size_t __kqn = (__k + __q) % __n; 
# 3304
uint32_t __arg = ((__begin[__kn]) ^ (__begin[__kpn])) ^ (__begin[(__k - (1)) % __n]); 
# 3307
uint32_t __r1 = 1664525U * (__arg ^ (__arg >> 27)); 
# 3308
uint32_t __r2 = (__r1 + ((uint32_t)__kn)) + (_M_v)[__k - (1)]; 
# 3309
(__begin[__kpn]) = (((uint32_t)(__begin[__kpn])) + __r1); 
# 3310
(__begin[__kqn]) = (((uint32_t)(__begin[__kqn])) + __r2); 
# 3311
(__begin[__kn]) = __r2; 
# 3312
}  
# 3314
for (size_t __k = __s + (1); __k < __m; ++__k) 
# 3315
{ 
# 3316
const size_t __kn = __k % __n; 
# 3317
const size_t __kpn = (__k + __p) % __n; 
# 3318
const size_t __kqn = (__k + __q) % __n; 
# 3319
uint32_t __arg = ((__begin[__kn]) ^ (__begin[__kpn])) ^ (__begin[(__k - (1)) % __n]); 
# 3322
uint32_t __r1 = 1664525U * (__arg ^ (__arg >> 27)); 
# 3323
uint32_t __r2 = __r1 + ((uint32_t)__kn); 
# 3324
(__begin[__kpn]) = (((uint32_t)(__begin[__kpn])) + __r1); 
# 3325
(__begin[__kqn]) = (((uint32_t)(__begin[__kqn])) + __r2); 
# 3326
(__begin[__kn]) = __r2; 
# 3327
}  
# 3329
for (size_t __k = __m; __k < (__m + __n); ++__k) 
# 3330
{ 
# 3331
const size_t __kn = __k % __n; 
# 3332
const size_t __kpn = (__k + __p) % __n; 
# 3333
const size_t __kqn = (__k + __q) % __n; 
# 3334
uint32_t __arg = ((__begin[__kn]) + (__begin[__kpn])) + (__begin[(__k - (1)) % __n]); 
# 3337
uint32_t __r3 = 1566083941U * (__arg ^ (__arg >> 27)); 
# 3338
uint32_t __r4 = __r3 - __kn; 
# 3339
(__begin[__kpn]) ^= __r3; 
# 3340
(__begin[__kqn]) ^= __r4; 
# 3341
(__begin[__kn]) = __r4; 
# 3342
}  
# 3343
} 
# 3345
template< class _RealType, size_t __bits, class 
# 3346
_UniformRandomNumberGenerator> _RealType 
# 3348
generate_canonical(_UniformRandomNumberGenerator &__urng) 
# 3349
{ 
# 3350
static_assert((std::template is_floating_point< _RealType> ::value), "template argument must be a floating point type");
# 3353
const size_t __b = std::min(static_cast< size_t>(std::template numeric_limits< _RealType> ::digits), __bits); 
# 3356
const long double __r = ((static_cast< long double>(__urng.max())) - (static_cast< long double>(__urng.min()))) + (1.0L); 
# 3358
const size_t __log2r = std::log(__r) / std::log((2.0L)); 
# 3359
const size_t __m = std::max< size_t> (1UL, ((__b + __log2r) - 1UL) / __log2r); 
# 3361
_RealType __ret; 
# 3362
_RealType __sum = ((_RealType)0); 
# 3363
_RealType __tmp = ((_RealType)1); 
# 3364
for (size_t __k = __m; __k != (0); --__k) 
# 3365
{ 
# 3366
__sum += (((_RealType)(__urng() - __urng.min())) * __tmp); 
# 3367
__tmp *= __r; 
# 3368
}  
# 3369
__ret = (__sum / __tmp); 
# 3370
if (__builtin_expect(__ret >= ((_RealType)1), 0)) 
# 3371
{ 
# 3373
__ret = std::nextafter((_RealType)1, (_RealType)0); 
# 3378
}  
# 3379
return __ret; 
# 3380
} 
# 3383
}
# 58 "/usr/include/c++/11/ctime" 3
namespace std { 
# 60
using ::clock_t;
# 61
using ::time_t;
# 62
using ::tm;
# 64
using ::clock;
# 65
using ::difftime;
# 66
using ::mktime;
# 67
using ::time;
# 68
using ::asctime;
# 69
using ::ctime;
# 70
using ::gmtime;
# 71
using ::localtime;
# 72
using ::strftime;
# 73
}
# 77
namespace std { 
# 79
using ::timespec;
# 80
using ::timespec_get;
# 81
}
# 56 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuComplex.h"
#pragma GCC diagnostic ignored "-Wunused-function"
# 72 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuComplex.h"
extern "C" {
# 77
typedef float2 cuFloatComplex; 
# 79
static inline float cuCrealf(cuFloatComplex x) 
# 80
{ 
# 81
return x.x; 
# 82
} 
# 84
static inline float cuCimagf(cuFloatComplex x) 
# 85
{ 
# 86
return x.y; 
# 87
} 
# 89
static inline cuFloatComplex make_cuFloatComplex(float 
# 90
r, float i) 
# 91
{ 
# 92
cuFloatComplex res; 
# 93
(res.x) = r; 
# 94
(res.y) = i; 
# 95
return res; 
# 96
} 
# 98
static inline cuFloatComplex cuConjf(cuFloatComplex x) 
# 99
{ 
# 100
return make_cuFloatComplex(cuCrealf(x), -cuCimagf(x)); 
# 101
} 
# 102
static inline cuFloatComplex cuCaddf(cuFloatComplex x, cuFloatComplex 
# 103
y) 
# 104
{ 
# 105
return make_cuFloatComplex(cuCrealf(x) + cuCrealf(y), cuCimagf(x) + cuCimagf(y)); 
# 107
} 
# 109
static inline cuFloatComplex cuCsubf(cuFloatComplex x, cuFloatComplex 
# 110
y) 
# 111
{ 
# 112
return make_cuFloatComplex(cuCrealf(x) - cuCrealf(y), cuCimagf(x) - cuCimagf(y)); 
# 114
} 
# 121
static inline cuFloatComplex cuCmulf(cuFloatComplex x, cuFloatComplex 
# 122
y) 
# 123
{ 
# 124
cuFloatComplex prod; 
# 125
prod = make_cuFloatComplex((cuCrealf(x) * cuCrealf(y)) - (cuCimagf(x) * cuCimagf(y)), (cuCrealf(x) * cuCimagf(y)) + (cuCimagf(x) * cuCrealf(y))); 
# 129
return prod; 
# 130
} 
# 137
static inline cuFloatComplex cuCdivf(cuFloatComplex x, cuFloatComplex 
# 138
y) 
# 139
{ 
# 140
cuFloatComplex quot; 
# 141
float s = fabsf(cuCrealf(y)) + fabsf(cuCimagf(y)); 
# 142
float oos = (1.0F) / s; 
# 143
float ars = cuCrealf(x) * oos; 
# 144
float ais = cuCimagf(x) * oos; 
# 145
float brs = cuCrealf(y) * oos; 
# 146
float bis = cuCimagf(y) * oos; 
# 147
s = ((brs * brs) + (bis * bis)); 
# 148
oos = ((1.0F) / s); 
# 149
quot = make_cuFloatComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos); 
# 151
return quot; 
# 152
} 
# 162 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuComplex.h"
static inline float cuCabsf(cuFloatComplex x) 
# 163
{ 
# 164
float a = cuCrealf(x); 
# 165
float b = cuCimagf(x); 
# 166
float v, w, t; 
# 167
a = fabsf(a); 
# 168
b = fabsf(b); 
# 169
if (a > b) { 
# 170
v = a; 
# 171
w = b; 
# 172
} else { 
# 173
v = b; 
# 174
w = a; 
# 175
}  
# 176
t = (w / v); 
# 177
t = ((1.0F) + (t * t)); 
# 178
t = (v * sqrtf(t)); 
# 179
if (((v == (0.0F)) || (v > (3.4028235E38F))) || (w > (3.4028235E38F))) { 
# 180
t = (v + w); 
# 181
}  
# 182
return t; 
# 183
} 
# 186
typedef double2 cuDoubleComplex; 
# 188
static inline double cuCreal(cuDoubleComplex x) 
# 189
{ 
# 190
return x.x; 
# 191
} 
# 193
static inline double cuCimag(cuDoubleComplex x) 
# 194
{ 
# 195
return x.y; 
# 196
} 
# 198
static inline cuDoubleComplex make_cuDoubleComplex(double 
# 199
r, double i) 
# 200
{ 
# 201
cuDoubleComplex res; 
# 202
(res.x) = r; 
# 203
(res.y) = i; 
# 204
return res; 
# 205
} 
# 207
static inline cuDoubleComplex cuConj(cuDoubleComplex x) 
# 208
{ 
# 209
return make_cuDoubleComplex(cuCreal(x), -cuCimag(x)); 
# 210
} 
# 212
static inline cuDoubleComplex cuCadd(cuDoubleComplex x, cuDoubleComplex 
# 213
y) 
# 214
{ 
# 215
return make_cuDoubleComplex(cuCreal(x) + cuCreal(y), cuCimag(x) + cuCimag(y)); 
# 217
} 
# 219
static inline cuDoubleComplex cuCsub(cuDoubleComplex x, cuDoubleComplex 
# 220
y) 
# 221
{ 
# 222
return make_cuDoubleComplex(cuCreal(x) - cuCreal(y), cuCimag(x) - cuCimag(y)); 
# 224
} 
# 231
static inline cuDoubleComplex cuCmul(cuDoubleComplex x, cuDoubleComplex 
# 232
y) 
# 233
{ 
# 234
cuDoubleComplex prod; 
# 235
prod = make_cuDoubleComplex((cuCreal(x) * cuCreal(y)) - (cuCimag(x) * cuCimag(y)), (cuCreal(x) * cuCimag(y)) + (cuCimag(x) * cuCreal(y))); 
# 239
return prod; 
# 240
} 
# 247
static inline cuDoubleComplex cuCdiv(cuDoubleComplex x, cuDoubleComplex 
# 248
y) 
# 249
{ 
# 250
cuDoubleComplex quot; 
# 251
double s = fabs(cuCreal(y)) + fabs(cuCimag(y)); 
# 252
double oos = (1.0) / s; 
# 253
double ars = cuCreal(x) * oos; 
# 254
double ais = cuCimag(x) * oos; 
# 255
double brs = cuCreal(y) * oos; 
# 256
double bis = cuCimag(y) * oos; 
# 257
s = ((brs * brs) + (bis * bis)); 
# 258
oos = ((1.0) / s); 
# 259
quot = make_cuDoubleComplex(((ars * brs) + (ais * bis)) * oos, ((ais * brs) - (ars * bis)) * oos); 
# 261
return quot; 
# 262
} 
# 270
static inline double cuCabs(cuDoubleComplex x) 
# 271
{ 
# 272
double a = cuCreal(x); 
# 273
double b = cuCimag(x); 
# 274
double v, w, t; 
# 275
a = fabs(a); 
# 276
b = fabs(b); 
# 277
if (a > b) { 
# 278
v = a; 
# 279
w = b; 
# 280
} else { 
# 281
v = b; 
# 282
w = a; 
# 283
}  
# 284
t = (w / v); 
# 285
t = ((1.0) + (t * t)); 
# 286
t = (v * sqrt(t)); 
# 287
if (((v == (0.0)) || (v > (1.7976931348623157E308))) || (w > (1.7976931348623157E308))) 
# 288
{ 
# 289
t = (v + w); 
# 290
}  
# 291
return t; 
# 292
} 
# 295
}
# 299
typedef cuFloatComplex cuComplex; 
# 300
static inline cuComplex make_cuComplex(float x, float 
# 301
y) 
# 302
{ 
# 303
return make_cuFloatComplex(x, y); 
# 304
} 
# 307
static inline cuDoubleComplex cuComplexFloatToDouble(cuFloatComplex 
# 308
c) 
# 309
{ 
# 310
return make_cuDoubleComplex((double)cuCrealf(c), (double)cuCimagf(c)); 
# 311
} 
# 313
static inline cuFloatComplex cuComplexDoubleToFloat(cuDoubleComplex 
# 314
c) 
# 315
{ 
# 316
return make_cuFloatComplex((float)cuCreal(c), (float)cuCimag(c)); 
# 317
} 
# 320
static inline cuComplex cuCfmaf(cuComplex x, cuComplex y, cuComplex d) 
# 321
{ 
# 322
float real_res; 
# 323
float imag_res; 
# 325
real_res = ((cuCrealf(x) * cuCrealf(y)) + cuCrealf(d)); 
# 326
imag_res = ((cuCrealf(x) * cuCimagf(y)) + cuCimagf(d)); 
# 328
real_res = ((-(cuCimagf(x) * cuCimagf(y))) + real_res); 
# 329
imag_res = ((cuCimagf(x) * cuCrealf(y)) + imag_res); 
# 331
return make_cuComplex(real_res, imag_res); 
# 332
} 
# 334
static inline cuDoubleComplex cuCfma(cuDoubleComplex x, cuDoubleComplex y, cuDoubleComplex d) 
# 335
{ 
# 336
double real_res; 
# 337
double imag_res; 
# 339
real_res = ((cuCreal(x) * cuCreal(y)) + cuCreal(d)); 
# 340
imag_res = ((cuCreal(x) * cuCimag(y)) + cuCimag(d)); 
# 342
real_res = ((-(cuCimag(x) * cuCimag(y))) + real_res); 
# 343
imag_res = ((cuCimag(x) * cuCreal(y)) + imag_res); 
# 345
return make_cuDoubleComplex(real_res, imag_res); 
# 346
} 
# 147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
struct __half; 
# 160 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
struct __half2; 
# 176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __double2half(const double a); 
# 191 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half(const float a); 
# 206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rn(const float a); 
# 221 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rz(const float a); 
# 237 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_rd(const float a); 
# 253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __float2half_ru(const float a); 
# 268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __half2float(const __half a); 
# 286 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __float2half2_rn(const float a); 
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __floats2half2_rn(const float a, const float b); 
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __low2float(const __half2 a); 
# 339 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float __high2float(const __half2 a); 
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline short __half2short_rz(const __half h); 
# 372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned short __half2ushort_rz(const __half h); 
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline int __half2int_rz(const __half h); 
# 404 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned __half2uint_rz(const __half h); 
# 420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline long long __half2ll_rz(const __half h); 
# 437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline unsigned long long __half2ull_rz(const __half h); 
# 459 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half2 __float22half2_rn(const float2 a); 
# 475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline float2 __half22float2(const __half2 a); 
# 491 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rn(const __half h); 
# 507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_rd(const __half h); 
# 523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __half2int_ru(const __half h); 
# 540 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __int2half_rn(const int i); 
# 556 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rz(const int i); 
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_rd(const int i); 
# 588 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __int2half_ru(const int i); 
# 606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rn(const __half h); 
# 622 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_rd(const __half h); 
# 638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half2short_ru(const __half h); 
# 656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __short2half_rn(const short i); 
# 672 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rz(const short i); 
# 688 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_rd(const short i); 
# 704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short2half_ru(const short i); 
# 721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h); 
# 737 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h); 
# 753 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h); 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __uint2half_rn(const unsigned i); 
# 786 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i); 
# 802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i); 
# 818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i); 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h); 
# 848 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h); 
# 860 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h); 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ushort2half_rn(const unsigned short i); 
# 895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i); 
# 911 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i); 
# 927 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i); 
# 945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h); 
# 961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h); 
# 977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h); 
# 995 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ull2half_rn(const unsigned long long i); 
# 1012 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i); 
# 1028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i); 
# 1044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i); 
# 1062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h); 
# 1078 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_rd(const __half h); 
# 1094 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h); 
# 1112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
static inline __half __ll2half_rn(const long long i); 
# 1124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rz(const long long i); 
# 1140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i); 
# 1156 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i); 
# 1173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half htrunc(const __half h); 
# 1188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hceil(const __half h); 
# 1203 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hfloor(const __half h); 
# 1220 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrint(const __half h); 
# 1237 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h); 
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h); 
# 1269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h); 
# 1287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h); 
# 1304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __half2half2(const __half a); 
# 1320 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a); 
# 1340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b); 
# 1360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b); 
# 1375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __high2half(const __half2 a); 
# 1390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __low2half(const __half2 a); 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline int __hisinf(const __half a); 
# 1425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b); 
# 1441 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a); 
# 1457 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a); 
# 1474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline short __half_as_short(const __half h); 
# 1490 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h); 
# 1506 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __short_as_half(const short i); 
# 1522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i); 
# 1541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b); 
# 1560 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b); 
# 1581 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b); 
# 1602 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b); 
# 1621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width = 32); 
# 1622
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width = 32); 
# 1623
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width = 32); 
# 1624
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width = 32); 
# 1625
__attribute((deprecated("__shfl() is deprecated in favor of __shfl_sync() and may be removed in a future release (Use -Wno-deprecated-declarations to sup" "press this warning)."))) __attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width = 32); 
# 1626
__attribute((deprecated("__shfl_up() is deprecated in favor of __shfl_up_sync() and may be removed in a future release (Use -Wno-deprecated-declarations " "to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width = 32); 
# 1627
__attribute((deprecated("__shfl_down() is deprecated in favor of __shfl_down_sync() and may be removed in a future release (Use -Wno-deprecated-declarati" "ons to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width = 32); 
# 1628
__attribute((deprecated("__shfl_xor() is deprecated in favor of __shfl_xor_sync() and may be removed in a future release (Use -Wno-deprecated-declaration" "s to suppress this warning)."))) __attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width = 32); 
# 1654 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1679 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width = 32); 
# 1728 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width = 32); 
# 1753 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width = 32); 
# 1826 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width = 32); 
# 1841 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr); 
# 1848
__attribute__((unused)) static inline __half __ldg(const __half *const ptr); 
# 1855
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr); 
# 1862
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr); 
# 1869
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr); 
# 1876
__attribute__((unused)) static inline __half __ldca(const __half *const ptr); 
# 1883
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr); 
# 1890
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr); 
# 1897
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr); 
# 1904
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr); 
# 1911
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr); 
# 1918
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr); 
# 1925
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value); 
# 1932
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value); 
# 1939
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value); 
# 1946
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value); 
# 1953
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value); 
# 1960
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value); 
# 1967
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value); 
# 1974
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value); 
# 1995 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b); 
# 2013 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b); 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b); 
# 2049 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b); 
# 2067 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b); 
# 2085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b); 
# 2103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b); 
# 2121 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b); 
# 2139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b); 
# 2157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b); 
# 2175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b); 
# 2193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b); 
# 2211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __heq2_mask(const __half2 a, const __half2 b); 
# 2229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hne2_mask(const __half2 a, const __half2 b); 
# 2247 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hle2_mask(const __half2 a, const __half2 b); 
# 2265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hge2_mask(const __half2 a, const __half2 b); 
# 2283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __half2 a, const __half2 b); 
# 2301 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __half2 a, const __half2 b); 
# 2319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __half2 a, const __half2 b); 
# 2337 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __half2 a, const __half2 b); 
# 2355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __half2 a, const __half2 b); 
# 2373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __half2 a, const __half2 b); 
# 2391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __half2 a, const __half2 b); 
# 2409 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __half2 a, const __half2 b); 
# 2425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a); 
# 2445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b); 
# 2465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b); 
# 2485 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b); 
# 2505 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b); 
# 2526 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b); 
# 2547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b); 
# 2567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b); 
# 2584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a); 
# 2603 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b); 
# 2622 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b); 
# 2642 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b); 
# 2665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c); 
# 2687 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c); 
# 2706 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a); 
# 2721 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __habs(const __half a); 
# 2741 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b); 
# 2761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b); 
# 2777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b); 
# 2797 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b); 
# 2817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b); 
# 2833 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b); 
# 2853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b); 
# 2871 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b); 
# 2890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b); 
# 2909 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b); 
# 2932 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c); 
# 2954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c); 
# 2972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hneg(const __half a); 
# 2994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b); 
# 3016 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b); 
# 3038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b); 
# 3060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b); 
# 3082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b); 
# 3104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b); 
# 3126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b); 
# 3148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b); 
# 3170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b); 
# 3193 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b); 
# 3215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b); 
# 3238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b); 
# 3255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b); 
# 3272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b); 
# 3289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b); 
# 3306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b); 
# 3323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b); 
# 3340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b); 
# 3358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b); 
# 3376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b); 
# 3394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b); 
# 3412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b); 
# 3430 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b); 
# 3448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b); 
# 3463 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline bool __hisnan(const __half a); 
# 3482 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b); 
# 3500 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b); 
# 3522 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c); 
# 3542 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b); 
# 3562 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b); 
# 3584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c); 
# 3604 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c); 
# 3619 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsqrt(const __half a); 
# 3636 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrsqrt(const __half a); 
# 3651 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hrcp(const __half a); 
# 3667 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog(const __half a); 
# 3683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog2(const __half a); 
# 3699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hlog10(const __half a); 
# 3716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp(const __half a); 
# 3733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp2(const __half a); 
# 3750 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hexp10(const __half a); 
# 3765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hcos(const __half a); 
# 3780 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half hsin(const __half a); 
# 3796 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a); 
# 3813 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a); 
# 3829 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a); 
# 3846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log(const __half2 a); 
# 3863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a); 
# 3880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a); 
# 3897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a); 
# 3914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a); 
# 3931 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a); 
# 3947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a); 
# 3962 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a); 
# 3985 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val); 
# 4007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.h"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val); 
# 46 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/nv/target"
namespace nv { 
# 47
namespace target { 
# 48
namespace detail { 
# 50
typedef unsigned long long base_int_t; 
# 53
constexpr base_int_t all_hosts = (1); 
# 56
constexpr base_int_t sm_35_bit = (1 << 1); 
# 57
constexpr base_int_t sm_37_bit = (1 << 2); 
# 58
constexpr base_int_t sm_50_bit = (1 << 3); 
# 59
constexpr base_int_t sm_52_bit = (1 << 4); 
# 60
constexpr base_int_t sm_53_bit = (1 << 5); 
# 61
constexpr base_int_t sm_60_bit = (1 << 6); 
# 62
constexpr base_int_t sm_61_bit = (1 << 7); 
# 63
constexpr base_int_t sm_62_bit = (1 << 8); 
# 64
constexpr base_int_t sm_70_bit = (1 << 9); 
# 65
constexpr base_int_t sm_72_bit = (1 << 10); 
# 66
constexpr base_int_t sm_75_bit = (1 << 11); 
# 67
constexpr base_int_t sm_80_bit = (1 << 12); 
# 68
constexpr base_int_t sm_86_bit = (1 << 13); 
# 69
constexpr base_int_t sm_87_bit = (1 << 14); 
# 70
constexpr base_int_t sm_89_bit = (1 << 15); 
# 71
constexpr base_int_t sm_90_bit = (1 << 16); 
# 72
constexpr base_int_t all_devices = (((((((((((((((sm_35_bit | sm_37_bit) | sm_50_bit) | sm_52_bit) | sm_53_bit) | sm_60_bit) | sm_61_bit) | sm_62_bit) | sm_70_bit) | sm_72_bit) | sm_75_bit) | sm_80_bit) | sm_86_bit) | sm_87_bit) | sm_89_bit) | sm_90_bit); 
# 81
struct target_description { 
# 82
base_int_t targets; 
# 84
constexpr target_description(base_int_t a) : targets(a) { } 
# 85
}; 
# 88
enum class sm_selector: base_int_t { 
# 89
sm_35 = 35ULL, sm_37 = 37ULL, 
# 90
sm_50 = 50ULL, sm_52 = 52ULL, sm_53, 
# 91
sm_60 = 60ULL, sm_61, sm_62, 
# 92
sm_70 = 70ULL, sm_72 = 72ULL, sm_75 = 75ULL, 
# 93
sm_80 = 80ULL, sm_86 = 86ULL, sm_87, 
# 94
sm_89 = 89ULL, sm_90
# 95
}; 
# 97
constexpr base_int_t toint(sm_selector a) { 
# 98
return static_cast< base_int_t>(a); 
# 99
} 
# 101
constexpr base_int_t bitexact(sm_selector a) { 
# 102
return (toint(a) == (35)) ? sm_35_bit : ((toint(a) == (37)) ? sm_37_bit : ((toint(a) == (50)) ? sm_50_bit : ((toint(a) == (52)) ? sm_52_bit : ((toint(a) == (53)) ? sm_53_bit : ((toint(a) == (60)) ? sm_60_bit : ((toint(a) == (61)) ? sm_61_bit : ((toint(a) == (62)) ? sm_62_bit : ((toint(a) == (70)) ? sm_70_bit : ((toint(a) == (72)) ? sm_72_bit : ((toint(a) == (75)) ? sm_75_bit : ((toint(a) == (80)) ? sm_80_bit : ((toint(a) == (86)) ? sm_86_bit : ((toint(a) == (87)) ? sm_87_bit : ((toint(a) == (89)) ? sm_89_bit : ((toint(a) == (90)) ? sm_90_bit : (0)))))))))))))))); 
# 118
} 
# 120
constexpr base_int_t bitrounddown(sm_selector a) { 
# 121
return (toint(a) >= (90)) ? sm_90_bit : ((toint(a) >= (89)) ? sm_89_bit : ((toint(a) >= (87)) ? sm_87_bit : ((toint(a) >= (86)) ? sm_86_bit : ((toint(a) >= (80)) ? sm_80_bit : ((toint(a) >= (75)) ? sm_75_bit : ((toint(a) >= (72)) ? sm_72_bit : ((toint(a) >= (70)) ? sm_70_bit : ((toint(a) >= (62)) ? sm_62_bit : ((toint(a) >= (61)) ? sm_61_bit : ((toint(a) >= (60)) ? sm_60_bit : ((toint(a) >= (53)) ? sm_53_bit : ((toint(a) >= (52)) ? sm_52_bit : ((toint(a) >= (50)) ? sm_50_bit : ((toint(a) >= (37)) ? sm_37_bit : ((toint(a) >= (35)) ? sm_35_bit : (0)))))))))))))))); 
# 137
} 
# 142
constexpr target_description is_exactly(sm_selector a) { 
# 143
return ((target_description)(bitexact(a))); 
# 144
} 
# 147
constexpr target_description provides(sm_selector a) { 
# 148
return ((target_description)((~(bitrounddown(a) - (1))) & all_devices)); 
# 149
} 
# 154
constexpr target_description operator&&(target_description a, target_description 
# 155
b) { 
# 156
return ((target_description)((a.targets) & (b.targets))); 
# 157
} 
# 160
constexpr target_description operator||(target_description a, target_description 
# 161
b) { 
# 162
return ((target_description)((a.targets) | (b.targets))); 
# 163
} 
# 166
constexpr target_description operator!(target_description a) { 
# 167
return ((target_description)((~(a.targets)) & (all_devices | all_hosts))); 
# 168
} 
# 169
}
# 171
using detail::target_description;
# 172
using detail::sm_selector;
# 175
constexpr detail::target_description is_host = ((detail::target_description)(detail::all_hosts)); 
# 177
constexpr detail::target_description is_device = ((detail::target_description)(detail::all_devices)); 
# 179
constexpr detail::target_description any_target = ((detail::target_description)(detail::all_hosts | detail::all_devices)); 
# 181
constexpr detail::target_description no_target = ((detail::target_description)(0)); 
# 185
constexpr detail::sm_selector sm_35 = sm_selector::sm_35; 
# 186
constexpr detail::sm_selector sm_37 = sm_selector::sm_37; 
# 187
constexpr detail::sm_selector sm_50 = sm_selector::sm_50; 
# 188
constexpr detail::sm_selector sm_52 = sm_selector::sm_52; 
# 189
constexpr detail::sm_selector sm_53 = sm_selector::sm_53; 
# 190
constexpr detail::sm_selector sm_60 = sm_selector::sm_60; 
# 191
constexpr detail::sm_selector sm_61 = sm_selector::sm_61; 
# 192
constexpr detail::sm_selector sm_62 = sm_selector::sm_62; 
# 193
constexpr detail::sm_selector sm_70 = sm_selector::sm_70; 
# 194
constexpr detail::sm_selector sm_72 = sm_selector::sm_72; 
# 195
constexpr detail::sm_selector sm_75 = sm_selector::sm_75; 
# 196
constexpr detail::sm_selector sm_80 = sm_selector::sm_80; 
# 197
constexpr detail::sm_selector sm_86 = sm_selector::sm_86; 
# 198
constexpr detail::sm_selector sm_87 = sm_selector::sm_87; 
# 199
constexpr detail::sm_selector sm_89 = sm_selector::sm_89; 
# 200
constexpr detail::sm_selector sm_90 = sm_selector::sm_90; 
# 202
using detail::is_exactly;
# 203
using detail::provides;
# 204
}
# 205
}
# 166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
typedef 
# 164
struct __attribute((aligned(2))) { 
# 165
unsigned short x; 
# 166
} __half_raw; 
# 171
typedef 
# 168
struct __attribute((aligned(4))) { 
# 169
unsigned short x; 
# 170
unsigned short y; 
# 171
} __half2_raw; 
# 179
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
struct __attribute((aligned(2))) __half { 
# 194
protected: unsigned short __x; 
# 198
public: __half() = default;
# 204
__half(const __half_raw &hr) : __x(hr.x) { } 
# 205
__half &operator=(const __half_raw &hr) { (__x) = (hr.x); return *this; } 
# 206
volatile __half &operator=(const __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 207
volatile __half &operator=(const volatile __half_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 208
operator __half_raw() const { __half_raw ret; (ret.x) = (__x); return ret; } 
# 209
operator __half_raw() const volatile { __half_raw ret; (ret.x) = (__x); return ret; } 
# 214
__half(const float f) { (__x) = (__float2half(f).__x); } 
# 215
__half(const double f) { (__x) = (__double2half(f).__x); } 
# 217
operator float() const { return __half2float(*this); } 
# 218
__half &operator=(const float f) { (__x) = (__float2half(f).__x); return *this; } 
# 221
__half &operator=(const double f) { (__x) = (__double2half(f).__x); return *this; } 
# 227
__half(const short val) { (__x) = (__short2half_rn(val).__x); } 
# 228
__half(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); } 
# 229
__half(const int val) { (__x) = (__int2half_rn(val).__x); } 
# 230
__half(const unsigned val) { (__x) = (__uint2half_rn(val).__x); } 
# 231
__half(const long long val) { (__x) = (__ll2half_rn(val).__x); } 
# 232
__half(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); } 
# 235
operator short() const { return __half2short_rz(*this); } 
# 236
__half &operator=(const short val) { (__x) = (__short2half_rn(val).__x); return *this; } 
# 238
operator unsigned short() const { return __half2ushort_rz(*this); } 
# 239
__half &operator=(const unsigned short val) { (__x) = (__ushort2half_rn(val).__x); return *this; } 
# 241
operator int() const { return __half2int_rz(*this); } 
# 242
__half &operator=(const int val) { (__x) = (__int2half_rn(val).__x); return *this; } 
# 244
operator unsigned() const { return __half2uint_rz(*this); } 
# 245
__half &operator=(const unsigned val) { (__x) = (__uint2half_rn(val).__x); return *this; } 
# 247
operator long long() const { return __half2ll_rz(*this); } 
# 248
__half &operator=(const long long val) { (__x) = (__ll2half_rn(val).__x); return *this; } 
# 250
operator unsigned long long() const { return __half2ull_rz(*this); } 
# 251
__half &operator=(const unsigned long long val) { (__x) = (__ull2half_rn(val).__x); return *this; } 
# 254
operator bool() const { return ((__x) & 32767U) != 0U; } 
# 257
}; 
# 266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 266
{ return __hadd(lh, rh); } 
#endif
# 267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 267
{ return __hsub(lh, rh); } 
#endif
# 268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator*(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 268
{ return __hmul(lh, rh); } 
#endif
# 269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator/(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 269
{ return __hdiv(lh, rh); } 
#endif
# 271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator+=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 271
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 272 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator-=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 272
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator*=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 273
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator/=(__half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 274
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator++(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 277
{ __half_raw one; (one.x) = (15360U); (h += one); return h; } 
#endif
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half &operator--(__half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 278
{ __half_raw one; (one.x) = (15360U); (h -= one); return h; } 
#endif
# 279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator++(__half &h, const int ignored) 
# 280
{int volatile ___ = 1;(void)h;(void)ignored;
# 289
::exit(___);}
#if 0
# 280
{ 
# 282
static_cast< void>(ignored); 
# 284
const __half ret = h; 
# 285
__half_raw one; 
# 286
(one.x) = (15360U); 
# 287
(h += one); 
# 288
return ret; 
# 289
} 
#endif
# 290 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator--(__half &h, const int ignored) 
# 291
{int volatile ___ = 1;(void)h;(void)ignored;
# 300
::exit(___);}
#if 0
# 291
{ 
# 293
static_cast< void>(ignored); 
# 295
const __half ret = h; 
# 296
__half_raw one; 
# 297
(one.x) = (15360U); 
# 298
(h -= one); 
# 299
return ret; 
# 300
} 
#endif
# 303 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator+(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 303
{ return h; } 
#endif
# 304 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half operator-(const __half &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 304
{ return __hneg(h); } 
#endif
# 307 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 307
{ return __heq(lh, rh); } 
#endif
# 308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 308
{ return __hneu(lh, rh); } 
#endif
# 309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 309
{ return __hgt(lh, rh); } 
#endif
# 310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 310
{ return __hlt(lh, rh); } 
#endif
# 311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 311
{ return __hge(lh, rh); } 
#endif
# 312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half &lh, const __half &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 312
{ return __hle(lh, rh); } 
#endif
# 318 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
struct __attribute((aligned(4))) __half2 { 
# 319
__half x; 
# 320
__half y; 
# 325
__half2() = default;
# 326
__half2(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 327
__half2 &operator=(const __half2 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 331
__half2(const __half &a, const __half &b) : x(a), y(b) { } 
# 332
__half2(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 333
__half2 &operator=(const __half2 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 336
__half2(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 337
__half2 &operator=(const __half2_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 338
operator __half2_raw() const { __half2_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 339
}; 
# 347
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 347
{ return __hadd2(lh, rh); } 
#endif
# 348 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 348
{ return __hsub2(lh, rh); } 
#endif
# 349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator*(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 349
{ return __hmul2(lh, rh); } 
#endif
# 350 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator/(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 350
{ return __h2div(lh, rh); } 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator+=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 352
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator-=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 353
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 354 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator*=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 354
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator/=(__half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 355
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 357 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator++(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 357
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hadd2(h, one))); return h; } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 &operator--(__half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 358
{ __half2_raw one; (one.x) = (15360U); (one.y) = (15360U); (h = (__hsub2(h, one))); return h; } 
#endif
# 359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator++(__half2 &h, const int ignored) 
# 360
{int volatile ___ = 1;(void)h;(void)ignored;
# 370
::exit(___);}
#if 0
# 360
{ 
# 362
static_cast< void>(ignored); 
# 364
const __half2 ret = h; 
# 365
__half2_raw one; 
# 366
(one.x) = (15360U); 
# 367
(one.y) = (15360U); 
# 368
(h = (__hadd2(h, one))); 
# 369
return ret; 
# 370
} 
#endif
# 371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator--(__half2 &h, const int ignored) 
# 372
{int volatile ___ = 1;(void)h;(void)ignored;
# 382
::exit(___);}
#if 0
# 372
{ 
# 374
static_cast< void>(ignored); 
# 376
const __half2 ret = h; 
# 377
__half2_raw one; 
# 378
(one.x) = (15360U); 
# 379
(one.y) = (15360U); 
# 380
(h = (__hsub2(h, one))); 
# 381
return ret; 
# 382
} 
#endif
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator+(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 384
{ return h; } 
#endif
# 385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __half2 operator-(const __half2 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 385
{ return __hneg2(h); } 
#endif
# 387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 387
{ return __hbeq2(lh, rh); } 
#endif
# 388 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 388
{ return __hbneu2(lh, rh); } 
#endif
# 389 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 389
{ return __hbgt2(lh, rh); } 
#endif
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 390
{ return __hblt2(lh, rh); } 
#endif
# 391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 391
{ return __hbge2(lh, rh); } 
#endif
# 392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __half2 &lh, const __half2 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 392
{ return __hble2(lh, rh); } 
#endif
# 405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
#pragma GCC diagnostic pop
# 413
static inline unsigned short __internal_float2half(const float f, unsigned &sign, unsigned &remainder) 
# 414
{ 
# 415
unsigned x; 
# 416
unsigned u; 
# 417
unsigned result; 
# 419
(void)memcpy(&x, &f, sizeof f); 
# 423
u = (x & 2147483647U); 
# 424
sign = ((x >> 16U) & 32768U); 
# 426
if (u >= 2139095040U) { 
# 427
remainder = 0U; 
# 428
result = ((u == 2139095040U) ? sign | 31744U : 32767U); 
# 429
} else { if (u > 1199566847U) { 
# 430
remainder = 2147483648U; 
# 431
result = (sign | 31743U); 
# 432
} else { if (u >= 947912704U) { 
# 433
remainder = (u << 19U); 
# 434
u -= 939524096U; 
# 435
result = (sign | (u >> 13U)); 
# 436
} else { if (u < 855638017U) { 
# 437
remainder = u; 
# 438
result = sign; 
# 439
} else { 
# 440
const unsigned exponent = u >> 23U; 
# 441
const unsigned shift = 126U - exponent; 
# 442
unsigned mantissa = u & 8388607U; 
# 443
mantissa |= 8388608U; 
# 444
remainder = (mantissa << (32U - shift)); 
# 445
result = (sign | (mantissa >> shift)); 
# 446
result &= 65535U; 
# 447
}  }  }  }  
# 448
return static_cast< unsigned short>(result); 
# 449
} 
# 452
static inline __half __double2half(const double a) 
# 453
{ 
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half result; unsigned long long absa; unsigned long long ua; (void)memcpy(&ua, &a, sizeof a); absa = (ua & 9223372036854775807ULL); if ((absa >= 4679240012837945344ULL) || (absa <= 4494592428115755008ULL)) { result = __float2half(static_cast< float>(a)); } else { unsigned long long shifterBits; if (absa >= 4544132024016830464ULL) { shifterBits = ((ua & 9218868437227405312ULL) + 189151184349560832ULL); } else { shifterBits = 4733283208366391296ULL; }  shifterBits |= 2251799813685248ULL; double shifter; (void)memcpy(&shifter, &shifterBits, sizeof shifterBits); double aShiftRound = a + shifter; unsigned long long aShiftRoundBits; (void)memcpy(&aShiftRoundBits, &aShiftRound, sizeof aShiftRound); aShiftRoundBits &= 9223372036854775807ULL; (void)memcpy(&aShiftRound, &aShiftRoundBits, sizeof aShiftRound); result = __float2half(static_cast< float>(aShiftRound - shifter)); }  return result; 
# 454 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
# 593
static inline __half __float2half(const float a) 
# 594
{ 
# 595
__half val; 
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 596 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 608 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 609
} 
# 610
static inline __half __float2half_rn(const float a) 
# 611
{ 
# 612
__half val; 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 625 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 626
} 
# 627
static inline __half __float2half_rz(const float a) 
# 628
{ 
# 629
__half val; 
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); (val = r); 
# 630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 640
} 
# 641
static inline __half __float2half_rd(const float a) 
# 642
{ 
# 643
__half val; 
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder != 0U) && (sign != 0U)) { (r.x)++; }  (val = r); 
# 644 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 657
} 
# 658
static inline __half __float2half_ru(const float a) 
# 659
{ 
# 660
__half val; 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__half_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2half(a, sign, remainder); if ((remainder != 0U) && (sign == 0U)) { (r.x)++; }  (val = r); 
# 661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 673 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 674
} 
# 675
static inline __half2 __float2half2_rn(const float a) 
# 676
{ 
# 677
__half2 val; 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
(val = __half2(__float2half_rn(a), __float2half_rn(a))); 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 686
} 
# 689
__attribute__((unused)) static inline __half2 __internal_device_float2_to_half2_rn(const float a, const float b) {int volatile ___ = 1;(void)a;(void)b;
# 701 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 689 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 690
__half2 val; 
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__asm__("{.reg .f16 low,high;\n  cvt.rn.f16.f32 low, %1;\n  cvt.rn.f16.f32 high, %2;\n  mov.b32 %0, {low,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "f" (a), "f" (b)); 
# 691 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 700 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 701
} 
#endif
# 705 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half2 __floats2half2_rn(const float a, const float b) 
# 706
{ 
# 707
__half2 val; 
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
(val = __half2(__float2half_rn(a), __float2half_rn(b))); 
# 708 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 713 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 714
} 
# 717
static inline float __internal_half2float(const unsigned short h) 
# 718
{ 
# 719
unsigned sign = ((static_cast< unsigned>(h)) >> 15U) & 1U; 
# 720
unsigned exponent = ((static_cast< unsigned>(h)) >> 10U) & 31U; 
# 721
unsigned mantissa = ((static_cast< unsigned>(h)) & 1023U) << 13U; 
# 722
float f; 
# 723
if (exponent == 31U) { 
# 725
sign = ((mantissa != 0U) ? sign >> 1U : sign); 
# 726
mantissa = ((mantissa != 0U) ? 8388607U : 0U); 
# 727
exponent = 255U; 
# 728
} else { if (exponent == 0U) { 
# 729
if (mantissa != 0U) { 
# 730
unsigned msb; 
# 731
exponent = 113U; 
# 732
do { 
# 733
msb = (mantissa & 4194304U); 
# 734
mantissa <<= 1U; 
# 735
--exponent; 
# 736
} while (msb == 0U); 
# 737
mantissa &= 8388607U; 
# 738
}  
# 739
} else { 
# 740
exponent += 112U; 
# 741
}  }  
# 742
const unsigned u = ((sign << 31U) | (exponent << 23U)) | mantissa; 
# 744
(void)memcpy(&f, &u, sizeof u); 
# 748
return f; 
# 749
} 
# 752
static inline float __half2float(const __half a) 
# 753
{ 
# 754
float val; 
# 755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
val = __internal_half2float(((__half_raw)a).x); 
# 755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 760 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 761
} 
# 762
static inline float __low2float(const __half2 a) 
# 763
{ 
# 764
float val; 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
val = __internal_half2float(((__half2_raw)a).x); 
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 772 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 773
} 
# 774
static inline float __high2float(const __half2 a) 
# 775
{ 
# 776
float val; 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
val = __internal_half2float(((__half2_raw)a).y); 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return val; 
# 785
} 
# 786
static inline short __half2short_rz(const __half h) 
# 787
{ 
# 788
short i; 
# 789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const short max_val = ((short)32767U); const short min_val = ((short)32768U); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = (0); } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< short>(f)); }  }  }  
# 789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 812
} 
# 813
static inline unsigned short __half2ushort_rz(const __half h) 
# 814
{ 
# 815
unsigned short i; 
# 816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const unsigned short max_val = (65535U); const unsigned short min_val = (0U); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = (0U); } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned short>(f)); }  }  }  
# 816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 838 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 839
} 
# 840
static inline int __half2int_rz(const __half h) 
# 841
{ 
# 842
int i; 
# 843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const int max_val = ((int)2147483647U); const int min_val = ((int)2147483648U); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = 0; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< int>(f)); }  }  }  
# 843 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 866
} 
# 867
static inline unsigned __half2uint_rz(const __half h) 
# 868
{ 
# 869
unsigned i; 
# 870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const unsigned max_val = 4294967295U; const unsigned min_val = 0U; const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = 0U; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned>(f)); }  }  }  
# 870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 892 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 893
} 
# 894
static inline long long __half2ll_rz(const __half h) 
# 895
{ 
# 896
long long i; 
# 897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const long long max_val = ((long long)9223372036854775807ULL); const long long min_val = ((long long)9223372036854775808ULL); const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = min_val; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< long long>(f)); }  }  }  
# 897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 919 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 920
} 
# 921
static inline unsigned long long __half2ull_rz(const __half h) 
# 922
{ 
# 923
unsigned long long i; 
# 924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = __half2float(h); const unsigned long long max_val = 18446744073709551615ULL; const unsigned long long min_val = 0ULL; const unsigned short bits = static_cast< unsigned short>((((__half_raw)h).x) << 1U); if (bits > ((unsigned short)63488U)) { i = 9223372036854775808ULL; } else { if (f > (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned long long>(f)); }  }  }  
# 924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return i; 
# 947
} 
# 953
static inline __half2 make_half2(const __half x, const __half y) 
# 954
{ 
# 955
__half2 t; (t.x) = x; (t.y) = y; return t; 
# 956
} 
# 961
static inline __half2 __float22half2_rn(const float2 a) 
# 962
{ 
# 963
const __half2 val = __floats2half2_rn(a.x, a.y); 
# 964
return val; 
# 965
} 
# 966
static inline float2 __half22float2(const __half2 a) 
# 967
{ 
# 968
float hi_float; 
# 969
float lo_float; 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
lo_float = __internal_half2float(((__half2_raw)a).x); hi_float = __internal_half2float(((__half2_raw)a).y); 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return make_float2(lo_float, hi_float); 
# 983
} 
# 984
__attribute__((unused)) static inline int __half2int_rn(const __half h) 
# 985
{int volatile ___ = 1;(void)h;
# 989
::exit(___);}
#if 0
# 985
{ 
# 986
int i; 
# 987
__asm__("cvt.rni.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 988
return i; 
# 989
} 
#endif
# 990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __half2int_rd(const __half h) 
# 991
{int volatile ___ = 1;(void)h;
# 995
::exit(___);}
#if 0
# 991
{ 
# 992
int i; 
# 993
__asm__("cvt.rmi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 994
return i; 
# 995
} 
#endif
# 996 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __half2int_ru(const __half h) 
# 997
{int volatile ___ = 1;(void)h;
# 1001
::exit(___);}
#if 0
# 997
{ 
# 998
int i; 
# 999
__asm__("cvt.rpi.s32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1000
return i; 
# 1001
} 
#endif
# 1002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __int2half_rn(const int i) 
# 1003
{ 
# 1004
__half h; 
# 1005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1016
} 
# 1017
__attribute__((unused)) static inline __half __int2half_rz(const int i) 
# 1018
{int volatile ___ = 1;(void)i;
# 1022
::exit(___);}
#if 0
# 1018
{ 
# 1019
__half h; 
# 1020
__asm__("cvt.rz.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1021
return h; 
# 1022
} 
#endif
# 1023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_rd(const int i) 
# 1024
{int volatile ___ = 1;(void)i;
# 1028
::exit(___);}
#if 0
# 1024
{ 
# 1025
__half h; 
# 1026
__asm__("cvt.rm.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1027
return h; 
# 1028
} 
#endif
# 1029 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __int2half_ru(const int i) 
# 1030
{int volatile ___ = 1;(void)i;
# 1034
::exit(___);}
#if 0
# 1030
{ 
# 1031
__half h; 
# 1032
__asm__("cvt.rp.f16.s32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1033
return h; 
# 1034
} 
#endif
# 1036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_rn(const __half h) 
# 1037
{int volatile ___ = 1;(void)h;
# 1041
::exit(___);}
#if 0
# 1037
{ 
# 1038
short i; 
# 1039
__asm__("cvt.rni.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1040
return i; 
# 1041
} 
#endif
# 1042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_rd(const __half h) 
# 1043
{int volatile ___ = 1;(void)h;
# 1047
::exit(___);}
#if 0
# 1043
{ 
# 1044
short i; 
# 1045
__asm__("cvt.rmi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1046
return i; 
# 1047
} 
#endif
# 1048 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half2short_ru(const __half h) 
# 1049
{int volatile ___ = 1;(void)h;
# 1053
::exit(___);}
#if 0
# 1049
{ 
# 1050
short i; 
# 1051
__asm__("cvt.rpi.s16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1052
return i; 
# 1053
} 
#endif
# 1054 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __short2half_rn(const short i) 
# 1055
{ 
# 1056
__half h; 
# 1057 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1057 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1057 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1063 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1064
} 
# 1065
__attribute__((unused)) static inline __half __short2half_rz(const short i) 
# 1066
{int volatile ___ = 1;(void)i;
# 1070
::exit(___);}
#if 0
# 1066
{ 
# 1067
__half h; 
# 1068
__asm__("cvt.rz.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1069
return h; 
# 1070
} 
#endif
# 1071 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_rd(const short i) 
# 1072
{int volatile ___ = 1;(void)i;
# 1076
::exit(___);}
#if 0
# 1072
{ 
# 1073
__half h; 
# 1074
__asm__("cvt.rm.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1075
return h; 
# 1076
} 
#endif
# 1077 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short2half_ru(const short i) 
# 1078
{int volatile ___ = 1;(void)i;
# 1082
::exit(___);}
#if 0
# 1078
{ 
# 1079
__half h; 
# 1080
__asm__("cvt.rp.f16.s16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1081
return h; 
# 1082
} 
#endif
# 1084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_rn(const __half h) 
# 1085
{int volatile ___ = 1;(void)h;
# 1089
::exit(___);}
#if 0
# 1085
{ 
# 1086
unsigned i; 
# 1087
__asm__("cvt.rni.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1088
return i; 
# 1089
} 
#endif
# 1090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_rd(const __half h) 
# 1091
{int volatile ___ = 1;(void)h;
# 1095
::exit(___);}
#if 0
# 1091
{ 
# 1092
unsigned i; 
# 1093
__asm__("cvt.rmi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1094
return i; 
# 1095
} 
#endif
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __half2uint_ru(const __half h) 
# 1097
{int volatile ___ = 1;(void)h;
# 1101
::exit(___);}
#if 0
# 1097
{ 
# 1098
unsigned i; 
# 1099
__asm__("cvt.rpi.u32.f16 %0, %1;" : "=r" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1100
return i; 
# 1101
} 
#endif
# 1102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __uint2half_rn(const unsigned i) 
# 1103
{ 
# 1104
__half h; 
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1116
} 
# 1117
__attribute__((unused)) static inline __half __uint2half_rz(const unsigned i) 
# 1118
{int volatile ___ = 1;(void)i;
# 1122
::exit(___);}
#if 0
# 1118
{ 
# 1119
__half h; 
# 1120
__asm__("cvt.rz.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1121
return h; 
# 1122
} 
#endif
# 1123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_rd(const unsigned i) 
# 1124
{int volatile ___ = 1;(void)i;
# 1128
::exit(___);}
#if 0
# 1124
{ 
# 1125
__half h; 
# 1126
__asm__("cvt.rm.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1127
return h; 
# 1128
} 
#endif
# 1129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __uint2half_ru(const unsigned i) 
# 1130
{int volatile ___ = 1;(void)i;
# 1134
::exit(___);}
#if 0
# 1130
{ 
# 1131
__half h; 
# 1132
__asm__("cvt.rp.f16.u32 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "r" (i)); 
# 1133
return h; 
# 1134
} 
#endif
# 1136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_rn(const __half h) 
# 1137
{int volatile ___ = 1;(void)h;
# 1141
::exit(___);}
#if 0
# 1137
{ 
# 1138
unsigned short i; 
# 1139
__asm__("cvt.rni.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1140
return i; 
# 1141
} 
#endif
# 1142 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_rd(const __half h) 
# 1143
{int volatile ___ = 1;(void)h;
# 1147
::exit(___);}
#if 0
# 1143
{ 
# 1144
unsigned short i; 
# 1145
__asm__("cvt.rmi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1146
return i; 
# 1147
} 
#endif
# 1148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half2ushort_ru(const __half h) 
# 1149
{int volatile ___ = 1;(void)h;
# 1153
::exit(___);}
#if 0
# 1149
{ 
# 1150
unsigned short i; 
# 1151
__asm__("cvt.rpi.u16.f16 %0, %1;" : "=h" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1152
return i; 
# 1153
} 
#endif
# 1154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ushort2half_rn(const unsigned short i) 
# 1155
{ 
# 1156
__half h; 
# 1157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1157 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1163 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1164
} 
# 1165
__attribute__((unused)) static inline __half __ushort2half_rz(const unsigned short i) 
# 1166
{int volatile ___ = 1;(void)i;
# 1170
::exit(___);}
#if 0
# 1166
{ 
# 1167
__half h; 
# 1168
__asm__("cvt.rz.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1169
return h; 
# 1170
} 
#endif
# 1171 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_rd(const unsigned short i) 
# 1172
{int volatile ___ = 1;(void)i;
# 1176
::exit(___);}
#if 0
# 1172
{ 
# 1173
__half h; 
# 1174
__asm__("cvt.rm.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1175
return h; 
# 1176
} 
#endif
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort2half_ru(const unsigned short i) 
# 1178
{int volatile ___ = 1;(void)i;
# 1182
::exit(___);}
#if 0
# 1178
{ 
# 1179
__half h; 
# 1180
__asm__("cvt.rp.f16.u16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "h" (i)); 
# 1181
return h; 
# 1182
} 
#endif
# 1184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_rn(const __half h) 
# 1185
{int volatile ___ = 1;(void)h;
# 1189
::exit(___);}
#if 0
# 1185
{ 
# 1186
unsigned long long i; 
# 1187
__asm__("cvt.rni.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1188
return i; 
# 1189
} 
#endif
# 1190 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_rd(const __half h) 
# 1191
{int volatile ___ = 1;(void)h;
# 1195
::exit(___);}
#if 0
# 1191
{ 
# 1192
unsigned long long i; 
# 1193
__asm__("cvt.rmi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1194
return i; 
# 1195
} 
#endif
# 1196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned long long __half2ull_ru(const __half h) 
# 1197
{int volatile ___ = 1;(void)h;
# 1201
::exit(___);}
#if 0
# 1197
{ 
# 1198
unsigned long long i; 
# 1199
__asm__("cvt.rpi.u64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1200
return i; 
# 1201
} 
#endif
# 1202 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ull2half_rn(const unsigned long long i) 
# 1203
{ 
# 1204
__half h; 
# 1205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1205 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1215 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1216
} 
# 1217
__attribute__((unused)) static inline __half __ull2half_rz(const unsigned long long i) 
# 1218
{int volatile ___ = 1;(void)i;
# 1222
::exit(___);}
#if 0
# 1218
{ 
# 1219
__half h; 
# 1220
__asm__("cvt.rz.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1221
return h; 
# 1222
} 
#endif
# 1223 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_rd(const unsigned long long i) 
# 1224
{int volatile ___ = 1;(void)i;
# 1228
::exit(___);}
#if 0
# 1224
{ 
# 1225
__half h; 
# 1226
__asm__("cvt.rm.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1227
return h; 
# 1228
} 
#endif
# 1229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ull2half_ru(const unsigned long long i) 
# 1230
{int volatile ___ = 1;(void)i;
# 1234
::exit(___);}
#if 0
# 1230
{ 
# 1231
__half h; 
# 1232
__asm__("cvt.rp.f16.u64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1233
return h; 
# 1234
} 
#endif
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_rn(const __half h) 
# 1237
{int volatile ___ = 1;(void)h;
# 1241
::exit(___);}
#if 0
# 1237
{ 
# 1238
long long i; 
# 1239
__asm__("cvt.rni.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1240
return i; 
# 1241
} 
#endif
# 1242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_rd(const __half h) 
# 1243
{int volatile ___ = 1;(void)h;
# 1247
::exit(___);}
#if 0
# 1243
{ 
# 1244
long long i; 
# 1245
__asm__("cvt.rmi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1246
return i; 
# 1247
} 
#endif
# 1248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline long long __half2ll_ru(const __half h) 
# 1249
{int volatile ___ = 1;(void)h;
# 1253
::exit(___);}
#if 0
# 1249
{ 
# 1250
long long i; 
# 1251
__asm__("cvt.rpi.s64.f16 %0, %1;" : "=l" (i) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1252
return i; 
# 1253
} 
#endif
# 1254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
static inline __half __ll2half_rn(const long long i) 
# 1255
{ 
# 1256
__half h; 
# 1257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
{ 
# 1257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
const float f = static_cast< float>(i); h = __float2half_rn(f); 
# 1257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp" 3
} 
# 1267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
return h; 
# 1268
} 
# 1269
__attribute__((unused)) static inline __half __ll2half_rz(const long long i) 
# 1270
{int volatile ___ = 1;(void)i;
# 1274
::exit(___);}
#if 0
# 1270
{ 
# 1271
__half h; 
# 1272
__asm__("cvt.rz.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1273
return h; 
# 1274
} 
#endif
# 1275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_rd(const long long i) 
# 1276
{int volatile ___ = 1;(void)i;
# 1280
::exit(___);}
#if 0
# 1276
{ 
# 1277
__half h; 
# 1278
__asm__("cvt.rm.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1279
return h; 
# 1280
} 
#endif
# 1281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ll2half_ru(const long long i) 
# 1282
{int volatile ___ = 1;(void)i;
# 1286
::exit(___);}
#if 0
# 1282
{ 
# 1283
__half h; 
# 1284
__asm__("cvt.rp.f16.s64 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&h))) : "l" (i)); 
# 1285
return h; 
# 1286
} 
#endif
# 1288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half htrunc(const __half h) 
# 1289
{int volatile ___ = 1;(void)h;
# 1293
::exit(___);}
#if 0
# 1289
{ 
# 1290
__half r; 
# 1291
__asm__("cvt.rzi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1292
return r; 
# 1293
} 
#endif
# 1294 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hceil(const __half h) 
# 1295
{int volatile ___ = 1;(void)h;
# 1299
::exit(___);}
#if 0
# 1295
{ 
# 1296
__half r; 
# 1297
__asm__("cvt.rpi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1298
return r; 
# 1299
} 
#endif
# 1300 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hfloor(const __half h) 
# 1301
{int volatile ___ = 1;(void)h;
# 1305
::exit(___);}
#if 0
# 1301
{ 
# 1302
__half r; 
# 1303
__asm__("cvt.rmi.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1304
return r; 
# 1305
} 
#endif
# 1306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrint(const __half h) 
# 1307
{int volatile ___ = 1;(void)h;
# 1311
::exit(___);}
#if 0
# 1307
{ 
# 1308
__half r; 
# 1309
__asm__("cvt.rni.f16.f16 %0, %1;" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1310
return r; 
# 1311
} 
#endif
# 1313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2trunc(const __half2 h) 
# 1314
{int volatile ___ = 1;(void)h;
# 1322
::exit(___);}
#if 0
# 1314
{ 
# 1315
__half2 val; 
# 1316
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rzi.f16.f16 low, low;\n  cvt.rzi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1321
return val; 
# 1322
} 
#endif
# 1323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2ceil(const __half2 h) 
# 1324
{int volatile ___ = 1;(void)h;
# 1332
::exit(___);}
#if 0
# 1324
{ 
# 1325
__half2 val; 
# 1326
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rpi.f16.f16 low, low;\n  cvt.rpi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1331
return val; 
# 1332
} 
#endif
# 1333 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2floor(const __half2 h) 
# 1334
{int volatile ___ = 1;(void)h;
# 1342
::exit(___);}
#if 0
# 1334
{ 
# 1335
__half2 val; 
# 1336
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rmi.f16.f16 low, low;\n  cvt.rmi.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1341
return val; 
# 1342
} 
#endif
# 1343 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rint(const __half2 h) 
# 1344
{int volatile ___ = 1;(void)h;
# 1352
::exit(___);}
#if 0
# 1344
{ 
# 1345
__half2 val; 
# 1346
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  cvt.rni.f16.f16 low, low;\n  cvt.rni.f16.f16 high, high;\n  mov.b32 %0, {low," "high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&h)))); 
# 1351
return val; 
# 1352
} 
#endif
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lows2half2(const __half2 a, const __half2 b) 
# 1354
{int volatile ___ = 1;(void)a;(void)b;
# 1361
::exit(___);}
#if 0
# 1354
{ 
# 1355
__half2 val; 
# 1356
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1360
return val; 
# 1361
} 
#endif
# 1362 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __highs2half2(const __half2 a, const __half2 b) 
# 1363
{int volatile ___ = 1;(void)a;(void)b;
# 1370
::exit(___);}
#if 0
# 1363
{ 
# 1364
__half2 val; 
# 1365
__asm__("{.reg .f16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1369
return val; 
# 1370
} 
#endif
# 1371 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __low2half(const __half2 a) 
# 1372
{int volatile ___ = 1;(void)a;
# 1378
::exit(___);}
#if 0
# 1372
{ 
# 1373
__half ret; 
# 1374
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1377
return ret; 
# 1378
} 
#endif
# 1379 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline int __hisinf(const __half a) 
# 1380
{int volatile ___ = 1;(void)a;
# 1390
::exit(___);}
#if 0
# 1380
{ 
# 1381
int retval; 
# 1382
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 64512U) { 
# 1383
retval = (-1); 
# 1384
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 31744U) { 
# 1385
retval = 1; 
# 1386
} else { 
# 1387
retval = 0; 
# 1388
}  }  
# 1389
return retval; 
# 1390
} 
#endif
# 1391 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __low2half2(const __half2 a) 
# 1392
{int volatile ___ = 1;(void)a;
# 1398
::exit(___);}
#if 0
# 1392
{ 
# 1393
__half2 val; 
# 1394
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1397
return val; 
# 1398
} 
#endif
# 1399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __high2half2(const __half2 a) 
# 1400
{int volatile ___ = 1;(void)a;
# 1406
::exit(___);}
#if 0
# 1400
{ 
# 1401
__half2 val; 
# 1402
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1405
return val; 
# 1406
} 
#endif
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __high2half(const __half2 a) 
# 1408
{int volatile ___ = 1;(void)a;
# 1414
::exit(___);}
#if 0
# 1408
{ 
# 1409
__half ret; 
# 1410
__asm__("{.reg .f16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1413
return ret; 
# 1414
} 
#endif
# 1415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __halves2half2(const __half a, const __half b) 
# 1416
{int volatile ___ = 1;(void)a;(void)b;
# 1421
::exit(___);}
#if 0
# 1416
{ 
# 1417
__half2 val; 
# 1418
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1420
return val; 
# 1421
} 
#endif
# 1422 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __half2half2(const __half a) 
# 1423
{int volatile ___ = 1;(void)a;
# 1428
::exit(___);}
#if 0
# 1423
{ 
# 1424
__half2 val; 
# 1425
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1427
return val; 
# 1428
} 
#endif
# 1429 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __lowhigh2highlow(const __half2 a) 
# 1430
{int volatile ___ = 1;(void)a;
# 1436
::exit(___);}
#if 0
# 1430
{ 
# 1431
__half2 val; 
# 1432
__asm__("{.reg .f16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1435
return val; 
# 1436
} 
#endif
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline short __half_as_short(const __half h) 
# 1438
{int volatile ___ = 1;(void)h;
# 1440
::exit(___);}
#if 0
# 1438
{ 
# 1439
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1440
} 
#endif
# 1441 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned short __half_as_ushort(const __half h) 
# 1442
{int volatile ___ = 1;(void)h;
# 1444
::exit(___);}
#if 0
# 1442
{ 
# 1443
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1444
} 
#endif
# 1445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __short_as_half(const short i) 
# 1446
{int volatile ___ = 1;(void)i;
# 1450
::exit(___);}
#if 0
# 1446
{ 
# 1447
__half h; 
# 1448
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1449
return h; 
# 1450
} 
#endif
# 1451 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ushort_as_half(const unsigned short i) 
# 1452
{int volatile ___ = 1;(void)i;
# 1456
::exit(___);}
#if 0
# 1452
{ 
# 1453
__half h; 
# 1454
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1455
return h; 
# 1456
} 
#endif
# 1461 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax(const __half a, const __half b) 
# 1462
{int volatile ___ = 1;(void)a;(void)b;
# 1474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1462 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1464
{ __half val; __asm__("{max.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1474 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1475 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin(const __half a, const __half b) 
# 1476
{int volatile ___ = 1;(void)a;(void)b;
# 1488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1476 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1478
{ __half val; __asm__("{min.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 1488 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1493 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2(const __half2 a, const __half2 b) 
# 1494
{int volatile ___ = 1;(void)a;(void)b;
# 1508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1494 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1496
{ __half2 val; __asm__("{max.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1509 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2(const __half2 a, const __half2 b) 
# 1510
{int volatile ___ = 1;(void)a;(void)b;
# 1524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
::exit(___);}
#if 0
# 1510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
{ 
# 1512
{ __half2 val; __asm__("{min.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1524 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
} 
#endif
# 1547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl(const __half2 var, const int delta, const int width) 
# 1548
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1553
::exit(___);}
#if 0
# 1548
{ 
# 1549
unsigned warp_size; 
# 1550
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1551
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1552
{ __half2 r; __asm__ volatile("{shfl.idx.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1553
} 
#endif
# 1554 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up(const __half2 var, const unsigned delta, const int width) 
# 1555
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1560
::exit(___);}
#if 0
# 1555
{ 
# 1556
unsigned warp_size; 
# 1557
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1558
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1559
{ __half2 r; __asm__ volatile("{shfl.up.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1560
} 
#endif
# 1561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down(const __half2 var, const unsigned delta, const int width) 
# 1562
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1567
::exit(___);}
#if 0
# 1562
{ 
# 1563
unsigned warp_size; 
# 1564
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1565
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1566
{ __half2 r; __asm__ volatile("{shfl.down.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1567
} 
#endif
# 1568 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor(const __half2 var, const int delta, const int width) 
# 1569
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1574
::exit(___);}
#if 0
# 1569
{ 
# 1570
unsigned warp_size; 
# 1571
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1572
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1573
{ __half2 r; __asm__ volatile("{shfl.bfly.b32 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c)); return r; } 
# 1574
} 
#endif
# 1578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1579
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1584
::exit(___);}
#if 0
# 1579
{ 
# 1580
unsigned warp_size; 
# 1581
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1582
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1583
{ __half2 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1584
} 
#endif
# 1585 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_up_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1586
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1591
::exit(___);}
#if 0
# 1586
{ 
# 1587
unsigned warp_size; 
# 1588
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1589
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1590
{ __half2 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1591
} 
#endif
# 1592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_down_sync(const unsigned mask, const __half2 var, const unsigned delta, const int width) 
# 1593
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1598
::exit(___);}
#if 0
# 1593
{ 
# 1594
unsigned warp_size; 
# 1595
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1596
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1597
{ __half2 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1598
} 
#endif
# 1599 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __shfl_xor_sync(const unsigned mask, const __half2 var, const int delta, const int width) 
# 1600
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1605
::exit(___);}
#if 0
# 1600
{ 
# 1601
unsigned warp_size; 
# 1602
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1603
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1604
{ __half2 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1605
} 
#endif
# 1612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl(const __half var, const int delta, const int width) 
# 1613
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1617
::exit(___);}
#if 0
# 1613
{ 
# 1614
const __half2 temp1 = __halves2half2(var, var); 
# 1615
const __half2 temp2 = __shfl(temp1, delta, width); 
# 1616
return __low2half(temp2); 
# 1617
} 
#endif
# 1618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up(const __half var, const unsigned delta, const int width) 
# 1619
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1623
::exit(___);}
#if 0
# 1619
{ 
# 1620
const __half2 temp1 = __halves2half2(var, var); 
# 1621
const __half2 temp2 = __shfl_up(temp1, delta, width); 
# 1622
return __low2half(temp2); 
# 1623
} 
#endif
# 1624 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down(const __half var, const unsigned delta, const int width) 
# 1625
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1629
::exit(___);}
#if 0
# 1625
{ 
# 1626
const __half2 temp1 = __halves2half2(var, var); 
# 1627
const __half2 temp2 = __shfl_down(temp1, delta, width); 
# 1628
return __low2half(temp2); 
# 1629
} 
#endif
# 1630 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor(const __half var, const int delta, const int width) 
# 1631
{int volatile ___ = 1;(void)var;(void)delta;(void)width;
# 1635
::exit(___);}
#if 0
# 1631
{ 
# 1632
const __half2 temp1 = __halves2half2(var, var); 
# 1633
const __half2 temp2 = __shfl_xor(temp1, delta, width); 
# 1634
return __low2half(temp2); 
# 1635
} 
#endif
# 1639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1640
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1644
::exit(___);}
#if 0
# 1640
{ 
# 1641
const __half2 temp1 = __halves2half2(var, var); 
# 1642
const __half2 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1643
return __low2half(temp2); 
# 1644
} 
#endif
# 1645 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_up_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1646
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1650
::exit(___);}
#if 0
# 1646
{ 
# 1647
const __half2 temp1 = __halves2half2(var, var); 
# 1648
const __half2 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1649
return __low2half(temp2); 
# 1650
} 
#endif
# 1651 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_down_sync(const unsigned mask, const __half var, const unsigned delta, const int width) 
# 1652
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1656
::exit(___);}
#if 0
# 1652
{ 
# 1653
const __half2 temp1 = __halves2half2(var, var); 
# 1654
const __half2 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1655
return __low2half(temp2); 
# 1656
} 
#endif
# 1657 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __shfl_xor_sync(const unsigned mask, const __half var, const int delta, const int width) 
# 1658
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1662
::exit(___);}
#if 0
# 1658
{ 
# 1659
const __half2 temp1 = __halves2half2(var, var); 
# 1660
const __half2 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1661
return __low2half(temp2); 
# 1662
} 
#endif
# 1675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldg(const __half2 *const ptr) 
# 1676
{int volatile ___ = 1;(void)ptr;
# 1680
::exit(___);}
#if 0
# 1676
{ 
# 1677
__half2 ret; 
# 1678
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1679
return ret; 
# 1680
} 
#endif
# 1681 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldg(const __half *const ptr) 
# 1682
{int volatile ___ = 1;(void)ptr;
# 1686
::exit(___);}
#if 0
# 1682
{ 
# 1683
__half ret; 
# 1684
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1685
return ret; 
# 1686
} 
#endif
# 1687 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcg(const __half2 *const ptr) 
# 1688
{int volatile ___ = 1;(void)ptr;
# 1692
::exit(___);}
#if 0
# 1688
{ 
# 1689
__half2 ret; 
# 1690
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1691
return ret; 
# 1692
} 
#endif
# 1693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcg(const __half *const ptr) 
# 1694
{int volatile ___ = 1;(void)ptr;
# 1698
::exit(___);}
#if 0
# 1694
{ 
# 1695
__half ret; 
# 1696
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1697
return ret; 
# 1698
} 
#endif
# 1699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldca(const __half2 *const ptr) 
# 1700
{int volatile ___ = 1;(void)ptr;
# 1704
::exit(___);}
#if 0
# 1700
{ 
# 1701
__half2 ret; 
# 1702
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1703
return ret; 
# 1704
} 
#endif
# 1705 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldca(const __half *const ptr) 
# 1706
{int volatile ___ = 1;(void)ptr;
# 1710
::exit(___);}
#if 0
# 1706
{ 
# 1707
__half ret; 
# 1708
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1709
return ret; 
# 1710
} 
#endif
# 1711 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcs(const __half2 *const ptr) 
# 1712
{int volatile ___ = 1;(void)ptr;
# 1716
::exit(___);}
#if 0
# 1712
{ 
# 1713
__half2 ret; 
# 1714
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1715
return ret; 
# 1716
} 
#endif
# 1717 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcs(const __half *const ptr) 
# 1718
{int volatile ___ = 1;(void)ptr;
# 1722
::exit(___);}
#if 0
# 1718
{ 
# 1719
__half ret; 
# 1720
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1721
return ret; 
# 1722
} 
#endif
# 1723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldlu(const __half2 *const ptr) 
# 1724
{int volatile ___ = 1;(void)ptr;
# 1728
::exit(___);}
#if 0
# 1724
{ 
# 1725
__half2 ret; 
# 1726
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1727
return ret; 
# 1728
} 
#endif
# 1729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldlu(const __half *const ptr) 
# 1730
{int volatile ___ = 1;(void)ptr;
# 1734
::exit(___);}
#if 0
# 1730
{ 
# 1731
__half ret; 
# 1732
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1733
return ret; 
# 1734
} 
#endif
# 1735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __ldcv(const __half2 *const ptr) 
# 1736
{int volatile ___ = 1;(void)ptr;
# 1740
::exit(___);}
#if 0
# 1736
{ 
# 1737
__half2 ret; 
# 1738
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1739
return ret; 
# 1740
} 
#endif
# 1741 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __ldcv(const __half *const ptr) 
# 1742
{int volatile ___ = 1;(void)ptr;
# 1746
::exit(___);}
#if 0
# 1742
{ 
# 1743
__half ret; 
# 1744
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1745
return ret; 
# 1746
} 
#endif
# 1747 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half2 *const ptr, const __half2 value) 
# 1748
{int volatile ___ = 1;(void)ptr;(void)value;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1750
} 
#endif
# 1751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwb(__half *const ptr, const __half value) 
# 1752
{int volatile ___ = 1;(void)ptr;(void)value;
# 1754
::exit(___);}
#if 0
# 1752
{ 
# 1753
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1754
} 
#endif
# 1755 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half2 *const ptr, const __half2 value) 
# 1756
{int volatile ___ = 1;(void)ptr;(void)value;
# 1758
::exit(___);}
#if 0
# 1756
{ 
# 1757
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1758
} 
#endif
# 1759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcg(__half *const ptr, const __half value) 
# 1760
{int volatile ___ = 1;(void)ptr;(void)value;
# 1762
::exit(___);}
#if 0
# 1760
{ 
# 1761
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1762
} 
#endif
# 1763 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half2 *const ptr, const __half2 value) 
# 1764
{int volatile ___ = 1;(void)ptr;(void)value;
# 1766
::exit(___);}
#if 0
# 1764
{ 
# 1765
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1766
} 
#endif
# 1767 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stcs(__half *const ptr, const __half value) 
# 1768
{int volatile ___ = 1;(void)ptr;(void)value;
# 1770
::exit(___);}
#if 0
# 1768
{ 
# 1769
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1770
} 
#endif
# 1771 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half2 *const ptr, const __half2 value) 
# 1772
{int volatile ___ = 1;(void)ptr;(void)value;
# 1774
::exit(___);}
#if 0
# 1772
{ 
# 1773
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1774
} 
#endif
# 1775 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline void __stwt(__half *const ptr, const __half value) 
# 1776
{int volatile ___ = 1;(void)ptr;(void)value;
# 1778
::exit(___);}
#if 0
# 1776
{ 
# 1777
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1778
} 
#endif
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __heq2(const __half2 a, const __half2 b) 
# 1792
{int volatile ___ = 1;(void)a;(void)b;
# 1794
::exit(___);}
#if 0
# 1792
{ 
# 1793
{ __half2 val; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1794
} 
#endif
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hne2(const __half2 a, const __half2 b) 
# 1796
{int volatile ___ = 1;(void)a;(void)b;
# 1798
::exit(___);}
#if 0
# 1796
{ 
# 1797
{ __half2 val; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1798
} 
#endif
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hle2(const __half2 a, const __half2 b) 
# 1800
{int volatile ___ = 1;(void)a;(void)b;
# 1802
::exit(___);}
#if 0
# 1800
{ 
# 1801
{ __half2 val; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1802
} 
#endif
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hge2(const __half2 a, const __half2 b) 
# 1804
{int volatile ___ = 1;(void)a;(void)b;
# 1806
::exit(___);}
#if 0
# 1804
{ 
# 1805
{ __half2 val; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1806
} 
#endif
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hlt2(const __half2 a, const __half2 b) 
# 1808
{int volatile ___ = 1;(void)a;(void)b;
# 1810
::exit(___);}
#if 0
# 1808
{ 
# 1809
{ __half2 val; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1810
} 
#endif
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgt2(const __half2 a, const __half2 b) 
# 1812
{int volatile ___ = 1;(void)a;(void)b;
# 1814
::exit(___);}
#if 0
# 1812
{ 
# 1813
{ __half2 val; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1814
} 
#endif
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hequ2(const __half2 a, const __half2 b) 
# 1816
{int volatile ___ = 1;(void)a;(void)b;
# 1818
::exit(___);}
#if 0
# 1816
{ 
# 1817
{ __half2 val; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1818
} 
#endif
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneu2(const __half2 a, const __half2 b) 
# 1820
{int volatile ___ = 1;(void)a;(void)b;
# 1822
::exit(___);}
#if 0
# 1820
{ 
# 1821
{ __half2 val; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1822
} 
#endif
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hleu2(const __half2 a, const __half2 b) 
# 1824
{int volatile ___ = 1;(void)a;(void)b;
# 1826
::exit(___);}
#if 0
# 1824
{ 
# 1825
{ __half2 val; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1826
} 
#endif
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgeu2(const __half2 a, const __half2 b) 
# 1828
{int volatile ___ = 1;(void)a;(void)b;
# 1830
::exit(___);}
#if 0
# 1828
{ 
# 1829
{ __half2 val; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1830
} 
#endif
# 1831 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hltu2(const __half2 a, const __half2 b) 
# 1832
{int volatile ___ = 1;(void)a;(void)b;
# 1834
::exit(___);}
#if 0
# 1832
{ 
# 1833
{ __half2 val; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1834
} 
#endif
# 1835 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hgtu2(const __half2 a, const __half2 b) 
# 1836
{int volatile ___ = 1;(void)a;(void)b;
# 1838
::exit(___);}
#if 0
# 1836
{ 
# 1837
{ __half2 val; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1838
} 
#endif
# 1849 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __heq2_mask(const __half2 a, const __half2 b) 
# 1850
{int volatile ___ = 1;(void)a;(void)b;
# 1852
::exit(___);}
#if 0
# 1850
{ 
# 1851
{ unsigned val; __asm__("{ set.eq.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1852
} 
#endif
# 1853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hne2_mask(const __half2 a, const __half2 b) 
# 1854
{int volatile ___ = 1;(void)a;(void)b;
# 1856
::exit(___);}
#if 0
# 1854
{ 
# 1855
{ unsigned val; __asm__("{ set.ne.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1856
} 
#endif
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hle2_mask(const __half2 a, const __half2 b) 
# 1858
{int volatile ___ = 1;(void)a;(void)b;
# 1860
::exit(___);}
#if 0
# 1858
{ 
# 1859
{ unsigned val; __asm__("{ set.le.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1860
} 
#endif
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hge2_mask(const __half2 a, const __half2 b) 
# 1862
{int volatile ___ = 1;(void)a;(void)b;
# 1864
::exit(___);}
#if 0
# 1862
{ 
# 1863
{ unsigned val; __asm__("{ set.ge.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1864
} 
#endif
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __half2 a, const __half2 b) 
# 1866
{int volatile ___ = 1;(void)a;(void)b;
# 1868
::exit(___);}
#if 0
# 1866
{ 
# 1867
{ unsigned val; __asm__("{ set.lt.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1868
} 
#endif
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __half2 a, const __half2 b) 
# 1870
{int volatile ___ = 1;(void)a;(void)b;
# 1872
::exit(___);}
#if 0
# 1870
{ 
# 1871
{ unsigned val; __asm__("{ set.gt.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1872
} 
#endif
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __half2 a, const __half2 b) 
# 1874
{int volatile ___ = 1;(void)a;(void)b;
# 1876
::exit(___);}
#if 0
# 1874
{ 
# 1875
{ unsigned val; __asm__("{ set.equ.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1876
} 
#endif
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __half2 a, const __half2 b) 
# 1878
{int volatile ___ = 1;(void)a;(void)b;
# 1880
::exit(___);}
#if 0
# 1878
{ 
# 1879
{ unsigned val; __asm__("{ set.neu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1880
} 
#endif
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __half2 a, const __half2 b) 
# 1882
{int volatile ___ = 1;(void)a;(void)b;
# 1884
::exit(___);}
#if 0
# 1882
{ 
# 1883
{ unsigned val; __asm__("{ set.leu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1884
} 
#endif
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __half2 a, const __half2 b) 
# 1886
{int volatile ___ = 1;(void)a;(void)b;
# 1888
::exit(___);}
#if 0
# 1886
{ 
# 1887
{ unsigned val; __asm__("{ set.geu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1888
} 
#endif
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __half2 a, const __half2 b) 
# 1890
{int volatile ___ = 1;(void)a;(void)b;
# 1892
::exit(___);}
#if 0
# 1890
{ 
# 1891
{ unsigned val; __asm__("{ set.ltu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1892
} 
#endif
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __half2 a, const __half2 b) 
# 1894
{int volatile ___ = 1;(void)a;(void)b;
# 1896
::exit(___);}
#if 0
# 1894
{ 
# 1895
{ unsigned val; __asm__("{ set.gtu.u32.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 1896
} 
#endif
# 1910 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __half2 a, const __half2 b) 
# 1911
{int volatile ___ = 1;(void)a;(void)b;
# 1913
::exit(___);}
#if 0
# 1911
{ 
# 1912
{ __half2 val; bool retval; __asm__("{ set.eq.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1913
} 
#endif
# 1914 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __half2 a, const __half2 b) 
# 1915
{int volatile ___ = 1;(void)a;(void)b;
# 1917
::exit(___);}
#if 0
# 1915
{ 
# 1916
{ __half2 val; bool retval; __asm__("{ set.ne.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1917
} 
#endif
# 1918 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hble2(const __half2 a, const __half2 b) 
# 1919
{int volatile ___ = 1;(void)a;(void)b;
# 1921
::exit(___);}
#if 0
# 1919
{ 
# 1920
{ __half2 val; bool retval; __asm__("{ set.le.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1921
} 
#endif
# 1922 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __half2 a, const __half2 b) 
# 1923
{int volatile ___ = 1;(void)a;(void)b;
# 1925
::exit(___);}
#if 0
# 1923
{ 
# 1924
{ __half2 val; bool retval; __asm__("{ set.ge.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1925
} 
#endif
# 1926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __half2 a, const __half2 b) 
# 1927
{int volatile ___ = 1;(void)a;(void)b;
# 1929
::exit(___);}
#if 0
# 1927
{ 
# 1928
{ __half2 val; bool retval; __asm__("{ set.lt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1929
} 
#endif
# 1930 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __half2 a, const __half2 b) 
# 1931
{int volatile ___ = 1;(void)a;(void)b;
# 1933
::exit(___);}
#if 0
# 1931
{ 
# 1932
{ __half2 val; bool retval; __asm__("{ set.gt.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1933
} 
#endif
# 1934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __half2 a, const __half2 b) 
# 1935
{int volatile ___ = 1;(void)a;(void)b;
# 1937
::exit(___);}
#if 0
# 1935
{ 
# 1936
{ __half2 val; bool retval; __asm__("{ set.equ.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1937
} 
#endif
# 1938 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __half2 a, const __half2 b) 
# 1939
{int volatile ___ = 1;(void)a;(void)b;
# 1941
::exit(___);}
#if 0
# 1939
{ 
# 1940
{ __half2 val; bool retval; __asm__("{ set.neu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1941
} 
#endif
# 1942 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __half2 a, const __half2 b) 
# 1943
{int volatile ___ = 1;(void)a;(void)b;
# 1945
::exit(___);}
#if 0
# 1943
{ 
# 1944
{ __half2 val; bool retval; __asm__("{ set.leu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1945
} 
#endif
# 1946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __half2 a, const __half2 b) 
# 1947
{int volatile ___ = 1;(void)a;(void)b;
# 1949
::exit(___);}
#if 0
# 1947
{ 
# 1948
{ __half2 val; bool retval; __asm__("{ set.geu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1949
} 
#endif
# 1950 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __half2 a, const __half2 b) 
# 1951
{int volatile ___ = 1;(void)a;(void)b;
# 1953
::exit(___);}
#if 0
# 1951
{ 
# 1952
{ __half2 val; bool retval; __asm__("{ set.ltu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1953
} 
#endif
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __half2 a, const __half2 b) 
# 1955
{int volatile ___ = 1;(void)a;(void)b;
# 1957
::exit(___);}
#if 0
# 1955
{ 
# 1956
{ __half2 val; bool retval; __asm__("{ set.gtu.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); if ((*(reinterpret_cast< const unsigned *>(&val))) == 1006648320U) { retval = true; } else { retval = false; }  return retval; } 
# 1957
} 
#endif
# 1970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __heq(const __half a, const __half b) 
# 1971
{int volatile ___ = 1;(void)a;(void)b;
# 1973
::exit(___);}
#if 0
# 1971
{ 
# 1972
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.eq.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1973
} 
#endif
# 1974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hne(const __half a, const __half b) 
# 1975
{int volatile ___ = 1;(void)a;(void)b;
# 1977
::exit(___);}
#if 0
# 1975
{ 
# 1976
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ne.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1977
} 
#endif
# 1978 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hle(const __half a, const __half b) 
# 1979
{int volatile ___ = 1;(void)a;(void)b;
# 1981
::exit(___);}
#if 0
# 1979
{ 
# 1980
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.le.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1981
} 
#endif
# 1982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hge(const __half a, const __half b) 
# 1983
{int volatile ___ = 1;(void)a;(void)b;
# 1985
::exit(___);}
#if 0
# 1983
{ 
# 1984
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ge.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1985
} 
#endif
# 1986 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hlt(const __half a, const __half b) 
# 1987
{int volatile ___ = 1;(void)a;(void)b;
# 1989
::exit(___);}
#if 0
# 1987
{ 
# 1988
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.lt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1989
} 
#endif
# 1990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgt(const __half a, const __half b) 
# 1991
{int volatile ___ = 1;(void)a;(void)b;
# 1993
::exit(___);}
#if 0
# 1991
{ 
# 1992
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gt.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1993
} 
#endif
# 1994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hequ(const __half a, const __half b) 
# 1995
{int volatile ___ = 1;(void)a;(void)b;
# 1997
::exit(___);}
#if 0
# 1995
{ 
# 1996
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.equ.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 1997
} 
#endif
# 1998 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hneu(const __half a, const __half b) 
# 1999
{int volatile ___ = 1;(void)a;(void)b;
# 2001
::exit(___);}
#if 0
# 1999
{ 
# 2000
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.neu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2001
} 
#endif
# 2002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hleu(const __half a, const __half b) 
# 2003
{int volatile ___ = 1;(void)a;(void)b;
# 2005
::exit(___);}
#if 0
# 2003
{ 
# 2004
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.leu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2005
} 
#endif
# 2006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __half a, const __half b) 
# 2007
{int volatile ___ = 1;(void)a;(void)b;
# 2009
::exit(___);}
#if 0
# 2007
{ 
# 2008
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.geu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2009
} 
#endif
# 2010 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hltu(const __half a, const __half b) 
# 2011
{int volatile ___ = 1;(void)a;(void)b;
# 2013
::exit(___);}
#if 0
# 2011
{ 
# 2012
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.ltu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2013
} 
#endif
# 2014 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __half a, const __half b) 
# 2015
{int volatile ___ = 1;(void)a;(void)b;
# 2017
::exit(___);}
#if 0
# 2015
{ 
# 2016
{ unsigned short val; __asm__("{ .reg .pred __$temp3;\n  setp.gtu.f16  __$temp3, %1, %2;\n  selp.u16 %0, 1, 0, __$temp3;}" : "=h" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; } 
# 2017
} 
#endif
# 2022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2(const __half2 a, const __half2 b) 
# 2023
{int volatile ___ = 1;(void)a;(void)b;
# 2025
::exit(___);}
#if 0
# 2023
{ 
# 2024
{ __half2 val; __asm__("{add.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2025
} 
#endif
# 2026 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2(const __half2 a, const __half2 b) 
# 2027
{int volatile ___ = 1;(void)a;(void)b;
# 2029
::exit(___);}
#if 0
# 2027
{ 
# 2028
{ __half2 val; __asm__("{sub.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2029
} 
#endif
# 2030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2(const __half2 a, const __half2 b) 
# 2031
{int volatile ___ = 1;(void)a;(void)b;
# 2033
::exit(___);}
#if 0
# 2031
{ 
# 2032
{ __half2 val; __asm__("{mul.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2033
} 
#endif
# 2034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_sat(const __half2 a, const __half2 b) 
# 2035
{int volatile ___ = 1;(void)a;(void)b;
# 2037
::exit(___);}
#if 0
# 2035
{ 
# 2036
{ __half2 val; __asm__("{add.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2037
} 
#endif
# 2038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_sat(const __half2 a, const __half2 b) 
# 2039
{int volatile ___ = 1;(void)a;(void)b;
# 2041
::exit(___);}
#if 0
# 2039
{ 
# 2040
{ __half2 val; __asm__("{sub.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2041
} 
#endif
# 2042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_sat(const __half2 a, const __half2 b) 
# 2043
{int volatile ___ = 1;(void)a;(void)b;
# 2045
::exit(___);}
#if 0
# 2043
{ 
# 2044
{ __half2 val; __asm__("{mul.sat.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2045
} 
#endif
# 2046 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hadd2_rn(const __half2 a, const __half2 b) 
# 2047
{int volatile ___ = 1;(void)a;(void)b;
# 2049
::exit(___);}
#if 0
# 2047
{ 
# 2048
{ __half2 val; __asm__("{add.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2049
} 
#endif
# 2050 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hsub2_rn(const __half2 a, const __half2 b) 
# 2051
{int volatile ___ = 1;(void)a;(void)b;
# 2053
::exit(___);}
#if 0
# 2051
{ 
# 2052
{ __half2 val; __asm__("{sub.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2053
} 
#endif
# 2054 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmul2_rn(const __half2 a, const __half2 b) 
# 2055
{int volatile ___ = 1;(void)a;(void)b;
# 2057
::exit(___);}
#if 0
# 2055
{ 
# 2056
{ __half2 val; __asm__("{mul.rn.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2057
} 
#endif
# 2058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2(const __half2 a, const __half2 b, const __half2 c) 
# 2059
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2061
::exit(___);}
#if 0
# 2059
{ 
# 2060
{ __half2 val; __asm__("{fma.rn.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2061
} 
#endif
# 2062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_sat(const __half2 a, const __half2 b, const __half2 c) 
# 2063
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2065
::exit(___);}
#if 0
# 2063
{ 
# 2064
{ __half2 val; __asm__("{fma.rn.sat.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2065
} 
#endif
# 2066 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __h2div(const __half2 a, const __half2 b) {int volatile ___ = 1;(void)a;(void)b;
# 2078
::exit(___);}
#if 0
# 2066
{ 
# 2067
__half ha = __low2half(a); 
# 2068
__half hb = __low2half(b); 
# 2070
const __half v1 = __hdiv(ha, hb); 
# 2072
ha = __high2half(a); 
# 2073
hb = __high2half(b); 
# 2075
const __half v2 = __hdiv(ha, hb); 
# 2077
return __halves2half2(v1, v2); 
# 2078
} 
#endif
# 2082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd(const __half a, const __half b) 
# 2083
{int volatile ___ = 1;(void)a;(void)b;
# 2085
::exit(___);}
#if 0
# 2083
{ 
# 2084
{ __half val; __asm__("{add.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2085
} 
#endif
# 2086 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub(const __half a, const __half b) 
# 2087
{int volatile ___ = 1;(void)a;(void)b;
# 2089
::exit(___);}
#if 0
# 2087
{ 
# 2088
{ __half val; __asm__("{sub.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2089
} 
#endif
# 2090 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul(const __half a, const __half b) 
# 2091
{int volatile ___ = 1;(void)a;(void)b;
# 2093
::exit(___);}
#if 0
# 2091
{ 
# 2092
{ __half val; __asm__("{mul.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2093
} 
#endif
# 2094 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_sat(const __half a, const __half b) 
# 2095
{int volatile ___ = 1;(void)a;(void)b;
# 2097
::exit(___);}
#if 0
# 2095
{ 
# 2096
{ __half val; __asm__("{add.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2097
} 
#endif
# 2098 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_sat(const __half a, const __half b) 
# 2099
{int volatile ___ = 1;(void)a;(void)b;
# 2101
::exit(___);}
#if 0
# 2099
{ 
# 2100
{ __half val; __asm__("{sub.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2101
} 
#endif
# 2102 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_sat(const __half a, const __half b) 
# 2103
{int volatile ___ = 1;(void)a;(void)b;
# 2105
::exit(___);}
#if 0
# 2103
{ 
# 2104
{ __half val; __asm__("{mul.sat.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2105
} 
#endif
# 2106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hadd_rn(const __half a, const __half b) 
# 2107
{int volatile ___ = 1;(void)a;(void)b;
# 2109
::exit(___);}
#if 0
# 2107
{ 
# 2108
{ __half val; __asm__("{add.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2109
} 
#endif
# 2110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hsub_rn(const __half a, const __half b) 
# 2111
{int volatile ___ = 1;(void)a;(void)b;
# 2113
::exit(___);}
#if 0
# 2111
{ 
# 2112
{ __half val; __asm__("{sub.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2113
} 
#endif
# 2114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmul_rn(const __half a, const __half b) 
# 2115
{int volatile ___ = 1;(void)a;(void)b;
# 2117
::exit(___);}
#if 0
# 2115
{ 
# 2116
{ __half val; __asm__("{mul.rn.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2117
} 
#endif
# 2118 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma(const __half a, const __half b, const __half c) 
# 2119
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2121
::exit(___);}
#if 0
# 2119
{ 
# 2120
{ __half val; __asm__("{fma.rn.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2121
} 
#endif
# 2122 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_sat(const __half a, const __half b, const __half c) 
# 2123
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2125
::exit(___);}
#if 0
# 2123
{ 
# 2124
{ __half val; __asm__("{fma.rn.sat.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2125
} 
#endif
# 2126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hdiv(const __half a, const __half b) {int volatile ___ = 1;(void)a;(void)b;
# 2148
::exit(___);}
#if 0
# 2126
{ 
# 2127
__half v; 
# 2128
__half abs; 
# 2129
__half den; 
# 2130
(*(reinterpret_cast< unsigned short *>(&den))) = (143U); 
# 2132
float rcp; 
# 2133
const float fa = __half2float(a); 
# 2134
const float fb = __half2float(b); 
# 2136
__asm__("{rcp.approx.ftz.f32 %0, %1;\n}" : "=f" (rcp) : "f" (fb)); 
# 2138
float fv = rcp * fa; 
# 2140
v = __float2half(fv); 
# 2141
abs = __habs(v); 
# 2142
if (__hlt(abs, den) && __hlt(__float2half((0.0F)), abs)) { 
# 2143
const float err = __fmaf_rn(-fb, fv, fa); 
# 2144
fv = __fmaf_rn(rcp, err, fv); 
# 2145
v = __float2half(fv); 
# 2146
}  
# 2147
return v; 
# 2148
} 
#endif
# 2192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a); 
# 2193
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a); 
# 2194
__attribute__((unused)) static inline __half hsin(const __half a) {int volatile ___ = 1;(void)a;
# 2210
::exit(___);}
#if 0
# 2194
{ 
# 2195
const float sl = __float_simpl_sinf(__half2float(a)); 
# 2196
__half r = __float2half_rn(sl); 
# 2197
__asm__("{\n\t  .reg.b16 i,r,t;     \n\t  mov.b16 r, %0;      \n\t  mov.b16 i, %1;      \n\t  and.b16 t, r, 0x8000U; \n\t  abs.f16 r, r; " "  \n\t  abs.f16 i, i;   \n\t{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X32B3U;\n  mov.b16 ulp,0x0800U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X5CB0U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,i, spc;\n" "  fma.rn.f16 r,p,ulp,r;\n}\n  or.b16  r,r,t;      \n\t  mov.b16 %0, r;      \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2209
return r; 
# 2210
} 
#endif
# 2211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sin(const __half2 a) {int volatile ___ = 1;(void)a;
# 2228
::exit(___);}
#if 0
# 2211
{ 
# 2212
const float sl = __float_simpl_sinf(__half2float(a.x)); 
# 2213
const float sh = __float_simpl_sinf(__half2float(a.y)); 
# 2214
__half2 r = __floats2half2_rn(sl, sh); 
# 2215
__asm__("{\n\t  .reg.b32 i,r,t;             \n\t  mov.b32 r, %0;              \n\t  mov.b32 i, %1;              \n\t  and.b32 t, r, 0x800" "08000U;   \n\t  abs.f16x2 r, r;   \n\t  abs.f16x2 i, i;   \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X32B332B3U;\n  mov.b32 ulp," "0x08000800U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X5CB05CB0U;\n" "  mov.b32 ulp,0x90009000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  or.b32  r, r, t;            \n\t  mo" "v.b32 %0, r;              \n}\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2227
return r; 
# 2228
} 
#endif
# 2229 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hcos(const __half a) {int volatile ___ = 1;(void)a;
# 2241
::exit(___);}
#if 0
# 2229
{ 
# 2230
const float cl = __float_simpl_cosf(__half2float(a)); 
# 2231
__half r = __float2half_rn(cl); 
# 2232
__asm__("{\n\t  .reg.b16 i,r;        \n\t  mov.b16 r, %0;       \n\t  mov.b16 i, %1;       \n\t  abs.f16 i, i;        \n\t{.reg.b16 spc, " "ulp, p;\n  mov.b16 spc,0X2B7CU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,i, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16 %0, r" ";       \n}\n" : "+h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2240
return r; 
# 2241
} 
#endif
# 2242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2cos(const __half2 a) {int volatile ___ = 1;(void)a;
# 2255
::exit(___);}
#if 0
# 2242
{ 
# 2243
const float cl = __float_simpl_cosf(__half2float(a.x)); 
# 2244
const float ch = __float_simpl_cosf(__half2float(a.y)); 
# 2245
__half2 r = __floats2half2_rn(cl, ch); 
# 2246
__asm__("{\n\t  .reg.b32 i,r;   \n\t  mov.b32 r, %0;  \n\t  mov.b32 i, %1;  \n\t  abs.f16x2 i, i; \n\t{.reg.b32 spc, ulp, p;\n  mov.b32 s" "pc,0X2B7C2B7CU;\n  mov.b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,i, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32 %0, r;  \n}" "\n" : "+r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2254
return r; 
# 2255
} 
#endif
# 2256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_trig_reduction_kernel(const float a, unsigned *const quadrant) 
# 2257
{int volatile ___ = 1;(void)a;(void)quadrant;
# 2265
::exit(___);}
#if 0
# 2257
{ 
# 2258
const float ar = __fmaf_rn(a, (0.63661975F), (1.2582912E7F)); 
# 2259
const unsigned q = __float_as_uint(ar); 
# 2260
const float j = __fsub_rn(ar, (1.2582912E7F)); 
# 2261
float t = __fmaf_rn(j, -(1.5707963F), a); 
# 2262
t = __fmaf_rn(j, -(7.5497894E-8F), t); 
# 2263
(*quadrant) = q; 
# 2264
return t; 
# 2265
} 
#endif
# 2266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __internal_sin_cos_kernel(const float x, const unsigned i) 
# 2267
{int volatile ___ = 1;(void)x;(void)i;
# 2305
::exit(___);}
#if 0
# 2267
{ 
# 2268
float z; 
# 2269
const float x2 = x * x; 
# 2270
float a8; 
# 2271
float a6; 
# 2272
float a4; 
# 2273
float a2; 
# 2274
float a1; 
# 2275
float a0; 
# 2277
if ((i & 1U) != 0U) { 
# 2279
a8 = (2.4433157E-5F); 
# 2280
a6 = (-(0.0013887316F)); 
# 2281
a4 = (0.041666646F); 
# 2282
a2 = (-(0.5F)); 
# 2283
a1 = x2; 
# 2284
a0 = (1.0F); 
# 2285
} else 
# 2286
{ 
# 2288
a8 = (-(1.9515296E-4F)); 
# 2289
a6 = (0.008332161F); 
# 2290
a4 = (-(0.16666655F)); 
# 2291
a2 = (0.0F); 
# 2292
a1 = x; 
# 2293
a0 = x; 
# 2294
}  
# 2296
z = __fmaf_rn(a8, x2, a6); 
# 2297
z = __fmaf_rn(z, x2, a4); 
# 2298
z = __fmaf_rn(z, x2, a2); 
# 2299
z = __fmaf_rn(z, a1, a0); 
# 2301
if ((i & 2U) != 0U) { 
# 2302
z = (-z); 
# 2303
}  
# 2304
return z; 
# 2305
} 
#endif
# 2306 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_sinf(float a) 
# 2307
{int volatile ___ = 1;(void)a;
# 2313
::exit(___);}
#if 0
# 2307
{ 
# 2308
float z; 
# 2309
unsigned i; 
# 2310
a = __internal_trig_reduction_kernel(a, &i); 
# 2311
z = __internal_sin_cos_kernel(a, i); 
# 2312
return z; 
# 2313
} 
#endif
# 2314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute((always_inline)) __attribute__((unused)) static inline float __float_simpl_cosf(float a) 
# 2315
{int volatile ___ = 1;(void)a;
# 2321
::exit(___);}
#if 0
# 2315
{ 
# 2316
float z; 
# 2317
unsigned i; 
# 2318
a = __internal_trig_reduction_kernel(a, &i); 
# 2319
z = __internal_sin_cos_kernel(a, (i & 3U) + 1U); 
# 2320
return z; 
# 2321
} 
#endif
# 2323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp(const __half a) {int volatile ___ = 1;(void)a;
# 2341
::exit(___);}
#if 0
# 2323
{ 
# 2324
__half val; 
# 2325
__asm__("{.reg.b32         f, C, nZ;       \n .reg.b16         h,r;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  mov.b32         C, 0x3fb8aa3bU; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f,f;        \n  cvt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X1F79U;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X25CFU;\n  mov.b16 ul" "p,0x9400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC13BU;\n  mov.b16 ul" "p,0x0400U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0XC1EFU;\n  mov.b16 ul" "p,0x0200U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2340
return val; 
# 2341
} 
#endif
# 2342 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2366
::exit(___);}
#if 0
# 2342
{ 
# 2343
__half2 val; 
# 2344
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x3fb8aa3bU; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X1F791F79U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X25CF25CFU;\n  mov.b32 ulp,0x94009400U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC13BC13BU;\n  mov.b32 ulp,0x0400" "0400U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0XC1EFC1EFU;\n  mov." "b32 ulp,0x02000200U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2365
return val; 
# 2366
} 
#endif
# 2367 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp2(const __half a) {int volatile ___ = 1;(void)a;
# 2380
::exit(___);}
#if 0
# 2367
{ 
# 2368
__half val; 
# 2369
__asm__("{.reg.b32         f, ULP;         \n .reg.b16         r;              \n  mov.b16         r,%1;           \n  cvt.f32.f16     f," "r;            \n  ex2.approx.ftz.f32      f,f;    \n  mov.b32         ULP, 0x33800000U;\n  fma.rn.f32      f,f,ULP,f;      \n  c" "vt.rn.f16.f32      r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2379
return val; 
# 2380
} 
#endif
# 2381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2398
::exit(___);}
#if 0
# 2381
{ 
# 2382
__half2 val; 
# 2383
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, ULP;    \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  ex2.approx.ftz.f32  fl, fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  mo" "v.b32         ULP, 0x33800000U;\n  fma.rn.f32      fl,fl,ULP,fl;   \n  fma.rn.f32      fu,fu,ULP,fu;   \n  cvt.rn.f16.f32      h" "l, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2397
return val; 
# 2398
} 
#endif
# 2399 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hexp10(const __half a) {int volatile ___ = 1;(void)a;
# 2418
::exit(___);}
#if 0
# 2399
{ 
# 2400
__half val; 
# 2401
__asm__("{.reg.b16         h,r;            \n .reg.b32         f, C, nZ;       \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  mov.b32         C, 0x40549A78U; \n  mov.b32         nZ, 0x80000000U;\n  fma.rn.f32      f,f,C,nZ;       \n  ex" "2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x34DEU;\n  mov.b16 ul" "p,0x9800U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9766U;\n  mov.b16 ul" "p,0x9000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x9972U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xA5C4U;\n  mov.b16 ul" "p,0x1000U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBF0AU;\n  mov.b16 ul" "p,0x8100U;\n  set.eq.f16.f16 p,h, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2417
return val; 
# 2418
} 
#endif
# 2419 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2exp10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2444
::exit(___);}
#if 0
# 2419
{ 
# 2420
__half2 val; 
# 2421
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu,C,nZ; \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  cvt.f32.f16     fl, hl;         \n  cvt.f32.f16     fu, hu;         \n  mov.b32         C, 0x40549A78U; \n  mo" "v.b32         nZ, 0x80000000U;\n  fma.rn.f32      fl,fl,C,nZ;     \n  fma.rn.f32      fu,fu,C,nZ;     \n  ex2.approx.ftz.f32  fl" ", fl;     \n  ex2.approx.ftz.f32  fu, fu;     \n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b3" "2         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x34DE34DEU;\n  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2" " p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x97669766U;\n  mov.b32 ulp,0x90009000U;\n  set." "eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x99729972U;\n  mov.b32 ulp,0x1000" "1000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xA5C4A5C4U;\n  mov." "b32 ulp,0x10001000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBF0A" "BF0AU;\n  mov.b32 ulp,0x81008100U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2443
return val; 
# 2444
} 
#endif
# 2445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog2(const __half a) {int volatile ___ = 1;(void)a;
# 2458
::exit(___);}
#if 0
# 2445
{ 
# 2446
__half val; 
# 2447
__asm__("{.reg.b16         h, r;           \n .reg.b32         f;              \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  cvt.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "A2E2U;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x" "BF46U;\n  mov.b16 ulp,0x9400U;\n  set.eq.f16.f16 p,r, spc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2457
return val; 
# 2458
} 
#endif
# 2459 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log2(const __half2 a) {int volatile ___ = 1;(void)a;
# 2476
::exit(___);}
#if 0
# 2459
{ 
# 2460
__half2 val; 
# 2461
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu, r, p;   \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  lg2.approx.ftz.f32  fl, fl;     \n  lg2.approx.ftz.f32  fu, fu;     \n  cv" "t.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n" "  mov.b32 spc,0xA2E2A2E2U;\n  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 " "spc, ulp, p;\n  mov.b32 spc,0xBF46BF46U;\n  mov.b32 ulp,0x94009400U;\n  set.eq.f16x2.f16x2 p,r, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n" "}\n  mov.b32         %0, r;          \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2475
return val; 
# 2476
} 
#endif
# 2477 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog(const __half a) {int volatile ___ = 1;(void)a;
# 2494
::exit(___);}
#if 0
# 2477
{ 
# 2478
__half val; 
# 2479
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  cvt.f32.f16     f," "h;            \n  lg2.approx.ftz.f32  f,f;        \n  mov.b32         C, 0x3f317218U;  \n  mul.f32         f,f,C;          \n  c" "vt.rn.f16.f32      r,f;        \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X160DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3BFEU;\n  mov.b16 ulp,0x8010U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X3C0BU;\n  mov.b16 ulp,0x8080U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0X6051U;\n  mov.b16 ulp,0x1C00U;\n  set.eq.f16.f16 p,h, s" "pc;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2493
return val; 
# 2494
} 
#endif
# 2495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log(const __half2 a) {int volatile ___ = 1;(void)a;
# 2518
::exit(___);}
#if 0
# 2495
{ 
# 2496
__half2 val; 
# 2497
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X160D160DU;\n  mov.b32 ulp,0x9C009C00U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3BFE3BFEU;\n  mov.b32 ulp," "0x80108010U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0X3C0B3C0BU;\n" "  mov.b32 ulp,0x80808080U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0X60516051U;\n  mov.b32 ulp,0x1C001C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2517
return val; 
# 2518
} 
#endif
# 2519 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hlog10(const __half a) {int volatile ___ = 1;(void)a;
# 2536
::exit(___);}
#if 0
# 2519
{ 
# 2520
__half val; 
# 2521
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  cvt.f32.f16     f," " h;           \n  lg2.approx.ftz.f32  f, f;       \n  mov.b32         C, 0x3E9A209BU; \n  mul.f32         f,f,C;          \n  cv" "t.rn.f16.f32      r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x338FU;\n  mov.b16 ulp,0x1000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x33F8U;\n  mov.b16 ulp,0x9000U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x57E1U;\n  mov.b16 ulp,0x9800U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0x719DU;\n  mov.b16 ulp,0x9C00U;\n  set.eq.f16.f16 p,h, sp" "c;\n  fma.rn.f16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2535
return val; 
# 2536
} 
#endif
# 2537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2log10(const __half2 a) {int volatile ___ = 1;(void)a;
# 2560
::exit(___);}
#if 0
# 2537
{ 
# 2538
__half2 val; 
# 2539
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  cvt.f32.f16     fl, hl;             \n  cvt.f32.f16     fu, hu;             \n  lg2.approx.ftz" ".f32  fl, fl;         \n  lg2.approx.ftz.f32  fu, fu;         \n  mov.b32         C, 0x3E9A209BU;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.f16.f32      hl, fl;         \n  cvt.rn.f16.f32      hu, fu;   " "      \n  mov.b32         r, {hl, hu};        \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x338F338FU;\n  mov.b32 ulp,0x10001000U;\n" "  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x33F833F8U;\n  mov.b32 ulp," "0x90009000U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0x57E157E1U;\n" "  mov.b32 ulp,0x98009800U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n{.reg.b32 spc, ulp, p;\n  mov.b32 spc," "0x719D719DU;\n  mov.b32 ulp,0x9C009C00U;\n  set.eq.f16x2.f16x2 p,h, spc;\n  fma.rn.f16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;" "              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2559
return val; 
# 2560
} 
#endif
# 2563 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rcp(const __half2 a) {int volatile ___ = 1;(void)a;
# 2565
::exit(___);}
#if 0
# 2563
{ 
# 2564
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rcp.approx.ftz.f32   fl, fl;     \n  rcp.approx.ftz.f32   fu, fu;     \n  " "cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2565
} 
#endif
# 2566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrcp(const __half a) {int volatile ___ = 1;(void)a;
# 2568
::exit(___);}
#if 0
# 2566
{ 
# 2567
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rcp.ap" "prox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2568
} 
#endif
# 2569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2rsqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2571
::exit(___);}
#if 0
# 2569
{ 
# 2570
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  rsqrt.approx.ftz.f32   fl, fl;     \n  rsqrt.approx.ftz.f32   fu, fu;     " "\n  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2571
} 
#endif
# 2572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hrsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2574
::exit(___);}
#if 0
# 2572
{ 
# 2573
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  rsqrt." "approx.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2574
} 
#endif
# 2575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 h2sqrt(const __half2 a) {int volatile ___ = 1;(void)a;
# 2577
::exit(___);}
#if 0
# 2575
{ 
# 2576
{ __half2 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  cvt.f32.f16     fl" ", hl;         \n  cvt.f32.f16     fu, hu;         \n  sqrt.approx.ftz.f32   fl, fl;     \n  sqrt.approx.ftz.f32   fu, fu;     \n" "  cvt.rn.f16.f32      hl, fl;     \n  cvt.rn.f16.f32      hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2577
} 
#endif
# 2578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half hsqrt(const __half a) {int volatile ___ = 1;(void)a;
# 2580
::exit(___);}
#if 0
# 2578
{ 
# 2579
{ __half val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  cvt.f32.f16     f,r;      \n  sqrt.a" "pprox.ftz.f32   f,f;  \n  cvt.rn.f16.f32      r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2580
} 
#endif
# 2583 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hisnan2(const __half2 a) 
# 2584
{int volatile ___ = 1;(void)a;
# 2589
::exit(___);}
#if 0
# 2584
{ 
# 2585
__half2 r; 
# 2586
__asm__("{set.nan.f16x2.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2588
return r; 
# 2589
} 
#endif
# 2590 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __half a) 
# 2591
{int volatile ___ = 1;(void)a;
# 2596
::exit(___);}
#if 0
# 2591
{ 
# 2592
__half r; 
# 2593
__asm__("{set.nan.f16.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2595
return (*(reinterpret_cast< const unsigned short *>(&r))) != 0U; 
# 2596
} 
#endif
# 2597 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hneg2(const __half2 a) 
# 2598
{int volatile ___ = 1;(void)a;
# 2603
::exit(___);}
#if 0
# 2598
{ 
# 2599
__half2 r; 
# 2600
__asm__("{neg.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2602
return r; 
# 2603
} 
#endif
# 2604 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hneg(const __half a) 
# 2605
{int volatile ___ = 1;(void)a;
# 2610
::exit(___);}
#if 0
# 2605
{ 
# 2606
__half r; 
# 2607
__asm__("{neg.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2609
return r; 
# 2610
} 
#endif
# 2611 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __habs2(const __half2 a) 
# 2612
{int volatile ___ = 1;(void)a;
# 2617
::exit(___);}
#if 0
# 2612
{ 
# 2613
__half2 r; 
# 2614
__asm__("{abs.f16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2616
return r; 
# 2617
} 
#endif
# 2618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __habs(const __half a) 
# 2619
{int volatile ___ = 1;(void)a;
# 2624
::exit(___);}
#if 0
# 2619
{ 
# 2620
__half r; 
# 2621
__asm__("{abs.f16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2623
return r; 
# 2624
} 
#endif
# 2626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hcmadd(const __half2 a, const __half2 b, const __half2 c) 
# 2627
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2637
::exit(___);}
#if 0
# 2627
{ 
# 2632
__half real_tmp = __hfma(a.x, b.x, c.x); 
# 2633
__half img_tmp = __hfma(a.x, b.y, c.y); 
# 2634
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2635
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2636
return make_half2(real_tmp, img_tmp); 
# 2637
} 
#endif
# 2642 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmax_nan(const __half a, const __half b) 
# 2643
{int volatile ___ = 1;(void)a;(void)b;
# 2645
::exit(___);}
#if 0
# 2643
{ 
# 2644
{ __half val; __asm__("{max.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2645
} 
#endif
# 2646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hmin_nan(const __half a, const __half b) 
# 2647
{int volatile ___ = 1;(void)a;(void)b;
# 2649
::exit(___);}
#if 0
# 2647
{ 
# 2648
{ __half val; __asm__("{min.NaN.f16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2649
} 
#endif
# 2650 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half __hfma_relu(const __half a, const __half b, const __half c) 
# 2651
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2653
::exit(___);}
#if 0
# 2651
{ 
# 2652
{ __half val; __asm__("{fma.rn.relu.f16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); return val; } 
# 2653
} 
#endif
# 2655 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmax2_nan(const __half2 a, const __half2 b) 
# 2656
{int volatile ___ = 1;(void)a;(void)b;
# 2658
::exit(___);}
#if 0
# 2656
{ 
# 2657
{ __half2 val; __asm__("{max.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2658
} 
#endif
# 2659 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hmin2_nan(const __half2 a, const __half2 b) 
# 2660
{int volatile ___ = 1;(void)a;(void)b;
# 2662
::exit(___);}
#if 0
# 2660
{ 
# 2661
{ __half2 val; __asm__("{min.NaN.f16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2662
} 
#endif
# 2663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 __hfma2_relu(const __half2 a, const __half2 b, const __half2 c) 
# 2664
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2666
::exit(___);}
#if 0
# 2664
{ 
# 2665
{ __half2 val; __asm__("{fma.rn.relu.f16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); return val; } 
# 2666
} 
#endif
# 2678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half2 atomicAdd(__half2 *const address, const __half2 val) {int volatile ___ = 1;(void)address;(void)val;
# 2684
::exit(___);}
#if 0
# 2678
{ 
# 2679
__half2 r; 
# 2680
__asm__ volatile("{ atom.add.noftz.f16x2 %0,[%1],%2; }\n" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "l" (address), "r" (*(reinterpret_cast< const unsigned *>(&val))) : "memory"); 
# 2683
return r; 
# 2684
} 
#endif
# 2690 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
__attribute__((unused)) static inline __half atomicAdd(__half *const address, const __half val) {int volatile ___ = 1;(void)address;(void)val;
# 2697
::exit(___);}
#if 0
# 2690
{ 
# 2691
__half r; 
# 2692
__asm__ volatile("{ atom.add.noftz.f16 %0,[%1],%2; }\n" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "l" (address), "h" (*(reinterpret_cast< const unsigned short *>(&val))) : "memory"); 
# 2696
return r; 
# 2697
} 
#endif
# 2723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_fp16.hpp"
typedef __half half; 
# 2724
typedef __half2 half2; 
# 2726
typedef __half __nv_half; 
# 2727
typedef __half2 __nv_half2; 
# 2728
typedef __half_raw __nv_half_raw; 
# 2729
typedef __half2_raw __nv_half2_raw; 
# 2730
typedef __half nv_half; 
# 2731
typedef __half2 nv_half2; 
# 141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
struct __nv_bfloat16; 
# 151 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
struct __nv_bfloat162; 
# 167 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __double2bfloat16(const double a); 
# 182 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16(const float a); 
# 197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rn(const float a); 
# 212 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rz(const float a); 
# 228 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_rd(const float a); 
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __float2bfloat16_ru(const float a); 
# 259 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __bfloat162float(const __nv_bfloat16 a); 
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __float2bfloat162_rn(const float a); 
# 298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b); 
# 314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __low2float(const __nv_bfloat162 a); 
# 330 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float __high2float(const __nv_bfloat162 a); 
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a); 
# 368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline float2 __bfloat1622float2(const __nv_bfloat162 a); 
# 384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h); 
# 400 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline int __bfloat162int_rz(const __nv_bfloat16 h); 
# 416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h); 
# 432 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h); 
# 449 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i); 
# 465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i); 
# 481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i); 
# 497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i); 
# 515 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h); 
# 531 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline short __bfloat162short_rz(const __nv_bfloat16 h); 
# 547 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h); 
# 563 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h); 
# 581 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i); 
# 597 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i); 
# 613 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i); 
# 629 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i); 
# 646 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h); 
# 662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h); 
# 678 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h); 
# 694 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h); 
# 711 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i); 
# 727 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i); 
# 743 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i); 
# 759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i); 
# 777 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h); 
# 794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h); 
# 806 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h); 
# 818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h); 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i); 
# 853 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i); 
# 869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i); 
# 885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i); 
# 903 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h); 
# 920 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h); 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h); 
# 952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h); 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i); 
# 987 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i); 
# 1003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i); 
# 1019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i); 
# 1037 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h); 
# 1053 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h); 
# 1069 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h); 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h); 
# 1103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i); 
# 1115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i); 
# 1131 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i); 
# 1147 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i); 
# 1164 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h); 
# 1179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h); 
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h); 
# 1211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h); 
# 1228 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h); 
# 1244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h); 
# 1260 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h); 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h); 
# 1295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a); 
# 1311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a); 
# 1331 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1366 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a); 
# 1381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a); 
# 1398 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a); 
# 1416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 1432 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a); 
# 1448 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a); 
# 1465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h); 
# 1481 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h); 
# 1497 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i); 
# 1513 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i); 
# 1544 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1569 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1594 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width = 32); 
# 1618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width = 32); 
# 1643 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1667 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width = 32); 
# 1716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width = 32); 
# 1729 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr); 
# 1736
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr); 
# 1743
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr); 
# 1750
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr); 
# 1757
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr); 
# 1764
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr); 
# 1771
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr); 
# 1778
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr); 
# 1785
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr); 
# 1792
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr); 
# 1799
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr); 
# 1806
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr); 
# 1814
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1821
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1828
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1835
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1842
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1849
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1856
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value); 
# 1863
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value); 
# 1882 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1900 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1918 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 1990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2008 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2026 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2062 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2080 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2098 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __heq2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hne2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hle2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2152 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hge2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2170 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2188 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2206 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2224 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2260 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a); 
# 2332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2372 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2392 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2412 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2453 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2470 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a); 
# 2489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2508 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2528 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2551 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2573 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 2592 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a); 
# 2607 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a); 
# 2627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2647 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2663 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2703 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2719 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2739 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2757 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2776 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 2818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2840 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 2858 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a); 
# 2880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2902 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2924 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 2990 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3012 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3056 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3079 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3158 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3175 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3209 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3226 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3262 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3298 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3316 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a); 
# 3368 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3387 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b); 
# 3445 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c); 
# 3466 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3527 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b); 
# 3549 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3568 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c); 
# 3584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a); 
# 3601 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a); 
# 3616 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a); 
# 3632 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a); 
# 3648 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a); 
# 3664 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a); 
# 3681 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a); 
# 3698 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a); 
# 3715 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a); 
# 3730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a); 
# 3745 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a); 
# 3761 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a); 
# 3778 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a); 
# 3794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a); 
# 3811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a); 
# 3828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a); 
# 3845 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a); 
# 3862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a); 
# 3879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a); 
# 3896 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a); 
# 3912 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a); 
# 3927 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a); 
# 3946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val); 
# 3964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.h"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val); 
# 139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
typedef 
# 137
struct __attribute((aligned(2))) { 
# 138
unsigned short x; 
# 139
} __nv_bfloat16_raw; 
# 144
typedef 
# 141
struct __attribute((aligned(4))) { 
# 142
unsigned short x; 
# 143
unsigned short y; 
# 144
} __nv_bfloat162_raw; 
# 152
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#pragma GCC diagnostic ignored "-Weffc++"
# 165 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
struct __attribute((aligned(2))) __nv_bfloat16 { 
# 167
protected: unsigned short __x; 
# 171
public: __nv_bfloat16() = default;
# 177
__nv_bfloat16(const __nv_bfloat16_raw &hr) : __x(hr.x) { } 
# 178
__nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) { (__x) = (hr.x); return *this; } 
# 179
volatile __nv_bfloat16 &operator=(const __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 180
volatile __nv_bfloat16 &operator=(const volatile __nv_bfloat16_raw &hr) volatile { (__x) = (hr.x); return *this; } 
# 181
operator __nv_bfloat16_raw() const { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 182
operator __nv_bfloat16_raw() const volatile { __nv_bfloat16_raw ret; (ret.x) = (__x); return ret; } 
# 186
__nv_bfloat16(const float f) { (__x) = (__float2bfloat16(f).__x); } 
# 187
__nv_bfloat16(const double f) { (__x) = (__double2bfloat16(f).__x); } 
# 189
operator float() const { return __bfloat162float(*this); } 
# 190
__nv_bfloat16 &operator=(const float f) { (__x) = (__float2bfloat16(f).__x); return *this; } 
# 193
__nv_bfloat16 &operator=(const double f) { (__x) = (__double2bfloat16(f).__x); return *this; } 
# 199
__nv_bfloat16(short val) { (__x) = (__short2bfloat16_rn(val).__x); } 
# 200
__nv_bfloat16(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); } 
# 201
__nv_bfloat16(int val) { (__x) = (__int2bfloat16_rn(val).__x); } 
# 202
__nv_bfloat16(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); } 
# 203
__nv_bfloat16(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); } 
# 204
__nv_bfloat16(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); } 
# 207
operator short() const { return __bfloat162short_rz(*this); } 
# 208
__nv_bfloat16 &operator=(short val) { (__x) = (__short2bfloat16_rn(val).__x); return *this; } 
# 210
operator unsigned short() const { return __bfloat162ushort_rz(*this); } 
# 211
__nv_bfloat16 &operator=(unsigned short val) { (__x) = (__ushort2bfloat16_rn(val).__x); return *this; } 
# 213
operator int() const { return __bfloat162int_rz(*this); } 
# 214
__nv_bfloat16 &operator=(int val) { (__x) = (__int2bfloat16_rn(val).__x); return *this; } 
# 216
operator unsigned() const { return __bfloat162uint_rz(*this); } 
# 217
__nv_bfloat16 &operator=(unsigned val) { (__x) = (__uint2bfloat16_rn(val).__x); return *this; } 
# 219
operator long long() const { return __bfloat162ll_rz(*this); } 
# 220
__nv_bfloat16 &operator=(long long val) { (__x) = (__ll2bfloat16_rn(val).__x); return *this; } 
# 222
operator unsigned long long() const { return __bfloat162ull_rz(*this); } 
# 223
__nv_bfloat16 &operator=(unsigned long long val) { (__x) = (__ull2bfloat16_rn(val).__x); return *this; } 
# 226
operator bool() const { return ((__x) & 32767) != 0; } 
# 229
}; 
# 237
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 237
{ return __hadd(lh, rh); } 
#endif
# 238 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 238
{ return __hsub(lh, rh); } 
#endif
# 239 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator*(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 239
{ return __hmul(lh, rh); } 
#endif
# 240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator/(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 240
{ return __hdiv(lh, rh); } 
#endif
# 242 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator+=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 242
{ lh = __hadd(lh, rh); return lh; } 
#endif
# 243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator-=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 243
{ lh = __hsub(lh, rh); return lh; } 
#endif
# 244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator*=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 244
{ lh = __hmul(lh, rh); return lh; } 
#endif
# 245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator/=(__nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 245
{ lh = __hdiv(lh, rh); return lh; } 
#endif
# 248 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator++(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 248
{ __nv_bfloat16_raw one; (one.x) = (16256); (h += one); return h; } 
#endif
# 249 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 &operator--(__nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 249
{ __nv_bfloat16_raw one; (one.x) = (16256); (h -= one); return h; } 
#endif
# 250 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator++(__nv_bfloat16 &h, const int ignored) 
# 251
{int volatile ___ = 1;(void)h;(void)ignored;
# 260
::exit(___);}
#if 0
# 251
{ 
# 253
static_cast< void>(ignored); 
# 255
const __nv_bfloat16 ret = h; 
# 256
__nv_bfloat16_raw one; 
# 257
(one.x) = (16256); 
# 258
(h += one); 
# 259
return ret; 
# 260
} 
#endif
# 261 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator--(__nv_bfloat16 &h, const int ignored) 
# 262
{int volatile ___ = 1;(void)h;(void)ignored;
# 271
::exit(___);}
#if 0
# 262
{ 
# 264
static_cast< void>(ignored); 
# 266
const __nv_bfloat16 ret = h; 
# 267
__nv_bfloat16_raw one; 
# 268
(one.x) = (16256); 
# 269
(h -= one); 
# 270
return ret; 
# 271
} 
#endif
# 273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator+(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 273
{ return h; } 
#endif
# 274 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat16 operator-(const __nv_bfloat16 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 274
{ return __hneg(h); } 
#endif
# 277 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 277
{ return __heq(lh, rh); } 
#endif
# 278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 278
{ return __hneu(lh, rh); } 
#endif
# 279 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 279
{ return __hgt(lh, rh); } 
#endif
# 280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 280
{ return __hlt(lh, rh); } 
#endif
# 281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 281
{ return __hge(lh, rh); } 
#endif
# 282 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat16 &lh, const __nv_bfloat16 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 282
{ return __hle(lh, rh); } 
#endif
# 288 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
struct __attribute((aligned(4))) __nv_bfloat162 { 
# 289
__nv_bfloat16 x; 
# 290
__nv_bfloat16 y; 
# 295
__nv_bfloat162() = default;
# 296
__nv_bfloat162(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); } 
# 297
__nv_bfloat162 &operator=(__nv_bfloat162 &&src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = std::move(*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 301
__nv_bfloat162(const __nv_bfloat16 &a, const __nv_bfloat16 &b) : x(a), y(b) { } 
# 302
__nv_bfloat162(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); } 
# 303
__nv_bfloat162 &operator=(const __nv_bfloat162 &src) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&src))); return *this; } 
# 306
__nv_bfloat162(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); } 
# 307
__nv_bfloat162 &operator=(const __nv_bfloat162_raw &h2r) { (*(reinterpret_cast< unsigned *>(&(*this)))) = (*(reinterpret_cast< const unsigned *>(&h2r))); return *this; } 
# 308
operator __nv_bfloat162_raw() const { __nv_bfloat162_raw ret; (ret.x) = (0U); (ret.y) = (0U); (*(reinterpret_cast< unsigned *>(&ret))) = (*(reinterpret_cast< const unsigned *>(&(*this)))); return ret; } 
# 309
}; 
# 316
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 316
{ return __hadd2(lh, rh); } 
#endif
# 317 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 317
{ return __hsub2(lh, rh); } 
#endif
# 318 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator*(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 318
{ return __hmul2(lh, rh); } 
#endif
# 319 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator/(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 319
{ return __h2div(lh, rh); } 
#endif
# 321 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator+=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 321
{ (lh = (__hadd2(lh, rh))); return lh; } 
#endif
# 322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator-=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 322
{ (lh = (__hsub2(lh, rh))); return lh; } 
#endif
# 323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator*=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 323
{ (lh = (__hmul2(lh, rh))); return lh; } 
#endif
# 324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator/=(__nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 324
{ (lh = (__h2div(lh, rh))); return lh; } 
#endif
# 326 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator++(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 326
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hadd2(h, one))); return h; } 
#endif
# 327 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 &operator--(__nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 327
{ __nv_bfloat162_raw one; (one.x) = (16256); (one.y) = (16256); (h = (__hsub2(h, one))); return h; } 
#endif
# 328 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator++(__nv_bfloat162 &h, const int ignored) 
# 329
{int volatile ___ = 1;(void)h;(void)ignored;
# 339
::exit(___);}
#if 0
# 329
{ 
# 331
static_cast< void>(ignored); 
# 333
const __nv_bfloat162 ret = h; 
# 334
__nv_bfloat162_raw one; 
# 335
(one.x) = (16256); 
# 336
(one.y) = (16256); 
# 337
(h = (__hadd2(h, one))); 
# 338
return ret; 
# 339
} 
#endif
# 340 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator--(__nv_bfloat162 &h, const int ignored) 
# 341
{int volatile ___ = 1;(void)h;(void)ignored;
# 351
::exit(___);}
#if 0
# 341
{ 
# 343
static_cast< void>(ignored); 
# 345
const __nv_bfloat162 ret = h; 
# 346
__nv_bfloat162_raw one; 
# 347
(one.x) = (16256); 
# 348
(one.y) = (16256); 
# 349
(h = (__hsub2(h, one))); 
# 350
return ret; 
# 351
} 
#endif
# 352 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator+(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 352
{ return h; } 
#endif
# 353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline __nv_bfloat162 operator-(const __nv_bfloat162 &h) {int volatile ___ = 1;(void)h;::exit(___);}
#if 0
# 353
{ return __hneg2(h); } 
#endif
# 355 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator==(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 355
{ return __hbeq2(lh, rh); } 
#endif
# 356 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator!=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 356
{ return __hbneu2(lh, rh); } 
#endif
# 357 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 357
{ return __hbgt2(lh, rh); } 
#endif
# 358 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 358
{ return __hblt2(lh, rh); } 
#endif
# 359 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator>=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 359
{ return __hbge2(lh, rh); } 
#endif
# 360 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute((always_inline)) __attribute__((unused)) inline bool operator<=(const __nv_bfloat162 &lh, const __nv_bfloat162 &rh) {int volatile ___ = 1;(void)lh;(void)rh;::exit(___);}
#if 0
# 360
{ return __hble2(lh, rh); } 
#endif
# 373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
#pragma GCC diagnostic pop
# 380
static inline unsigned __internal_float_as_uint(const float f) 
# 381
{ 
# 382
unsigned u; 
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
memcpy(&u, &f, sizeof f); 
# 383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 390 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return u; 
# 391
} 
# 393
static inline float __internal_uint_as_float(unsigned u) 
# 394
{ 
# 395
float f; 
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
memcpy(&f, &u, sizeof u); 
# 396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return f; 
# 404
} 
# 406
static inline unsigned short __internal_float2bfloat16(const float f, unsigned &sign, unsigned &remainder) 
# 407
{ 
# 408
unsigned x; 
# 410
x = __internal_float_as_uint(f); 
# 412
if ((x & 2147483647U) > 2139095040U) { 
# 413
sign = 0U; 
# 414
remainder = 0U; 
# 415
return static_cast< unsigned short>(32767U); 
# 416
}  
# 417
sign = (x >> 31U); 
# 418
remainder = (x << 16U); 
# 419
return static_cast< unsigned short>(x >> 16U); 
# 420
} 
# 422
static inline __nv_bfloat16 __double2bfloat16(const double x) 
# 423
{ 
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(x); const double d = static_cast< double>(f); unsigned u = __internal_float_as_uint(f); bool x_is_not_nan = (u << ((unsigned)1U)) <= ((unsigned)4278190080U); if ((x > (0.0)) && (d > x)) { u--; }  if ((x < (0.0)) && (d < x)) { u--; }  if ((d != x) && x_is_not_nan) { u |= 1U; }  f = __internal_uint_as_float(u); return __float2bfloat16(f); 
# 424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 450 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 452
static inline __nv_bfloat16 __float2bfloat16(const float a) 
# 453
{ 
# 454
__nv_bfloat16 val; 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 467 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 468
} 
# 469
static inline __nv_bfloat16 __float2bfloat16_rn(const float a) 
# 470
{ 
# 471
__nv_bfloat16 val; 
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder > 2147483648U) || ((remainder == 2147483648U) && (((r.x) & 1U) != 0U))) { (r.x)++; }  (val = r); 
# 472 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 484 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 485
} 
# 486
static inline __nv_bfloat16 __float2bfloat16_rz(const float a) 
# 487
{ 
# 488
__nv_bfloat16 val; 
# 489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); (val = r); 
# 489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 498 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 499
} 
# 500
static inline __nv_bfloat16 __float2bfloat16_rd(const float a) 
# 501
{ 
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16 val; __nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder != 0U) && (sign != 0U)) { (r.x)++; }  (val = r); return val; 
# 502 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 518 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 519
static inline __nv_bfloat16 __float2bfloat16_ru(const float a) 
# 520
{ 
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__nv_bfloat16 val; __nv_bfloat16_raw r; unsigned sign = 0U; unsigned remainder = 0U; (r.x) = __internal_float2bfloat16(a, sign, remainder); if ((remainder != 0U) && (sign == 0U)) { (r.x)++; }  (val = r); return val; 
# 521 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 537 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 538
static inline __nv_bfloat162 __float2bfloat162_rn(const float a) 
# 539
{ 
# 540
__nv_bfloat162 val; 
# 541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(a))); 
# 541 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 548 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 549
} 
# 550
static inline __nv_bfloat162 __floats2bfloat162_rn(const float a, const float b) 
# 551
{ 
# 552
__nv_bfloat162 val; 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
(val = __nv_bfloat162(__float2bfloat16_rn(a), __float2bfloat16_rn(b))); 
# 553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 559 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 560
} 
# 563
__attribute__((unused)) static inline float __internal_device_bfloat162float(const unsigned short h) 
# 564
{int volatile ___ = 1;(void)h;
# 572 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 564 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 565
float f; 
# 566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ mov.b32 %0, {0,%1};}\n" : "=f" (f) : "h" (h)); 
# 566 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 571 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return f; 
# 572
} 
#endif
# 575 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline float __internal_bfloat162float(const unsigned short h) 
# 576
{ 
# 577
float f; 
# 578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned u = (static_cast< unsigned>(h)) << 16; f = __internal_uint_as_float(u); 
# 578 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return f; 
# 585
} 
# 587
static inline float __bfloat162float(const __nv_bfloat16 a) 
# 588
{ 
# 589
return __internal_bfloat162float(((__nv_bfloat16_raw)a).x); 
# 590
} 
# 591
static inline float __low2float(const __nv_bfloat162 a) 
# 592
{ 
# 593
return __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 594
} 
# 596
static inline float __high2float(const __nv_bfloat162 a) 
# 597
{ 
# 598
return __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 599
} 
# 604
static inline __nv_bfloat162 make_bfloat162(const __nv_bfloat16 x, const __nv_bfloat16 y) 
# 605
{ 
# 606
__nv_bfloat162 t; (t.x) = x; (t.y) = y; return t; 
# 607
} 
# 612
static inline __nv_bfloat162 __float22bfloat162_rn(const float2 a) 
# 613
{ 
# 614
__nv_bfloat162 val = __floats2bfloat162_rn(a.x, a.y); 
# 615
return val; 
# 616
} 
# 617
static inline float2 __bfloat1622float2(const __nv_bfloat162 a) 
# 618
{ 
# 619
float hi_float; 
# 620
float lo_float; 
# 621
lo_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).x); 
# 622
hi_float = __internal_bfloat162float(((__nv_bfloat162_raw)a).y); 
# 623
return make_float2(lo_float, hi_float); 
# 624
} 
# 625
__attribute__((unused)) static inline int __bfloat162int_rn(const __nv_bfloat16 h) 
# 626
{int volatile ___ = 1;(void)h;
# 634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2int_rn(__bfloat162float(h)); 
# 627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 634 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 636 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline int __internal_bfloat162int_rz(const __nv_bfloat16 h) 
# 637
{ 
# 638
const float f = __bfloat162float(h); 
# 639
int i; 
# 640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const int max_val = ((int)2147483647U); const int min_val = ((int)2147483648U); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = 0; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< int>(f)); }  }  }  
# 640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 660 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 661
} 
# 663
static inline int __bfloat162int_rz(const __nv_bfloat16 h) 
# 664
{ 
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __internal_bfloat162int_rz(h); 
# 665 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 672 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 674
__attribute__((unused)) static inline int __bfloat162int_rd(const __nv_bfloat16 h) 
# 675
{int volatile ___ = 1;(void)h;
# 683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2int_rd(__bfloat162float(h)); 
# 676 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 683 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 684 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __bfloat162int_ru(const __nv_bfloat16 h) 
# 685
{int volatile ___ = 1;(void)h;
# 693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2int_ru(__bfloat162float(h)); 
# 686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 693 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 695 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_int2bfloat16_rn(const int i) 
# 696
{int volatile ___ = 1;(void)i;
# 710 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 696 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 697 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 697 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __int2float_ru(i); const float rd = __int2float_rd(i); float rz = __int2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 697 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 710 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 712 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __int2bfloat16_rn(const int i) 
# 713
{ 
# 714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); return __double2bfloat16(d); 
# 714 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 720 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 721
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rz(const int i) 
# 722
{int volatile ___ = 1;(void)i;
# 730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 722 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__int2float_rz(i)); 
# 723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 731 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_rd(const int i) 
# 732
{int volatile ___ = 1;(void)i;
# 740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 732 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__int2float_rd(i)); 
# 733 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 740 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 742 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __int2bfloat16_ru(const int i) 
# 743
{int volatile ___ = 1;(void)i;
# 751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 743 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__int2float_ru(i)); 
# 744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 753 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_rn(const __nv_bfloat16 h) 
# 754
{int volatile ___ = 1;(void)h;
# 765 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 754 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 755
short val; 
# 756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 756 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 764 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 765
} 
#endif
# 767 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __internal_device_bfloat162short_rz(const __nv_bfloat16 h) 
# 768
{int volatile ___ = 1;(void)h;
# 779 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 768 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 769
short val; 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rzi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 770 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 778 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 779
} 
#endif
# 781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline short __bfloat162short_rz(const __nv_bfloat16 h) 
# 782
{ 
# 783
short val; 
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); const short max_val = ((short)32767U); const short min_val = ((short)32768U); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { val = (0); } else { if (f > (static_cast< float>(max_val))) { val = max_val; } else { if (f < (static_cast< float>(min_val))) { val = min_val; } else { val = (static_cast< short>(f)); }  }  }  
# 784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 805 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 806
} 
# 808
__attribute__((unused)) static inline short __bfloat162short_rd(const __nv_bfloat16 h) 
# 809
{int volatile ___ = 1;(void)h;
# 820 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 809 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 810
short val; 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 820
} 
#endif
# 821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat162short_ru(const __nv_bfloat16 h) 
# 822
{int volatile ___ = 1;(void)h;
# 833 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 822 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 823
short val; 
# 824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.s16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 832 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 833
} 
#endif
# 834 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __short2bfloat16_rn(const short i) 
# 835
{ 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = static_cast< float>(i); return __float2bfloat16_rn(f); 
# 836 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 844 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 845
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rz(const short i) 
# 846
{int volatile ___ = 1;(void)i;
# 854 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 846 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__int2float_rz(static_cast< int>(i))); 
# 847 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 854 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_rd(const short i) 
# 856
{int volatile ___ = 1;(void)i;
# 864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 856 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__int2float_rd(static_cast< int>(i))); 
# 857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short2bfloat16_ru(const short i) 
# 866
{int volatile ___ = 1;(void)i;
# 874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__int2float_ru(static_cast< int>(i))); 
# 867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 876 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_rn(const __nv_bfloat16 h) 
# 877
{int volatile ___ = 1;(void)h;
# 885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2uint_rn(__bfloat162float(h)); 
# 878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 887 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned __internal_bfloat162uint_rz(const __nv_bfloat16 h) 
# 888
{ 
# 889
const float f = __bfloat162float(h); 
# 890
unsigned i; 
# 891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const unsigned max_val = 4294967295U; const unsigned min_val = 0U; const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = 0U; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned>(f)); }  }  }  
# 891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 911 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 912
} 
# 914
static inline unsigned __bfloat162uint_rz(const __nv_bfloat16 h) 
# 915
{ 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __internal_bfloat162uint_rz(h); 
# 916 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 923 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 924
__attribute__((unused)) static inline unsigned __bfloat162uint_rd(const __nv_bfloat16 h) 
# 925
{int volatile ___ = 1;(void)h;
# 933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 925 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2uint_rd(__bfloat162float(h)); 
# 926 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __bfloat162uint_ru(const __nv_bfloat16 h) 
# 935
{int volatile ___ = 1;(void)h;
# 943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 935 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2uint_ru(__bfloat162float(h)); 
# 936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_uint2bfloat16_rn(const unsigned i) 
# 946
{int volatile ___ = 1;(void)i;
# 960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __uint2float_ru(i); const float rd = __uint2float_rd(i); float rz = __uint2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 962 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __uint2bfloat16_rn(const unsigned i) 
# 963
{ 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const double d = static_cast< double>(i); return __double2bfloat16(d); 
# 964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 972
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rz(const unsigned i) 
# 973
{int volatile ___ = 1;(void)i;
# 981 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__uint2float_rz(i)); 
# 974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 981 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 982 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_rd(const unsigned i) 
# 983
{int volatile ___ = 1;(void)i;
# 991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 983 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__uint2float_rd(i)); 
# 984 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 991 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 992 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __uint2bfloat16_ru(const unsigned i) 
# 993
{int volatile ___ = 1;(void)i;
# 1001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 993 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__uint2float_ru(i)); 
# 994 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rn(const __nv_bfloat16 h) 
# 1004
{int volatile ___ = 1;(void)h;
# 1015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1005
unsigned short val; 
# 1006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rni.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1014 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1015
} 
#endif
# 1017 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __internal_device_bfloat162ushort_rz(const __nv_bfloat16 h) 
# 1018
{int volatile ___ = 1;(void)h;
# 1029 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1019
unsigned short val; 
# 1020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rzi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1029
} 
#endif
# 1031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned short __bfloat162ushort_rz(const __nv_bfloat16 h) 
# 1032
{ 
# 1033
unsigned short val; 
# 1034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); const unsigned short max_val = (65535U); const unsigned short min_val = (0U); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { val = (0U); } else { if (f > (static_cast< float>(max_val))) { val = max_val; } else { if (f < (static_cast< float>(min_val))) { val = min_val; } else { val = (static_cast< unsigned short>(f)); }  }  }  
# 1034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1055 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1056
} 
# 1057
__attribute__((unused)) static inline unsigned short __bfloat162ushort_rd(const __nv_bfloat16 h) 
# 1058
{int volatile ___ = 1;(void)h;
# 1069 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1058 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1059
unsigned short val; 
# 1060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rmi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1060 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1068 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1069
} 
#endif
# 1070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat162ushort_ru(const __nv_bfloat16 h) 
# 1071
{int volatile ___ = 1;(void)h;
# 1082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1071 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1072
unsigned short val; 
# 1073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{ .reg.f32 f;\n  mov.b32 f, {0,%1};\n  cvt.rpi.u16.f32 %0,f;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&h)))); 
# 1073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1081 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 1082
} 
#endif
# 1083 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ushort2bfloat16_rn(const unsigned short i) 
# 1084
{ 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = static_cast< float>(i); return __float2bfloat16_rn(f); 
# 1085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1093 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1094
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rz(const unsigned short i) 
# 1095
{int volatile ___ = 1;(void)i;
# 1103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1095 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__uint2float_rz(static_cast< unsigned>(i))); 
# 1096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1103 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_rd(const unsigned short i) 
# 1105
{int volatile ___ = 1;(void)i;
# 1113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1105 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__uint2float_rd(static_cast< unsigned>(i))); 
# 1106 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1114 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort2bfloat16_ru(const unsigned short i) 
# 1115
{int volatile ___ = 1;(void)i;
# 1123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__uint2float_ru(static_cast< unsigned>(i))); 
# 1116 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1123 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rn(const __nv_bfloat16 h) 
# 1126
{int volatile ___ = 1;(void)h;
# 1134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ull_rn(__bfloat162float(h)); 
# 1127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1134 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1136 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __internal_device_bfloat162ull_rz(const __nv_bfloat16 h) 
# 1137
{int volatile ___ = 1;(void)h;
# 1146 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1137 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1138
unsigned long long i; 
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); i = __float2ull_rz(f); 
# 1139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1145 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 1146
} 
#endif
# 1148 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline unsigned long long __bfloat162ull_rz(const __nv_bfloat16 h) 
# 1149
{ 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); unsigned long long i; const unsigned long long max_val = 18446744073709551615ULL; const unsigned long long min_val = 0ULL; const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = 9223372036854775808ULL; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< unsigned long long>(f)); }  }  }  return i; 
# 1150 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1173 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1175
__attribute__((unused)) static inline unsigned long long __bfloat162ull_rd(const __nv_bfloat16 h) 
# 1176
{int volatile ___ = 1;(void)h;
# 1184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1176 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ull_rd(__bfloat162float(h)); 
# 1177 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1184 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1185 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned long long __bfloat162ull_ru(const __nv_bfloat16 h) 
# 1186
{int volatile ___ = 1;(void)h;
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1186 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ull_ru(__bfloat162float(h)); 
# 1187 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1194 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1196 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_ull2bfloat16_rn(const unsigned long long i) 
# 1197
{int volatile ___ = 1;(void)i;
# 1211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1197 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __ull2float_ru(i); const float rd = __ull2float_rd(i); float rz = __ull2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 1198 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ull2bfloat16_rn(const unsigned long long i) 
# 1214
{ 
# 1216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(i); const unsigned long long uf = static_cast< unsigned long long>(f); unsigned u = __internal_float_as_uint(f); if (uf > i) { u--; }  if (uf != i) { u |= 1U; }  f = __internal_uint_as_float(u); return __float2bfloat16_rn(f); 
# 1216 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1233 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1234
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rz(const unsigned long long i) 
# 1235
{int volatile ___ = 1;(void)i;
# 1243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1235 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__ull2float_rz(i)); 
# 1236 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1244 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_rd(const unsigned long long i) 
# 1245
{int volatile ___ = 1;(void)i;
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1245 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__ull2float_rd(i)); 
# 1246 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ull2bfloat16_ru(const unsigned long long i) 
# 1255
{int volatile ___ = 1;(void)i;
# 1263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__ull2float_ru(i)); 
# 1256 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1263 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1264 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_rn(const __nv_bfloat16 h) 
# 1265
{int volatile ___ = 1;(void)h;
# 1273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1265 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ll_rn(__bfloat162float(h)); 
# 1266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1273 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1275 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __internal_device_bfloat162ll_rz(const __nv_bfloat16 h) 
# 1276
{int volatile ___ = 1;(void)h;
# 1285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1276 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1277
long long i; 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float f = __bfloat162float(h); i = __float2ll_rz(f); 
# 1278 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1284 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return i; 
# 1285
} 
#endif
# 1287 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline long long __bfloat162ll_rz(const __nv_bfloat16 h) 
# 1288
{ 
# 1289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
long long i; const float f = __bfloat162float(h); const long long max_val = ((long long)9223372036854775807ULL); const long long min_val = ((long long)9223372036854775808ULL); const unsigned short bits = static_cast< unsigned short>((((__nv_bfloat16_raw)h).x) << 1U); if (bits > ((unsigned short)65280U)) { i = min_val; } else { if (f >= (static_cast< float>(max_val))) { i = max_val; } else { if (f < (static_cast< float>(min_val))) { i = min_val; } else { i = (static_cast< long long>(f)); }  }  }  return i; 
# 1289 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1312 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1313
__attribute__((unused)) static inline long long __bfloat162ll_rd(const __nv_bfloat16 h) 
# 1314
{int volatile ___ = 1;(void)h;
# 1322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1314 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ll_rd(__bfloat162float(h)); 
# 1315 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline long long __bfloat162ll_ru(const __nv_bfloat16 h) 
# 1324
{int volatile ___ = 1;(void)h;
# 1332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2ll_ru(__bfloat162float(h)); 
# 1325 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1332 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1334 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __internal_device_ll2bfloat16_rn(const long long i) 
# 1335
{int volatile ___ = 1;(void)i;
# 1349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1335 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const float ru = __ll2float_ru(i); const float rd = __ll2float_rd(i); float rz = __ll2float_rz(i); if (ru != rd) { rz = __uint_as_float(__float_as_uint(rz) | 1U); }  return __float2bfloat16_rn(rz); 
# 1336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1351 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
static inline __nv_bfloat16 __ll2bfloat16_rn(const long long i) 
# 1352
{ 
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
float f = static_cast< float>(i); const long long lf = static_cast< long long>(f); unsigned u = __internal_float_as_uint(f); if ((f > (0.0F)) && (lf > i)) { u--; }  if ((f < (0.0F)) && (lf < i)) { u--; }  if (lf != i) { u |= 1U; }  f = __internal_uint_as_float(u); return __float2bfloat16_rn(f); 
# 1353 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1373 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1374
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rz(const long long i) 
# 1375
{int volatile ___ = 1;(void)i;
# 1383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1375 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(__ll2float_rz(i)); 
# 1376 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1383 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1384 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_rd(const long long i) 
# 1385
{int volatile ___ = 1;(void)i;
# 1393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1385 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(__ll2float_rd(i)); 
# 1386 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1393 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1394 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ll2bfloat16_ru(const long long i) 
# 1395
{int volatile ___ = 1;(void)i;
# 1403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1395 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(__ll2float_ru(i)); 
# 1396 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1403 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1405 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 htrunc(const __nv_bfloat16 h) 
# 1406
{int volatile ___ = 1;(void)h;
# 1414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1406 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rz(truncf(__bfloat162float(h))); 
# 1407 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1414 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hceil(const __nv_bfloat16 h) 
# 1416
{int volatile ___ = 1;(void)h;
# 1424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1416 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_ru(ceilf(__bfloat162float(h))); 
# 1417 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1424 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1425 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hfloor(const __nv_bfloat16 h) 
# 1426
{int volatile ___ = 1;(void)h;
# 1434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1426 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rd(floorf(__bfloat162float(h))); 
# 1427 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1434 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1435 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrint(const __nv_bfloat16 h) 
# 1436
{int volatile ___ = 1;(void)h;
# 1444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return __float2bfloat16_rn(rintf(__bfloat162float(h))); 
# 1437 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1444 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 1446 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2trunc(const __nv_bfloat162 h) 
# 1447
{int volatile ___ = 1;(void)h;
# 1451
::exit(___);}
#if 0
# 1447
{ 
# 1448
const __nv_bfloat16 low = htrunc(h.x); 
# 1449
const __nv_bfloat16 high = htrunc(h.y); 
# 1450
return __nv_bfloat162(low, high); 
# 1451
} 
#endif
# 1452 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2ceil(const __nv_bfloat162 h) 
# 1453
{int volatile ___ = 1;(void)h;
# 1457
::exit(___);}
#if 0
# 1453
{ 
# 1454
const __nv_bfloat16 low = hceil(h.x); 
# 1455
const __nv_bfloat16 high = hceil(h.y); 
# 1456
return __nv_bfloat162(low, high); 
# 1457
} 
#endif
# 1458 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2floor(const __nv_bfloat162 h) 
# 1459
{int volatile ___ = 1;(void)h;
# 1463
::exit(___);}
#if 0
# 1459
{ 
# 1460
const __nv_bfloat16 low = hfloor(h.x); 
# 1461
const __nv_bfloat16 high = hfloor(h.y); 
# 1462
return __nv_bfloat162(low, high); 
# 1463
} 
#endif
# 1465 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rint(const __nv_bfloat162 h) 
# 1466
{int volatile ___ = 1;(void)h;
# 1468
::exit(___);}
#if 0
# 1466
{ 
# 1467
return __halves2bfloat162(hrint(__low2bfloat16(h)), hrint(__high2bfloat16(h))); 
# 1468
} 
#endif
# 1469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lows2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1470
{int volatile ___ = 1;(void)a;(void)b;
# 1477
::exit(___);}
#if 0
# 1470
{ 
# 1471
__nv_bfloat162 val; 
# 1472
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {alow,blow};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1476
return val; 
# 1477
} 
#endif
# 1478 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __highs2bfloat162(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1479
{int volatile ___ = 1;(void)a;(void)b;
# 1486
::exit(___);}
#if 0
# 1479
{ 
# 1480
__nv_bfloat162 val; 
# 1481
__asm__("{.reg .b16 alow,ahigh,blow,bhigh;\n  mov.b32 {alow,ahigh}, %1;\n  mov.b32 {blow,bhigh}, %2;\n  mov.b32 %0, {ahigh,bhigh};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1485
return val; 
# 1486
} 
#endif
# 1487 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __low2bfloat16(const __nv_bfloat162 a) 
# 1488
{int volatile ___ = 1;(void)a;
# 1494
::exit(___);}
#if 0
# 1488
{ 
# 1489
__nv_bfloat16 ret; 
# 1490
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, low;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1493
return ret; 
# 1494
} 
#endif
# 1495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline int __hisinf(const __nv_bfloat16 a) 
# 1496
{int volatile ___ = 1;(void)a;
# 1506
::exit(___);}
#if 0
# 1496
{ 
# 1497
int retval; 
# 1498
if ((*(reinterpret_cast< const unsigned short *>(&a))) == 65408U) { 
# 1499
retval = (-1); 
# 1500
} else { if ((*(reinterpret_cast< const unsigned short *>(&a))) == 32640U) { 
# 1501
retval = 1; 
# 1502
} else { 
# 1503
retval = 0; 
# 1504
}  }  
# 1505
return retval; 
# 1506
} 
#endif
# 1507 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __low2bfloat162(const __nv_bfloat162 a) 
# 1508
{int volatile ___ = 1;(void)a;
# 1514
::exit(___);}
#if 0
# 1508
{ 
# 1509
__nv_bfloat162 val; 
# 1510
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {low,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1513
return val; 
# 1514
} 
#endif
# 1515 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __high2bfloat162(const __nv_bfloat162 a) 
# 1516
{int volatile ___ = 1;(void)a;
# 1522
::exit(___);}
#if 0
# 1516
{ 
# 1517
__nv_bfloat162 val; 
# 1518
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,high};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1521
return val; 
# 1522
} 
#endif
# 1523 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __high2bfloat16(const __nv_bfloat162 a) 
# 1524
{int volatile ___ = 1;(void)a;
# 1530
::exit(___);}
#if 0
# 1524
{ 
# 1525
__nv_bfloat16 ret; 
# 1526
__asm__("{.reg .b16 low,high;\n mov.b32 {low,high}, %1;\n mov.b16 %0, high;}" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1529
return ret; 
# 1530
} 
#endif
# 1531 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __halves2bfloat162(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 1532
{int volatile ___ = 1;(void)a;(void)b;
# 1537
::exit(___);}
#if 0
# 1532
{ 
# 1533
__nv_bfloat162 val; 
# 1534
__asm__("{  mov.b32 %0, {%1,%2};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 1536
return val; 
# 1537
} 
#endif
# 1538 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __bfloat162bfloat162(const __nv_bfloat16 a) 
# 1539
{int volatile ___ = 1;(void)a;
# 1544
::exit(___);}
#if 0
# 1539
{ 
# 1540
__nv_bfloat162 val; 
# 1541
__asm__("{  mov.b32 %0, {%1,%1};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 1543
return val; 
# 1544
} 
#endif
# 1545 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __lowhigh2highlow(const __nv_bfloat162 a) 
# 1546
{int volatile ___ = 1;(void)a;
# 1552
::exit(___);}
#if 0
# 1546
{ 
# 1547
__nv_bfloat162 val; 
# 1548
__asm__("{.reg .b16 low,high;\n  mov.b32 {low,high}, %1;\n  mov.b32 %0, {high,low};}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 1551
return val; 
# 1552
} 
#endif
# 1553 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline short __bfloat16_as_short(const __nv_bfloat16 h) 
# 1554
{int volatile ___ = 1;(void)h;
# 1556
::exit(___);}
#if 0
# 1554
{ 
# 1555
return static_cast< short>(*(reinterpret_cast< const unsigned short *>(&h))); 
# 1556
} 
#endif
# 1557 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned short __bfloat16_as_ushort(const __nv_bfloat16 h) 
# 1558
{int volatile ___ = 1;(void)h;
# 1560
::exit(___);}
#if 0
# 1558
{ 
# 1559
return *(reinterpret_cast< const unsigned short *>(&h)); 
# 1560
} 
#endif
# 1561 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __short_as_bfloat16(const short i) 
# 1562
{int volatile ___ = 1;(void)i;
# 1566
::exit(___);}
#if 0
# 1562
{ 
# 1563
__nv_bfloat16 h; 
# 1564
(*(reinterpret_cast< unsigned short *>(&h))) = (static_cast< unsigned short>(i)); 
# 1565
return h; 
# 1566
} 
#endif
# 1567 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ushort_as_bfloat16(const unsigned short i) 
# 1568
{int volatile ___ = 1;(void)i;
# 1572
::exit(___);}
#if 0
# 1568
{ 
# 1569
__nv_bfloat16 h; 
# 1570
(*(reinterpret_cast< unsigned short *>(&h))) = i; 
# 1571
return h; 
# 1572
} 
#endif
# 1584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1585
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1590
::exit(___);}
#if 0
# 1585
{ 
# 1586
unsigned warp_size; 
# 1587
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1588
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1589
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.idx.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1590
} 
#endif
# 1591 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_up_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1592
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1597
::exit(___);}
#if 0
# 1592
{ 
# 1593
unsigned warp_size; 
# 1594
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1595
const unsigned c = (warp_size - (static_cast< unsigned>(width))) << 8U; 
# 1596
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.up.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1597
} 
#endif
# 1598 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_down_sync(const unsigned mask, const __nv_bfloat162 var, const unsigned delta, const int width) 
# 1599
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1604
::exit(___);}
#if 0
# 1599
{ 
# 1600
unsigned warp_size; 
# 1601
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1602
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1603
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.down.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1604
} 
#endif
# 1605 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __shfl_xor_sync(const unsigned mask, const __nv_bfloat162 var, const int delta, const int width) 
# 1606
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1611
::exit(___);}
#if 0
# 1606
{ 
# 1607
unsigned warp_size; 
# 1608
__asm__("{mov.u32 %0, WARP_SZ;\n}" : "=r" (warp_size) :); 
# 1609
const unsigned c = ((warp_size - (static_cast< unsigned>(width))) << 8U) | 31U; 
# 1610
{ __nv_bfloat162 r; __asm__ volatile("{shfl.sync.bfly.b32 %0,%1,%2,%3,%4;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&var))), "r" (delta), "r" (c), "r" (mask)); return r; } 
# 1611
} 
#endif
# 1615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1616
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1620
::exit(___);}
#if 0
# 1616
{ 
# 1617
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1618
const __nv_bfloat162 temp2 = __shfl_sync(mask, temp1, delta, width); 
# 1619
return __low2bfloat16(temp2); 
# 1620
} 
#endif
# 1621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_up_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1622
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1626
::exit(___);}
#if 0
# 1622
{ 
# 1623
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1624
const __nv_bfloat162 temp2 = __shfl_up_sync(mask, temp1, delta, width); 
# 1625
return __low2bfloat16(temp2); 
# 1626
} 
#endif
# 1627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_down_sync(const unsigned mask, const __nv_bfloat16 var, const unsigned delta, const int width) 
# 1628
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1632
::exit(___);}
#if 0
# 1628
{ 
# 1629
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1630
const __nv_bfloat162 temp2 = __shfl_down_sync(mask, temp1, delta, width); 
# 1631
return __low2bfloat16(temp2); 
# 1632
} 
#endif
# 1633 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __shfl_xor_sync(const unsigned mask, const __nv_bfloat16 var, const int delta, const int width) 
# 1634
{int volatile ___ = 1;(void)mask;(void)var;(void)delta;(void)width;
# 1638
::exit(___);}
#if 0
# 1634
{ 
# 1635
const __nv_bfloat162 temp1 = __halves2bfloat162(var, var); 
# 1636
const __nv_bfloat162 temp2 = __shfl_xor_sync(mask, temp1, delta, width); 
# 1637
return __low2bfloat16(temp2); 
# 1638
} 
#endif
# 1650 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldg(const __nv_bfloat162 *const ptr) 
# 1651
{int volatile ___ = 1;(void)ptr;
# 1655
::exit(___);}
#if 0
# 1651
{ 
# 1652
__nv_bfloat162 ret; 
# 1653
__asm__("ld.global.nc.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1654
return ret; 
# 1655
} 
#endif
# 1656 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldg(const __nv_bfloat16 *const ptr) 
# 1657
{int volatile ___ = 1;(void)ptr;
# 1661
::exit(___);}
#if 0
# 1657
{ 
# 1658
__nv_bfloat16 ret; 
# 1659
__asm__("ld.global.nc.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1660
return ret; 
# 1661
} 
#endif
# 1662 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcg(const __nv_bfloat162 *const ptr) 
# 1663
{int volatile ___ = 1;(void)ptr;
# 1667
::exit(___);}
#if 0
# 1663
{ 
# 1664
__nv_bfloat162 ret; 
# 1665
__asm__("ld.global.cg.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1666
return ret; 
# 1667
} 
#endif
# 1668 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcg(const __nv_bfloat16 *const ptr) 
# 1669
{int volatile ___ = 1;(void)ptr;
# 1673
::exit(___);}
#if 0
# 1669
{ 
# 1670
__nv_bfloat16 ret; 
# 1671
__asm__("ld.global.cg.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1672
return ret; 
# 1673
} 
#endif
# 1674 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldca(const __nv_bfloat162 *const ptr) 
# 1675
{int volatile ___ = 1;(void)ptr;
# 1679
::exit(___);}
#if 0
# 1675
{ 
# 1676
__nv_bfloat162 ret; 
# 1677
__asm__("ld.global.ca.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1678
return ret; 
# 1679
} 
#endif
# 1680 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldca(const __nv_bfloat16 *const ptr) 
# 1681
{int volatile ___ = 1;(void)ptr;
# 1685
::exit(___);}
#if 0
# 1681
{ 
# 1682
__nv_bfloat16 ret; 
# 1683
__asm__("ld.global.ca.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1684
return ret; 
# 1685
} 
#endif
# 1686 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcs(const __nv_bfloat162 *const ptr) 
# 1687
{int volatile ___ = 1;(void)ptr;
# 1691
::exit(___);}
#if 0
# 1687
{ 
# 1688
__nv_bfloat162 ret; 
# 1689
__asm__("ld.global.cs.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr)); 
# 1690
return ret; 
# 1691
} 
#endif
# 1692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcs(const __nv_bfloat16 *const ptr) 
# 1693
{int volatile ___ = 1;(void)ptr;
# 1697
::exit(___);}
#if 0
# 1693
{ 
# 1694
__nv_bfloat16 ret; 
# 1695
__asm__("ld.global.cs.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr)); 
# 1696
return ret; 
# 1697
} 
#endif
# 1698 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldlu(const __nv_bfloat162 *const ptr) 
# 1699
{int volatile ___ = 1;(void)ptr;
# 1703
::exit(___);}
#if 0
# 1699
{ 
# 1700
__nv_bfloat162 ret; 
# 1701
__asm__("ld.global.lu.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1702
return ret; 
# 1703
} 
#endif
# 1704 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldlu(const __nv_bfloat16 *const ptr) 
# 1705
{int volatile ___ = 1;(void)ptr;
# 1709
::exit(___);}
#if 0
# 1705
{ 
# 1706
__nv_bfloat16 ret; 
# 1707
__asm__("ld.global.lu.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1708
return ret; 
# 1709
} 
#endif
# 1710 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __ldcv(const __nv_bfloat162 *const ptr) 
# 1711
{int volatile ___ = 1;(void)ptr;
# 1715
::exit(___);}
#if 0
# 1711
{ 
# 1712
__nv_bfloat162 ret; 
# 1713
__asm__("ld.global.cv.b32 %0, [%1];" : "=r" (*(reinterpret_cast< unsigned *>(&ret))) : "l" (ptr) : "memory"); 
# 1714
return ret; 
# 1715
} 
#endif
# 1716 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __ldcv(const __nv_bfloat16 *const ptr) 
# 1717
{int volatile ___ = 1;(void)ptr;
# 1721
::exit(___);}
#if 0
# 1717
{ 
# 1718
__nv_bfloat16 ret; 
# 1719
__asm__("ld.global.cv.b16 %0, [%1];" : "=h" (*(reinterpret_cast< unsigned short *>(&ret))) : "l" (ptr) : "memory"); 
# 1720
return ret; 
# 1721
} 
#endif
# 1723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1724
{int volatile ___ = 1;(void)ptr;(void)value;
# 1726
::exit(___);}
#if 0
# 1724
{ 
# 1725
__asm__("st.global.wb.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1726
} 
#endif
# 1727 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwb(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1728
{int volatile ___ = 1;(void)ptr;(void)value;
# 1730
::exit(___);}
#if 0
# 1728
{ 
# 1729
__asm__("st.global.wb.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1730
} 
#endif
# 1731 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1732
{int volatile ___ = 1;(void)ptr;(void)value;
# 1734
::exit(___);}
#if 0
# 1732
{ 
# 1733
__asm__("st.global.cg.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1734
} 
#endif
# 1735 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcg(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1736
{int volatile ___ = 1;(void)ptr;(void)value;
# 1738
::exit(___);}
#if 0
# 1736
{ 
# 1737
__asm__("st.global.cg.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1738
} 
#endif
# 1739 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1740
{int volatile ___ = 1;(void)ptr;(void)value;
# 1742
::exit(___);}
#if 0
# 1740
{ 
# 1741
__asm__("st.global.cs.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1742
} 
#endif
# 1743 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stcs(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1744
{int volatile ___ = 1;(void)ptr;(void)value;
# 1746
::exit(___);}
#if 0
# 1744
{ 
# 1745
__asm__("st.global.cs.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1746
} 
#endif
# 1747 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat162 *const ptr, const __nv_bfloat162 value) 
# 1748
{int volatile ___ = 1;(void)ptr;(void)value;
# 1750
::exit(___);}
#if 0
# 1748
{ 
# 1749
__asm__("st.global.wt.b32 [%0], %1;" : : "l" (ptr), "r" (*(reinterpret_cast< const unsigned *>(&value))) : "memory"); 
# 1750
} 
#endif
# 1751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline void __stwt(__nv_bfloat16 *const ptr, const __nv_bfloat16 value) 
# 1752
{int volatile ___ = 1;(void)ptr;(void)value;
# 1754
::exit(___);}
#if 0
# 1752
{ 
# 1753
__asm__("st.global.wt.b16 [%0], %1;" : : "l" (ptr), "h" (*(reinterpret_cast< const unsigned short *>(&value))) : "memory"); 
# 1754
} 
#endif
# 1781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __heq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1782
{int volatile ___ = 1;(void)a;(void)b;
# 1784 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1783
{ __nv_bfloat162 val; 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1783 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1784
} 
#endif
# 1785 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1786
{int volatile ___ = 1;(void)a;(void)b;
# 1788 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1786 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1787
{ __nv_bfloat162 val; 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1787 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1788
} 
#endif
# 1789 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hle2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1790
{int volatile ___ = 1;(void)a;(void)b;
# 1792 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1790 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1791
{ __nv_bfloat162 val; 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1791 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1792
} 
#endif
# 1793 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1794
{int volatile ___ = 1;(void)a;(void)b;
# 1796 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1794 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1795
{ __nv_bfloat162 val; 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1795 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1796
} 
#endif
# 1797 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hlt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1798
{int volatile ___ = 1;(void)a;(void)b;
# 1800 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1798 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1799
{ __nv_bfloat162 val; 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1800
} 
#endif
# 1801 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1802
{int volatile ___ = 1;(void)a;(void)b;
# 1804 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1803
{ __nv_bfloat162 val; 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1804
} 
#endif
# 1805 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1806
{int volatile ___ = 1;(void)a;(void)b;
# 1808 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1806 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1807
{ __nv_bfloat162 val; 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1807 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1808
} 
#endif
# 1809 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1810
{int volatile ___ = 1;(void)a;(void)b;
# 1812 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1810 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1811
{ __nv_bfloat162 val; 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1811 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1812
} 
#endif
# 1813 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1814
{int volatile ___ = 1;(void)a;(void)b;
# 1816 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1814 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1815
{ __nv_bfloat162 val; 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1815 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1816
} 
#endif
# 1817 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1818
{int volatile ___ = 1;(void)a;(void)b;
# 1820 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1818 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1819
{ __nv_bfloat162 val; 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1819 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1820
} 
#endif
# 1821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1822
{int volatile ___ = 1;(void)a;(void)b;
# 1824 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1822 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1823
{ __nv_bfloat162 val; 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1823 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1824
} 
#endif
# 1825 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1826
{int volatile ___ = 1;(void)a;(void)b;
# 1828 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1826 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1827
{ __nv_bfloat162 val; 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  shr.u32 low_res, low_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1827 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1828
} 
#endif
# 1855 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __heq2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1856
{int volatile ___ = 1;(void)a;(void)b;
# 1858 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1856 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1857
{ unsigned val; 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.u32.f32 low_res, low_a, low_b;\n  set.eq.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1857 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1858
} 
#endif
# 1859 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hne2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1860
{int volatile ___ = 1;(void)a;(void)b;
# 1862 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1860 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1861
{ unsigned val; 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.u32.f32 low_res, low_a, low_b;\n  set.ne.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1861 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1862
} 
#endif
# 1863 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hle2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1864
{int volatile ___ = 1;(void)a;(void)b;
# 1866 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1864 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1865
{ unsigned val; 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.u32.f32 low_res, low_a, low_b;\n  set.le.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1865 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1866
} 
#endif
# 1867 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hge2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1868
{int volatile ___ = 1;(void)a;(void)b;
# 1870 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1868 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1869
{ unsigned val; 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.u32.f32 low_res, low_a, low_b;\n  set.ge.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1869 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1870
} 
#endif
# 1871 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hlt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1872
{int volatile ___ = 1;(void)a;(void)b;
# 1874 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1872 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1873
{ unsigned val; 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.u32.f32 low_res, low_a, low_b;\n  set.lt.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1873 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1874
} 
#endif
# 1875 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hgt2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1876
{int volatile ___ = 1;(void)a;(void)b;
# 1878 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1876 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1877
{ unsigned val; 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.u32.f32 low_res, low_a, low_b;\n  set.gt.u32.f32 high_" "res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1877 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1878
} 
#endif
# 1879 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hequ2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1880
{int volatile ___ = 1;(void)a;(void)b;
# 1882 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1880 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1881
{ unsigned val; 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.u32.f32 low_res, low_a, low_b;\n  set.equ.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1881 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1882
} 
#endif
# 1883 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hneu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1884
{int volatile ___ = 1;(void)a;(void)b;
# 1886 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1884 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1885
{ unsigned val; 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.u32.f32 low_res, low_a, low_b;\n  set.neu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1885 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1886
} 
#endif
# 1887 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hleu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1888
{int volatile ___ = 1;(void)a;(void)b;
# 1890 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1888 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1889
{ unsigned val; 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.u32.f32 low_res, low_a, low_b;\n  set.leu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1889 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1890
} 
#endif
# 1891 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hgeu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1892
{int volatile ___ = 1;(void)a;(void)b;
# 1894 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1892 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1893
{ unsigned val; 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.u32.f32 low_res, low_a, low_b;\n  set.geu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1893 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1894
} 
#endif
# 1895 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hltu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1896
{int volatile ___ = 1;(void)a;(void)b;
# 1898 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1896 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1897
{ unsigned val; 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.u32.f32 low_res, low_a, low_b;\n  set.ltu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1897 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1898
} 
#endif
# 1899 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline unsigned __hgtu2_mask(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1900
{int volatile ___ = 1;(void)a;(void)b;
# 1902 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1900 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1901
{ unsigned val; 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b;\n .reg .u32 high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0" "xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.u32.f32 low_res, low_a, low_b;\n  set.gtu.u32.f32 hig" "h_res, high_a, high_b;\n  shr.u32 low_res, low_res, 16;\n  shl.b32 high_res, high_res, 16;\n  or.b32  %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1901 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; } 
# 1902
} 
#endif
# 1931 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbeq2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1932
{int volatile ___ = 1;(void)a;(void)b;
# 1934 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1932 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1933
{ unsigned val; 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.eq.f32.f32 low_res, low_a, low_b;\n  set.eq.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1933 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1934
} 
#endif
# 1935 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbne2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1936
{int volatile ___ = 1;(void)a;(void)b;
# 1938 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1936 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1937
{ unsigned val; 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ne.f32.f32 low_res, low_a, low_b;\n  set.ne.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1937 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1938
} 
#endif
# 1939 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hble2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1940
{int volatile ___ = 1;(void)a;(void)b;
# 1942 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1940 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1941
{ unsigned val; 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.le.f32.f32 low_res, low_a, low_b;\n  set.le.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1941 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1942
} 
#endif
# 1943 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbge2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1944
{int volatile ___ = 1;(void)a;(void)b;
# 1946 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1944 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1945
{ unsigned val; 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ge.f32.f32 low_res, low_a, low_b;\n  set.ge.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1945 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1946
} 
#endif
# 1947 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hblt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1948
{int volatile ___ = 1;(void)a;(void)b;
# 1950 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1948 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1949
{ unsigned val; 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.lt.f32.f32 low_res, low_a, low_b;\n  set.lt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1949 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1950
} 
#endif
# 1951 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgt2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1952
{int volatile ___ = 1;(void)a;(void)b;
# 1954 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1952 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1953
{ unsigned val; 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gt.f32.f32 low_res, low_a, low_b;\n  set.gt.f32.f32 high_res, high_a, " "high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1953 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1954
} 
#endif
# 1955 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbequ2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1956
{int volatile ___ = 1;(void)a;(void)b;
# 1958 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1956 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1957
{ unsigned val; 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.equ.f32.f32 low_res, low_a, low_b;\n  set.equ.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1957 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1958
} 
#endif
# 1959 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbneu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1960
{int volatile ___ = 1;(void)a;(void)b;
# 1962 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1960 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1961
{ unsigned val; 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.neu.f32.f32 low_res, low_a, low_b;\n  set.neu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1961 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1962
} 
#endif
# 1963 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbleu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1964
{int volatile ___ = 1;(void)a;(void)b;
# 1966 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1964 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1965
{ unsigned val; 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.leu.f32.f32 low_res, low_a, low_b;\n  set.leu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1965 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1966
} 
#endif
# 1967 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgeu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1968
{int volatile ___ = 1;(void)a;(void)b;
# 1970 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1968 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1969
{ unsigned val; 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.geu.f32.f32 low_res, low_a, low_b;\n  set.geu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1969 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1970
} 
#endif
# 1971 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbltu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1972
{int volatile ___ = 1;(void)a;(void)b;
# 1974 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1972 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1973
{ unsigned val; 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.ltu.f32.f32 low_res, low_a, low_b;\n  set.ltu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1973 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1974
} 
#endif
# 1975 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hbgtu2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 1976
{int volatile ___ = 1;(void)a;(void)b;
# 1978 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 1976 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 1977
{ unsigned val; 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high_b, %2, 0xffff0000U;\n" "  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.gtu.f32.f32 low_res, low_a, low_b;\n  set.gtu.f32.f32 high_res, high_a" ", high_b;\n  and.b32 %0, high_res, low_res;}\n" : "=r" (val) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return (val != 0U) ? true : false; 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 1977 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 1978
} 
#endif
# 2001 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __heq(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2002
{int volatile ___ = 1;(void)a;(void)b;
# 2004 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2002 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2003
{ 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.eq.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2003 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2004
} 
#endif
# 2005 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hne(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2006
{int volatile ___ = 1;(void)a;(void)b;
# 2008 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2006 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2007
{ 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ne.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2007 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2008
} 
#endif
# 2009 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hle(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2010
{int volatile ___ = 1;(void)a;(void)b;
# 2012 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2010 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2011
{ 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.le.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2011 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2012
} 
#endif
# 2013 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hge(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2014
{int volatile ___ = 1;(void)a;(void)b;
# 2016 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2014 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2015
{ 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ge.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2015 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2016
} 
#endif
# 2017 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hlt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2018
{int volatile ___ = 1;(void)a;(void)b;
# 2020 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2018 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2019
{ 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.lt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2019 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2020
} 
#endif
# 2021 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgt(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2022
{int volatile ___ = 1;(void)a;(void)b;
# 2024 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2022 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2023
{ 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gt.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2023 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2024
} 
#endif
# 2025 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hequ(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2026
{int volatile ___ = 1;(void)a;(void)b;
# 2028 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2026 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2027
{ 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.equ.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2027 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2028
} 
#endif
# 2029 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hneu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2030
{int volatile ___ = 1;(void)a;(void)b;
# 2032 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2030 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2031
{ 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.neu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2031 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2032
} 
#endif
# 2033 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hleu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2034
{int volatile ___ = 1;(void)a;(void)b;
# 2036 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2034 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2035
{ 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.leu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2035 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2036
} 
#endif
# 2037 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgeu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2038
{int volatile ___ = 1;(void)a;(void)b;
# 2040 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2038 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2039
{ 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.geu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2039 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2040
} 
#endif
# 2041 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hltu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2042
{int volatile ___ = 1;(void)a;(void)b;
# 2044 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2042 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2043
{ 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.ltu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2043 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2044
} 
#endif
# 2045 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hgtu(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2046
{int volatile ___ = 1;(void)a;(void)b;
# 2048 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2046 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2047
{ 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned val; __asm__("{.reg .b32 a,b;\n  mov.b32 a, {0, %1};\n  mov.b32 b, {0, %2};\n  set.gtu.f32.f32 %0, a, b;}\n" : "=r" (val) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return (val != 0U) ? true : false; 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2047 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
# 2048
} 
#endif
# 2070 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2071
{int volatile ___ = 1;(void)a;(void)b;
# 2083 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2071 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2072
__nv_bfloat162 val; 
# 2073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2073 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2082 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2083
} 
#endif
# 2084 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2085
{int volatile ___ = 1;(void)a;(void)b;
# 2097 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2085 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2086
__nv_bfloat162 val; 
# 2087 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2087 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2087 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2096 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2097
} 
#endif
# 2098 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2099
{int volatile ___ = 1;(void)a;(void)b;
# 2111 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2099 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2100
__nv_bfloat162 val; 
# 2101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2101 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2110 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2111
} 
#endif
# 2112 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2113
{int volatile ___ = 1;(void)a;(void)b;
# 2125 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2113 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2114
__nv_bfloat162 val; 
# 2115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x3f803f80U;\n  fma.rn.bf16x2 %0,%1,c,%2;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2115 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2124 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2125
} 
#endif
# 2126 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2127
{int volatile ___ = 1;(void)a;(void)b;
# 2139 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2127 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2128
__nv_bfloat162 val; 
# 2129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0xbf80bf80U;\n  fma.rn.bf16x2 %0,%2,c,%1;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2129 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2138 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2139
} 
#endif
# 2140 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_rn(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2141
{int volatile ___ = 1;(void)a;(void)b;
# 2153 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2141 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2142
__nv_bfloat162 val; 
# 2143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b32 c;\n  mov.b32 c, 0x80008000U;\n  fma.rn.bf16x2 %0,%1,%2,c;}\n" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2143 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2152 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2153
} 
#endif
# 2154 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hadd2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2155
{int volatile ___ = 1;(void)a;(void)b;
# 2165
::exit(___);}
#if 0
# 2155
{ 
# 2156
__nv_bfloat162 val; 
# 2157
__asm__("{.reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f,%1,one,%2;\n  max.bf16x2 f, f, zero" ";\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2164
return val; 
# 2165
} 
#endif
# 2166 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hsub2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2167
{int volatile ___ = 1;(void)a;(void)b;
# 2178
::exit(___);}
#if 0
# 2167
{ 
# 2168
__nv_bfloat162 val; 
# 2169
__asm__("{.reg .b32 f, one, zero, mone;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mone, 0xbf80bf80U;\n  fma.rn.bf16x2 f" ",%2,mone,%1;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2177
return val; 
# 2178
} 
#endif
# 2179 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmul2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2180
{int volatile ___ = 1;(void)a;(void)b;
# 2191
::exit(___);}
#if 0
# 2180
{ 
# 2181
__nv_bfloat162 val; 
# 2182
__asm__("{.reg .b32 f, one, zero, mzero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  mov.b32 mzero, 0x80008000U;\n  fma.rn.bf16x2" " f,%1,%2,mzero;\n  max.bf16x2 f, f, zero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2190
return val; 
# 2191
} 
#endif
# 2192 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2193
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2198
::exit(___);}
#if 0
# 2193
{ 
# 2194
__nv_bfloat162 val; 
# 2195
__asm__("{fma.rn.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2197
return val; 
# 2198
} 
#endif
# 2199 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_sat(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2200
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2210
::exit(___);}
#if 0
# 2200
{ 
# 2201
__nv_bfloat162 val; 
# 2202
__asm__("{ .reg .b32 f, one, zero;\n  mov.b32 one, 0x3f803f80U;\n  mov.b32 zero, 0;\n  fma.rn.bf16x2 f, %1, %2, %3;\n  max.bf16x2 f, f, z" "ero;\n  min.bf16x2 %0, f, one;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2209
return val; 
# 2210
} 
#endif
# 2211 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __h2div(const __nv_bfloat162 a, const __nv_bfloat162 b) {int volatile ___ = 1;(void)a;(void)b;
# 2225
::exit(___);}
#if 0
# 2211
{ 
# 2212
__nv_bfloat16 ha, hb; 
# 2214
ha = __low2bfloat16(a); 
# 2215
hb = __low2bfloat16(b); 
# 2217
const __nv_bfloat16 v1 = __hdiv(ha, hb); 
# 2219
ha = __high2bfloat16(a); 
# 2220
hb = __high2bfloat16(b); 
# 2222
const __nv_bfloat16 v2 = __hdiv(ha, hb); 
# 2224
return __halves2bfloat162(v1, v2); 
# 2225
} 
#endif
# 2240 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2241
{int volatile ___ = 1;(void)a;(void)b;
# 2253 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2241 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2242
__nv_bfloat16 val; 
# 2243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2243 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2252 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2253
} 
#endif
# 2254 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2255
{int volatile ___ = 1;(void)a;(void)b;
# 2267 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2255 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2256
__nv_bfloat16 val; 
# 2257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2257 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2266 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2267
} 
#endif
# 2268 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2269
{int volatile ___ = 1;(void)a;(void)b;
# 2281 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2269 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2270
__nv_bfloat16 val; 
# 2271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2271 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2280 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2281
} 
#endif
# 2282 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2283
{int volatile ___ = 1;(void)a;(void)b;
# 2295 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2283 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2284
__nv_bfloat16 val; 
# 2285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x3f80U;\n  fma.rn.bf16 %0,%1,c,%2;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2285 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2294 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2295
} 
#endif
# 2296 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2297
{int volatile ___ = 1;(void)a;(void)b;
# 2309 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2297 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2298
__nv_bfloat16 val; 
# 2299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0xbf80U;\n  fma.rn.bf16 %0,%2,c,%1;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2299 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2308 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2309
} 
#endif
# 2310 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_rn(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2311
{int volatile ___ = 1;(void)a;(void)b;
# 2323 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2311 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2312
__nv_bfloat16 val; 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__asm__("{.reg .b16 c;\n  mov.b16 c, 0x8000U;\n  fma.rn.bf16 %0,%1,%2,c;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2313 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2322 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
return val; 
# 2323
} 
#endif
# 2324 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hadd_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2325
{int volatile ___ = 1;(void)a;(void)b;
# 2335
::exit(___);}
#if 0
# 2325
{ 
# 2326
__nv_bfloat16 val; 
# 2327
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, one, %2;\n  max.bf16 f, f, zero;\n " " min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2334
return val; 
# 2335
} 
#endif
# 2336 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsub_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2337
{int volatile ___ = 1;(void)a;(void)b;
# 2348
::exit(___);}
#if 0
# 2337
{ 
# 2338
__nv_bfloat16 val; 
# 2339
__asm__("{ .reg .b16 f, one, zero, mone;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mone, 0xbf80U;\n  fma.rn.bf16 f, %2, mon" "e, %1;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2347
return val; 
# 2348
} 
#endif
# 2349 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmul_sat(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2350
{int volatile ___ = 1;(void)a;(void)b;
# 2361
::exit(___);}
#if 0
# 2350
{ 
# 2351
__nv_bfloat16 val; 
# 2352
__asm__("{ .reg .b16 f, one, zero, mzero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  mov.b16 mzero, 0x8000U;\n  fma.rn.bf16 f, %1, %" "2, mzero;\n  max.bf16 f, f, zero;\n  min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2360
return val; 
# 2361
} 
#endif
# 2362 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2363
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2368
::exit(___);}
#if 0
# 2363
{ 
# 2364
__nv_bfloat16 val; 
# 2365
__asm__("{fma.rn.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2367
return val; 
# 2368
} 
#endif
# 2369 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_sat(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2370
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2380
::exit(___);}
#if 0
# 2370
{ 
# 2371
__nv_bfloat16 val; 
# 2372
__asm__("{ .reg .b16 f, one, zero;\n  mov.b16 one, 0x3f80U;\n  mov.b16 zero, 0;\n  fma.rn.bf16 f, %1, %2, %3;\n  max.bf16 f, f, zero;\n  " "min.bf16 %0, f, one;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2379
return val; 
# 2380
} 
#endif
# 2381 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hdiv(const __nv_bfloat16 a, const __nv_bfloat16 b) {int volatile ___ = 1;(void)a;(void)b;
# 2383
::exit(___);}
#if 0
# 2381
{ 
# 2382
{ __nv_bfloat16 val; __asm__("{.reg .b32 a,b,res;\n  mov.b32 a, {0,%1};\n  mov.b32 b, {0,%2};\n  div.rn.f32 res, a, b;\n  cvt.rn.bf16.f32 %0, res;}\n" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); return val; } 
# 2383
} 
#endif
# 2415 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hsin_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2419
::exit(___);}
#if 0
# 2415
{ 
# 2416
float f = __bfloat162float(a); 
# 2417
f = sinf(f); 
# 2418
return __float2bfloat16_rn(f); 
# 2419
} 
#endif
# 2420 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsin(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2422
::exit(___);}
#if 0
# 2420
{ 
# 2421
return __hsin_internal(a); 
# 2422
} 
#endif
# 2423 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sin(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2427
::exit(___);}
#if 0
# 2423
{ 
# 2424
const __nv_bfloat16 l = __low2bfloat16(a); 
# 2425
const __nv_bfloat16 h = __high2bfloat16(a); 
# 2426
return __halves2bfloat162(__hsin_internal(l), __hsin_internal(h)); 
# 2427
} 
#endif
# 2428 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hcos_internal(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2432
::exit(___);}
#if 0
# 2428
{ 
# 2429
float f = __bfloat162float(a); 
# 2430
f = cosf(f); 
# 2431
return __float2bfloat16_rn(f); 
# 2432
} 
#endif
# 2433 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hcos(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2435
::exit(___);}
#if 0
# 2433
{ 
# 2434
return __hcos_internal(a); 
# 2435
} 
#endif
# 2436 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2cos(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2440
::exit(___);}
#if 0
# 2436
{ 
# 2437
const __nv_bfloat16 l = __low2bfloat16(a); 
# 2438
const __nv_bfloat16 h = __high2bfloat16(a); 
# 2439
return __halves2bfloat162(__hcos_internal(l), __hcos_internal(h)); 
# 2440
} 
#endif
# 2455 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2468
::exit(___);}
#if 0
# 2455
{ 
# 2456
__nv_bfloat16 val; 
# 2457
__asm__("{.reg.b32          f, C;           \n .reg.b16          h,r;            \n  mov.b16          h,%1;           \n  mov.b32        " "  f,{0,h};        \n  mov.b32          C, 0x3FB8AA3CU;  \n  mul.f32          f,f,C;          \n  ex2.approx.f32   f,f;          " "  \n  cvt.rn.bf16.f32 r,f;            \n  mov.b16          %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2467
return val; 
# 2468
} 
#endif
# 2469 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2488
::exit(___);}
#if 0
# 2469
{ 
# 2470
__nv_bfloat162 val; 
# 2471
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         h," " %1;          \n  mov.b32         fl, {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x3FB8AA3CU;  \n  m" "ul.f32         fl,fl,C;        \n  mul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      f" "u, fu;     \n  cvt.rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n  mov.b32" "         %0, r;  \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2487
return val; 
# 2488
} 
#endif
# 2489 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2491
::exit(___);}
#if 0
# 2489
{ 
# 2490
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  ex2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2491
} 
#endif
# 2492 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2494
::exit(___);}
#if 0
# 2492
{ 
# 2493
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  ex2.approx.f32   fl, fl;     \n  ex2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2494
} 
#endif
# 2495 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hexp10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2509
::exit(___);}
#if 0
# 2495
{ 
# 2496
__nv_bfloat16 val; 
# 2497
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};       \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         f,f,C;          \n  ex2.approx.f32      f, f;       \n  c" "vt.rn.bf16.f32    r, f;       \n{.reg.b16 spc, ulp, p;\n  mov.b16 spc,0xBC95U;\n  mov.b16 ulp,0xBF00U;\n  set.eq.f16.f16 p,%1, s" "pc;\n  fma.rn.bf16 r,p,ulp,r;\n}\n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2508
return val; 
# 2509
} 
#endif
# 2510 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2exp10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2529
::exit(___);}
#if 0
# 2510
{ 
# 2511
__nv_bfloat162 val; 
# 2512
__asm__("{.reg.b16         hl, hu;         \n .reg.b32         h,r,fl,fu, C;   \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  mov.b32         C, 0x40549A78U;  \n  mul.f32         fl,fl,C;        \n  m" "ul.f32         fu,fu,C;        \n  ex2.approx.f32      fl, fl;     \n  ex2.approx.f32      fu, fu;     \n  cvt.rn.bf16.f32    hl" ", fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         r, {hl, hu};    \n{.reg.b32 spc, ulp, p;\n  mov.b32 spc,0xBC95B" "C95U;\n  mov.b32 ulp,0xBF00BF00U;\n  set.eq.f16x2.f16x2 p,%1, spc;\n  fma.rn.bf16x2 r,p,ulp,r;\n}\n  mov.b32         %0, r;  \n}" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2528
return val; 
# 2529
} 
#endif
# 2530 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog2(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2532
::exit(___);}
#if 0
# 2530
{ 
# 2531
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  lg2.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2532
} 
#endif
# 2533 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log2(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2535
::exit(___);}
#if 0
# 2533
{ 
# 2534
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  lg2.approx.f32   fl, fl;     \n  lg2.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2535
} 
#endif
# 2536 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2549
::exit(___);}
#if 0
# 2536
{ 
# 2537
__nv_bfloat16 val; 
# 2538
__asm__("{.reg.b32         f, C;           \n .reg.b16         r,h;            \n  mov.b16         h,%1;           \n  mov.b32         f," "{0,h};        \n  lg2.approx.f32      f,f;        \n  mov.b32         C, 0x3f317218U; \n  mul.f32         f,f,C;          \n  cv" "t.rn.bf16.f32    r,f;        \n  mov.b16         %0,r;           \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2548
return val; 
# 2549
} 
#endif
# 2550 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2569
::exit(___);}
#if 0
# 2550
{ 
# 2551
__nv_bfloat162 val; 
# 2552
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3f317218U;     \n  mul.f32         fl,fl," "C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;     " "    \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2568
return val; 
# 2569
} 
#endif
# 2570 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hlog10(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2583
::exit(___);}
#if 0
# 2570
{ 
# 2571
__nv_bfloat16 val; 
# 2572
__asm__("{.reg.b16         h, r;           \n .reg.b32         f, C;           \n  mov.b16         h, %1;          \n  mov.b32         f," " {0,h};           \n  lg2.approx.f32      f, f;       \n  mov.b32         C, 0x3E9A209BU;  \n  mul.f32         f,f,C;          \n" "  cvt.rn.bf16.f32    r, f;       \n  mov.b16         %0, r;          \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2582
return val; 
# 2583
} 
#endif
# 2584 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2log10(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2603
::exit(___);}
#if 0
# 2584
{ 
# 2585
__nv_bfloat162 val; 
# 2586
__asm__("{.reg.b16         hl, hu;             \n .reg.b32         r, fl, fu, C, h;    \n  mov.b32         {hl, hu}, %1;       \n  mov.b3" "2         h, %1;              \n  mov.b32         fl, {0,hl};         \n  mov.b32         fu, {0,hu};         \n  lg2.approx.f32" "      fl, fl;         \n  lg2.approx.f32      fu, fu;         \n  mov.b32         C, 0x3E9A209BU;      \n  mul.f32         fl,fl" ",C;            \n  mul.f32         fu,fu,C;            \n  cvt.rn.bf16.f32    hl, fl;         \n  cvt.rn.bf16.f32    hu, fu;    " "     \n  mov.b32         r, {hl, hu};        \n  mov.b32         %0, r;              \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2602
return val; 
# 2603
} 
#endif
# 2606 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rcp(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2608
::exit(___);}
#if 0
# 2606
{ 
# 2607
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rcp.approx.f32   fl, fl;     \n  rcp.approx.f32   fu, fu;     \n  cvt.rn.b" "f16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2608
} 
#endif
# 2609 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrcp(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2611
::exit(___);}
#if 0
# 2609
{ 
# 2610
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rcp.ap" "prox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2611
} 
#endif
# 2612 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2rsqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2614
::exit(___);}
#if 0
# 2612
{ 
# 2613
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  rsqrt.approx.f32   fl, fl;     \n  rsqrt.approx.f32   fu, fu;     \n  cvt." "rn.bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2614
} 
#endif
# 2615 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hrsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2617
::exit(___);}
#if 0
# 2615
{ 
# 2616
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  rsqrt." "approx.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2617
} 
#endif
# 2618 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 h2sqrt(const __nv_bfloat162 a) {int volatile ___ = 1;(void)a;
# 2620
::exit(___);}
#if 0
# 2618
{ 
# 2619
{ __nv_bfloat162 val; __asm__("{.reg.b16         hl, hu;         \n .reg.b32         fl, fu;         \n  mov.b32         {hl, hu}, %1;   \n  mov.b32         fl" ", {0,hl};     \n  mov.b32         fu, {0,hu};     \n  sqrt.approx.f32   fl, fl;     \n  sqrt.approx.f32   fu, fu;     \n  cvt.rn" ".bf16.f32    hl, fl;     \n  cvt.rn.bf16.f32    hu, fu;     \n  mov.b32         %0, {hl, hu};   \n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); return val; } 
# 2620
} 
#endif
# 2621 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 hsqrt(const __nv_bfloat16 a) {int volatile ___ = 1;(void)a;
# 2623
::exit(___);}
#if 0
# 2621
{ 
# 2622
{ __nv_bfloat16 val; __asm__("{.reg.b32         f;        \n .reg.b16         r;        \n  mov.b16         r,%1;     \n  mov.b32         f,{0,r};  \n  sqrt.a" "pprox.f32   f,f;  \n  cvt.rn.bf16.f32    r,f;  \n  mov.b16         %0,r;     \n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return val; } 
# 2623
} 
#endif
# 2626 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hisnan2(const __nv_bfloat162 a) 
# 2627
{int volatile ___ = 1;(void)a;
# 2637 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2627 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
const __nv_bfloat162 b = a; { __nv_bfloat162 val; __asm__("{.reg .b32 low_a,low_b,high_a,high_b,high_res,low_res;\n .reg .b16 low,high;\n  and.b32 high_a, %1, 0xffff0000U;\n  and.b32 high" "_b, %2, 0xffff0000U;\n  shl.b32 low_a, %1, 16;\n  shl.b32 low_b, %2, 16;\n  set.nan.f32.f32 low_res, low_a, low_b;\n  set.nan.f3" "2.f32 high_res, high_a, high_b;\n  cvt.rn.bf16.f32 low, low_res;\n  cvt.rn.bf16.f32 high, high_res;\n  mov.b32 %0, {low,high};}\n" "" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); return val; } 
# 2628 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2637 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2638 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline bool __hisnan(const __nv_bfloat16 a) 
# 2639
{int volatile ___ = 1;(void)a;
# 2653 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2639 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned r; __asm__("{.reg .b32 a;\n  mov.b32 a, {0,%1};\n  set.nan.f32.f32 %0, a, a;}\n" : "=r" (r) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); return r != 0U; 
# 2640 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2653 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2654 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hneg2(const __nv_bfloat162 a) 
# 2655
{int volatile ___ = 1;(void)a;
# 2660
::exit(___);}
#if 0
# 2655
{ 
# 2656
__nv_bfloat162 r; 
# 2657
__asm__("{neg.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2659
return r; 
# 2660
} 
#endif
# 2661 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hneg(const __nv_bfloat16 a) 
# 2662
{int volatile ___ = 1;(void)a;
# 2667
::exit(___);}
#if 0
# 2662
{ 
# 2663
__nv_bfloat16 r; 
# 2664
__asm__("{neg.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2666
return r; 
# 2667
} 
#endif
# 2668 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __habs2(const __nv_bfloat162 a) 
# 2669
{int volatile ___ = 1;(void)a;
# 2674
::exit(___);}
#if 0
# 2669
{ 
# 2670
__nv_bfloat162 r; 
# 2671
__asm__("{abs.bf16x2 %0,%1;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&r))) : "r" (*(reinterpret_cast< const unsigned *>(&a)))); 
# 2673
return r; 
# 2674
} 
#endif
# 2675 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __habs(const __nv_bfloat16 a) 
# 2676
{int volatile ___ = 1;(void)a;
# 2681
::exit(___);}
#if 0
# 2676
{ 
# 2677
__nv_bfloat16 r; 
# 2678
__asm__("{abs.bf16 %0,%1;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&r))) : "h" (*(reinterpret_cast< const unsigned short *>(&a)))); 
# 2680
return r; 
# 2681
} 
#endif
# 2685 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2686
{int volatile ___ = 1;(void)a;(void)b;
# 2691
::exit(___);}
#if 0
# 2686
{ 
# 2687
__nv_bfloat16 val; 
# 2688
__asm__("{ max.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2690
return val; 
# 2691
} 
#endif
# 2692 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2693
{int volatile ___ = 1;(void)a;(void)b;
# 2698
::exit(___);}
#if 0
# 2693
{ 
# 2694
__nv_bfloat16 val; 
# 2695
__asm__("{ min.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2697
return val; 
# 2698
} 
#endif
# 2699 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmax_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2700
{int volatile ___ = 1;(void)a;(void)b;
# 2705
::exit(___);}
#if 0
# 2700
{ 
# 2701
__nv_bfloat16 val; 
# 2702
__asm__("{ max.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2704
return val; 
# 2705
} 
#endif
# 2706 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hmin_nan(const __nv_bfloat16 a, const __nv_bfloat16 b) 
# 2707
{int volatile ___ = 1;(void)a;(void)b;
# 2712
::exit(___);}
#if 0
# 2707
{ 
# 2708
__nv_bfloat16 val; 
# 2709
__asm__("{ min.NaN.bf16 %0,%1,%2;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b)))); 
# 2711
return val; 
# 2712
} 
#endif
# 2713 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 __hfma_relu(const __nv_bfloat16 a, const __nv_bfloat16 b, const __nv_bfloat16 c) 
# 2714
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2719
::exit(___);}
#if 0
# 2714
{ 
# 2715
__nv_bfloat16 val; 
# 2716
__asm__("{ fma.rn.relu.bf16 %0,%1,%2,%3;\n}" : "=h" (*(reinterpret_cast< unsigned short *>(&val))) : "h" (*(reinterpret_cast< const unsigned short *>(&a))), "h" (*(reinterpret_cast< const unsigned short *>(&b))), "h" (*(reinterpret_cast< const unsigned short *>(&c)))); 
# 2718
return val; 
# 2719
} 
#endif
# 2723 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2724
{int volatile ___ = 1;(void)a;(void)b;
# 2729
::exit(___);}
#if 0
# 2724
{ 
# 2725
__nv_bfloat162 val; 
# 2726
__asm__("{ max.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2728
return val; 
# 2729
} 
#endif
# 2730 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2731
{int volatile ___ = 1;(void)a;(void)b;
# 2736
::exit(___);}
#if 0
# 2731
{ 
# 2732
__nv_bfloat162 val; 
# 2733
__asm__("{ min.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2735
return val; 
# 2736
} 
#endif
# 2737 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmax2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2738
{int volatile ___ = 1;(void)a;(void)b;
# 2743
::exit(___);}
#if 0
# 2738
{ 
# 2739
__nv_bfloat162 val; 
# 2740
__asm__("{ max.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2742
return val; 
# 2743
} 
#endif
# 2744 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hmin2_nan(const __nv_bfloat162 a, const __nv_bfloat162 b) 
# 2745
{int volatile ___ = 1;(void)a;(void)b;
# 2750
::exit(___);}
#if 0
# 2745
{ 
# 2746
__nv_bfloat162 val; 
# 2747
__asm__("{ min.NaN.bf16x2 %0,%1,%2;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b)))); 
# 2749
return val; 
# 2750
} 
#endif
# 2751 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hfma2_relu(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2752
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2757
::exit(___);}
#if 0
# 2752
{ 
# 2753
__nv_bfloat162 val; 
# 2754
__asm__("{ fma.rn.relu.bf16x2 %0,%1,%2,%3;\n}" : "=r" (*(reinterpret_cast< unsigned *>(&val))) : "r" (*(reinterpret_cast< const unsigned *>(&a))), "r" (*(reinterpret_cast< const unsigned *>(&b))), "r" (*(reinterpret_cast< const unsigned *>(&c)))); 
# 2756
return val; 
# 2757
} 
#endif
# 2759 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 __hcmadd(const __nv_bfloat162 a, const __nv_bfloat162 b, const __nv_bfloat162 c) 
# 2760
{int volatile ___ = 1;(void)a;(void)b;(void)c;
# 2770
::exit(___);}
#if 0
# 2760
{ 
# 2765
__nv_bfloat16 real_tmp = __hfma(a.x, b.x, c.x); 
# 2766
__nv_bfloat16 img_tmp = __hfma(a.x, b.y, c.y); 
# 2767
real_tmp = __hfma(__hneg(a.y), b.y, real_tmp); 
# 2768
img_tmp = __hfma(a.y, b.x, img_tmp); 
# 2769
return make_bfloat162(real_tmp, img_tmp); 
# 2770
} 
#endif
# 2780 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat162 atomicAdd(__nv_bfloat162 *const address, const __nv_bfloat162 val) 
# 2781
{int volatile ___ = 1;(void)address;(void)val;
# 2799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2781 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned *address_as_uint = (unsigned *)address; unsigned old = *address_as_uint; unsigned assumed; do { assumed = old; __nv_bfloat162 new_val = __hadd2(val, *((__nv_bfloat162 *)(&assumed))); old = atomicCAS(address_as_uint, assumed, *((unsigned *)(&new_val))); } while (assumed != old); return *((__nv_bfloat162 *)(&old)); 
# 2782 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2799 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2801 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
__attribute__((unused)) static inline __nv_bfloat16 atomicAdd(__nv_bfloat16 *const address, const __nv_bfloat16 val) 
# 2802
{int volatile ___ = 1;(void)address;(void)val;
# 2821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
::exit(___);}
#if 0
# 2802 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
{ 
# 2803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
{ 
# 2803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
unsigned short *address_as_us = (unsigned short *)address; unsigned short old = *address_as_us; unsigned short assumed; do { assumed = old; old = atomicCAS(address_as_us, assumed, __bfloat16_as_ushort(__hadd(val, __ushort_as_bfloat16(assumed)))); } while (assumed != old); return __ushort_as_bfloat16(old); 
# 2803 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp" 3
} 
# 2821 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
} 
#endif
# 2837 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cuda_bf16.hpp"
typedef __nv_bfloat16 nv_bfloat16; 
# 2838
typedef __nv_bfloat162 nv_bfloat162; 
# 83 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cublas_api.h"
extern "C" {
# 104 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cublas_api.h"
typedef 
# 93
enum { 
# 94
CUBLAS_STATUS_SUCCESS, 
# 95
CUBLAS_STATUS_NOT_INITIALIZED, 
# 96
CUBLAS_STATUS_ALLOC_FAILED = 3, 
# 97
CUBLAS_STATUS_INVALID_VALUE = 7, 
# 98
CUBLAS_STATUS_ARCH_MISMATCH, 
# 99
CUBLAS_STATUS_MAPPING_ERROR = 11, 
# 100
CUBLAS_STATUS_EXECUTION_FAILED = 13, 
# 101
CUBLAS_STATUS_INTERNAL_ERROR, 
# 102
CUBLAS_STATUS_NOT_SUPPORTED, 
# 103
CUBLAS_STATUS_LICENSE_ERROR
# 104
} cublasStatus_t; 
# 106
typedef enum { CUBLAS_FILL_MODE_LOWER, CUBLAS_FILL_MODE_UPPER, CUBLAS_FILL_MODE_FULL} cublasFillMode_t; 
# 108
typedef enum { CUBLAS_DIAG_NON_UNIT, CUBLAS_DIAG_UNIT} cublasDiagType_t; 
# 110
typedef enum { CUBLAS_SIDE_LEFT, CUBLAS_SIDE_RIGHT} cublasSideMode_t; 
# 118
typedef 
# 112
enum { 
# 113
CUBLAS_OP_N, 
# 114
CUBLAS_OP_T, 
# 115
CUBLAS_OP_C, 
# 116
CUBLAS_OP_HERMITAN = 2, 
# 117
CUBLAS_OP_CONJG
# 118
} cublasOperation_t; 
# 120
typedef enum { CUBLAS_POINTER_MODE_HOST, CUBLAS_POINTER_MODE_DEVICE} cublasPointerMode_t; 
# 122
typedef enum { CUBLAS_ATOMICS_NOT_ALLOWED, CUBLAS_ATOMICS_ALLOWED} cublasAtomicsMode_t; 
# 170
typedef 
# 125
enum { 
# 126
CUBLAS_GEMM_DFALT = (-1), 
# 127
CUBLAS_GEMM_DEFAULT = (-1), 
# 128
CUBLAS_GEMM_ALGO0 = 0, 
# 129
CUBLAS_GEMM_ALGO1, 
# 130
CUBLAS_GEMM_ALGO2, 
# 131
CUBLAS_GEMM_ALGO3, 
# 132
CUBLAS_GEMM_ALGO4, 
# 133
CUBLAS_GEMM_ALGO5, 
# 134
CUBLAS_GEMM_ALGO6, 
# 135
CUBLAS_GEMM_ALGO7, 
# 136
CUBLAS_GEMM_ALGO8, 
# 137
CUBLAS_GEMM_ALGO9, 
# 138
CUBLAS_GEMM_ALGO10, 
# 139
CUBLAS_GEMM_ALGO11, 
# 140
CUBLAS_GEMM_ALGO12, 
# 141
CUBLAS_GEMM_ALGO13, 
# 142
CUBLAS_GEMM_ALGO14, 
# 143
CUBLAS_GEMM_ALGO15, 
# 144
CUBLAS_GEMM_ALGO16, 
# 145
CUBLAS_GEMM_ALGO17, 
# 146
CUBLAS_GEMM_ALGO18, 
# 147
CUBLAS_GEMM_ALGO19, 
# 148
CUBLAS_GEMM_ALGO20, 
# 149
CUBLAS_GEMM_ALGO21, 
# 150
CUBLAS_GEMM_ALGO22, 
# 151
CUBLAS_GEMM_ALGO23, 
# 152
CUBLAS_GEMM_DEFAULT_TENSOR_OP = 99, 
# 153
CUBLAS_GEMM_DFALT_TENSOR_OP = 99, 
# 154
CUBLAS_GEMM_ALGO0_TENSOR_OP, 
# 155
CUBLAS_GEMM_ALGO1_TENSOR_OP, 
# 156
CUBLAS_GEMM_ALGO2_TENSOR_OP, 
# 157
CUBLAS_GEMM_ALGO3_TENSOR_OP, 
# 158
CUBLAS_GEMM_ALGO4_TENSOR_OP, 
# 159
CUBLAS_GEMM_ALGO5_TENSOR_OP, 
# 160
CUBLAS_GEMM_ALGO6_TENSOR_OP, 
# 161
CUBLAS_GEMM_ALGO7_TENSOR_OP, 
# 162
CUBLAS_GEMM_ALGO8_TENSOR_OP, 
# 163
CUBLAS_GEMM_ALGO9_TENSOR_OP, 
# 164
CUBLAS_GEMM_ALGO10_TENSOR_OP, 
# 165
CUBLAS_GEMM_ALGO11_TENSOR_OP, 
# 166
CUBLAS_GEMM_ALGO12_TENSOR_OP, 
# 167
CUBLAS_GEMM_ALGO13_TENSOR_OP, 
# 168
CUBLAS_GEMM_ALGO14_TENSOR_OP, 
# 169
CUBLAS_GEMM_ALGO15_TENSOR_OP
# 170
} cublasGemmAlgo_t; 
# 189
typedef 
# 173
enum { 
# 174
CUBLAS_DEFAULT_MATH, 
# 177
CUBLAS_TENSOR_OP_MATH, 
# 181
CUBLAS_PEDANTIC_MATH, 
# 184
CUBLAS_TF32_TENSOR_OP_MATH, 
# 188
CUBLAS_MATH_DISALLOW_REDUCED_PRECISION_REDUCTION = 16
# 189
} cublasMath_t; 
# 192
typedef cudaDataType cublasDataType_t; 
# 213 "/usr/local/cuda-12.1/bin/../targets/x86_64-linux/include/cublas_api.h"
typedef 
# 201
enum { 
# 202
CUBLAS_COMPUTE_16F = 64, 
# 203
CUBLAS_COMPUTE_16F_PEDANTIC, 
# 204
CUBLAS_COMPUTE_32F = 68, 
# 205
CUBLAS_COMPUTE_32F_PEDANTIC, 
# 206
CUBLAS_COMPUTE_32F_FAST_16F = 74, 
# 207
CUBLAS_COMPUTE_32F_FAST_16BF, 
# 208
CUBLAS_COMPUTE_32F_FAST_TF32 = 77, 
# 209
CUBLAS_COMPUTE_64F = 70, 
# 210
CUBLAS_COMPUTE_64F_PEDANTIC, 
# 211
CUBLAS_COMPUTE_32I, 
# 212
CUBLAS_COMPUTE_32I_PEDANTIC
# 213
} cublasComputeType_t; 
# 216
struct cublasContext; 
# 217
typedef cublasContext *cublasHandle_t; 
# 220
typedef void (*cublasLogCallback)(const char * msg); 
# 226
cublasStatus_t cublasCreate_v2(cublasHandle_t * handle); 
# 228
cublasStatus_t cublasDestroy_v2(cublasHandle_t handle); 
# 230
cublasStatus_t cublasGetVersion_v2(cublasHandle_t handle, int * version); 
# 232
cublasStatus_t cublasGetProperty(libraryPropertyType type, int * value); 
# 234
size_t cublasGetCudartVersion(); 
# 236
cublasStatus_t cublasSetWorkspace_v2(cublasHandle_t handle, void * workspace, size_t workspaceSizeInBytes); 
# 240
cublasStatus_t cublasSetStream_v2(cublasHandle_t handle, cudaStream_t streamId); 
# 242
cublasStatus_t cublasGetStream_v2(cublasHandle_t handle, cudaStream_t * streamId); 
# 244
cublasStatus_t cublasGetPointerMode_v2(cublasHandle_t handle, cublasPointerMode_t * mode); 
# 246
cublasStatus_t cublasSetPointerMode_v2(cublasHandle_t handle, cublasPointerMode_t mode); 
# 248
cublasStatus_t cublasGetAtomicsMode(cublasHandle_t handle, cublasAtomicsMode_t * mode); 
# 250
cublasStatus_t cublasSetAtomicsMode(cublasHandle_t handle, cublasAtomicsMode_t mode); 
# 252
cublasStatus_t cublasGetMathMode(cublasHandle_t handle, cublasMath_t * mode); 
# 254
cublasStatus_t cublasSetMathMode(cublasHandle_t handle, cublasMath_t mode); 
# 256
cublasStatus_t cublasGetSmCountTarget(cublasHandle_t handle, int * smCountTarget); 
# 258
cublasStatus_t cublasSetSmCountTarget(cublasHandle_t handle, int smCountTarget); 
# 260
const char *cublasGetStatusName(cublasStatus_t status); 
# 262
const char *cublasGetStatusString(cublasStatus_t status); 
# 264
cublasStatus_t cublasLoggerConfigure(int logIsOn, int logToStdOut, int logToStdErr, const char * logFileName); 
# 269
cublasStatus_t cublasSetLoggerCallback(cublasLogCallback userCallback); 
# 271
cublasStatus_t cublasGetLoggerCallback(cublasLogCallback * userCallback); 
# 273
cublasStatus_t cublasSetVector(int n, int elemSize, const void * x, int incx, void * devicePtr, int incy); 
# 276
cublasStatus_t cublasSetVector_64(int64_t n, int64_t elemSize, const void * x, int64_t incx, void * devicePtr, int64_t incy); 
# 278
cublasStatus_t cublasGetVector(int n, int elemSize, const void * x, int incx, void * y, int incy); 
# 281
cublasStatus_t cublasGetVector_64(int64_t n, int64_t elemSize, const void * x, int64_t incx, void * y, int64_t incy); 
# 283
cublasStatus_t cublasSetMatrix(int rows, int cols, int elemSize, const void * A, int lda, void * B, int ldb); 
# 286
cublasStatus_t cublasSetMatrix_64(int64_t rows, int64_t cols, int64_t elemSize, const void * A, int64_t lda, void * B, int64_t ldb); 
# 288
cublasStatus_t cublasGetMatrix(int rows, int cols, int elemSize, const void * A, int lda, void * B, int ldb); 
# 291
cublasStatus_t cublasGetMatrix_64(int64_t rows, int64_t cols, int64_t elemSize, const void * A, int64_t lda, void * B, int64_t ldb); 
# 293
cublasStatus_t cublasSetVectorAsync(int n, int elemSize, const void * hostPtr, int incx, void * devicePtr, int incy, cudaStream_t stream); 
# 296
cublasStatus_t cublasSetVectorAsync_64(int64_t n, int64_t elemSize, const void * hostPtr, int64_t incx, void * devicePtr, int64_t incy, cudaStream_t stream); 
# 299
cublasStatus_t cublasGetVectorAsync(int n, int elemSize, const void * devicePtr, int incx, void * hostPtr, int incy, cudaStream_t stream); 
# 302
cublasStatus_t cublasGetVectorAsync_64(int64_t n, int64_t elemSize, const void * devicePtr, int64_t incx, void * hostPtr, int64_t incy, cudaStream_t stream); 
# 306
cublasStatus_t cublasSetMatrixAsync(int rows, int cols, int elemSize, const void * A, int lda, void * B, int ldb, cudaStream_t stream); 
# 308
cublasStatus_t cublasSetMatrixAsync_64(int64_t rows, int64_t cols, int64_t elemSize, const void * A, int64_t lda, void * B, int64_t ldb, cudaStream_t stream); 
# 318
cublasStatus_t cublasGetMatrixAsync(int rows, int cols, int elemSize, const void * A, int lda, void * B, int ldb, cudaStream_t stream); 
# 320
cublasStatus_t cublasGetMatrixAsync_64(int64_t rows, int64_t cols, int64_t elemSize, const void * A, int64_t lda, void * B, int64_t ldb, cudaStream_t stream); 
# 329
void cublasXerbla(const char * srName, int info); 
# 333
cublasStatus_t cublasNrm2Ex(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, void * result, cudaDataType resultType, cudaDataType executionType); 
# 342
cublasStatus_t cublasNrm2Ex_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, void * result, cudaDataType resultType, cudaDataType executionType); 
# 352
cublasStatus_t cublasSnrm2_v2(cublasHandle_t handle, int n, const float * x, int incx, float * result); 
# 355
cublasStatus_t cublasSnrm2_v2_64(cublasHandle_t handle, int64_t n, const float * x, int64_t incx, float * result); 
# 358
cublasStatus_t cublasDnrm2_v2(cublasHandle_t handle, int n, const double * x, int incx, double * result); 
# 361
cublasStatus_t cublasDnrm2_v2_64(cublasHandle_t handle, int64_t n, const double * x, int64_t incx, double * result); 
# 364
cublasStatus_t cublasScnrm2_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, float * result); 
# 367
cublasStatus_t cublasScnrm2_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, float * result); 
# 370
cublasStatus_t cublasDznrm2_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, double * result); 
# 373
cublasStatus_t cublasDznrm2_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, double * result); 
# 375
cublasStatus_t cublasDotEx(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, const void * y, cudaDataType yType, int incy, void * result, cudaDataType resultType, cudaDataType executionType); 
# 387
cublasStatus_t cublasDotEx_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, const void * y, cudaDataType yType, int64_t incy, void * result, cudaDataType resultType, cudaDataType executionType); 
# 399
cublasStatus_t cublasDotcEx(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, const void * y, cudaDataType yType, int incy, void * result, cudaDataType resultType, cudaDataType executionType); 
# 411
cublasStatus_t cublasDotcEx_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, const void * y, cudaDataType yType, int64_t incy, void * result, cudaDataType resultType, cudaDataType executionType); 
# 424
cublasStatus_t cublasSdot_v2(cublasHandle_t handle, int n, const float * x, int incx, const float * y, int incy, float * result); 
# 426
cublasStatus_t cublasSdot_v2_64(cublasHandle_t handle, int64_t n, const float * x, int64_t incx, const float * y, int64_t incy, float * result); 
# 430
cublasStatus_t cublasDdot_v2(cublasHandle_t handle, int n, const double * x, int incx, const double * y, int incy, double * result); 
# 432
cublasStatus_t cublasDdot_v2_64(cublasHandle_t handle, int64_t n, const double * x, int64_t incx, const double * y, int64_t incy, double * result); 
# 435
cublasStatus_t cublasCdotu_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * result); 
# 438
cublasStatus_t cublasCdotu_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * result); 
# 446
cublasStatus_t cublasCdotc_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * result); 
# 449
cublasStatus_t cublasCdotc_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * result); 
# 457
cublasStatus_t cublasZdotu_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * result); 
# 465
cublasStatus_t cublasZdotu_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * result); 
# 473
cublasStatus_t cublasZdotc_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * result); 
# 481
cublasStatus_t cublasZdotc_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * result); 
# 489
cublasStatus_t cublasScalEx(cublasHandle_t handle, int n, const void * alpha, cudaDataType alphaType, void * x, cudaDataType xType, int incx, cudaDataType executionType); 
# 498
cublasStatus_t cublasScalEx_64(cublasHandle_t handle, int64_t n, const void * alpha, cudaDataType alphaType, void * x, cudaDataType xType, int64_t incx, cudaDataType executionType); 
# 508
cublasStatus_t cublasSscal_v2(cublasHandle_t handle, int n, const float * alpha, float * x, int incx); 
# 511
cublasStatus_t cublasSscal_v2_64(cublasHandle_t handle, int64_t n, const float * alpha, float * x, int64_t incx); 
# 514
cublasStatus_t cublasDscal_v2(cublasHandle_t handle, int n, const double * alpha, double * x, int incx); 
# 517
cublasStatus_t cublasDscal_v2_64(cublasHandle_t handle, int64_t n, const double * alpha, double * x, int64_t incx); 
# 520
cublasStatus_t cublasCscal_v2(cublasHandle_t handle, int n, const cuComplex * alpha, cuComplex * x, int incx); 
# 523
cublasStatus_t cublasCscal_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * alpha, cuComplex * x, int64_t incx); 
# 526
cublasStatus_t cublasCsscal_v2(cublasHandle_t handle, int n, const float * alpha, cuComplex * x, int incx); 
# 529
cublasStatus_t cublasCsscal_v2_64(cublasHandle_t handle, int64_t n, const float * alpha, cuComplex * x, int64_t incx); 
# 532
cublasStatus_t cublasZscal_v2(cublasHandle_t handle, int n, const cuDoubleComplex * alpha, cuDoubleComplex * x, int incx); 
# 535
cublasStatus_t cublasZscal_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * alpha, cuDoubleComplex * x, int64_t incx); 
# 538
cublasStatus_t cublasZdscal_v2(cublasHandle_t handle, int n, const double * alpha, cuDoubleComplex * x, int incx); 
# 541
cublasStatus_t cublasZdscal_v2_64(cublasHandle_t handle, int64_t n, const double * alpha, cuDoubleComplex * x, int64_t incx); 
# 543
cublasStatus_t cublasAxpyEx(cublasHandle_t handle, int n, const void * alpha, cudaDataType alphaType, const void * x, cudaDataType xType, int incx, void * y, cudaDataType yType, int incy, cudaDataType executiontype); 
# 555
cublasStatus_t cublasAxpyEx_64(cublasHandle_t handle, int64_t n, const void * alpha, cudaDataType alphaType, const void * x, cudaDataType xType, int64_t incx, void * y, cudaDataType yType, int64_t incy, cudaDataType executiontype); 
# 568
cublasStatus_t cublasSaxpy_v2(cublasHandle_t handle, int n, const float * alpha, const float * x, int incx, float * y, int incy); 
# 570
cublasStatus_t cublasSaxpy_v2_64(cublasHandle_t handle, int64_t n, const float * alpha, const float * x, int64_t incx, float * y, int64_t incy); 
# 574
cublasStatus_t cublasDaxpy_v2(cublasHandle_t handle, int n, const double * alpha, const double * x, int incx, double * y, int incy); 
# 576
cublasStatus_t cublasDaxpy_v2_64(cublasHandle_t handle, int64_t n, const double * alpha, const double * x, int64_t incx, double * y, int64_t incy); 
# 579
cublasStatus_t cublasCaxpy_v2(cublasHandle_t handle, int n, const cuComplex * alpha, const cuComplex * x, int incx, cuComplex * y, int incy); 
# 582
cublasStatus_t cublasCaxpy_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, cuComplex * y, int64_t incy); 
# 590
cublasStatus_t cublasZaxpy_v2(cublasHandle_t handle, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, cuDoubleComplex * y, int incy); 
# 598
cublasStatus_t cublasZaxpy_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, cuDoubleComplex * y, int64_t incy); 
# 606
cublasStatus_t cublasCopyEx(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, void * y, cudaDataType yType, int incy); 
# 609
cublasStatus_t cublasCopyEx_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, void * y, cudaDataType yType, int64_t incy); 
# 619
cublasStatus_t cublasScopy_v2(cublasHandle_t handle, int n, const float * x, int incx, float * y, int incy); 
# 622
cublasStatus_t cublasScopy_v2_64(cublasHandle_t handle, int64_t n, const float * x, int64_t incx, float * y, int64_t incy); 
# 625
cublasStatus_t cublasDcopy_v2(cublasHandle_t handle, int n, const double * x, int incx, double * y, int incy); 
# 628
cublasStatus_t cublasDcopy_v2_64(cublasHandle_t handle, int64_t n, const double * x, int64_t incx, double * y, int64_t incy); 
# 631
cublasStatus_t cublasCcopy_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, cuComplex * y, int incy); 
# 634
cublasStatus_t cublasCcopy_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, cuComplex * y, int64_t incy); 
# 637
cublasStatus_t cublasZcopy_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, cuDoubleComplex * y, int incy); 
# 639
cublasStatus_t cublasZcopy_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, cuDoubleComplex * y, int64_t incy); 
# 643
cublasStatus_t cublasSswap_v2(cublasHandle_t handle, int n, float * x, int incx, float * y, int incy); 
# 646
cublasStatus_t cublasSswap_v2_64(cublasHandle_t handle, int64_t n, float * x, int64_t incx, float * y, int64_t incy); 
# 649
cublasStatus_t cublasDswap_v2(cublasHandle_t handle, int n, double * x, int incx, double * y, int incy); 
# 652
cublasStatus_t cublasDswap_v2_64(cublasHandle_t handle, int64_t n, double * x, int64_t incx, double * y, int64_t incy); 
# 655
cublasStatus_t cublasCswap_v2(cublasHandle_t handle, int n, cuComplex * x, int incx, cuComplex * y, int incy); 
# 658
cublasStatus_t cublasCswap_v2_64(cublasHandle_t handle, int64_t n, cuComplex * x, int64_t incx, cuComplex * y, int64_t incy); 
# 661
cublasStatus_t cublasZswap_v2(cublasHandle_t handle, int n, cuDoubleComplex * x, int incx, cuDoubleComplex * y, int incy); 
# 664
cublasStatus_t cublasZswap_v2_64(cublasHandle_t handle, int64_t n, cuDoubleComplex * x, int64_t incx, cuDoubleComplex * y, int64_t incy); 
# 666
cublasStatus_t cublasSwapEx(cublasHandle_t handle, int n, void * x, cudaDataType xType, int incx, void * y, cudaDataType yType, int incy); 
# 669
cublasStatus_t cublasSwapEx_64(cublasHandle_t handle, int64_t n, void * x, cudaDataType xType, int64_t incx, void * y, cudaDataType yType, int64_t incy); 
# 679
cublasStatus_t cublasIsamax_v2(cublasHandle_t handle, int n, const float * x, int incx, int * result); 
# 682
cublasStatus_t cublasIsamax_v2_64(cublasHandle_t handle, int64_t n, const float * x, int64_t incx, int64_t * result); 
# 685
cublasStatus_t cublasIdamax_v2(cublasHandle_t handle, int n, const double * x, int incx, int * result); 
# 688
cublasStatus_t cublasIdamax_v2_64(cublasHandle_t handle, int64_t n, const double * x, int64_t incx, int64_t * result); 
# 691
cublasStatus_t cublasIcamax_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, int * result); 
# 694
cublasStatus_t cublasIcamax_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, int64_t * result); 
# 697
cublasStatus_t cublasIzamax_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, int * result); 
# 700
cublasStatus_t cublasIzamax_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, int64_t * result); 
# 703
cublasStatus_t cublasIamaxEx(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, int * result); 
# 706
cublasStatus_t cublasIamaxEx_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, int64_t * result); 
# 709
cublasStatus_t cublasIsamin_v2(cublasHandle_t handle, int n, const float * x, int incx, int * result); 
# 712
cublasStatus_t cublasIsamin_v2_64(cublasHandle_t handle, int64_t n, const float * x, int64_t incx, int64_t * result); 
# 715
cublasStatus_t cublasIdamin_v2(cublasHandle_t handle, int n, const double * x, int incx, int * result); 
# 718
cublasStatus_t cublasIdamin_v2_64(cublasHandle_t handle, int64_t n, const double * x, int64_t incx, int64_t * result); 
# 721
cublasStatus_t cublasIcamin_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, int * result); 
# 724
cublasStatus_t cublasIcamin_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, int64_t * result); 
# 727
cublasStatus_t cublasIzamin_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, int * result); 
# 730
cublasStatus_t cublasIzamin_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, int64_t * result); 
# 733
cublasStatus_t cublasIaminEx(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, int * result); 
# 736
cublasStatus_t cublasIaminEx_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, int64_t * result); 
# 738
cublasStatus_t cublasAsumEx(cublasHandle_t handle, int n, const void * x, cudaDataType xType, int incx, void * result, cudaDataType resultType, cudaDataType executiontype); 
# 747
cublasStatus_t cublasAsumEx_64(cublasHandle_t handle, int64_t n, const void * x, cudaDataType xType, int64_t incx, void * result, cudaDataType resultType, cudaDataType executiontype); 
# 757
cublasStatus_t cublasSasum_v2(cublasHandle_t handle, int n, const float * x, int incx, float * result); 
# 760
cublasStatus_t cublasSasum_v2_64(cublasHandle_t handle, int64_t n, const float * x, int64_t incx, float * result); 
# 763
cublasStatus_t cublasDasum_v2(cublasHandle_t handle, int n, const double * x, int incx, double * result); 
# 766
cublasStatus_t cublasDasum_v2_64(cublasHandle_t handle, int64_t n, const double * x, int64_t incx, double * result); 
# 769
cublasStatus_t cublasScasum_v2(cublasHandle_t handle, int n, const cuComplex * x, int incx, float * result); 
# 772
cublasStatus_t cublasScasum_v2_64(cublasHandle_t handle, int64_t n, const cuComplex * x, int64_t incx, float * result); 
# 775
cublasStatus_t cublasDzasum_v2(cublasHandle_t handle, int n, const cuDoubleComplex * x, int incx, double * result); 
# 778
cublasStatus_t cublasDzasum_v2_64(cublasHandle_t handle, int64_t n, const cuDoubleComplex * x, int64_t incx, double * result); 
# 781
cublasStatus_t cublasSrot_v2(cublasHandle_t handle, int n, float * x, int incx, float * y, int incy, const float * c, const float * s); 
# 783
cublasStatus_t cublasSrot_v2_64(cublasHandle_t handle, int64_t n, float * x, int64_t incx, float * y, int64_t incy, const float * c, const float * s); 
# 787
cublasStatus_t cublasDrot_v2(cublasHandle_t handle, int n, double * x, int incx, double * y, int incy, const double * c, const double * s); 
# 789
cublasStatus_t cublasDrot_v2_64(cublasHandle_t handle, int64_t n, double * x, int64_t incx, double * y, int64_t incy, const double * c, const double * s); 
# 798
cublasStatus_t cublasCrot_v2(cublasHandle_t handle, int n, cuComplex * x, int incx, cuComplex * y, int incy, const float * c, const cuComplex * s); 
# 801
cublasStatus_t cublasCrot_v2_64(cublasHandle_t handle, int64_t n, cuComplex * x, int64_t incx, cuComplex * y, int64_t incy, const float * c, const cuComplex * s); 
# 810
cublasStatus_t cublasCsrot_v2(cublasHandle_t handle, int n, cuComplex * x, int incx, cuComplex * y, int incy, const float * c, const float * s); 
# 813
cublasStatus_t cublasCsrot_v2_64(cublasHandle_t handle, int64_t n, cuComplex * x, int64_t incx, cuComplex * y, int64_t incy, const float * c, const float * s); 
# 822
cublasStatus_t cublasZrot_v2(cublasHandle_t handle, int n, cuDoubleComplex * x, int incx, cuDoubleComplex * y, int incy, const double * c, const cuDoubleComplex * s); 
# 831
cublasStatus_t cublasZrot_v2_64(cublasHandle_t handle, int64_t n, cuDoubleComplex * x, int64_t incx, cuDoubleComplex * y, int64_t incy, const double * c, const cuDoubleComplex * s); 
# 840
cublasStatus_t cublasZdrot_v2(cublasHandle_t handle, int n, cuDoubleComplex * x, int incx, cuDoubleComplex * y, int incy, const double * c, const double * s); 
# 849
cublasStatus_t cublasZdrot_v2_64(cublasHandle_t handle, int64_t n, cuDoubleComplex * x, int64_t incx, cuDoubleComplex * y, int64_t incy, const double * c, const double * s); 
# 858
cublasStatus_t cublasRotEx(cublasHandle_t handle, int n, void * x, cudaDataType xType, int incx, void * y, cudaDataType yType, int incy, const void * c, const void * s, cudaDataType csType, cudaDataType executiontype); 
# 871
cublasStatus_t cublasRotEx_64(cublasHandle_t handle, int64_t n, void * x, cudaDataType xType, int64_t incx, void * y, cudaDataType yType, int64_t incy, const void * c, const void * s, cudaDataType csType, cudaDataType executiontype); 
# 884
cublasStatus_t cublasSrotg_v2(cublasHandle_t handle, float * a, float * b, float * c, float * s); 
# 886
cublasStatus_t cublasDrotg_v2(cublasHandle_t handle, double * a, double * b, double * c, double * s); 
# 889
cublasStatus_t cublasCrotg_v2(cublasHandle_t handle, cuComplex * a, cuComplex * b, float * c, cuComplex * s); 
# 892
cublasStatus_t cublasZrotg_v2(cublasHandle_t handle, cuDoubleComplex * a, cuDoubleComplex * b, double * c, cuDoubleComplex * s); 
# 894
cublasStatus_t cublasRotgEx(cublasHandle_t handle, void * a, void * b, cudaDataType abType, void * c, void * s, cudaDataType csType, cudaDataType executiontype); 
# 904
cublasStatus_t cublasSrotm_v2(cublasHandle_t handle, int n, float * x, int incx, float * y, int incy, const float * param); 
# 907
cublasStatus_t cublasSrotm_v2_64(cublasHandle_t handle, int64_t n, float * x, int64_t incx, float * y, int64_t incy, const float * param); 
# 910
cublasStatus_t cublasDrotm_v2(cublasHandle_t handle, int n, double * x, int incx, double * y, int incy, const double * param); 
# 912
cublasStatus_t cublasDrotm_v2_64(cublasHandle_t handle, int64_t n, double * x, int64_t incx, double * y, int64_t incy, const double * param); 
# 915
cublasStatus_t cublasRotmEx(cublasHandle_t handle, int n, void * x, cudaDataType xType, int incx, void * y, cudaDataType yType, int incy, const void * param, cudaDataType paramType, cudaDataType executiontype); 
# 927
cublasStatus_t cublasRotmEx_64(cublasHandle_t handle, int64_t n, void * x, cudaDataType xType, int64_t incx, void * y, cudaDataType yType, int64_t incy, const void * param, cudaDataType paramType, cudaDataType executiontype); 
# 940
cublasStatus_t cublasSrotmg_v2(cublasHandle_t handle, float * d1, float * d2, float * x1, const float * y1, float * param); 
# 943
cublasStatus_t cublasDrotmg_v2(cublasHandle_t handle, double * d1, double * d2, double * x1, const double * y1, double * param); 
# 945
cublasStatus_t cublasRotmgEx(cublasHandle_t handle, void * d1, cudaDataType d1Type, void * d2, cudaDataType d2Type, void * x1, cudaDataType x1Type, const void * y1, cudaDataType y1Type, void * param, cudaDataType paramType, cudaDataType executiontype); 
# 962
cublasStatus_t cublasSgemv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const float * A, int lda, const float * x, int incx, const float * beta, float * y, int incy); 
# 975
cublasStatus_t cublasSgemv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const float * A, int64_t lda, const float * x, int64_t incx, const float * beta, float * y, int64_t incy); 
# 988
cublasStatus_t cublasDgemv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const double * alpha, const double * A, int lda, const double * x, int incx, const double * beta, double * y, int incy); 
# 1001
cublasStatus_t cublasDgemv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const double * alpha, const double * A, int64_t lda, const double * x, int64_t incx, const double * beta, double * y, int64_t incy); 
# 1014
cublasStatus_t cublasCgemv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * x, int incx, const cuComplex * beta, cuComplex * y, int incy); 
# 1027
cublasStatus_t cublasCgemv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * x, int64_t incx, const cuComplex * beta, cuComplex * y, int64_t incy); 
# 1040
cublasStatus_t cublasZgemv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * x, int incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy); 
# 1053
cublasStatus_t cublasZgemv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy); 
# 1068
cublasStatus_t cublasSgbmv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int kl, int ku, const float * alpha, const float * A, int lda, const float * x, int incx, const float * beta, float * y, int incy); 
# 1083
cublasStatus_t cublasSgbmv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, int64_t kl, int64_t ku, const float * alpha, const float * A, int64_t lda, const float * x, int64_t incx, const float * beta, float * y, int64_t incy); 
# 1098
cublasStatus_t cublasDgbmv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int kl, int ku, const double * alpha, const double * A, int lda, const double * x, int incx, const double * beta, double * y, int incy); 
# 1113
cublasStatus_t cublasDgbmv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, int64_t kl, int64_t ku, const double * alpha, const double * A, int64_t lda, const double * x, int64_t incx, const double * beta, double * y, int64_t incy); 
# 1128
cublasStatus_t cublasCgbmv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int kl, int ku, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * x, int incx, const cuComplex * beta, cuComplex * y, int incy); 
# 1143
cublasStatus_t cublasCgbmv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, int64_t kl, int64_t ku, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * x, int64_t incx, const cuComplex * beta, cuComplex * y, int64_t incy); 
# 1158
cublasStatus_t cublasZgbmv_v2(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int kl, int ku, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * x, int incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy); 
# 1173
cublasStatus_t cublasZgbmv_v2_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, int64_t kl, int64_t ku, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy); 
# 1190
cublasStatus_t cublasStrmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const float * A, int lda, float * x, int incx); 
# 1200
cublasStatus_t cublasStrmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const float * A, int64_t lda, float * x, int64_t incx); 
# 1210
cublasStatus_t cublasDtrmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const double * A, int lda, double * x, int incx); 
# 1220
cublasStatus_t cublasDtrmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const double * A, int64_t lda, double * x, int64_t incx); 
# 1230
cublasStatus_t cublasCtrmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuComplex * A, int lda, cuComplex * x, int incx); 
# 1240
cublasStatus_t cublasCtrmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuComplex * A, int64_t lda, cuComplex * x, int64_t incx); 
# 1250
cublasStatus_t cublasZtrmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuDoubleComplex * A, int lda, cuDoubleComplex * x, int incx); 
# 1260
cublasStatus_t cublasZtrmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuDoubleComplex * A, int64_t lda, cuDoubleComplex * x, int64_t incx); 
# 1272
cublasStatus_t cublasStbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const float * A, int lda, float * x, int incx); 
# 1283
cublasStatus_t cublasStbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const float * A, int64_t lda, float * x, int64_t incx); 
# 1294
cublasStatus_t cublasDtbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const double * A, int lda, double * x, int incx); 
# 1305
cublasStatus_t cublasDtbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const double * A, int64_t lda, double * x, int64_t incx); 
# 1316
cublasStatus_t cublasCtbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const cuComplex * A, int lda, cuComplex * x, int incx); 
# 1327
cublasStatus_t cublasCtbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const cuComplex * A, int64_t lda, cuComplex * x, int64_t incx); 
# 1338
cublasStatus_t cublasZtbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const cuDoubleComplex * A, int lda, cuDoubleComplex * x, int incx); 
# 1349
cublasStatus_t cublasZtbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const cuDoubleComplex * A, int64_t lda, cuDoubleComplex * x, int64_t incx); 
# 1362
cublasStatus_t cublasStpmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const float * AP, float * x, int incx); 
# 1371
cublasStatus_t cublasStpmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const float * AP, float * x, int64_t incx); 
# 1380
cublasStatus_t cublasDtpmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const double * AP, double * x, int incx); 
# 1389
cublasStatus_t cublasDtpmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const double * AP, double * x, int64_t incx); 
# 1398
cublasStatus_t cublasCtpmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuComplex * AP, cuComplex * x, int incx); 
# 1407
cublasStatus_t cublasCtpmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuComplex * AP, cuComplex * x, int64_t incx); 
# 1416
cublasStatus_t cublasZtpmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuDoubleComplex * AP, cuDoubleComplex * x, int incx); 
# 1425
cublasStatus_t cublasZtpmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuDoubleComplex * AP, cuDoubleComplex * x, int64_t incx); 
# 1436
cublasStatus_t cublasStrsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const float * A, int lda, float * x, int incx); 
# 1446
cublasStatus_t cublasStrsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const float * A, int64_t lda, float * x, int64_t incx); 
# 1456
cublasStatus_t cublasDtrsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const double * A, int lda, double * x, int incx); 
# 1466
cublasStatus_t cublasDtrsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const double * A, int64_t lda, double * x, int64_t incx); 
# 1476
cublasStatus_t cublasCtrsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuComplex * A, int lda, cuComplex * x, int incx); 
# 1486
cublasStatus_t cublasCtrsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuComplex * A, int64_t lda, cuComplex * x, int64_t incx); 
# 1496
cublasStatus_t cublasZtrsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuDoubleComplex * A, int lda, cuDoubleComplex * x, int incx); 
# 1506
cublasStatus_t cublasZtrsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuDoubleComplex * A, int64_t lda, cuDoubleComplex * x, int64_t incx); 
# 1518
cublasStatus_t cublasStpsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const float * AP, float * x, int incx); 
# 1527
cublasStatus_t cublasStpsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const float * AP, float * x, int64_t incx); 
# 1536
cublasStatus_t cublasDtpsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const double * AP, double * x, int incx); 
# 1545
cublasStatus_t cublasDtpsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const double * AP, double * x, int64_t incx); 
# 1554
cublasStatus_t cublasCtpsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuComplex * AP, cuComplex * x, int incx); 
# 1563
cublasStatus_t cublasCtpsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuComplex * AP, cuComplex * x, int64_t incx); 
# 1572
cublasStatus_t cublasZtpsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, const cuDoubleComplex * AP, cuDoubleComplex * x, int incx); 
# 1581
cublasStatus_t cublasZtpsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, const cuDoubleComplex * AP, cuDoubleComplex * x, int64_t incx); 
# 1592
cublasStatus_t cublasStbsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const float * A, int lda, float * x, int incx); 
# 1603
cublasStatus_t cublasStbsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const float * A, int64_t lda, float * x, int64_t incx); 
# 1614
cublasStatus_t cublasDtbsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const double * A, int lda, double * x, int incx); 
# 1625
cublasStatus_t cublasDtbsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const double * A, int64_t lda, double * x, int64_t incx); 
# 1636
cublasStatus_t cublasCtbsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const cuComplex * A, int lda, cuComplex * x, int incx); 
# 1647
cublasStatus_t cublasCtbsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const cuComplex * A, int64_t lda, cuComplex * x, int64_t incx); 
# 1658
cublasStatus_t cublasZtbsv_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int n, int k, const cuDoubleComplex * A, int lda, cuDoubleComplex * x, int incx); 
# 1669
cublasStatus_t cublasZtbsv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t n, int64_t k, const cuDoubleComplex * A, int64_t lda, cuDoubleComplex * x, int64_t incx); 
# 1682
cublasStatus_t cublasSsymv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const float * A, int lda, const float * x, int incx, const float * beta, float * y, int incy); 
# 1694
cublasStatus_t cublasSsymv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const float * A, int64_t lda, const float * x, int64_t incx, const float * beta, float * y, int64_t incy); 
# 1706
cublasStatus_t cublasDsymv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const double * A, int lda, const double * x, int incx, const double * beta, double * y, int incy); 
# 1718
cublasStatus_t cublasDsymv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const double * A, int64_t lda, const double * x, int64_t incx, const double * beta, double * y, int64_t incy); 
# 1730
cublasStatus_t cublasCsymv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * x, int incx, const cuComplex * beta, cuComplex * y, int incy); 
# 1742
cublasStatus_t cublasCsymv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * x, int64_t incx, const cuComplex * beta, cuComplex * y, int64_t incy); 
# 1754
cublasStatus_t cublasZsymv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * x, int incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy); 
# 1766
cublasStatus_t cublasZsymv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy); 
# 1778
cublasStatus_t cublasChemv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * x, int incx, const cuComplex * beta, cuComplex * y, int incy); 
# 1790
cublasStatus_t cublasChemv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * x, int64_t incx, const cuComplex * beta, cuComplex * y, int64_t incy); 
# 1802
cublasStatus_t cublasZhemv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * x, int incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy); 
# 1814
cublasStatus_t cublasZhemv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy); 
# 1828
cublasStatus_t cublasSsbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, int k, const float * alpha, const float * A, int lda, const float * x, int incx, const float * beta, float * y, int incy); 
# 1841
cublasStatus_t cublasSsbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, int64_t k, const float * alpha, const float * A, int64_t lda, const float * x, int64_t incx, const float * beta, float * y, int64_t incy); 
# 1854
cublasStatus_t cublasDsbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, int k, const double * alpha, const double * A, int lda, const double * x, int incx, const double * beta, double * y, int incy); 
# 1867
cublasStatus_t cublasDsbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, int64_t k, const double * alpha, const double * A, int64_t lda, const double * x, int64_t incx, const double * beta, double * y, int64_t incy); 
# 1880
cublasStatus_t cublasChbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * x, int incx, const cuComplex * beta, cuComplex * y, int incy); 
# 1893
cublasStatus_t cublasChbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * x, int64_t incx, const cuComplex * beta, cuComplex * y, int64_t incy); 
# 1906
cublasStatus_t cublasZhbmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * x, int incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy); 
# 1919
cublasStatus_t cublasZhbmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy); 
# 1934
cublasStatus_t cublasSspmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const float * AP, const float * x, int incx, const float * beta, float * y, int incy); 
# 1945
cublasStatus_t cublasSspmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const float * AP, const float * x, int64_t incx, const float * beta, float * y, int64_t incy); 
# 1956
cublasStatus_t cublasDspmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const double * AP, const double * x, int incx, const double * beta, double * y, int incy); 
# 1967
cublasStatus_t cublasDspmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const double * AP, const double * x, int64_t incx, const double * beta, double * y, int64_t incy); 
# 1978
cublasStatus_t cublasChpmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * AP, const cuComplex * x, int incx, const cuComplex * beta, cuComplex * y, int incy); 
# 1989
cublasStatus_t cublasChpmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * AP, const cuComplex * x, int64_t incx, const cuComplex * beta, cuComplex * y, int64_t incy); 
# 2000
cublasStatus_t cublasZhpmv_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * AP, const cuDoubleComplex * x, int incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy); 
# 2011
cublasStatus_t cublasZhpmv_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * AP, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy); 
# 2024
cublasStatus_t cublasSger_v2(cublasHandle_t handle, int m, int n, const float * alpha, const float * x, int incx, const float * y, int incy, float * A, int lda); 
# 2035
cublasStatus_t cublasSger_v2_64(cublasHandle_t handle, int64_t m, int64_t n, const float * alpha, const float * x, int64_t incx, const float * y, int64_t incy, float * A, int64_t lda); 
# 2046
cublasStatus_t cublasDger_v2(cublasHandle_t handle, int m, int n, const double * alpha, const double * x, int incx, const double * y, int incy, double * A, int lda); 
# 2057
cublasStatus_t cublasDger_v2_64(cublasHandle_t handle, int64_t m, int64_t n, const double * alpha, const double * x, int64_t incx, const double * y, int64_t incy, double * A, int64_t lda); 
# 2068
cublasStatus_t cublasCgeru_v2(cublasHandle_t handle, int m, int n, const cuComplex * alpha, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * A, int lda); 
# 2079
cublasStatus_t cublasCgeru_v2_64(cublasHandle_t handle, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * A, int64_t lda); 
# 2090
cublasStatus_t cublasCgerc_v2(cublasHandle_t handle, int m, int n, const cuComplex * alpha, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * A, int lda); 
# 2101
cublasStatus_t cublasCgerc_v2_64(cublasHandle_t handle, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * A, int64_t lda); 
# 2112
cublasStatus_t cublasZgeru_v2(cublasHandle_t handle, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * A, int lda); 
# 2123
cublasStatus_t cublasZgeru_v2_64(cublasHandle_t handle, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * A, int64_t lda); 
# 2134
cublasStatus_t cublasZgerc_v2(cublasHandle_t handle, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * A, int lda); 
# 2145
cublasStatus_t cublasZgerc_v2_64(cublasHandle_t handle, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * A, int64_t lda); 
# 2158
cublasStatus_t cublasSsyr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const float * x, int incx, float * A, int lda); 
# 2167
cublasStatus_t cublasSsyr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const float * x, int64_t incx, float * A, int64_t lda); 
# 2176
cublasStatus_t cublasDsyr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const double * x, int incx, double * A, int lda); 
# 2185
cublasStatus_t cublasDsyr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const double * x, int64_t incx, double * A, int64_t lda); 
# 2194
cublasStatus_t cublasCsyr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * x, int incx, cuComplex * A, int lda); 
# 2203
cublasStatus_t cublasCsyr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, cuComplex * A, int64_t lda); 
# 2212
cublasStatus_t cublasZsyr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, cuDoubleComplex * A, int lda); 
# 2221
cublasStatus_t cublasZsyr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, cuDoubleComplex * A, int64_t lda); 
# 2230
cublasStatus_t cublasCher_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const cuComplex * x, int incx, cuComplex * A, int lda); 
# 2239
cublasStatus_t cublasCher_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const cuComplex * x, int64_t incx, cuComplex * A, int64_t lda); 
# 2248
cublasStatus_t cublasZher_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const cuDoubleComplex * x, int incx, cuDoubleComplex * A, int lda); 
# 2257
cublasStatus_t cublasZher_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const cuDoubleComplex * x, int64_t incx, cuDoubleComplex * A, int64_t lda); 
# 2268
cublasStatus_t cublasSspr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const float * x, int incx, float * AP); 
# 2271
cublasStatus_t cublasSspr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const float * x, int64_t incx, float * AP); 
# 2279
cublasStatus_t cublasDspr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const double * x, int incx, double * AP); 
# 2282
cublasStatus_t cublasDspr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const double * x, int64_t incx, double * AP); 
# 2290
cublasStatus_t cublasChpr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const cuComplex * x, int incx, cuComplex * AP); 
# 2298
cublasStatus_t cublasChpr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const cuComplex * x, int64_t incx, cuComplex * AP); 
# 2306
cublasStatus_t cublasZhpr_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const cuDoubleComplex * x, int incx, cuDoubleComplex * AP); 
# 2314
cublasStatus_t cublasZhpr_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const cuDoubleComplex * x, int64_t incx, cuDoubleComplex * AP); 
# 2324
cublasStatus_t cublasSsyr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const float * x, int incx, const float * y, int incy, float * A, int lda); 
# 2335
cublasStatus_t cublasSsyr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const float * x, int64_t incx, const float * y, int64_t incy, float * A, int64_t lda); 
# 2346
cublasStatus_t cublasDsyr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const double * x, int incx, const double * y, int incy, double * A, int lda); 
# 2357
cublasStatus_t cublasDsyr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const double * x, int64_t incx, const double * y, int64_t incy, double * A, int64_t lda); 
# 2368
cublasStatus_t cublasCsyr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * A, int lda); 
# 2379
cublasStatus_t cublasCsyr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * A, int64_t lda); 
# 2390
cublasStatus_t cublasZsyr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * A, int lda); 
# 2401
cublasStatus_t cublasZsyr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * A, int64_t lda); 
# 2412
cublasStatus_t cublasCher2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * A, int lda); 
# 2423
cublasStatus_t cublasCher2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * A, int64_t lda); 
# 2434
cublasStatus_t cublasZher2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * A, int lda); 
# 2445
cublasStatus_t cublasZher2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * A, int64_t lda); 
# 2458
cublasStatus_t cublasSspr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * alpha, const float * x, int incx, const float * y, int incy, float * AP); 
# 2468
cublasStatus_t cublasSspr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const float * alpha, const float * x, int64_t incx, const float * y, int64_t incy, float * AP); 
# 2478
cublasStatus_t cublasDspr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * alpha, const double * x, int incx, const double * y, int incy, double * AP); 
# 2488
cublasStatus_t cublasDspr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const double * alpha, const double * x, int64_t incx, const double * y, int64_t incy, double * AP); 
# 2498
cublasStatus_t cublasChpr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * alpha, const cuComplex * x, int incx, const cuComplex * y, int incy, cuComplex * AP); 
# 2508
cublasStatus_t cublasChpr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuComplex * alpha, const cuComplex * x, int64_t incx, const cuComplex * y, int64_t incy, cuComplex * AP); 
# 2518
cublasStatus_t cublasZhpr2_v2(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int incx, const cuDoubleComplex * y, int incy, cuDoubleComplex * AP); 
# 2528
cublasStatus_t cublasZhpr2_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * x, int64_t incx, const cuDoubleComplex * y, int64_t incy, cuDoubleComplex * AP); 
# 2540
cublasStatus_t cublasSgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const float *const  Aarray[], int lda, const float *const  xarray[], int incx, const float * beta, float *const  yarray[], int incy, int batchCount); 
# 2554
cublasStatus_t cublasSgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const float *const  Aarray[], int64_t lda, const float *const  xarray[], int64_t incx, const float * beta, float *const  yarray[], int64_t incy, int64_t batchCount); 
# 2568
cublasStatus_t cublasDgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const double * alpha, const double *const  Aarray[], int lda, const double *const  xarray[], int incx, const double * beta, double *const  yarray[], int incy, int batchCount); 
# 2582
cublasStatus_t cublasDgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const double * alpha, const double *const  Aarray[], int64_t lda, const double *const  xarray[], int64_t incx, const double * beta, double *const  yarray[], int64_t incy, int64_t batchCount); 
# 2596
cublasStatus_t cublasCgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const cuComplex * alpha, const cuComplex *const  Aarray[], int lda, const cuComplex *const  xarray[], int incx, const cuComplex * beta, cuComplex *const  yarray[], int incy, int batchCount); 
# 2610
cublasStatus_t cublasCgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex *const  Aarray[], int64_t lda, const cuComplex *const  xarray[], int64_t incx, const cuComplex * beta, cuComplex *const  yarray[], int64_t incy, int64_t batchCount); 
# 2624
cublasStatus_t cublasZgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex *const  Aarray[], int lda, const cuDoubleComplex *const  xarray[], int incx, const cuDoubleComplex * beta, cuDoubleComplex *const  yarray[], int incy, int batchCount); 
# 2638
cublasStatus_t cublasZgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex *const  Aarray[], int64_t lda, const cuDoubleComplex *const  xarray[], int64_t incx, const cuDoubleComplex * beta, cuDoubleComplex *const  yarray[], int64_t incy, int64_t batchCount); 
# 2654
cublasStatus_t cublasHSHgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __half *const  Aarray[], int lda, const __half *const  xarray[], int incx, const float * beta, __half *const  yarray[], int incy, int batchCount); 
# 2668
cublasStatus_t cublasHSHgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __half *const  Aarray[], int64_t lda, const __half *const  xarray[], int64_t incx, const float * beta, __half *const  yarray[], int64_t incy, int64_t batchCount); 
# 2682
cublasStatus_t cublasHSSgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __half *const  Aarray[], int lda, const __half *const  xarray[], int incx, const float * beta, float *const  yarray[], int incy, int batchCount); 
# 2696
cublasStatus_t cublasHSSgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __half *const  Aarray[], int64_t lda, const __half *const  xarray[], int64_t incx, const float * beta, float *const  yarray[], int64_t incy, int64_t batchCount); 
# 2710
cublasStatus_t cublasTSTgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __nv_bfloat16 *const  Aarray[], int lda, const __nv_bfloat16 *const  xarray[], int incx, const float * beta, __nv_bfloat16 *const  yarray[], int incy, int batchCount); 
# 2724
cublasStatus_t cublasTSTgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __nv_bfloat16 *const  Aarray[], int64_t lda, const __nv_bfloat16 *const  xarray[], int64_t incx, const float * beta, __nv_bfloat16 *const  yarray[], int64_t incy, int64_t batchCount); 
# 2738
cublasStatus_t cublasTSSgemvBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __nv_bfloat16 *const  Aarray[], int lda, const __nv_bfloat16 *const  xarray[], int incx, const float * beta, float *const  yarray[], int incy, int batchCount); 
# 2752
cublasStatus_t cublasTSSgemvBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __nv_bfloat16 *const  Aarray[], int64_t lda, const __nv_bfloat16 *const  xarray[], int64_t incx, const float * beta, float *const  yarray[], int64_t incy, int64_t batchCount); 
# 2768
cublasStatus_t cublasSgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const float * A, int lda, long long strideA, const float * x, int incx, long long stridex, const float * beta, float * y, int incy, long long stridey, int batchCount); 
# 2785
cublasStatus_t cublasSgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const float * A, int64_t lda, long long strideA, const float * x, int64_t incx, long long stridex, const float * beta, float * y, int64_t incy, long long stridey, int64_t batchCount); 
# 2802
cublasStatus_t cublasDgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const double * alpha, const double * A, int lda, long long strideA, const double * x, int incx, long long stridex, const double * beta, double * y, int incy, long long stridey, int batchCount); 
# 2819
cublasStatus_t cublasDgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const double * alpha, const double * A, int64_t lda, long long strideA, const double * x, int64_t incx, long long stridex, const double * beta, double * y, int64_t incy, long long stridey, int64_t batchCount); 
# 2836
cublasStatus_t cublasCgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, long long strideA, const cuComplex * x, int incx, long long stridex, const cuComplex * beta, cuComplex * y, int incy, long long stridey, int batchCount); 
# 2853
cublasStatus_t cublasCgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, long long strideA, const cuComplex * x, int64_t incx, long long stridex, const cuComplex * beta, cuComplex * y, int64_t incy, long long stridey, int64_t batchCount); 
# 2870
cublasStatus_t cublasZgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, long long strideA, const cuDoubleComplex * x, int incx, long long stridex, const cuDoubleComplex * beta, cuDoubleComplex * y, int incy, long long stridey, int batchCount); 
# 2887
cublasStatus_t cublasZgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, long long strideA, const cuDoubleComplex * x, int64_t incx, long long stridex, const cuDoubleComplex * beta, cuDoubleComplex * y, int64_t incy, long long stridey, int64_t batchCount); 
# 2906
cublasStatus_t cublasHSHgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __half * A, int lda, long long strideA, const __half * x, int incx, long long stridex, const float * beta, __half * y, int incy, long long stridey, int batchCount); 
# 2923
cublasStatus_t cublasHSHgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __half * A, int64_t lda, long long strideA, const __half * x, int64_t incx, long long stridex, const float * beta, __half * y, int64_t incy, long long stridey, int64_t batchCount); 
# 2940
cublasStatus_t cublasHSSgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __half * A, int lda, long long strideA, const __half * x, int incx, long long stridex, const float * beta, float * y, int incy, long long stridey, int batchCount); 
# 2957
cublasStatus_t cublasHSSgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __half * A, int64_t lda, long long strideA, const __half * x, int64_t incx, long long stridex, const float * beta, float * y, int64_t incy, long long stridey, int64_t batchCount); 
# 2974
cublasStatus_t cublasTSTgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __nv_bfloat16 * A, int lda, long long strideA, const __nv_bfloat16 * x, int incx, long long stridex, const float * beta, __nv_bfloat16 * y, int incy, long long stridey, int batchCount); 
# 2991
cublasStatus_t cublasTSTgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __nv_bfloat16 * A, int64_t lda, long long strideA, const __nv_bfloat16 * x, int64_t incx, long long stridex, const float * beta, __nv_bfloat16 * y, int64_t incy, long long stridey, int64_t batchCount); 
# 3008
cublasStatus_t cublasTSSgemvStridedBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, const float * alpha, const __nv_bfloat16 * A, int lda, long long strideA, const __nv_bfloat16 * x, int incx, long long stridex, const float * beta, float * y, int incy, long long stridey, int batchCount); 
# 3025
cublasStatus_t cublasTSSgemvStridedBatched_64(cublasHandle_t handle, cublasOperation_t trans, int64_t m, int64_t n, const float * alpha, const __nv_bfloat16 * A, int64_t lda, long long strideA, const __nv_bfloat16 * x, int64_t incx, long long stridex, const float * beta, float * y, int64_t incy, long long stridey, int64_t batchCount); 
# 3048
cublasStatus_t cublasSgemm_v2(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const float * alpha, const float * A, int lda, const float * B, int ldb, const float * beta, float * C, int ldc); 
# 3063
cublasStatus_t cublasSgemm_v2_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const float * alpha, const float * A, int64_t lda, const float * B, int64_t ldb, const float * beta, float * C, int64_t ldc); 
# 3078
cublasStatus_t cublasDgemm_v2(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const double * alpha, const double * A, int lda, const double * B, int ldb, const double * beta, double * C, int ldc); 
# 3093
cublasStatus_t cublasDgemm_v2_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const double * alpha, const double * A, int64_t lda, const double * B, int64_t ldb, const double * beta, double * C, int64_t ldc); 
# 3108
cublasStatus_t cublasCgemm_v2(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
# 3123
cublasStatus_t cublasCgemm_v2_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 3138
cublasStatus_t cublasCgemm3m(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
# 3153
cublasStatus_t cublasCgemm3m_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 3168
cublasStatus_t cublasCgemm3mEx(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const void * A, cudaDataType Atype, int lda, const void * B, cudaDataType Btype, int ldb, const cuComplex * beta, void * C, cudaDataType Ctype, int ldc); 
# 3186
cublasStatus_t cublasCgemm3mEx_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const void * A, cudaDataType Atype, int64_t lda, const void * B, cudaDataType Btype, int64_t ldb, const cuComplex * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3204
cublasStatus_t cublasZgemm_v2(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 3219
cublasStatus_t cublasZgemm_v2_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 3234
cublasStatus_t cublasZgemm3m(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 3249
cublasStatus_t cublasZgemm3m_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 3266
cublasStatus_t cublasHgemm(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const __half * alpha, const __half * A, int lda, const __half * B, int ldb, const __half * beta, __half * C, int ldc); 
# 3281
cublasStatus_t cublasHgemm_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const __half * alpha, const __half * A, int64_t lda, const __half * B, int64_t ldb, const __half * beta, __half * C, int64_t ldc); 
# 3298
cublasStatus_t cublasSgemmEx(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const float * alpha, const void * A, cudaDataType Atype, int lda, const void * B, cudaDataType Btype, int ldb, const float * beta, void * C, cudaDataType Ctype, int ldc); 
# 3316
cublasStatus_t cublasSgemmEx_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const float * alpha, const void * A, cudaDataType Atype, int64_t lda, const void * B, cudaDataType Btype, int64_t ldb, const float * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3334
cublasStatus_t cublasGemmEx(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const void * alpha, const void * A, cudaDataType Atype, int lda, const void * B, cudaDataType Btype, int ldb, const void * beta, void * C, cudaDataType Ctype, int ldc, cublasComputeType_t computeType, cublasGemmAlgo_t algo); 
# 3354
cublasStatus_t cublasGemmEx_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const void * alpha, const void * A, cudaDataType Atype, int64_t lda, const void * B, cudaDataType Btype, int64_t ldb, const void * beta, void * C, cudaDataType Ctype, int64_t ldc, cublasComputeType_t computeType, cublasGemmAlgo_t algo); 
# 3374
cublasStatus_t cublasCgemmEx(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const void * A, cudaDataType Atype, int lda, const void * B, cudaDataType Btype, int ldb, const cuComplex * beta, void * C, cudaDataType Ctype, int ldc); 
# 3392
cublasStatus_t cublasCgemmEx_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const void * A, cudaDataType Atype, int64_t lda, const void * B, cudaDataType Btype, int64_t ldb, const cuComplex * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3412
cublasStatus_t cublasSsyrk_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const float * alpha, const float * A, int lda, const float * beta, float * C, int ldc); 
# 3424
cublasStatus_t cublasSsyrk_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const float * alpha, const float * A, int64_t lda, const float * beta, float * C, int64_t ldc); 
# 3436
cublasStatus_t cublasDsyrk_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const double * alpha, const double * A, int lda, const double * beta, double * C, int ldc); 
# 3448
cublasStatus_t cublasDsyrk_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const double * alpha, const double * A, int64_t lda, const double * beta, double * C, int64_t ldc); 
# 3460
cublasStatus_t cublasCsyrk_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * beta, cuComplex * C, int ldc); 
# 3472
cublasStatus_t cublasCsyrk_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 3484
cublasStatus_t cublasZsyrk_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 3496
cublasStatus_t cublasZsyrk_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 3508
cublasStatus_t cublasCsyrkEx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const void * A, cudaDataType Atype, int lda, const cuComplex * beta, void * C, cudaDataType Ctype, int ldc); 
# 3522
cublasStatus_t cublasCsyrkEx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const void * A, cudaDataType Atype, int64_t lda, const cuComplex * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3536
cublasStatus_t cublasCsyrk3mEx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const void * A, cudaDataType Atype, int lda, const cuComplex * beta, void * C, cudaDataType Ctype, int ldc); 
# 3550
cublasStatus_t cublasCsyrk3mEx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const void * A, cudaDataType Atype, int64_t lda, const cuComplex * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3566
cublasStatus_t cublasCherk_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const float * alpha, const cuComplex * A, int lda, const float * beta, cuComplex * C, int ldc); 
# 3578
cublasStatus_t cublasCherk_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const float * alpha, const cuComplex * A, int64_t lda, const float * beta, cuComplex * C, int64_t ldc); 
# 3590
cublasStatus_t cublasZherk_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const double * alpha, const cuDoubleComplex * A, int lda, const double * beta, cuDoubleComplex * C, int ldc); 
# 3602
cublasStatus_t cublasZherk_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const double * alpha, const cuDoubleComplex * A, int64_t lda, const double * beta, cuDoubleComplex * C, int64_t ldc); 
# 3614
cublasStatus_t cublasCherkEx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const float * alpha, const void * A, cudaDataType Atype, int lda, const float * beta, void * C, cudaDataType Ctype, int ldc); 
# 3628
cublasStatus_t cublasCherkEx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const float * alpha, const void * A, cudaDataType Atype, int64_t lda, const float * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3642
cublasStatus_t cublasCherk3mEx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const float * alpha, const void * A, cudaDataType Atype, int lda, const float * beta, void * C, cudaDataType Ctype, int ldc); 
# 3656
cublasStatus_t cublasCherk3mEx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const float * alpha, const void * A, cudaDataType Atype, int64_t lda, const float * beta, void * C, cudaDataType Ctype, int64_t ldc); 
# 3672
cublasStatus_t cublasSsyr2k_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const float * alpha, const float * A, int lda, const float * B, int ldb, const float * beta, float * C, int ldc); 
# 3686
cublasStatus_t cublasSsyr2k_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const float * alpha, const float * A, int64_t lda, const float * B, int64_t ldb, const float * beta, float * C, int64_t ldc); 
# 3700
cublasStatus_t cublasDsyr2k_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const double * alpha, const double * A, int lda, const double * B, int ldb, const double * beta, double * C, int ldc); 
# 3714
cublasStatus_t cublasDsyr2k_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const double * alpha, const double * A, int64_t lda, const double * B, int64_t ldb, const double * beta, double * C, int64_t ldc); 
# 3728
cublasStatus_t cublasCsyr2k_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
# 3742
cublasStatus_t cublasCsyr2k_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 3756
cublasStatus_t cublasZsyr2k_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 3770
cublasStatus_t cublasZsyr2k_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 3784
cublasStatus_t cublasCher2k_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const float * beta, cuComplex * C, int ldc); 
# 3798
cublasStatus_t cublasCher2k_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const float * beta, cuComplex * C, int64_t ldc); 
# 3812
cublasStatus_t cublasZher2k_v2(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const double * beta, cuDoubleComplex * C, int ldc); 
# 3826
cublasStatus_t cublasZher2k_v2_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const double * beta, cuDoubleComplex * C, int64_t ldc); 
# 3842
cublasStatus_t cublasSsyrkx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const float * alpha, const float * A, int lda, const float * B, int ldb, const float * beta, float * C, int ldc); 
# 3856
cublasStatus_t cublasSsyrkx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const float * alpha, const float * A, int64_t lda, const float * B, int64_t ldb, const float * beta, float * C, int64_t ldc); 
# 3870
cublasStatus_t cublasDsyrkx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const double * alpha, const double * A, int lda, const double * B, int ldb, const double * beta, double * C, int ldc); 
# 3884
cublasStatus_t cublasDsyrkx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const double * alpha, const double * A, int64_t lda, const double * B, int64_t ldb, const double * beta, double * C, int64_t ldc); 
# 3898
cublasStatus_t cublasCsyrkx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
# 3912
cublasStatus_t cublasCsyrkx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 3926
cublasStatus_t cublasZsyrkx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 3940
cublasStatus_t cublasZsyrkx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 3954
cublasStatus_t cublasCherkx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const float * beta, cuComplex * C, int ldc); 
# 3968
cublasStatus_t cublasCherkx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const float * beta, cuComplex * C, int64_t ldc); 
# 3982
cublasStatus_t cublasZherkx(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const double * beta, cuDoubleComplex * C, int ldc); 
# 3996
cublasStatus_t cublasZherkx_64(cublasHandle_t handle, cublasFillMode_t uplo, cublasOperation_t trans, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const double * beta, cuDoubleComplex * C, int64_t ldc); 
# 4012
cublasStatus_t cublasSsymm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int m, int n, const float * alpha, const float * A, int lda, const float * B, int ldb, const float * beta, float * C, int ldc); 
# 4026
cublasStatus_t cublasSsymm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int64_t m, int64_t n, const float * alpha, const float * A, int64_t lda, const float * B, int64_t ldb, const float * beta, float * C, int64_t ldc); 
# 4040
cublasStatus_t cublasDsymm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int m, int n, const double * alpha, const double * A, int lda, const double * B, int ldb, const double * beta, double * C, int ldc); 
# 4054
cublasStatus_t cublasDsymm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int64_t m, int64_t n, const double * alpha, const double * A, int64_t lda, const double * B, int64_t ldb, const double * beta, double * C, int64_t ldc); 
# 4068
cublasStatus_t cublasCsymm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
# 4082
cublasStatus_t cublasCsymm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 4096
cublasStatus_t cublasZsymm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 4110
cublasStatus_t cublasZsymm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 4126
cublasStatus_t cublasChemm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, const cuComplex * beta, cuComplex * C, int ldc); 
# 4140
cublasStatus_t cublasChemm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, const cuComplex * beta, cuComplex * C, int64_t ldc); 
# 4154
cublasStatus_t cublasZhemm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc); 
# 4168
cublasStatus_t cublasZhemm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc); 
# 4184
cublasStatus_t cublasStrsm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const float * alpha, const float * A, int lda, float * B, int ldb); 
# 4197
cublasStatus_t cublasStrsm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const float * alpha, const float * A, int64_t lda, float * B, int64_t ldb); 
# 4210
cublasStatus_t cublasDtrsm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const double * alpha, const double * A, int lda, double * B, int ldb); 
# 4223
cublasStatus_t cublasDtrsm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const double * alpha, const double * A, int64_t lda, double * B, int64_t ldb); 
# 4236
cublasStatus_t cublasCtrsm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, cuComplex * B, int ldb); 
# 4249
cublasStatus_t cublasCtrsm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, cuComplex * B, int64_t ldb); 
# 4262
cublasStatus_t cublasZtrsm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, cuDoubleComplex * B, int ldb); 
# 4275
cublasStatus_t cublasZtrsm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, cuDoubleComplex * B, int64_t ldb); 
# 4290
cublasStatus_t cublasStrmm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const float * alpha, const float * A, int lda, const float * B, int ldb, float * C, int ldc); 
# 4305
cublasStatus_t cublasStrmm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const float * alpha, const float * A, int64_t lda, const float * B, int64_t ldb, float * C, int64_t ldc); 
# 4320
cublasStatus_t cublasDtrmm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const double * alpha, const double * A, int lda, const double * B, int ldb, double * C, int ldc); 
# 4335
cublasStatus_t cublasDtrmm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const double * alpha, const double * A, int64_t lda, const double * B, int64_t ldb, double * C, int64_t ldc); 
# 4350
cublasStatus_t cublasCtrmm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * B, int ldb, cuComplex * C, int ldc); 
# 4365
cublasStatus_t cublasCtrmm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * B, int64_t ldb, cuComplex * C, int64_t ldc); 
# 4380
cublasStatus_t cublasZtrmm_v2(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * B, int ldb, cuDoubleComplex * C, int ldc); 
# 4395
cublasStatus_t cublasZtrmm_v2_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * B, int64_t ldb, cuDoubleComplex * C, int64_t ldc); 
# 4414
cublasStatus_t cublasHgemmBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const __half * alpha, const __half *const  Aarray[], int lda, const __half *const  Barray[], int ldb, const __half * beta, __half *const  Carray[], int ldc, int batchCount); 
# 4430
cublasStatus_t cublasHgemmBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const __half * alpha, const __half *const  Aarray[], int64_t lda, const __half *const  Barray[], int64_t ldb, const __half * beta, __half *const  Carray[], int64_t ldc, int64_t batchCount); 
# 4448
cublasStatus_t cublasSgemmBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const float * alpha, const float *const  Aarray[], int lda, const float *const  Barray[], int ldb, const float * beta, float *const  Carray[], int ldc, int batchCount); 
# 4464
cublasStatus_t cublasSgemmBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const float * alpha, const float *const  Aarray[], int64_t lda, const float *const  Barray[], int64_t ldb, const float * beta, float *const  Carray[], int64_t ldc, int64_t batchCount); 
# 4480
cublasStatus_t cublasDgemmBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const double * alpha, const double *const  Aarray[], int lda, const double *const  Barray[], int ldb, const double * beta, double *const  Carray[], int ldc, int batchCount); 
# 4496
cublasStatus_t cublasDgemmBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const double * alpha, const double *const  Aarray[], int64_t lda, const double *const  Barray[], int64_t ldb, const double * beta, double *const  Carray[], int64_t ldc, int64_t batchCount); 
# 4512
cublasStatus_t cublasCgemmBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const cuComplex *const  Aarray[], int lda, const cuComplex *const  Barray[], int ldb, const cuComplex * beta, cuComplex *const  Carray[], int ldc, int batchCount); 
# 4528
cublasStatus_t cublasCgemmBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex *const  Aarray[], int64_t lda, const cuComplex *const  Barray[], int64_t ldb, const cuComplex * beta, cuComplex *const  Carray[], int64_t ldc, int64_t batchCount); 
# 4544
cublasStatus_t cublasCgemm3mBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const cuComplex *const  Aarray[], int lda, const cuComplex *const  Barray[], int ldb, const cuComplex * beta, cuComplex *const  Carray[], int ldc, int batchCount); 
# 4560
cublasStatus_t cublasCgemm3mBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex *const  Aarray[], int64_t lda, const cuComplex *const  Barray[], int64_t ldb, const cuComplex * beta, cuComplex *const  Carray[], int64_t ldc, int64_t batchCount); 
# 4576
cublasStatus_t cublasZgemmBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex *const  Aarray[], int lda, const cuDoubleComplex *const  Barray[], int ldb, const cuDoubleComplex * beta, cuDoubleComplex *const  Carray[], int ldc, int batchCount); 
# 4592
cublasStatus_t cublasZgemmBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex *const  Aarray[], int64_t lda, const cuDoubleComplex *const  Barray[], int64_t ldb, const cuDoubleComplex * beta, cuDoubleComplex *const  Carray[], int64_t ldc, int64_t batchCount); 
# 4610
cublasStatus_t cublasHgemmStridedBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const __half * alpha, const __half * A, int lda, long long strideA, const __half * B, int ldb, long long strideB, const __half * beta, __half * C, int ldc, long long strideC, int batchCount); 
# 4629
cublasStatus_t cublasHgemmStridedBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const __half * alpha, const __half * A, int64_t lda, long long strideA, const __half * B, int64_t ldb, long long strideB, const __half * beta, __half * C, int64_t ldc, long long strideC, int64_t batchCount); 
# 4650
cublasStatus_t cublasSgemmStridedBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const float * alpha, const float * A, int lda, long long strideA, const float * B, int ldb, long long strideB, const float * beta, float * C, int ldc, long long strideC, int batchCount); 
# 4669
cublasStatus_t cublasSgemmStridedBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const float * alpha, const float * A, int64_t lda, long long strideA, const float * B, int64_t ldb, long long strideB, const float * beta, float * C, int64_t ldc, long long strideC, int64_t batchCount); 
# 4688
cublasStatus_t cublasDgemmStridedBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const double * alpha, const double * A, int lda, long long strideA, const double * B, int ldb, long long strideB, const double * beta, double * C, int ldc, long long strideC, int batchCount); 
# 4707
cublasStatus_t cublasDgemmStridedBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const double * alpha, const double * A, int64_t lda, long long strideA, const double * B, int64_t ldb, long long strideB, const double * beta, double * C, int64_t ldc, long long strideC, int64_t batchCount); 
# 4726
cublasStatus_t cublasCgemmStridedBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, long long strideA, const cuComplex * B, int ldb, long long strideB, const cuComplex * beta, cuComplex * C, int ldc, long long strideC, int batchCount); 
# 4745
cublasStatus_t cublasCgemmStridedBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, long long strideA, const cuComplex * B, int64_t ldb, long long strideB, const cuComplex * beta, cuComplex * C, int64_t ldc, long long strideC, int64_t batchCount); 
# 4764
cublasStatus_t cublasCgemm3mStridedBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuComplex * alpha, const cuComplex * A, int lda, long long strideA, const cuComplex * B, int ldb, long long strideB, const cuComplex * beta, cuComplex * C, int ldc, long long strideC, int batchCount); 
# 4783
cublasStatus_t cublasCgemm3mStridedBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuComplex * alpha, const cuComplex * A, int64_t lda, long long strideA, const cuComplex * B, int64_t ldb, long long strideB, const cuComplex * beta, cuComplex * C, int64_t ldc, long long strideC, int64_t batchCount); 
# 4802
cublasStatus_t cublasZgemmStridedBatched(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, long long strideA, const cuDoubleComplex * B, int ldb, long long strideB, const cuDoubleComplex * beta, cuDoubleComplex * C, int ldc, long long strideC, int batchCount); 
# 4821
cublasStatus_t cublasZgemmStridedBatched_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, long long strideA, const cuDoubleComplex * B, int64_t ldb, long long strideB, const cuDoubleComplex * beta, cuDoubleComplex * C, int64_t ldc, long long strideC, int64_t batchCount); 
# 4840
cublasStatus_t cublasGemmBatchedEx(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const void * alpha, const void *const  Aarray[], cudaDataType Atype, int lda, const void *const  Barray[], cudaDataType Btype, int ldb, const void * beta, void *const  Carray[], cudaDataType Ctype, int ldc, int batchCount, cublasComputeType_t computeType, cublasGemmAlgo_t algo); 
# 4861
cublasStatus_t cublasGemmBatchedEx_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const void * alpha, const void *const  Aarray[], cudaDataType Atype, int64_t lda, const void *const  Barray[], cudaDataType Btype, int64_t ldb, const void * beta, void *const  Carray[], cudaDataType Ctype, int64_t ldc, int64_t batchCount, cublasComputeType_t computeType, cublasGemmAlgo_t algo); 
# 4882
cublasStatus_t cublasGemmStridedBatchedEx(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, int k, const void * alpha, const void * A, cudaDataType Atype, int lda, long long strideA, const void * B, cudaDataType Btype, int ldb, long long strideB, const void * beta, void * C, cudaDataType Ctype, int ldc, long long strideC, int batchCount, cublasComputeType_t computeType, cublasGemmAlgo_t algo); 
# 4906
cublasStatus_t cublasGemmStridedBatchedEx_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, int64_t k, const void * alpha, const void * A, cudaDataType Atype, int64_t lda, long long strideA, const void * B, cudaDataType Btype, int64_t ldb, long long strideB, const void * beta, void * C, cudaDataType Ctype, int64_t ldc, long long strideC, int64_t batchCount, cublasComputeType_t computeType, cublasGemmAlgo_t algo); 
# 4934
cublasStatus_t cublasSgeam(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, const float * alpha, const float * A, int lda, const float * beta, const float * B, int ldb, float * C, int ldc); 
# 4948
cublasStatus_t cublasSgeam_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, const float * alpha, const float * A, int64_t lda, const float * beta, const float * B, int64_t ldb, float * C, int64_t ldc); 
# 4962
cublasStatus_t cublasDgeam(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, const double * alpha, const double * A, int lda, const double * beta, const double * B, int ldb, double * C, int ldc); 
# 4976
cublasStatus_t cublasDgeam_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, const double * alpha, const double * A, int64_t lda, const double * beta, const double * B, int64_t ldb, double * C, int64_t ldc); 
# 4990
cublasStatus_t cublasCgeam(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, const cuComplex * alpha, const cuComplex * A, int lda, const cuComplex * beta, const cuComplex * B, int ldb, cuComplex * C, int ldc); 
# 5004
cublasStatus_t cublasCgeam_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex * A, int64_t lda, const cuComplex * beta, const cuComplex * B, int64_t ldb, cuComplex * C, int64_t ldc); 
# 5018
cublasStatus_t cublasZgeam(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int lda, const cuDoubleComplex * beta, const cuDoubleComplex * B, int ldb, cuDoubleComplex * C, int ldc); 
# 5032
cublasStatus_t cublasZgeam_64(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * beta, const cuDoubleComplex * B, int64_t ldb, cuDoubleComplex * C, int64_t ldc); 
# 5048
cublasStatus_t cublasStrsmBatched(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const float * alpha, const float *const  A[], int lda, float *const  B[], int ldb, int batchCount); 
# 5062
cublasStatus_t cublasStrsmBatched_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const float * alpha, const float *const  A[], int64_t lda, float *const  B[], int64_t ldb, int64_t batchCount); 
# 5076
cublasStatus_t cublasDtrsmBatched(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const double * alpha, const double *const  A[], int lda, double *const  B[], int ldb, int batchCount); 
# 5090
cublasStatus_t cublasDtrsmBatched_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const double * alpha, const double *const  A[], int64_t lda, double *const  B[], int64_t ldb, int64_t batchCount); 
# 5104
cublasStatus_t cublasCtrsmBatched(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const cuComplex * alpha, const cuComplex *const  A[], int lda, cuComplex *const  B[], int ldb, int batchCount); 
# 5118
cublasStatus_t cublasCtrsmBatched_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const cuComplex * alpha, const cuComplex *const  A[], int64_t lda, cuComplex *const  B[], int64_t ldb, int64_t batchCount); 
# 5132
cublasStatus_t cublasZtrsmBatched(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int m, int n, const cuDoubleComplex * alpha, const cuDoubleComplex *const  A[], int lda, cuDoubleComplex *const  B[], int ldb, int batchCount); 
# 5146
cublasStatus_t cublasZtrsmBatched_64(cublasHandle_t handle, cublasSideMode_t side, cublasFillMode_t uplo, cublasOperation_t trans, cublasDiagType_t diag, int64_t m, int64_t n, const cuDoubleComplex * alpha, const cuDoubleComplex *const  A[], int64_t lda, cuDoubleComplex *const  B[], int64_t ldb, int64_t batchCount); 
# 5162
cublasStatus_t cublasSdgmm(cublasHandle_t handle, cublasSideMode_t mode, int m, int n, const float * A, int lda, const float * x, int incx, float * C, int ldc); 
# 5173
cublasStatus_t cublasSdgmm_64(cublasHandle_t handle, cublasSideMode_t mode, int64_t m, int64_t n, const float * A, int64_t lda, const float * x, int64_t incx, float * C, int64_t ldc); 
# 5184
cublasStatus_t cublasDdgmm(cublasHandle_t handle, cublasSideMode_t mode, int m, int n, const double * A, int lda, const double * x, int incx, double * C, int ldc); 
# 5195
cublasStatus_t cublasDdgmm_64(cublasHandle_t handle, cublasSideMode_t mode, int64_t m, int64_t n, const double * A, int64_t lda, const double * x, int64_t incx, double * C, int64_t ldc); 
# 5206
cublasStatus_t cublasCdgmm(cublasHandle_t handle, cublasSideMode_t mode, int m, int n, const cuComplex * A, int lda, const cuComplex * x, int incx, cuComplex * C, int ldc); 
# 5217
cublasStatus_t cublasCdgmm_64(cublasHandle_t handle, cublasSideMode_t mode, int64_t m, int64_t n, const cuComplex * A, int64_t lda, const cuComplex * x, int64_t incx, cuComplex * C, int64_t ldc); 
# 5228
cublasStatus_t cublasZdgmm(cublasHandle_t handle, cublasSideMode_t mode, int m, int n, const cuDoubleComplex * A, int lda, const cuDoubleComplex * x, int incx, cuDoubleComplex * C, int ldc); 
# 5239
cublasStatus_t cublasZdgmm_64(cublasHandle_t handle, cublasSideMode_t mode, int64_t m, int64_t n, const cuDoubleComplex * A, int64_t lda, const cuDoubleComplex * x, int64_t incx, cuDoubleComplex * C, int64_t ldc); 
# 5252
cublasStatus_t cublasSmatinvBatched(cublasHandle_t handle, int n, const float *const  A[], int lda, float *const  Ainv[], int lda_inv, int * info, int batchSize); 
# 5261
cublasStatus_t cublasDmatinvBatched(cublasHandle_t handle, int n, const double *const  A[], int lda, double *const  Ainv[], int lda_inv, int * info, int batchSize); 
# 5270
cublasStatus_t cublasCmatinvBatched(cublasHandle_t handle, int n, const cuComplex *const  A[], int lda, cuComplex *const  Ainv[], int lda_inv, int * info, int batchSize); 
# 5279
cublasStatus_t cublasZmatinvBatched(cublasHandle_t handle, int n, const cuDoubleComplex *const  A[], int lda, cuDoubleComplex *const  Ainv[], int lda_inv, int * info, int batchSize); 
# 5290
cublasStatus_t cublasSgeqrfBatched(cublasHandle_t handle, int m, int n, float *const  Aarray[], int lda, float *const  TauArray[], int * info, int batchSize); 
# 5299
cublasStatus_t cublasDgeqrfBatched(cublasHandle_t handle, int m, int n, double *const  Aarray[], int lda, double *const  TauArray[], int * info, int batchSize); 
# 5308
cublasStatus_t cublasCgeqrfBatched(cublasHandle_t handle, int m, int n, cuComplex *const  Aarray[], int lda, cuComplex *const  TauArray[], int * info, int batchSize); 
# 5317
cublasStatus_t cublasZgeqrfBatched(cublasHandle_t handle, int m, int n, cuDoubleComplex *const  Aarray[], int lda, cuDoubleComplex *const  TauArray[], int * info, int batchSize); 
# 5328
cublasStatus_t cublasSgelsBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int nrhs, float *const  Aarray[], int lda, float *const  Carray[], int ldc, int * info, int * devInfoArray, int batchSize); 
# 5341
cublasStatus_t cublasDgelsBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int nrhs, double *const  Aarray[], int lda, double *const  Carray[], int ldc, int * info, int * devInfoArray, int batchSize); 
# 5354
cublasStatus_t cublasCgelsBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int nrhs, cuComplex *const  Aarray[], int lda, cuComplex *const  Carray[], int ldc, int * info, int * devInfoArray, int batchSize); 
# 5367
cublasStatus_t cublasZgelsBatched(cublasHandle_t handle, cublasOperation_t trans, int m, int n, int nrhs, cuDoubleComplex *const  Aarray[], int lda, cuDoubleComplex *const  Carray[], int ldc, int * info, int * devInfoArray, int batchSize); 
# 5383
cublasStatus_t cublasStpttr(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * AP, float * A, int lda); 
# 5386
cublasStatus_t cublasDtpttr(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * AP, double * A, int lda); 
# 5389
cublasStatus_t cublasCtpttr(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * AP, cuComplex * A, int lda); 
# 5391
cublasStatus_t cublasZtpttr(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * AP, cuDoubleComplex * A, int lda); 
# 5397
cublasStatus_t cublasStrttp(cublasHandle_t handle, cublasFillMode_t uplo, int n, const float * A, int lda, float * AP); 
# 5400
cublasStatus_t cublasDtrttp(cublasHandle_t handle, cublasFillMode_t uplo, int n, const double * A, int lda, double * AP); 
# 5403
cublasStatus_t cublasCtrttp(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuComplex * A, int lda, cuComplex * AP); 
# 5405
cublasStatus_t cublasZtrttp(cublasHandle_t handle, cublasFillMode_t uplo, int n, const cuDoubleComplex * A, int lda, cuDoubleComplex * AP); 
# 5411
cublasStatus_t cublasSgetrfBatched(cublasHandle_t handle, int n, float *const  A[], int lda, int * P, int * info, int batchSize); 
# 5414
cublasStatus_t cublasDgetrfBatched(cublasHandle_t handle, int n, double *const  A[], int lda, int * P, int * info, int batchSize); 
# 5417
cublasStatus_t cublasCgetrfBatched(cublasHandle_t handle, int n, cuComplex *const  A[], int lda, int * P, int * info, int batchSize); 
# 5419
cublasStatus_t cublasZgetrfBatched(cublasHandle_t handle, int n, cuDoubleComplex *const  A[], int lda, int * P, int * info, int batchSize); 
# 5424
cublasStatus_t cublasSgetriBatched(cublasHandle_t handle, int n, const float *const  A[], int lda, const int * P, float *const  C[], int ldc, int * info, int batchSize); 
# 5434
cublasStatus_t cublasDgetriBatched(cublasHandle_t handle, int n, const double *const  A[], int lda, const int * P, double *const  C[], int ldc, int * info, int batchSize); 
# 5444
cublasStatus_t cublasCgetriBatched(cublasHandle_t handle, int n, const cuComplex *const  A[], int lda, const int * P, cuComplex *const  C[], int ldc, int * info, int batchSize); 
# 5454
cublasStatus_t cublasZgetriBatched(cublasHandle_t handle, int n, const cuDoubleComplex *const  A[], int lda, const int * P, cuDoubleComplex *const  C[], int ldc, int * info, int batchSize); 
# 5466
cublasStatus_t cublasSgetrsBatched(cublasHandle_t handle, cublasOperation_t trans, int n, int nrhs, const float *const  Aarray[], int lda, const int * devIpiv, float *const  Barray[], int ldb, int * info, int batchSize); 
# 5478
cublasStatus_t cublasDgetrsBatched(cublasHandle_t handle, cublasOperation_t trans, int n, int nrhs, const double *const  Aarray[], int lda, const int * devIpiv, double *const  Barray[], int ldb, int * info, int batchSize); 
# 5490
cublasStatus_t cublasCgetrsBatched(cublasHandle_t handle, cublasOperation_t trans, int n, int nrhs, const cuComplex *const  Aarray[], int lda, const int * devIpiv, cuComplex *const  Barray[], int ldb, int * info, int batchSize); 
# 5502
cublasStatus_t cublasZgetrsBatched(cublasHandle_t handle, cublasOperation_t trans, int n, int nrhs, const cuDoubleComplex *const  Aarray[], int lda, const int * devIpiv, cuDoubleComplex *const  Barray[], int ldb, int * info, int batchSize); 
# 5516
cublasStatus_t cublasUint8gemmBias(cublasHandle_t handle, cublasOperation_t transa, cublasOperation_t transb, cublasOperation_t transc, int m, int n, int k, const unsigned char * A, int A_bias, int lda, const unsigned char * B, int B_bias, int ldb, unsigned char * C, int C_bias, int ldc, int C_mult, int C_shift); 
# 5538
}
# 5540
static inline cublasStatus_t cublasMigrateComputeType(cublasHandle_t handle, cudaDataType_t 
# 5541
dataType, cublasComputeType_t *
# 5542
computeType) { 
# 5543
cublasMath_t mathMode = CUBLAS_DEFAULT_MATH; 
# 5544
cublasStatus_t status = CUBLAS_STATUS_SUCCESS; 
# 5546
status = cublasGetMathMode(handle, &mathMode); 
# 5547
if (status != (CUBLAS_STATUS_SUCCESS)) { 
# 5548
return status; 
# 5549
}  
# 5551
bool isPedantic = (mathMode & 15) == (CUBLAS_PEDANTIC_MATH); 
# 5553
switch (dataType) { 
# 5554
case CUDA_R_32F:  
# 5555
case CUDA_C_32F:  
# 5556
(*computeType) = (isPedantic ? CUBLAS_COMPUTE_32F_PEDANTIC : CUBLAS_COMPUTE_32F); 
# 5557
return CUBLAS_STATUS_SUCCESS; 
# 5558
case CUDA_R_64F:  
# 5559
case CUDA_C_64F:  
# 5560
(*computeType) = (isPedantic ? CUBLAS_COMPUTE_64F_PEDANTIC : CUBLAS_COMPUTE_64F); 
# 5561
return CUBLAS_STATUS_SUCCESS; 
# 5562
case CUDA_R_16F:  
# 5563
(*computeType) = (isPedantic ? CUBLAS_COMPUTE_16F_PEDANTIC : CUBLAS_COMPUTE_16F); 
# 5564
return CUBLAS_STATUS_SUCCESS; 
# 5565
case CUDA_R_32I:  
# 5566
(*computeType) = (isPedantic ? CUBLAS_COMPUTE_32I_PEDANTIC : CUBLAS_COMPUTE_32I); 
# 5567
return CUBLAS_STATUS_SUCCESS; 
# 5568
default:  
# 5569
return CUBLAS_STATUS_NOT_SUPPORTED; 
# 5570
}  
# 5571
} 
# 5573
static inline cublasStatus_t cublasGemmEx(cublasHandle_t handle, cublasOperation_t 
# 5574
transa, cublasOperation_t 
# 5575
transb, int 
# 5576
m, int 
# 5577
n, int 
# 5578
k, const void *
# 5579
alpha, const void *
# 5580
A, cudaDataType 
# 5581
Atype, int 
# 5582
lda, const void *
# 5583
B, cudaDataType 
# 5584
Btype, int 
# 5585
ldb, const void *
# 5586
beta, void *
# 5587
C, cudaDataType 
# 5588
Ctype, int 
# 5589
ldc, cudaDataType 
# 5590
computeType, cublasGemmAlgo_t 
# 5591
algo) { 
# 5592
cublasComputeType_t migratedComputeType = CUBLAS_COMPUTE_32F; 
# 5593
cublasStatus_t status = CUBLAS_STATUS_SUCCESS; 
# 5594
status = cublasMigrateComputeType(handle, computeType, &migratedComputeType); 
# 5595
if (status != (CUBLAS_STATUS_SUCCESS)) { 
# 5596
return status; 
# 5597
}  
# 5599
return cublasGemmEx(handle, transa, transb, m, n, k, alpha, A, Atype, lda, B, Btype, ldb, beta, C, Ctype, ldc, migratedComputeType, algo); 
# 5618
} 
# 5620
static inline cublasStatus_t cublasGemmBatchedEx(cublasHandle_t handle, cublasOperation_t 
# 5621
transa, cublasOperation_t 
# 5622
transb, int 
# 5623
m, int 
# 5624
n, int 
# 5625
k, const void *
# 5626
alpha, const void *const 
# 5627
Aarray[], cudaDataType 
# 5628
Atype, int 
# 5629
lda, const void *const 
# 5630
Barray[], cudaDataType 
# 5631
Btype, int 
# 5632
ldb, const void *
# 5633
beta, void *const 
# 5634
Carray[], cudaDataType 
# 5635
Ctype, int 
# 5636
ldc, int 
# 5637
batchCount, cudaDataType 
# 5638
computeType, cublasGemmAlgo_t 
# 5639
algo) { 
# 5640
cublasComputeType_t migratedComputeType; 
# 5641
cublasStatus_t status; 
# 5642
status = cublasMigrateComputeType(handle, computeType, &migratedComputeType); 
# 5643
if (status != (CUBLAS_STATUS_SUCCESS)) { 
# 5644
return status; 
# 5645
}  
# 5647
return cublasGemmBatchedEx(handle, transa, transb, m, n, k, alpha, Aarray, Atype, lda, Barray, Btype, ldb, beta, Carray, Ctype, ldc, batchCount, migratedComputeType, algo); 
# 5667
} 
# 5669
static inline cublasStatus_t cublasGemmStridedBatchedEx(cublasHandle_t handle, cublasOperation_t 
# 5670
transa, cublasOperation_t 
# 5671
transb, int 
# 5672
m, int 
# 5673
n, int 
# 5674
k, const void *
# 5675
alpha, const void *
# 5676
A, cudaDataType 
# 5677
Atype, int 
# 5678
lda, long long 
# 5679
strideA, const void *
# 5680
B, cudaDataType 
# 5681
Btype, int 
# 5682
ldb, long long 
# 5683
strideB, const void *
# 5684
beta, void *
# 5685
C, cudaDataType 
# 5686
Ctype, int 
# 5687
ldc, long long 
# 5688
strideC, int 
# 5689
batchCount, cudaDataType 
# 5690
computeType, cublasGemmAlgo_t 
# 5691
algo) { 
# 5692
cublasComputeType_t migratedComputeType; 
# 5693
cublasStatus_t status; 
# 5694
status = cublasMigrateComputeType(handle, computeType, &migratedComputeType); 
# 5695
if (status != (CUBLAS_STATUS_SUCCESS)) { 
# 5696
return status; 
# 5697
}  
# 5699
return cublasGemmStridedBatchedEx(handle, transa, transb, m, n, k, alpha, A, Atype, lda, strideA, B, Btype, ldb, strideB, beta, C, Ctype, ldc, strideC, batchCount, migratedComputeType, algo); 
# 5722
} 
# 36 "11_MySimpleSGEMM_v25.cu"
float A[2048][2048], B[2048][2048], C[2048][2048]; 
# 37
const float alpha = ((1.0)); 
# 38
const float beta = ((0.0)); 
# 40
void assignData() { 
# 41
std::default_random_engine e; 
# 42
e.seed(time(0)); 
# 43
std::uniform_real_distribution< float>  u((1.5), (4.5)); 
# 45
for (int i = 0; i < 2048; i++) { 
# 46
for (int j = 0; j < 2048; j++) { 
# 53
((A[i])[j]) = u(e); 
# 56
}  
# 58
}  
# 61
for (int i = 0; i < 2048; i++) { 
# 62
for (int j = 0; j < 2048; j++) { 
# 69
((B[i])[j]) = u(e); 
# 72
}  
# 74
}  
# 76
memset(C, 0, (sizeof(float) * (2048)) * (2048)); 
# 77
} 
# 82
void SGEMM_v25(float *A, float *B, float *C) ;
#if 0
# 82
{ 
# 83
__attribute__((unused)) static float A_part[2][16][128], B_part[2][16][128]; 
# 85
float A_trans_reg[(128 * 16) / (16 * 16)]; 
# 87
float A_part_reg[2][8]; 
# 88
float B_part_reg[2][8]; 
# 89
float C_part_reg[8][8]; 
# 91
#pragma unroll
for (
# 91
int i = 0; i < 8; i++) { 
# 93
#pragma unroll
for (
# 93
int j = 0; j < 8; j++) { 
# 94
((C_part_reg[i])[j]) = ((0.0)); 
# 95
}  
# 96
}  
# 98
int tix = __device_builtin_variable_threadIdx.x, tiy = __device_builtin_variable_threadIdx.y; 
# 99
int bix = __device_builtin_variable_blockIdx.x, biy = __device_builtin_variable_blockIdx.y; 
# 100
int bdx = __device_builtin_variable_blockDim.x, bdy = __device_builtin_variable_blockDim.y; 
# 102
int num_loops_shared = (2048 / 16); 
# 103
int num_loops_regs = 16; 
# 106
int A_ldg_y = (biy * 128) + ((((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) / 16); 
# 107
int A_ldg_x = (((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) % 16; 
# 108
int A_sts_trans_x = (((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) / 16; 
# 109
int A_sts_trans_y = (((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) % 16; 
# 111
#pragma unroll
for (
# 111
int reg_cnt = 0; reg_cnt < ((128 * 16) / (16 * 16)); reg_cnt += 4) { 
# 112
((reinterpret_cast< float4 *>(&(A_trans_reg[reg_cnt])))[0]) = ((reinterpret_cast< float4 *>(&(A[((A_ldg_y * 2048) + A_ldg_x) + reg_cnt])))[0]); 
# 113
(((A_part[0])[A_sts_trans_y + reg_cnt])[A_sts_trans_x]) = (A_trans_reg[reg_cnt]); 
# 114
(((A_part[0])[(A_sts_trans_y + reg_cnt) + 1])[A_sts_trans_x]) = (A_trans_reg[reg_cnt + 1]); 
# 115
(((A_part[0])[(A_sts_trans_y + reg_cnt) + 2])[A_sts_trans_x]) = (A_trans_reg[reg_cnt + 2]); 
# 116
(((A_part[0])[(A_sts_trans_y + reg_cnt) + 3])[A_sts_trans_x]) = (A_trans_reg[reg_cnt + 3]); 
# 117
}  
# 118
int B_ldg_y = (((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) / 128; 
# 119
int B_ldg_x = (bix * 128) + ((((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) % 128); 
# 120
int B_sts_y = (((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) / 128; 
# 121
int B_sts_x = (((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) % 128; 
# 123
#pragma unroll
for (
# 123
int reg_cnt = 0; reg_cnt < ((128 * 16) / (16 * 16)); reg_cnt += 4) { 
# 124
((reinterpret_cast< float4 *>(&(((B_part[0])[B_sts_y])[B_sts_x + reg_cnt])))[0]) = ((reinterpret_cast< float4 *>(&(B[((B_ldg_y * 2048) + B_ldg_x) + reg_cnt])))[0]); 
# 125
}  
# 127
__syncthreads(); 
# 129
for (int i = 1; i < num_loops_shared; i++) { 
# 131
A_ldg_x = ((i * 16) + ((((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) % 16)); 
# 133
#pragma unroll
for (
# 133
int reg_cnt = 0; reg_cnt < ((128 * 16) / (16 * 16)); reg_cnt += 4) { 
# 134
((reinterpret_cast< float4 *>(&(A_trans_reg[reg_cnt])))[0]) = ((reinterpret_cast< float4 *>(&(A[((A_ldg_y * 2048) + A_ldg_x) + reg_cnt])))[0]); 
# 135
(((A_part[i % 2])[A_sts_trans_y + reg_cnt])[A_sts_trans_x]) = (A_trans_reg[reg_cnt]); 
# 136
(((A_part[i % 2])[(A_sts_trans_y + reg_cnt) + 1])[A_sts_trans_x]) = (A_trans_reg[reg_cnt + 1]); 
# 137
(((A_part[i % 2])[(A_sts_trans_y + reg_cnt) + 2])[A_sts_trans_x]) = (A_trans_reg[reg_cnt + 2]); 
# 138
(((A_part[i % 2])[(A_sts_trans_y + reg_cnt) + 3])[A_sts_trans_x]) = (A_trans_reg[reg_cnt + 3]); 
# 139
}  
# 140
B_ldg_y = ((i * 16) + ((((tiy * 16) + tix) * ((128 * 16) / (16 * 16))) / 128)); 
# 142
#pragma unroll
for (
# 142
int reg_cnt = 0; reg_cnt < ((128 * 16) / (16 * 16)); reg_cnt += 4) { 
# 143
((reinterpret_cast< float4 *>(&(((B_part[i % 2])[B_sts_y])[B_sts_x + reg_cnt])))[0]) = ((reinterpret_cast< float4 *>(&(B[((B_ldg_y * 2048) + B_ldg_x) + reg_cnt])))[0]); 
# 144
}  
# 149
int A_lds_x = tiy * 8; 
# 151
#pragma unroll
for (
# 151
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a += 4) { 
# 152
((reinterpret_cast< float4 *>(&((A_part_reg[0])[reg_cnt_a])))[0]) = ((reinterpret_cast< float4 *>(&(((A_part[(i - 1) % 2])[0])[A_lds_x + reg_cnt_a])))[0]); 
# 153
}  
# 154
int B_lds_x = tix * 8; 
# 156
#pragma unroll
for (
# 156
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b += 4) { 
# 157
((reinterpret_cast< float4 *>(&((B_part_reg[0])[reg_cnt_b])))[0]) = ((reinterpret_cast< float4 *>(&(((B_part[(i - 1) % 2])[0])[B_lds_x + reg_cnt_b])))[0]); 
# 158
}  
# 161
#pragma unroll
for (
# 161
int k = 1; k < num_loops_regs; k++) { 
# 164
#pragma unroll
for (
# 164
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a += 4) { 
# 165
((reinterpret_cast< float4 *>(&((A_part_reg[k % 2])[reg_cnt_a])))[0]) = ((reinterpret_cast< float4 *>(&(((A_part[(i - 1) % 2])[k])[A_lds_x + reg_cnt_a])))[0]); 
# 166
}  
# 168
#pragma unroll
for (
# 168
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b += 4) { 
# 169
((reinterpret_cast< float4 *>(&((B_part_reg[k % 2])[reg_cnt_b])))[0]) = ((reinterpret_cast< float4 *>(&(((B_part[(i - 1) % 2])[k])[B_lds_x + reg_cnt_b])))[0]); 
# 170
}  
# 174
#pragma unroll
for (
# 174
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a++) { 
# 176
#pragma unroll
for (
# 176
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b++) { 
# 177
((C_part_reg[reg_cnt_a])[reg_cnt_b]) += (((A_part_reg[(k - 1) % 2])[reg_cnt_a]) * ((B_part_reg[(k - 1) % 2])[reg_cnt_b])); 
# 178
}  
# 179
}  
# 180
}  
# 183
#pragma unroll
for (
# 183
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a++) { 
# 185
#pragma unroll
for (
# 185
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b++) { 
# 186
((C_part_reg[reg_cnt_a])[reg_cnt_b]) += (((A_part_reg[(num_loops_regs - 1) % 2])[reg_cnt_a]) * ((B_part_reg[(num_loops_regs - 1) % 2])[reg_cnt_b])); 
# 187
}  
# 188
}  
# 189
__syncthreads(); 
# 190
}  
# 194
int A_lds_x = tiy * 8; 
# 196
#pragma unroll
for (
# 196
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a += 4) { 
# 197
((reinterpret_cast< float4 *>(&((A_part_reg[0])[reg_cnt_a])))[0]) = ((reinterpret_cast< float4 *>(&(((A_part[(num_loops_shared - 1) % 2])[0])[A_lds_x + reg_cnt_a])))[0]); 
# 198
}  
# 199
int B_lds_x = tix * 8; 
# 201
#pragma unroll
for (
# 201
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b += 4) { 
# 202
((reinterpret_cast< float4 *>(&((B_part_reg[0])[reg_cnt_b])))[0]) = ((reinterpret_cast< float4 *>(&(((B_part[(num_loops_shared - 1) % 2])[0])[B_lds_x + reg_cnt_b])))[0]); 
# 203
}  
# 206
#pragma unroll
for (
# 206
int k = 1; k < num_loops_regs; k++) { 
# 209
#pragma unroll
for (
# 209
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a += 4) { 
# 210
((reinterpret_cast< float4 *>(&((A_part_reg[k % 2])[reg_cnt_a])))[0]) = ((reinterpret_cast< float4 *>(&(((A_part[(num_loops_shared - 1) % 2])[k])[A_lds_x + reg_cnt_a])))[0]); 
# 211
}  
# 213
#pragma unroll
for (
# 213
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b += 4) { 
# 214
((reinterpret_cast< float4 *>(&((B_part_reg[k % 2])[reg_cnt_b])))[0]) = ((reinterpret_cast< float4 *>(&(((B_part[(num_loops_shared - 1) % 2])[k])[B_lds_x + reg_cnt_b])))[0]); 
# 215
}  
# 219
#pragma unroll
for (
# 219
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a++) { 
# 221
#pragma unroll
for (
# 221
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b++) { 
# 222
((C_part_reg[reg_cnt_a])[reg_cnt_b]) += (((A_part_reg[(k - 1) % 2])[reg_cnt_a]) * ((B_part_reg[(k - 1) % 2])[reg_cnt_b])); 
# 223
}  
# 224
}  
# 225
}  
# 228
#pragma unroll
for (
# 228
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a++) { 
# 230
#pragma unroll
for (
# 230
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b++) { 
# 231
((C_part_reg[reg_cnt_a])[reg_cnt_b]) += (((A_part_reg[(num_loops_regs - 1) % 2])[reg_cnt_a]) * ((B_part_reg[(num_loops_regs - 1) % 2])[reg_cnt_b])); 
# 232
}  
# 233
}  
# 237
#pragma unroll
for (
# 237
int reg_cnt_a = 0; reg_cnt_a < 8; reg_cnt_a++) { 
# 238
int C_glo_y = ((biy * 128) + (tiy * 8)) + reg_cnt_a; 
# 239
int C_glo_x = (bix * 128) + (tix * 8); 
# 241
#pragma unroll
for (
# 241
int reg_cnt_b = 0; reg_cnt_b < 8; reg_cnt_b += 4) { 
# 242
((reinterpret_cast< float4 *>(&(C[((C_glo_y * 2048) + C_glo_x) + reg_cnt_b])))[0]) = ((reinterpret_cast< float4 *>(&((C_part_reg[reg_cnt_a])[reg_cnt_b])))[0]); 
# 243
}  
# 244
}  
# 245
} 
#endif
# 247 "11_MySimpleSGEMM_v25.cu"
void callSGEMM(float *d_A, float *d_B, float *d_C) { 
# 248
int kernelIdx = 25; 
# 249
size_t C_Bytes = ((sizeof(float) * (2048)) * (2048)); 
# 250
dim3 blockSize(1); 
# 251
dim3 gridSize(1); 
# 252
switch (kernelIdx) { 
# 253
case 25:  
# 254
blockSize = {16, 16}; 
# 255
gridSize = {2048 / 128, 2048 / 128}; 
# 256
printf("Kernel Num: %d\n", kernelIdx); 
# 257
printf("gridSize:  (%d, %d, %d)\n", gridSize.x, gridSize.y, gridSize.z); 
# 258
printf("blockSize: (%d, %d, %d)\n", blockSize.x, blockSize.y, blockSize.z); 
# 259
(__cudaPushCallConfiguration(gridSize, blockSize)) ? (void)0 : SGEMM_v25(d_A, d_B, d_C); 
# 260
break; 
# 261
default:  
# 262
break; 
# 263
}  
# 264
cudaDeviceSynchronize(); 
# 265
printf("SGEMM after: %s\n", cudaGetErrorString(cudaGetLastError())); 
# 266
float *h_C = (float *)malloc(C_Bytes); 
# 267
{ const cudaError_t error = cudaMemcpy(h_C, d_C, C_Bytes, cudaMemcpyDeviceToHost); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 267); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 278 "11_MySimpleSGEMM_v25.cu"
cublasHandle_t handle; 
# 279
cublasCreate_v2(&handle); 
# 280
float *d_C_cublas, *h_C_cublas; 
# 281
{ const cudaError_t error = cudaMalloc(&d_C_cublas, C_Bytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 281); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 282
h_C_cublas = ((float *)malloc(C_Bytes)); 
# 284
cublasStatus_t stat = cublasSgemm_v2(handle, CUBLAS_OP_N, CUBLAS_OP_N, 2048, 2048, 2048, &alpha, d_B, 2048, d_A, 2048, &beta, d_C_cublas, 2048); 
# 285
cudaDeviceSynchronize(); 
# 286
{ const cudaError_t error = cudaMemcpy(h_C_cublas, d_C_cublas, C_Bytes, cudaMemcpyDeviceToHost); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 286); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 298 "11_MySimpleSGEMM_v25.cu"
int err_cnt = 0; 
# 299
bool wrong = false; 
# 300
for (int i = 0; i < 2048; i++) { 
# 301
for (int j = 0; j < 2048; j++) { 
# 302
float err = (h_C[(i * 2048) + j]) - (h_C_cublas[(i * 2048) + j]); 
# 303
if ((fabs(err)) >= (0.1)) { 
# 304
err_cnt++; 
# 305
wrong = true; 
# 310
}  
# 311
}  
# 312
}  
# 313
if (!wrong) { 
# 314
(((std::cout << ("gemm success!"))) << (std::endl)); 
# 315
} else 
# 316
{ 
# 317
(((((std::cout << ("gemm error! nums: "))) << err_cnt)) << (std::endl)); 
# 318
}  
# 320
cublasDestroy_v2(handle); 
# 321
{ const cudaError_t error = cudaFree(d_C_cublas); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 321); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 322
free(h_C_cublas); 
# 323
free(h_C); 
# 324
} 
# 327
int main() { 
# 328
assignData(); 
# 330
float *d_A, *d_B, *d_C; 
# 331
size_t A_Bytes = ((sizeof(float) * (2048)) * (2048)); 
# 332
size_t B_Bytes = ((sizeof(float) * (2048)) * (2048)); 
# 333
size_t C_Bytes = ((sizeof(float) * (2048)) * (2048)); 
# 334
{ const cudaError_t error = cudaMalloc(&d_A, A_Bytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 334); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 335
{ const cudaError_t error = cudaMalloc(&d_B, B_Bytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 335); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 336
{ const cudaError_t error = cudaMalloc(&d_C, C_Bytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 336); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 337
{ const cudaError_t error = cudaMemcpy(d_A, A, A_Bytes, cudaMemcpyHostToDevice); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 337); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 338
{ const cudaError_t error = cudaMemcpy(d_B, B, B_Bytes, cudaMemcpyHostToDevice); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 338); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 339
{ const cudaError_t error = cudaMemset(d_C, 0, C_Bytes); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 339); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 341
callSGEMM(d_A, d_B, d_C); 
# 343
{ const cudaError_t error = cudaFree(d_A); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 343); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 344
{ const cudaError_t error = cudaFree(d_B); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 344); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 345
{ const cudaError_t error = cudaFree(d_C); if (error != (cudaSuccess)) { printf("Error: %s: %d, ", "11_MySimpleSGEMM_v25.cu", 345); printf("code: %d, reason: %s\n", error, cudaGetErrorString(error)); exit(1); }  } ; 
# 346
return 0; 
# 347
} 

# 1 "11_MySimpleSGEMM_v25.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__87ba44ab_23_11_MySimpleSGEMM_v25_cu_a311767b
#ifdef _NV_ANON_NAMESPACE
#endif
# 1 "11_MySimpleSGEMM_v25.cudafe1.stub.c"
#include "11_MySimpleSGEMM_v25.cudafe1.stub.c"
# 1 "11_MySimpleSGEMM_v25.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
