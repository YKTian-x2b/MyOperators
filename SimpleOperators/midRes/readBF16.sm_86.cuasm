// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM86 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM86)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          121 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0xec0 		// program header offset, maybe updated by assembler
	.__elf_shoff            0xb80 		// section header offset, maybe updated by assembler
	.__elf_flags            0x560556 		// Flags, SM_86(0x56), COMPUTE_86(0x56) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        56 		// program entry size
	.__elf_phnum            3 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            13 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0x138 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .shstrtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .shstrtab[7] = b'.text._Z8readBF16Pf\x00' 
    /*0040*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0048*/ .byte 0x38, 0x72, 0x65, 0x61, 0x64, 0x42, 0x46, 0x31
    /*0050*/ .byte 0x36, 0x50, 0x66, 0x00

    // .shstrtab[8] = b'.nv.info._Z8readBF16Pf\x00' 
    /*0054*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*005c*/ .byte 0x2e, 0x5f, 0x5a, 0x38, 0x72, 0x65, 0x61, 0x64
    /*0064*/ .byte 0x42, 0x46, 0x31, 0x36, 0x50, 0x66, 0x00

    // .shstrtab[9] = b'.nv.shared._Z8readBF16Pf\x00' 
    /*006b*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0073*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x38, 0x72, 0x65
    /*007b*/ .byte 0x61, 0x64, 0x42, 0x46, 0x31, 0x36, 0x50, 0x66
    /*0083*/ .byte 0x00

    // .shstrtab[10] = b'.nv.constant0._Z8readBF16Pf\x00' 
    /*0084*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*008c*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*0094*/ .byte 0x38, 0x72, 0x65, 0x61, 0x64, 0x42, 0x46, 0x31
    /*009c*/ .byte 0x36, 0x50, 0x66, 0x00

    // .shstrtab[11] = b'.text._Z6vecAddPfS_S_\x00' 
    /*00a0*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*00a8*/ .byte 0x36, 0x76, 0x65, 0x63, 0x41, 0x64, 0x64, 0x50
    /*00b0*/ .byte 0x66, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[12] = b'.nv.info._Z6vecAddPfS_S_\x00' 
    /*00b6*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*00be*/ .byte 0x2e, 0x5f, 0x5a, 0x36, 0x76, 0x65, 0x63, 0x41
    /*00c6*/ .byte 0x64, 0x64, 0x50, 0x66, 0x53, 0x5f, 0x53, 0x5f
    /*00ce*/ .byte 0x00

    // .shstrtab[13] = b'.nv.shared._Z6vecAddPfS_S_\x00' 
    /*00cf*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00d7*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x36, 0x76, 0x65
    /*00df*/ .byte 0x63, 0x41, 0x64, 0x64, 0x50, 0x66, 0x53, 0x5f
    /*00e7*/ .byte 0x53, 0x5f, 0x00

    // .shstrtab[14] = b'.nv.constant0._Z6vecAddPfS_S_\x00' 
    /*00ea*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*00f2*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00fa*/ .byte 0x36, 0x76, 0x65, 0x63, 0x41, 0x64, 0x64, 0x50
    /*0102*/ .byte 0x66, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .shstrtab[15] = b'.debug_frame\x00' 
    /*0108*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*0110*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[16] = b'.rel.debug_frame\x00' 
    /*0115*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*011d*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*0125*/ .byte 0x00

    // .shstrtab[17] = b'.rela.debug_frame\x00' 
    /*0126*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*012e*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*0136*/ .byte 0x65, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x178 	// maybe updated by assembler
	.__section_size         0x15d 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.uft.entry\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x75, 0x66, 0x74, 0x2e
    /*0031*/ .byte 0x65, 0x6e, 0x74, 0x72, 0x79, 0x00

    // .strtab[6] = b'.nv.info\x00' 
    /*0037*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*003f*/ .byte 0x00

    // .strtab[7] = b'_Z8readBF16Pf\x00' 
    /*0040*/ .byte 0x5f, 0x5a, 0x38, 0x72, 0x65, 0x61, 0x64, 0x42
    /*0048*/ .byte 0x46, 0x31, 0x36, 0x50, 0x66, 0x00

    // .strtab[8] = b'.text._Z8readBF16Pf\x00' 
    /*004e*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*0056*/ .byte 0x38, 0x72, 0x65, 0x61, 0x64, 0x42, 0x46, 0x31
    /*005e*/ .byte 0x36, 0x50, 0x66, 0x00

    // .strtab[9] = b'.nv.info._Z8readBF16Pf\x00' 
    /*0062*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*006a*/ .byte 0x2e, 0x5f, 0x5a, 0x38, 0x72, 0x65, 0x61, 0x64
    /*0072*/ .byte 0x42, 0x46, 0x31, 0x36, 0x50, 0x66, 0x00

    // .strtab[10] = b'.nv.shared._Z8readBF16Pf\x00' 
    /*0079*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0081*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x38, 0x72, 0x65
    /*0089*/ .byte 0x61, 0x64, 0x42, 0x46, 0x31, 0x36, 0x50, 0x66
    /*0091*/ .byte 0x00

    // .strtab[11] = b'.nv.constant0._Z8readBF16Pf\x00' 
    /*0092*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*009a*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*00a2*/ .byte 0x38, 0x72, 0x65, 0x61, 0x64, 0x42, 0x46, 0x31
    /*00aa*/ .byte 0x36, 0x50, 0x66, 0x00

    // .strtab[12] = b'_param\x00' 
    /*00ae*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[13] = b'_Z6vecAddPfS_S_\x00' 
    /*00b5*/ .byte 0x5f, 0x5a, 0x36, 0x76, 0x65, 0x63, 0x41, 0x64
    /*00bd*/ .byte 0x64, 0x50, 0x66, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[14] = b'.text._Z6vecAddPfS_S_\x00' 
    /*00c5*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*00cd*/ .byte 0x36, 0x76, 0x65, 0x63, 0x41, 0x64, 0x64, 0x50
    /*00d5*/ .byte 0x66, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[15] = b'.nv.info._Z6vecAddPfS_S_\x00' 
    /*00db*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*00e3*/ .byte 0x2e, 0x5f, 0x5a, 0x36, 0x76, 0x65, 0x63, 0x41
    /*00eb*/ .byte 0x64, 0x64, 0x50, 0x66, 0x53, 0x5f, 0x53, 0x5f
    /*00f3*/ .byte 0x00

    // .strtab[16] = b'.nv.shared._Z6vecAddPfS_S_\x00' 
    /*00f4*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*00fc*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x36, 0x76, 0x65
    /*0104*/ .byte 0x63, 0x41, 0x64, 0x64, 0x50, 0x66, 0x53, 0x5f
    /*010c*/ .byte 0x53, 0x5f, 0x00

    // .strtab[17] = b'.nv.constant0._Z6vecAddPfS_S_\x00' 
    /*010f*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0117*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*011f*/ .byte 0x36, 0x76, 0x65, 0x63, 0x41, 0x64, 0x64, 0x50
    /*0127*/ .byte 0x66, 0x53, 0x5f, 0x53, 0x5f, 0x00

    // .strtab[18] = b'.debug_frame\x00' 
    /*012d*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*0135*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[19] = b'.rel.debug_frame\x00' 
    /*013a*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*0142*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*014a*/ .byte 0x00

    // .strtab[20] = b'.rela.debug_frame\x00' 
    /*014b*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*0153*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*015b*/ .byte 0x65, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2d8 	// maybe updated by assembler
	.__section_size         0xc0 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x6
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z8readBF16Pf": Container({'st_name': 78, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 11, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x4e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0b, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z8readBF16Pf": Container({'st_name': 146, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0x92, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".text._Z6vecAddPfS_S_": Container({'st_name': 197, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 12, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0xc5, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0c, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] ".nv.constant0._Z6vecAddPfS_S_": Container({'st_name': 271, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 0})
    /*0060*/ .byte 0x0f, 0x01, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] ".debug_frame": Container({'st_name': 301, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0078*/ .byte 0x2d, 0x01, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0080*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[6] "_Z8readBF16Pf": Container({'st_name': 64, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 11, 'st_value': 0, 'st_size': 384})
    /*0090*/ .byte 0x40, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0b, 0x00
    /*0098*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00a0*/ .byte 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[7] "_Z6vecAddPfS_S_": Container({'st_name': 181, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 12, 'st_value': 0, 'st_size': 384})
    /*00a8*/ .byte 0xb5, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0c, 0x00
    /*00b0*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*00b8*/ .byte 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0x108 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x398 	// maybe updated by assembler
	.__section_size         0xe0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00
          /*0044*/ 	.dword	_Z8readBF16Pf
          /*004c*/ 	.byte	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x1c, 0x00
          /*005c*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0xfc, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00
          /*006c*/ 	.byte	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*007c*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff
          /*008c*/ 	.byte	0x0f, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80
          /*009c*/ 	.byte	0x28, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*00ac*/ 	.byte	0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*00b4*/ 	.dword	_Z6vecAddPfS_S_
          /*00bc*/ 	.byte	0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x2c, 0x00
          /*00cc*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0xfc, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00
          /*00dc*/ 	.byte	0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x37 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x478 	// maybe updated by assembler
	.__section_size         0x60 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_1 - .L_0)
  	.align		4
  .L_0:
          /*0004*/ 	.word	index@(_Z6vecAddPfS_S_)
          /*0008*/ 	.word	0x0000000c
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_1:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_3 - .L_2)
  	.align		4
  .L_2:
          /*0010*/ 	.word	index@(_Z6vecAddPfS_S_)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_3:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_5 - .L_4)
  	.align		4
  .L_4:
          /*001c*/ 	.word	index@(_Z6vecAddPfS_S_)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_5:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_7 - .L_6)
  	.align		4
  .L_6:
          /*0028*/ 	.word	index@(_Z6vecAddPfS_S_)
          /*002c*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
  .L_7:
          /*0030*/ 	.byte	0x04, 0x2f
          /*0032*/ 	.short	(.L_9 - .L_8)
  	.align		4
  .L_8:
          /*0034*/ 	.word	index@(_Z8readBF16Pf)
          /*0038*/ 	.word	0x00000008
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_9:
          /*003c*/ 	.byte	0x04, 0x23
          /*003e*/ 	.short	(.L_11 - .L_10)
  	.align		4
  .L_10:
          /*0040*/ 	.word	index@(_Z8readBF16Pf)
          /*0044*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_11:
          /*0048*/ 	.byte	0x04, 0x12
          /*004a*/ 	.short	(.L_13 - .L_12)
  	.align		4
  .L_12:
          /*004c*/ 	.word	index@(_Z8readBF16Pf)
          /*0050*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_13:
          /*0054*/ 	.byte	0x04, 0x11
          /*0056*/ 	.short	(.L_15 - .L_14)
  	.align		4
  .L_14:
          /*0058*/ 	.word	index@(_Z8readBF16Pf)
          /*005c*/ 	.word	0x00000000
  .L_15:
  
  
// --------------------- .nv.info._Z8readBF16Pf           --------------------------
	.section	.nv.info._Z8readBF16Pf,"",@"SHT_CUDA_INFO"
	.__section_name         0x54 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x4d8 	// maybe updated by assembler
	.__section_size         0x38 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xb
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_17 - .L_16)
  .L_16:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_17:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_19 - .L_18)
  	.align		4
  .L_18:
          /*0010*/ 	.word	index@(.nv.constant0._Z8readBF16Pf)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0008
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_19:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0008
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_21 - .L_20)
  .L_20:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0000
          /*0026*/ 	.short	0x0000
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_21:
          /*002c*/ 	.byte	0x03, 0x1b
          /*002e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0030*/ 	.byte	0x04, 0x1c
          /*0032*/ 	.short	(.L_23 - .L_22)
  
  
  	//   ....[0]....
  .L_22:
          /*0034*/ 	.word	0x00000070
  .L_23:
  
  
// --------------------- .nv.info._Z6vecAddPfS_S_         --------------------------
	.section	.nv.info._Z6vecAddPfS_S_,"",@"SHT_CUDA_INFO"
	.__section_name         0xb6 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x510 	// maybe updated by assembler
	.__section_size         0x58 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xc
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_25 - .L_24)
  .L_24:
          /*0004*/ 	.word	0x00000079
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_25:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_27 - .L_26)
  	.align		4
  .L_26:
          /*0010*/ 	.word	index@(.nv.constant0._Z6vecAddPfS_S_)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_27:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x0018
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_29 - .L_28)
  .L_28:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0002
          /*0026*/ 	.short	0x0010
          /*0028*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_29:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_31 - .L_30)
  .L_30:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0001
          /*0036*/ 	.short	0x0008
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_31:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_33 - .L_32)
  .L_32:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0000
          /*0046*/ 	.short	0x0000
          /*0048*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_33:
          /*004c*/ 	.byte	0x03, 0x1b
          /*004e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0050*/ 	.byte	0x04, 0x1c
          /*0052*/ 	.short	(.L_35 - .L_34)
  
  
  	//   ....[0]....
  .L_34:
          /*0054*/ 	.word	0x000000b0
  .L_35:
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0x115 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x568 	// maybe updated by assembler
	.__section_size         0x20 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z6vecAddPfS_S_, Container({'r_offset': 180, 'r_info': 30064771074, 'r_info_sym': 7, 'r_info_type': 2})
    // Relocation[1] : _Z8readBF16Pf, Container({'r_offset': 68, 'r_info': 25769803778, 'r_info_sym': 6, 'r_info_type': 2})

// --------------------- .nv.constant0._Z8readBF16Pf      --------------------------
	.section	.nv.constant0._Z8readBF16Pf,"a",@progbits
	.__section_name         0x84 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x588 	// maybe updated by assembler
	.__section_size         0x168 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xb
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z8readBF16Pf:
  	.zero		360
  
  
// --------------------- .nv.constant0._Z6vecAddPfS_S_    --------------------------
	.section	.nv.constant0._Z6vecAddPfS_S_,"a",@progbits
	.__section_name         0xea 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x6f0 	// maybe updated by assembler
	.__section_size         0x178 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xc
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z6vecAddPfS_S_:
  	.zero		376
  
  
// --------------------- .text._Z8readBF16Pf              --------------------------
	.section	.text._Z8readBF16Pf,"ax",@progbits
	.__section_name         0x40 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x880 	// maybe updated by assembler
	.__section_size         0x180 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0x8000006
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=8"
  	.align	128
          .global         _Z8readBF16Pf
          .type           _Z8readBF16Pf,@function
          .size           _Z8readBF16Pf,(.L_x_2 - _Z8readBF16Pf)
          .other          _Z8readBF16Pf,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z8readBF16Pf:
  .text._Z8readBF16Pf:
      [B------:R-:W-:Y:S02]         /*0000*/                   MOV R1, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R2, SR_TID.X ;
      [B------:R-:W-:-:S01]         /*0020*/                   MOV R3, 0x4 ;
      [B------:R-:W-:-:S01]         /*0030*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B------:R-:W-:Y:S03]         /*0040*/                   MOV R5, 0x3f800000 ;
      [B0-----:R-:W-:Y:S05]         /*0050*/                   IMAD.WIDE R2, R2, R3, c[0x0][0x160] ;
      [B------:R-:W-:-:S01]         /*0060*/                   STG.E desc[UR4][R2.64], R5 ;
      [B------:R-:W-:-:S05]         /*0070*/                   EXIT ;
  .L_x_0:
      [B------:R-:W-:Y:S00]         /*0080*/                   BRA `(.L_x_0);
      [B------:R-:W-:Y:S00]         /*0090*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00f0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0100*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0110*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0120*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0130*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0140*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0150*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0160*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0170*/                   NOP;
  .L_x_2:
  
  

// --------------------- .text._Z6vecAddPfS_S_            --------------------------
	.section	.text._Z6vecAddPfS_S_,"ax",@progbits
	.__section_name         0xa0 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0xa00 	// maybe updated by assembler
	.__section_size         0x180 	// maybe updated by assembler
	.__section_link         5
	.__section_info         0xc000007
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=12"
  	.align	128
          .global         _Z6vecAddPfS_S_
          .type           _Z6vecAddPfS_S_,@function
          .size           _Z6vecAddPfS_S_,(.L_x_3 - _Z6vecAddPfS_S_)
          .other          _Z6vecAddPfS_S_,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z6vecAddPfS_S_:
  .text._Z6vecAddPfS_S_:
      [B------:R-:W-:Y:S02]         /*0000*/                   MOV R1, c[0x0][0x28] ;
      [B------:R-:W0:-:S01]         /*0010*/                   S2R R6, SR_TID.X ;
      [B------:R-:W-:-:S01]         /*0020*/                   MOV R7, 0x4 ;
      [B------:R-:W-:Y:S04]         /*0030*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B0-----:R-:W-:Y:S04]         /*0040*/                   IMAD.WIDE R2, R6, R7, c[0x0][0x160] ;
      [B------:R-:W-:-:S02]         /*0050*/                   IMAD.WIDE R4, R6.reuse, R7.reuse, c[0x0][0x168] ;
      [B------:R-:W2:-:S04]         /*0060*/                   LDG.E R2, desc[UR4][R2.64] ;
      [B------:R-:W2:-:S01]         /*0070*/                   LDG.E R5, desc[UR4][R4.64] ;
      [B------:R-:W-:-:S01]         /*0080*/                   IMAD.WIDE R6, R6, R7, c[0x0][0x170] ;
      [B--2---:R-:W-:Y:S05]         /*0090*/                   FADD R9, R2, R5 ;
      [B------:R-:W-:-:S01]         /*00a0*/                   STG.E desc[UR4][R6.64], R9 ;
      [B------:R-:W-:-:S05]         /*00b0*/                   EXIT ;
  .L_x_1:
      [B------:R-:W-:Y:S00]         /*00c0*/                   BRA `(.L_x_1);
      [B------:R-:W-:Y:S00]         /*00d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*00f0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0100*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0110*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0120*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0130*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0140*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0150*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0160*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0170*/                   NOP;
  .L_x_3:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------


// Program segment PT_PHDR, 5 
  .__segment  "PT_PHDR", 5 
  .__segment_offset  0xec0   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0x588   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0x5f8   		// file size, maybe updated by assembler 
  .__segment_memsz   0x5f8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    ".nv.constant0._Z8readBF16Pf"  		// first section in this segment 
  .__segment_endsection      ".text._Z6vecAddPfS_S_"  		// last  section in this segment 

// Program segment PT_LOAD, 5 
  .__segment  "PT_LOAD", 5 
  .__segment_offset  0xec0   		// maybe updated by assembler 
  .__segment_vaddr   0x0   		// Seems always 0? 
  .__segment_paddr   0x0   		// ??? 
  .__segment_filesz  0xa8   		// file size, maybe updated by assembler 
  .__segment_memsz   0xa8   		// file size + nobits sections, maybe updated by assembler 
  .__segment_align     8   		//  
  .__segment_startsection    "@PROGRAM_HEADER"  		// first section in this segment 
  .__segment_endsection      "@PROGRAM_HEADER"  		// last  section in this segment 


  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


